
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  0000825e  00008312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000825e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001724  00800228  00800228  0000833a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  0000833a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000933a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000936c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000ba8  00000000  00000000  000093b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fd50  00000000  00000000  00009f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002711  00000000  00000000  00019ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000092a4  00000000  00000000  0001c3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001cbc  00000000  00000000  00025660  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000036a2  00000000  00000000  0002731c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009f2b  00000000  00000000  0002a9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f60  00000000  00000000  000348e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__ctors_end>
       4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
       8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
       c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      10:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      14:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      18:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      1c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      20:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      24:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      28:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      2c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      30:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      34:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      38:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      3c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      40:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      44:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      48:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      4c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      50:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      54:	0c 94 36 11 	jmp	0x226c	; 0x226c <__vector_21>
      58:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      5c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      60:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      64:	0c 94 29 3c 	jmp	0x7852	; 0x7852 <__vector_25>
      68:	0c 94 6f 3c 	jmp	0x78de	; 0x78de <__vector_26>
      6c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      70:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      74:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      78:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      7c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      80:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      84:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      88:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      8c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      90:	0c 94 14 3a 	jmp	0x7428	; 0x7428 <__vector_36>
      94:	0c 94 69 3a 	jmp	0x74d2	; 0x74d2 <__vector_37>
      98:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      9c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      a0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      a4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      a8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      ac:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      b0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      b4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      b8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      bc:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      c0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      c4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      c8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      cc:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      d0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      d4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      d8:	0c 94 2f 3d 	jmp	0x7a5e	; 0x7a5e <__vector_54>
      dc:	0c 94 87 3d 	jmp	0x7b0e	; 0x7b0e <__vector_55>
      e0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__bad_interrupt>
      e4:	f7 23       	and	r31, r23
      e6:	02 24       	eor	r0, r2
      e8:	0e 24       	eor	r0, r14
      ea:	2a 24       	eor	r2, r10
      ec:	47 24       	eor	r4, r7
      ee:	68 24       	eor	r6, r8
      f0:	73 24       	eor	r7, r3
      f2:	7e 24       	eor	r7, r14
      f4:	93 24       	eor	r9, r3
      f6:	a9 24       	eor	r10, r9
      f8:	b1 24       	eor	r11, r1
      fa:	bf 24       	eor	r11, r15
      fc:	93 24       	eor	r9, r3
      fe:	ec 24       	eor	r14, r12
     100:	fc 24       	eor	r15, r12
     102:	20 25       	eor	r18, r0
     104:	72 25       	eor	r23, r2
     106:	8b 25       	eor	r24, r11
     108:	a0 25       	eor	r26, r0
     10a:	b9 25       	eor	r27, r9
     10c:	c1 25       	eor	r28, r1
     10e:	e6 25       	eor	r30, r6
     110:	e6 25       	eor	r30, r6
     112:	ff 25       	eor	r31, r15
     114:	0c 26       	eor	r0, r28
     116:	fb 25       	eor	r31, r11
     118:	67 26       	eor	r6, r23
     11a:	6f 26       	eor	r6, r31
     11c:	ba 26       	eor	r11, r26
     11e:	1c 27       	eor	r17, r28
     120:	46 27       	eor	r20, r22
     122:	72 27       	eor	r23, r18
     124:	a1 27       	eor	r26, r17
     126:	a9 27       	eor	r26, r25
     128:	af 27       	eor	r26, r31
     12a:	67 26       	eor	r6, r23
     12c:	b7 27       	eor	r27, r23
     12e:	cb 27       	eor	r28, r27
     130:	af 27       	eor	r26, r31
     132:	09 28       	or	r0, r9
     134:	16 28       	or	r1, r6
     136:	22 28       	or	r2, r2
     138:	37 28       	or	r3, r7
     13a:	50 28       	or	r5, r0
     13c:	73 28       	or	r7, r3
     13e:	7e 28       	or	r7, r14
     140:	84 28       	or	r8, r4
     142:	89 28       	or	r8, r9
     144:	9c 28       	or	r9, r12
     146:	bd 28       	or	r11, r13
     148:	d0 28       	or	r13, r0
     14a:	89 28       	or	r8, r9
     14c:	ea 3d       	cpi	r30, 0xDA	; 218
     14e:	ff 3d       	cpi	r31, 0xDF	; 223
     150:	ed 3d       	cpi	r30, 0xDD	; 221
     152:	de 3d       	cpi	r29, 0xDE	; 222
     154:	f0 3d       	cpi	r31, 0xD0	; 208
     156:	f3 3d       	cpi	r31, 0xD3	; 211
     158:	e1 3d       	cpi	r30, 0xD1	; 209
     15a:	f6 3d       	cpi	r31, 0xD6	; 214
     15c:	e4 3d       	cpi	r30, 0xD4	; 212
     15e:	f9 3d       	cpi	r31, 0xD9	; 217
     160:	e7 3d       	cpi	r30, 0xD7	; 215
     162:	fc 3d       	cpi	r31, 0xDC	; 220

00000164 <__trampolines_end>:
     164:	1b 1b       	sub	r17, r27
     166:	1b 1b       	sub	r17, r27
     168:	1b 1b       	sub	r17, r27
     16a:	1b 00       	.word	0x001b	; ????

0000016c <cgPattern_RegOnOff>:
     16c:	1b 1b 18 18 18 18 18 00                             ........

00000174 <cgPattern_RegOffOn>:
     174:	1b 1b 03 03 03 03 03 00                             ........

0000017c <cgPattern_RegOffOff>:
     17c:	1b 1b 00 00 00 00 00 00                             ........

00000184 <cgPattern_RegOn>:
     184:	18 18 18 18 18 18 18 00                             ........

0000018c <cgPattern_RegOff>:
     18c:	18 18 00 00 00 00 00 00                             ........

00000194 <cgPattern_Down>:
     194:	04 04 04 04 15 0e 04 00                             ........

0000019c <cgPattern_Up>:
     19c:	04 0e 15 04 04 04 04 00                             ........

000001a4 <stringLog>:
     1a4:	4c 6f 67 3a 20 00                                   Log: .

000001aa <ErrorText>:
     1aa:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     1ba:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     1ca:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     1da:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1ea:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1fa:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     20a:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     21a:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     22a:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     23a:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     24a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     25a:	00 00 00 00 01 09 45 45 3a 52 65 67 4f 75 74 00     ......EE:RegOut.
     26a:	00 00 00 00 00 00 01 0a 45 45 3a 4d 69 64 69 52     ........EE:MidiR
     27a:	65 67 43 43 00 00 00 00 02 00 4d 6f 64 3a 46 61     egCC......Mod:Fa
     28a:	69 6c 00 00 00 00 00 00 00 00 02 01 4d 6f 64 3a     il..........Mod:
     29a:	55 6e 6b 6e 6f 77 49 6e 70 00 00 00 03 00 4f 56     UnknowInp.....OV
     2aa:	46 4c 3a 4d 69 64 69 49 6e 00 00 00 00 00 03 01     FL:MidiIn.......
     2ba:	4f 56 46 4c 3a 4d 69 64 69 4f 75 74 00 00 00 00     OVFL:MidiOut....
     2ca:	04 00 4f 56 46 4c 3a 50 69 70 65 4d 73 67 00 00     ..OVFL:PipeMsg..
     2da:	00 00 05 00 50 77 72 3a 4f 75 74 70 75 74 4f 6e     ....Pwr:OutputOn
     2ea:	00 00 00 00                                         ....

000002ee <panicString>:
     2ee:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

000002f7 <releaseKeyString>:
     2f7:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     307:	6e 00                                               n.

00000309 <prog_name>:
     309:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000318 <usbHWCC>:
     318:	52 65 67 69 73 74 65 72 20 4f 6e 2f 4f 66 66 20     Register On/Off 
     328:	43 43 20 66 6f 72 20 4d 49 44 49 20 49 6e 2f 4f     CC for MIDI In/O
     338:	75 74 3a 0d 0a 00                                   ut:...

0000033e <usbHWRegLayout>:
     33e:	52 65 67 69 73 74 65 72 20 4c 61 79 6f 75 74 3a     Register Layout:
     34e:	0d 0a 00                                            ...

00000351 <usbHWnone>:
     351:	6e 6f 6e 65 00                                      none.

00000356 <usbHWmidiThru>:
     356:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

00000362 <usbHWmidiOut>:
     362:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

0000036c <usbHWmidiIn>:
     36c:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

00000375 <usbHWmidichanSW>:
     375:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     385:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     395:	20 00                                                .

00000397 <usbHWBits>:
     397:	2c 20 42 69 74 73 3a 00                             , Bits:.

0000039f <usbHWmodule>:
     39f:	4d 6f 64 75 6c 65 3a 00                             Module:.

000003a7 <usbHWempty>:
     3a7:	65 6d 70 74 79 00                                   empty.

000003ad <usbHWRegister>:
     3ad:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

000003b9 <usbHWRange>:
     3b9:	52 61 6e 67 65 20 00                                Range .

000003c0 <usbHWManual>:
     3c0:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

000003c9 <usbHWmodulCheck>:
     3c9:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     3d9:	20 00                                                .

000003db <usbHWmodulInst>:
     3db:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     3eb:	3a 20 00                                            : .

000003ee <usbHWtitel>:
     3ee:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     3fe:	72 61 74 69 6f 6e 0d 0a 00                          ration...

00000407 <HelloMsg>:
     407:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     417:	65 72 66 61 63 65 0d 0a 00                          erface...

00000420 <usbLog>:
     420:	4c 6f 67 0d 0a 00                                   Log...

00000426 <usbEmpty>:
     426:	65 6d 70 74 79 0d 0a 00                             empty...

0000042e <msg_programming2>:
     42e:	6f 6b 20 20 20 20 20 00                             ok     .

00000436 <msg_programming1>:
     436:	73 61 76 65 2e 2e 2e 00                             save....

0000043e <logNone>:
     43e:	3c 6e 6f 6e 65 3e 00                                <none>.

00000445 <stringNotAssigen>:
     445:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000450 <menuMessageE>:
     450:	45 3a 00                                            E:.

00000453 <menuMessageOK>:
     453:	6f 6b 20 00                                         ok .

00000457 <menuMessageAbort>:
     457:	61 62 6f 72 74 00                                   abort.

0000045d <menuMessageMIDIpanic>:
     45d:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

0000046c <messageRegisterMan>:
     46c:	2b 00                                               +.

0000046e <messageLoaded>:
     46e:	20 52 65 67 00                                       Reg.

00000473 <messageSaved>:
     473:	20 52 65 67 20 7e 20 00                              Reg ~ .

0000047b <MenuMIDIOutText>:
     47b:	4f 75 74 3a 00                                      Out:.

00000480 <MenuMIDIInText>:
     480:	49 6e 3a 00                                         In:.

00000484 <initMenuText>:
     484:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

0000048e <nibbleInfo>:
	...
     496:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     4a6:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     4b6:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     4c6:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     4d6:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     4e6:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     4f6:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     506:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000515 <menu_selFunc>:
     515:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 71 08     ..<none>......q.
     525:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     535:	7b 08 67 08 00 00 00 00 01 10 53 74 69 6d 6d 65     {.g.......Stimme
     545:	6e 00 00 00 43 0e 5d 08 00 00 00 00 01 10 4b 6f     n...C.].......Ko
     555:	70 70 65 6c 32 3c 33 00 00 00 3f 08 1a 22 00 00     ppel2<3...?.."..
     565:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 35 08     ..Koppel1<3...5.
     575:	1d 22 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ."....KoppelP<3.
     585:	00 00 2b 08 20 22 00 00 01 10 4b 6f 70 70 65 6c     ..+. "....Koppel
     595:	31 3c 32 00 00 00 21 08 23 22 00 00 01 10 4b 6f     1<2...!.#"....Ko
     5a5:	70 70 65 6c 50 3c 32 00 00 00 17 08 26 22 00 00     ppelP<2.....&"..
     5b5:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 0d 08     ..KoppelP<1.....
     5c5:	29 22 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     )"....Koppel3<2.
     5d5:	00 00 03 08 2c 22 00 00 01 10 4b 6f 70 70 65 6c     ....,"....Koppel
     5e5:	33 3c 31 00 00 00 f9 07 2f 22 00 00 01 10 4b 6f     3<1...../"....Ko
     5f5:	70 70 65 6c 33 3c 50 00 00 00 ef 07 32 22 00 00     ppel3<P.....2"..
     605:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 e5 07     ..Koppel2<1.....
     615:	35 22 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     5"....Koppel2<P.
     625:	00 00 db 07 38 22 00 00 01 10 4b 6f 70 70 65 6c     ....8"....Koppel
     635:	31 3c 50 00 00 00 d1 07 3b 22 00 00 01 10 50 72     1<P.....;"....Pr
     645:	2e 2b 2f 73 65 74 00 00 00 00 9f 07 4d 23 00 00     .+/set......M#..
     655:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 95 07     ..Pr.-/clr......
     665:	12 23 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     .#....Prog. 1A..
     675:	00 00 c7 07 ce 22 00 00 01 10 50 72 6f 67 2e 20     ....."....Prog. 
     685:	32 41 00 00 00 00 bd 07 d1 22 00 00 01 10 50 72     2A......."....Pr
     695:	6f 67 2e 20 33 41 00 00 00 00 b3 07 d4 22 00 00     og. 3A......."..
     6a5:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 a9 07     ..Prog. 4A......
     6b5:	d7 22 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     ."....Prog.clr..
     6c5:	00 00 59 07 76 1c 00 00 01 10 50 72 6f 67 2e 73     ..Y.v.....Prog.s
     6d5:	65 74 00 00 00 00 63 07 52 22 00 00 01 10 50 72     et....c.R"....Pr
     6e5:	6f 67 2e 2b 00 00 00 00 00 00 8b 07 69 23 00 00     og.+........i#..
     6f5:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 81 07     ..Prog.-........
     705:	25 23 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     %#....PrBank+...
     715:	00 00 77 07 ea 22 00 00 01 10 50 72 42 61 6e 6b     ..w.."....PrBank
     725:	2e 2d 00 00 00 00 6d 07 f5 22 00 00 01 10 4d 49     .-....m.."....MI
     735:	44 49 20 4f 66 66 00 00 00 00 49 08 76 2a 00 00     DI Off....I.v*..
     745:	c1 10 53 65 74 75 70 00 00 00 00 00 33 0f 53 08     ..Setup.....3.S.
     755:	00 00 00 00                                         ....

00000759 <shortKeyTextRegOff>:
     759:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

00000763 <shortKeyTextPRS>:
     763:	50 73 65 74 00 00 00 00 00 00                       Pset......

0000076d <shortKeyTextPBD>:
     76d:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

00000777 <shortKeyTextPBI>:
     777:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

00000781 <shortKeyTextPRD>:
     781:	50 2d 00 00 00 00 00 00 00 00                       P-........

0000078b <shortKeyTextPRI>:
     78b:	50 2b 00 00 00 00 00 00 00 00                       P+........

00000795 <shortKeyTextPRM>:
     795:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

0000079f <shortKeyTextPRP>:
     79f:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

000007a9 <shortKeyTextK4A>:
     7a9:	50 41 34 00 00 00 00 00 00 00                       PA4.......

000007b3 <shortKeyTextK3A>:
     7b3:	50 41 33 00 00 00 00 00 00 00                       PA3.......

000007bd <shortKeyTextK2A>:
     7bd:	50 41 32 00 00 00 00 00 00 00                       PA2.......

000007c7 <shortKeyTextK1A>:
     7c7:	50 41 31 00 00 00 00 00 00 00                       PA1.......

000007d1 <shortKeyTextCpl1P>:
     7d1:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

000007db <shortKeyTextCpl2P>:
     7db:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

000007e5 <shortKeyTextCpl21>:
     7e5:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

000007ef <shortKeyTextCpl3P>:
     7ef:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

000007f9 <shortKeyTextCpl31>:
     7f9:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

00000803 <shortKeyTextCpl32>:
     803:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

0000080d <shortKeyTextCplP1>:
     80d:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000817 <shortKeyTextCplP2>:
     817:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000821 <shortKeyTextCpl12>:
     821:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

0000082b <shortKeyTextCplP3>:
     82b:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000835 <shortKeyTextCpl13>:
     835:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000083f <shortKeyTextCpl23>:
     83f:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

00000849 <shortKeyTextMIDIoff>:
     849:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

00000853 <shortKeyTextSetup>:
     853:	53 65 74 75 00 00 00 00 00 00                       Setu......

0000085d <shortKeyTextStim>:
     85d:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000867 <shortKeyTextMenu>:
     867:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

00000871 <shortKeyTextNone>:
	...

0000087b <menu_main>:
     87b:	81 00 4d 61 6e 75 61 6c 00 00 00 00 f3 08 00 00     ..Manual........
     88b:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     89b:	1b 09 00 00 d6 21 00 00 01 00 4d 49 44 49 00 00     .....!....MIDI..
     8ab:	00 00 00 00 e7 0a 00 00 00 00 00 00 01 00 54 61     ..............Ta
     8bb:	73 74 65 6e 00 00 00 00 f3 0d 00 00 00 00 99 1c     sten............
     8cb:	01 00 53 74 61 74 75 73 00 00 00 00 1f 14 00 00     ..Status........
     8db:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     8eb:	33 0f 00 00 00 00 00 00                             3.......

000008f3 <menu_manual>:
     8f3:	81 00 4b 6f 70 70 65 6c 00 00 00 00 f7 09 00 00     ..Koppel........
     903:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     913:	43 0e 00 00 00 00 00 00                             C.......

0000091b <menu_register>:
     91b:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 d0 05     ..Prog.lad......
     92b:	00 00 e3 21 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ...!..Prog.sp...
     93b:	00 00 d0 05 00 00 8e 1c 01 00 61 75 73 00 00 00     ..........aus...
	...
     953:	dd 21 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     .!....Reg.1-8...
     963:	00 00 95 05 00 00 4e 1c 0e 00 52 65 67 2e 39 2d     ......N...Reg.9-
     973:	31 36 00 00 00 00 96 05 00 00 4e 1c 0e 00 52 65     16........N...Re
     983:	67 2e 31 37 2d 32 34 00 00 00 97 05 00 00 4e 1c     g.17-24.......N.
     993:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 98 05     ..Reg.25-32.....
     9a3:	00 00 4e 1c 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..N...Reg.33-40.
     9b3:	00 00 99 05 00 00 4e 1c 0e 00 52 65 67 2e 34 31     ......N...Reg.41
     9c3:	2d 34 38 00 00 00 9a 05 00 00 4e 1c 0e 00 52 65     -48.......N...Re
     9d3:	67 2e 34 39 2d 35 34 00 00 00 9b 05 00 00 4e 1c     g.49-54.......N.
     9e3:	ce 00 52 65 67 2e 35 35 2d 36 34 00 00 00 9c 05     ..Reg.55-64.....
     9f3:	00 00 4e 1c                                         ..N.

000009f7 <menu_coupler>:
     9f7:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 39 08     ..2<3.........9.
     a07:	00 00 7b 1c 09 00 31 3c 33 00 00 00 00 00 00 00     ..{...1<3.......
     a17:	00 00 3a 08 00 00 7b 1c 09 00 31 3c 32 00 00 00     ..:...{...1<2...
     a27:	00 00 00 00 00 00 3b 08 00 00 7b 1c 09 00 50 3c     ......;...{...P<
     a37:	33 00 00 00 00 00 00 00 00 00 3c 08 00 00 7b 1c     3.........<...{.
     a47:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 3d 08     ..P<2.........=.
     a57:	00 00 7b 1c 09 00 50 3c 31 00 00 00 00 00 00 00     ..{...P<1.......
     a67:	00 00 3e 08 00 00 7b 1c 09 00 33 3c 32 00 00 00     ..>...{...3<2...
     a77:	00 00 00 00 00 00 3f 08 00 00 7b 1c 09 00 33 3c     ......?...{...3<
     a87:	31 00 00 00 00 00 00 00 00 00 40 08 00 00 7b 1c     1.........@...{.
     a97:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 41 08     ..3<P.........A.
     aa7:	00 00 7b 1c 09 00 32 3c 31 00 00 00 00 00 00 00     ..{...2<1.......
     ab7:	00 00 42 08 00 00 7b 1c 09 00 32 3c 50 00 00 00     ..B...{...2<P...
     ac7:	00 00 00 00 00 00 43 08 00 00 7b 1c c9 00 31 3c     ......C...{...1<
     ad7:	50 00 00 00 00 00 00 00 00 00 44 08 00 00 7b 1c     P.........D...{.

00000ae7 <menu_midi>:
     ae7:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     af7:	76 2a 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     v*....MIDIin....
     b07:	c3 0b 00 00 00 00 14 1e 01 00 4d 49 44 49 6f 75     ..........MIDIou
     b17:	74 00 00 00 93 0e 00 00 00 00 10 1e 03 10 54 68     t.............Th
     b27:	72 75 2d 49 6e 00 00 00 00 00 4e 08 00 00 4a 1c     ru-In.....N...J.
     b37:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 4f 08     ..Thru-Out....O.
     b47:	00 00 4a 1c 09 00 41 63 63 65 70 74 20 50 43 00     ..J...Accept PC.
     b57:	00 00 5a 09 00 00 0c 1e 09 00 41 63 74 2e 53 65     ..Z.......Act.Se
     b67:	6e 73 65 00 00 00 58 09 00 00 0c 1e 09 00 56 65     nse...X.......Ve
     b77:	6c 5a 34 4f 66 66 00 00 00 00 59 09 00 00 0c 1e     lZ4Off....Y.....
     b87:	01 00 4d 49 44 49 2d 43 43 00 00 00 a3 0d 00 00     ..MIDI-CC.......
     b97:	00 00 42 1c 06 08 52 78 42 75 66 55 73 65 00 00     ..B...RxBufUse..
     ba7:	00 00 6d 15 00 00 00 00 c6 08 54 78 42 75 66 55     ..m.......TxBufU
     bb7:	73 65 00 00 00 00 76 16 00 00 00 00                 se....v.....

00000bc3 <menu_midiIn>:
     bc3:	81 00 43 68 2e 31 00 00 00 00 00 00 03 0d 00 00     ..Ch.1..........
     bd3:	a7 1b 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     be3:	03 0d 01 00 a7 1b 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     bf3:	00 00 00 00 03 0d 02 00 a7 1b 00 00 01 00 43 68     ..............Ch
     c03:	2e 34 00 00 00 00 00 00 03 0d 03 00 a7 1b 00 00     .4..............
     c13:	01 00 43 68 2e 35 00 00 00 00 00 00 03 0d 04 00     ..Ch.5..........
     c23:	a7 1b 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     c33:	03 0d 05 00 a7 1b 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     c43:	00 00 00 00 03 0d 06 00 a7 1b 00 00 01 00 43 68     ..............Ch
     c53:	2e 38 00 00 00 00 00 00 03 0d 07 00 a7 1b 00 00     .8..............
     c63:	01 00 43 68 2e 39 00 00 00 00 00 00 03 0d 08 00     ..Ch.9..........
     c73:	a7 1b 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     c83:	03 0d 09 00 a7 1b 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     c93:	00 00 00 00 03 0d 0a 00 a7 1b 00 00 01 00 43 68     ..............Ch
     ca3:	2e 31 32 00 00 00 00 00 03 0d 0b 00 a7 1b 00 00     .12.............
     cb3:	01 00 43 68 2e 31 33 00 00 00 00 00 03 0d 0c 00     ..Ch.13.........
     cc3:	a7 1b 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     cd3:	03 0d 0d 00 a7 1b 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     ce3:	00 00 00 00 03 0d 0e 00 a7 1b 00 00 c1 00 43 68     ..............Ch
     cf3:	2e 31 36 00 00 00 00 00 03 0d 0f 00 a7 1b 00 00     .16.............

00000d03 <menu_midiInSec>:
     d03:	81 00 53 65 63 74 2e 31 00 00 00 00 53 0d 00 00     ..Sect.1....S...
     d13:	b2 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     d23:	53 0d 01 00 b2 1b 00 00 01 00 53 65 63 74 2e 33     S.........Sect.3
     d33:	00 00 00 00 53 0d 02 00 b2 1b 00 00 c1 00 53 65     ....S.........Se
     d43:	63 74 2e 34 00 00 00 00 53 0d 03 00 b2 1b 00 00     ct.4....S.......

00000d53 <menu_midiInVar>:
     d53:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 50 08     ..Manual......P.
     d63:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     d73:	00 00 51 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..Q.......Range.
     d83:	00 00 00 00 00 00 52 08 00 00 00 00 c4 90 4d 61     ......R.......Ma
     d93:	6e 4e 6f 74 65 00 00 00 00 00 53 08 00 00 00 00     nNote.....S.....

00000da3 <menu_midiCCreg>:
     da3:	82 00 52 65 67 4f 6e 5f 49 00 00 00 00 00 5c 09     ..RegOn_I.....\.
     db3:	00 00 00 00 02 00 52 65 67 4f 66 66 5f 49 00 00     ......RegOff_I..
     dc3:	00 00 5d 09 00 00 00 00 02 00 52 65 67 4f 6e 5f     ..].......RegOn_
     dd3:	4f 00 00 00 00 00 5e 09 00 00 00 00 c2 00 52 65     O.....^.......Re
     de3:	67 4f 66 66 5f 4f 00 00 00 00 5f 09 00 00 00 00     gOff_O...._.....

00000df3 <menu_key>:
     df3:	81 08 54 61 73 74 65 31 00 00 00 00 15 05 00 00     ..Taste1........
     e03:	2b 1c 19 2f 01 08 54 61 73 74 65 32 00 00 00 00     +../..Taste2....
     e13:	15 05 01 00 2b 1c 19 2f 01 08 54 61 73 74 65 33     ....+../..Taste3
     e23:	00 00 00 00 15 05 02 00 2b 1c 19 2f c1 08 54 61     ........+../..Ta
     e33:	73 74 65 34 00 00 00 00 15 05 03 00 2b 1c 19 2f     ste4........+../

00000e43 <menu_tune>:
     e43:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     e53:	e5 1c 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     e63:	00 00 01 00 e5 1c 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     e73:	00 00 00 00 00 00 02 00 e5 1c 00 00 c1 20 50 65     ............. Pe
     e83:	64 61 6c 00 00 00 00 00 00 00 03 00 e5 1c 00 00     dal.............

00000e93 <menu_midiOut>:
     e93:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 50 09     ..III.........P.
     ea3:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     eb3:	00 00 52 09 00 00 00 00 03 10 49 00 00 00 00 00     ..R.......I.....
     ec3:	00 00 00 00 00 00 54 09 00 00 00 00 03 10 50 00     ......T.......P.
	...
     edb:	00 00 56 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..V.......III(in
     eeb:	74 29 00 00 00 00 51 09 00 00 00 00 03 10 49 49     t)....Q.......II
     efb:	28 69 6e 74 29 00 00 00 00 00 53 09 00 00 00 00     (int).....S.....
     f0b:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 55 09     ..I(int)......U.
     f1b:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     f2b:	00 00 57 09 00 00 00 00                             ..W.....

00000f33 <menu_setup>:
     f33:	81 00 4d 6f 64 75 6c 65 00 00 00 00 ff 10 00 00     ..Module........
     f43:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     f53:	97 0f 00 00 00 00 46 1c 01 00 55 53 42 00 00 00     ......F...USB...
     f63:	00 00 00 00 6f 14 00 00 00 00 00 00 01 00 50 6f     ....o.........Po
     f73:	77 65 72 00 00 00 00 00 c3 10 00 00 00 00 00 00     wer.............
     f83:	c1 00 45 45 70 72 6f 6d 00 00 00 00 87 10 00 00     ..EEprom........
     f93:	00 00 00 00                                         ....

00000f97 <menu_regout>:
     f97:	81 00 53 65 63 74 2e 31 00 00 00 00 37 10 00 00     ..Sect.1....7...
     fa7:	16 1c 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     fb7:	37 10 01 00 16 1c 00 00 01 00 53 65 63 74 2e 33     7.........Sect.3
     fc7:	00 00 00 00 37 10 02 00 16 1c 00 00 01 00 53 65     ....7.........Se
     fd7:	63 74 2e 34 00 00 00 00 37 10 03 00 16 1c 00 00     ct.4....7.......
     fe7:	01 00 53 65 63 74 2e 35 00 00 00 00 37 10 04 00     ..Sect.5....7...
     ff7:	16 1c 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    1007:	37 10 05 00 16 1c 00 00 01 00 53 65 63 74 2e 37     7.........Sect.7
    1017:	00 00 00 00 37 10 06 00 16 1c 00 00 c1 00 53 65     ....7.........Se
    1027:	63 74 2e 38 00 00 00 00 37 10 07 00 16 1c 00 00     ct.8....7.......

00001037 <menu_regoutSec>:
    1037:	82 80 43 75 72 73 6f 72 00 00 00 00 00 00 00 02     ..Cursor........
    1047:	00 00 00 00 02 80 43 68 61 72 00 00 00 00 00 00     ......Char......
    1057:	00 00 01 02 00 00 00 00 0d 80 52 65 67 42 65 67     ..........RegBeg
    1067:	00 00 00 00 00 00 02 02 00 00 00 00 cd 80 52 65     ..............Re
    1077:	67 45 6e 64 00 00 00 00 00 00 03 02 00 00 00 00     gEnd............

00001087 <menu_eeprom>:
    1087:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
    1097:	4a 1e 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     J.....EEBackup..
    10a7:	00 00 00 00 26 1e 00 00 c1 00 45 45 52 65 73 74     ....&.....EERest
    10b7:	6f 72 65 00 00 00 00 00 38 1e 00 00                 ore.....8...

000010c3 <menu_Power>:
    10c3:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
    10d3:	dd 2f 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     ./....PowerOff..
    10e3:	00 00 00 00 e6 2f 00 00 c1 00 50 2e 52 65 73 74     ...../....P.Rest
    10f3:	61 72 74 00 00 00 00 00 ee 2f 00 00                 art....../..

000010ff <menu_module>:
    10ff:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 7a 03     ..ModRead.....z.
    110f:	00 00 22 1e 0a 00 4d 6f 64 57 72 69 74 65 00 00     .."...ModWrite..
    111f:	00 00 7b 03 00 00 22 1e 0a 08 4d 6f 64 4f 4b 00     ..{..."...ModOK.
    112f:	00 00 00 00 00 00 6d 02 00 00 00 00 01 00 4d 6f     ......m.......Mo
    113f:	64 54 65 73 74 00 00 00 63 11 00 00 00 00 00 00     dTest...c.......
    114f:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 53 12 00 00     ..ModAssign.S...
    115f:	00 00 18 1e                                         ....

00001163 <menu_ModeSel>:
    1163:	81 00 4d 6f 64 2e 30 00 00 00 00 00 03 12 00 00     ..Mod.0.........
    1173:	9c 1b 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
    1183:	03 12 01 00 9c 1b 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
    1193:	00 00 00 00 03 12 02 00 9c 1b 00 00 01 00 4d 6f     ..............Mo
    11a3:	64 2e 33 00 00 00 00 00 03 12 03 00 9c 1b 00 00     d.3.............
    11b3:	01 00 4d 6f 64 2e 34 00 00 00 00 00 03 12 04 00     ..Mod.4.........
    11c3:	9c 1b 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
    11d3:	03 12 05 00 9c 1b 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
    11e3:	00 00 00 00 03 12 06 00 9c 1b 00 00 c1 00 4d 6f     ..............Mo
    11f3:	64 2e 37 00 00 00 00 00 03 12 07 00 9c 1b 00 00     d.7.............

00001203 <menu_ModTestSelcted>:
    1203:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    1213:	9d 1c 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    1223:	00 00 d5 05 33 1b 6f 1b 01 00 54 65 73 74 50 74     ....3.o...TestPt
    1233:	72 6e 00 00 00 00 00 00 74 2b 00 00 c1 00 4c 6f     rn......t+....Lo
    1243:	6f 70 54 73 74 00 00 00 00 00 00 00 d2 1c 00 00     opTst...........

00001253 <menu_modAssign>:
    1253:	81 00 4d 61 6e 2e 33 00 00 00 00 00 57 13 00 00     ..Man.3.....W...
    1263:	d0 1b 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    1273:	57 13 01 00 d0 1b 00 00 01 00 4d 61 6e 2e 31 00     W.........Man.1.
    1283:	00 00 00 00 57 13 02 00 d0 1b 00 00 01 00 50 65     ....W.........Pe
    1293:	64 61 6c 00 00 00 00 00 57 13 03 00 d0 1b 00 00     dal.....W.......
    12a3:	c1 00 52 65 67 69 73 74 65 72 00 00 b7 12 04 00     ..Register......
    12b3:	00 00 00 00                                         ....

000012b7 <menu_modSection8>:
    12b7:	81 00 53 65 63 74 2e 31 00 00 00 00 a7 13 00 00     ..Sect.1........
    12c7:	00 1c 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    12d7:	a7 13 01 00 00 1c 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    12e7:	00 00 00 00 a7 13 02 00 00 1c 00 00 01 00 53 65     ..............Se
    12f7:	63 74 2e 34 00 00 00 00 a7 13 03 00 00 1c 00 00     ct.4............
    1307:	01 00 53 65 63 74 2e 35 00 00 00 00 a7 13 04 00     ..Sect.5........
    1317:	00 1c 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    1327:	a7 13 05 00 00 1c 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    1337:	00 00 00 00 a7 13 06 00 00 1c 00 00 c1 00 53 65     ..............Se
    1347:	63 74 2e 38 00 00 00 00 a7 13 07 00 00 1c 00 00     ct.8............

00001357 <menu_modSection>:
    1357:	81 00 53 65 63 74 2e 31 00 00 00 00 e3 13 00 00     ..Sect.1........
    1367:	db 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1377:	e3 13 01 00 db 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    1387:	00 00 00 00 e3 13 02 00 db 1b 00 00 c1 00 53 65     ..............Se
    1397:	63 74 2e 34 00 00 00 00 e3 13 03 00 db 1b 00 00     ct.4............

000013a7 <menu_modDefineReg>:
    13a7:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 1f 08     ..RegBeg........
    13b7:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    13c7:	00 00 20 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     .. .......Module
    13d7:	2f 42 69 74 00 00 21 08 00 00 00 00                 /Bit..!.....

000013e3 <menu_modDefine>:
    13e3:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 60 09     ..NoteBeg.....`.
    13f3:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    1403:	00 00 61 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..a.......Module
    1413:	2f 42 69 74 00 00 62 09 00 00 00 00                 /Bit..b.....

0000141f <menu_status>:
    141f:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    142f:	cd 29 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .)....USB.......
    143f:	6f 14 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     o........@MIDI-I
    144f:	6e 00 00 00 00 00 00 00 51 29 00 00 c2 40 4d 49     n.......Q)...@MI
    145f:	44 49 2d 4f 75 74 00 00 00 00 00 00 8f 29 00 00     DI-Out.......)..

0000146f <menu_USBser>:
    146f:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 7e 16     ..EventLog....~.
    147f:	00 00 85 1e 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
    148f:	00 00 00 00 5c 1e 00 00 c1 00 53 6e 64 48 57 43     ....\.....SndHWC
    149f:	66 67 00 00 00 00 00 00 9d 1e 00 00                 fg..........

000014ab <sw_version>:
    14ab:	56 30 2e 38 35 00                                   V0.85.

000014b1 <cplInfo>:
    14b1:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    14c1:	01 02 00 03 01 03 02 03                             ........

000014c9 <keylabel_1>:
    14c9:	31 00                                               1.

000014cb <keylabel_0>:
    14cb:	30 00                                               0.

000014cd <keylabel_text>:
    14cd:	54 65 78 74 80 00                                   Text..

000014d3 <keylabel_exit>:
    14d3:	45 78 69 74 00                                      Exit.

000014d8 <keylabel_off>:
    14d8:	7e 61 75 73 00                                      ~aus.

000014dd <keylabel_on>:
    14dd:	7e 65 69 6e 00                                      ~ein.

000014e2 <keylabel_onoff>:
    14e2:	45 69 6e 80 00                                      Ein..

000014e7 <keylabel_minus>:
    14e7:	2d 00                                               -.

000014e9 <keylabel_plus>:
    14e9:	2b 00                                               +.

000014eb <keylabel_left>:
    14eb:	7f 00                                               ..

000014ed <keylabel_right>:
    14ed:	7e 00                                               ~.

000014ef <keylabel_down>:
    14ef:	09 00                                               ..

000014f1 <keylabel_up>:
    14f1:	08 00                                               ..

000014f3 <cr_lf>:
    14f3:	0d 0a 00                                            ...

000014f6 <__ctors_end>:
    14f6:	11 24       	eor	r1, r1
    14f8:	1f be       	out	0x3f, r1	; 63
    14fa:	cf ef       	ldi	r28, 0xFF	; 255
    14fc:	d1 e2       	ldi	r29, 0x21	; 33
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	00 e0       	ldi	r16, 0x00	; 0
    1504:	0c bf       	out	0x3c, r16	; 60

00001506 <__do_copy_data>:
    1506:	12 e0       	ldi	r17, 0x02	; 2
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b2 e0       	ldi	r27, 0x02	; 2
    150c:	ee e5       	ldi	r30, 0x5E	; 94
    150e:	f2 e8       	ldi	r31, 0x82	; 130
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	0b bf       	out	0x3b, r16	; 59
    1514:	02 c0       	rjmp	.+4      	; 0x151a <__do_copy_data+0x14>
    1516:	07 90       	elpm	r0, Z+
    1518:	0d 92       	st	X+, r0
    151a:	a8 32       	cpi	r26, 0x28	; 40
    151c:	b1 07       	cpc	r27, r17
    151e:	d9 f7       	brne	.-10     	; 0x1516 <__do_copy_data+0x10>

00001520 <__do_clear_bss>:
    1520:	29 e1       	ldi	r18, 0x19	; 25
    1522:	a8 e2       	ldi	r26, 0x28	; 40
    1524:	b2 e0       	ldi	r27, 0x02	; 2
    1526:	01 c0       	rjmp	.+2      	; 0x152a <.do_clear_bss_start>

00001528 <.do_clear_bss_loop>:
    1528:	1d 92       	st	X+, r1

0000152a <.do_clear_bss_start>:
    152a:	ac 34       	cpi	r26, 0x4C	; 76
    152c:	b2 07       	cpc	r27, r18
    152e:	e1 f7       	brne	.-8      	; 0x1528 <.do_clear_bss_loop>
    1530:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <main>
    1534:	0c 94 2d 41 	jmp	0x825a	; 0x825a <_exit>

00001538 <__bad_interrupt>:
    1538:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000153c <crc16_ram>:

uint8_t ee_initError = EE_ERROR_NONE;

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
    153c:	fc 01       	movw	r30, r24
	uint16_t result = CRC_START;
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
	while (count-- > 0){
    1542:	1c c0       	rjmp	.+56     	; 0x157c <crc16_ram+0x40>
		result =  _crc16_update(result, *pRam++);
    1544:	df 01       	movw	r26, r30
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	20 81       	ld	r18, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    154a:	82 27       	eor	r24, r18
    154c:	28 2f       	mov	r18, r24
    154e:	22 95       	swap	r18
    1550:	28 27       	eor	r18, r24
    1552:	02 2e       	mov	r0, r18
    1554:	26 95       	lsr	r18
    1556:	26 95       	lsr	r18
    1558:	20 25       	eor	r18, r0
    155a:	02 2e       	mov	r0, r18
    155c:	26 95       	lsr	r18
    155e:	20 25       	eor	r18, r0
    1560:	27 70       	andi	r18, 0x07	; 7
    1562:	08 2e       	mov	r0, r24
    1564:	89 2f       	mov	r24, r25
    1566:	26 95       	lsr	r18
    1568:	07 94       	ror	r0
    156a:	27 95       	ror	r18
    156c:	90 2d       	mov	r25, r0
    156e:	82 27       	eor	r24, r18
    1570:	06 94       	lsr	r0
    1572:	27 95       	ror	r18
    1574:	90 25       	eor	r25, r0
    1576:	82 27       	eor	r24, r18

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    1578:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    157a:	fd 01       	movw	r30, r26

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    157c:	ab 01       	movw	r20, r22
    157e:	41 50       	subi	r20, 0x01	; 1
    1580:	51 09       	sbc	r21, r1
    1582:	67 2b       	or	r22, r23
    1584:	f9 f6       	brne	.-66     	; 0x1544 <crc16_ram+0x8>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    1586:	08 95       	ret

00001588 <crc16_eeprom>:

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
	uint16_t result = CRC_START;
    1594:	cf ef       	ldi	r28, 0xFF	; 255
    1596:	df ef       	ldi	r29, 0xFF	; 255
	while (count-- > 0){
    1598:	21 c0       	rjmp	.+66     	; 0x15dc <crc16_eeprom+0x54>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    159a:	7c 01       	movw	r14, r24
    159c:	2f ef       	ldi	r18, 0xFF	; 255
    159e:	e2 1a       	sub	r14, r18
    15a0:	f2 0a       	sbc	r15, r18
    15a2:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    15a6:	9e 01       	movw	r18, r28
    15a8:	28 27       	eor	r18, r24
    15aa:	82 2f       	mov	r24, r18
    15ac:	82 95       	swap	r24
    15ae:	82 27       	eor	r24, r18
    15b0:	08 2e       	mov	r0, r24
    15b2:	86 95       	lsr	r24
    15b4:	86 95       	lsr	r24
    15b6:	80 25       	eor	r24, r0
    15b8:	08 2e       	mov	r0, r24
    15ba:	86 95       	lsr	r24
    15bc:	80 25       	eor	r24, r0
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	02 2e       	mov	r0, r18
    15c2:	23 2f       	mov	r18, r19
    15c4:	86 95       	lsr	r24
    15c6:	07 94       	ror	r0
    15c8:	87 95       	ror	r24
    15ca:	30 2d       	mov	r19, r0
    15cc:	28 27       	eor	r18, r24
    15ce:	06 94       	lsr	r0
    15d0:	87 95       	ror	r24
    15d2:	30 25       	eor	r19, r0
    15d4:	28 27       	eor	r18, r24
    15d6:	e9 01       	movw	r28, r18
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    15d8:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    15da:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    15dc:	8b 01       	movw	r16, r22
    15de:	01 50       	subi	r16, 0x01	; 1
    15e0:	11 09       	sbc	r17, r1
    15e2:	67 2b       	or	r22, r23
    15e4:	d1 f6       	brne	.-76     	; 0x159a <crc16_eeprom+0x12>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    15e6:	ce 01       	movw	r24, r28
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	08 95       	ret

000015f6 <crc16_ram_startVal>:

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
    15f6:	fc 01       	movw	r30, r24
    15f8:	ca 01       	movw	r24, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    15fa:	1c c0       	rjmp	.+56     	; 0x1634 <crc16_ram_startVal+0x3e>
		result =  _crc16_update(result, *pRam++);
    15fc:	df 01       	movw	r26, r30
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	20 81       	ld	r18, Z
    1602:	82 27       	eor	r24, r18
    1604:	28 2f       	mov	r18, r24
    1606:	22 95       	swap	r18
    1608:	28 27       	eor	r18, r24
    160a:	02 2e       	mov	r0, r18
    160c:	26 95       	lsr	r18
    160e:	26 95       	lsr	r18
    1610:	20 25       	eor	r18, r0
    1612:	02 2e       	mov	r0, r18
    1614:	26 95       	lsr	r18
    1616:	20 25       	eor	r18, r0
    1618:	27 70       	andi	r18, 0x07	; 7
    161a:	08 2e       	mov	r0, r24
    161c:	89 2f       	mov	r24, r25
    161e:	26 95       	lsr	r18
    1620:	07 94       	ror	r0
    1622:	27 95       	ror	r18
    1624:	90 2d       	mov	r25, r0
    1626:	82 27       	eor	r24, r18
    1628:	06 94       	lsr	r0
    162a:	27 95       	ror	r18
    162c:	90 25       	eor	r25, r0
    162e:	82 27       	eor	r24, r18
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1630:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    1632:	fd 01       	movw	r30, r26
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1634:	ab 01       	movw	r20, r22
    1636:	41 50       	subi	r20, 0x01	; 1
    1638:	51 09       	sbc	r21, r1
    163a:	67 2b       	or	r22, r23
    163c:	f9 f6       	brne	.-66     	; 0x15fc <crc16_ram_startVal+0x6>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    163e:	08 95       	ret

00001640 <crc16_eeprom_startVal>:

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ea 01       	movw	r28, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    164e:	21 c0       	rjmp	.+66     	; 0x1692 <crc16_eeprom_startVal+0x52>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1650:	7c 01       	movw	r14, r24
    1652:	2f ef       	ldi	r18, 0xFF	; 255
    1654:	e2 1a       	sub	r14, r18
    1656:	f2 0a       	sbc	r15, r18
    1658:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    165c:	ae 01       	movw	r20, r28
    165e:	48 27       	eor	r20, r24
    1660:	84 2f       	mov	r24, r20
    1662:	82 95       	swap	r24
    1664:	84 27       	eor	r24, r20
    1666:	08 2e       	mov	r0, r24
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
    166c:	80 25       	eor	r24, r0
    166e:	08 2e       	mov	r0, r24
    1670:	86 95       	lsr	r24
    1672:	80 25       	eor	r24, r0
    1674:	87 70       	andi	r24, 0x07	; 7
    1676:	04 2e       	mov	r0, r20
    1678:	45 2f       	mov	r20, r21
    167a:	86 95       	lsr	r24
    167c:	07 94       	ror	r0
    167e:	87 95       	ror	r24
    1680:	50 2d       	mov	r21, r0
    1682:	48 27       	eor	r20, r24
    1684:	06 94       	lsr	r0
    1686:	87 95       	ror	r24
    1688:	50 25       	eor	r21, r0
    168a:	48 27       	eor	r20, r24
    168c:	ea 01       	movw	r28, r20
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    168e:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1690:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1692:	8b 01       	movw	r16, r22
    1694:	01 50       	subi	r16, 0x01	; 1
    1696:	11 09       	sbc	r17, r1
    1698:	67 2b       	or	r22, r23
    169a:	d1 f6       	brne	.-76     	; 0x1650 <crc16_eeprom_startVal+0x10>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    169c:	ce 01       	movw	r24, r28
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <eeprom_ReadManualMap>:
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
*/

uint8_t eeprom_ReadManualMap(){
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    16b0:	82 e3       	ldi	r24, 0x32	; 50
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    16b8:	ec 01       	movw	r28, r24
    16ba:	60 e3       	ldi	r22, 0x30	; 48
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	62 df       	rcall	.-316    	; 0x1588 <crc16_eeprom>
    16c4:	c8 17       	cp	r28, r24
    16c6:	d9 07       	cpc	r29, r25
    16c8:	81 f4       	brne	.+32     	; 0x16ea <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    16d2:	8d 34       	cpi	r24, 0x4D	; 77
    16d4:	51 f4       	brne	.+20     	; 0x16ea <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    16d6:	40 e3       	ldi	r20, 0x30	; 48
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	80 e6       	ldi	r24, 0x60	; 96
    16e0:	99 e0       	ldi	r25, 0x09	; 9
    16e2:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    16ea:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1700:	85 e3       	ldi	r24, 0x35	; 53
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1708:	ec 01       	movw	r28, r24
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	71 e0       	ldi	r23, 0x01	; 1
    170e:	85 e3       	ldi	r24, 0x35	; 53
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	3a df       	rcall	.-396    	; 0x1588 <crc16_eeprom>
    1714:	c8 17       	cp	r28, r24
    1716:	d9 07       	cpc	r29, r25
    1718:	81 f4       	brne	.+32     	; 0x173a <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    171a:	84 e3       	ldi	r24, 0x34	; 52
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    1722:	89 34       	cpi	r24, 0x49	; 73
    1724:	51 f4       	brne	.+20     	; 0x173a <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	51 e0       	ldi	r21, 0x01	; 1
    172a:	65 e3       	ldi	r22, 0x35	; 53
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e5       	ldi	r24, 0x50	; 80
    1730:	98 e0       	ldi	r25, 0x08	; 8
    1732:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    173a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1744:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1750:	83 e4       	ldi	r24, 0x43	; 67
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1758:	ec 01       	movw	r28, r24
    175a:	6b e0       	ldi	r22, 0x0B	; 11
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	88 e3       	ldi	r24, 0x38	; 56
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	12 df       	rcall	.-476    	; 0x1588 <crc16_eeprom>
    1764:	c8 17       	cp	r28, r24
    1766:	d9 07       	cpc	r29, r25
    1768:	c1 f4       	brne	.+48     	; 0x179a <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    176a:	87 e3       	ldi	r24, 0x37	; 55
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    1772:	8f 34       	cpi	r24, 0x4F	; 79
    1774:	91 f4       	brne	.+36     	; 0x179a <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1776:	48 e0       	ldi	r20, 0x08	; 8
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	68 e3       	ldi	r22, 0x38	; 56
    177c:	71 e0       	ldi	r23, 0x01	; 1
    177e:	80 e5       	ldi	r24, 0x50	; 80
    1780:	99 e0       	ldi	r25, 0x09	; 9
    1782:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1786:	43 e0       	ldi	r20, 0x03	; 3
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	60 e4       	ldi	r22, 0x40	; 64
    178c:	71 e0       	ldi	r23, 0x01	; 1
    178e:	88 e5       	ldi	r24, 0x58	; 88
    1790:	99 e0       	ldi	r25, 0x09	; 9
    1792:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    179a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    179e:	84 60       	ori	r24, 0x04	; 4
    17a0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    17b0:	88 e4       	ldi	r24, 0x48	; 72
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    17b8:	ec 01       	movw	r28, r24
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	86 e4       	ldi	r24, 0x46	; 70
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	e2 de       	rcall	.-572    	; 0x1588 <crc16_eeprom>
    17c4:	c8 17       	cp	r28, r24
    17c6:	d9 07       	cpc	r29, r25
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    17ca:	85 e4       	ldi	r24, 0x45	; 69
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    17d2:	89 36       	cpi	r24, 0x69	; 105
    17d4:	71 f4       	brne	.+28     	; 0x17f2 <eeprom_ReadModules+0x46>
		// flaw: crc ist for moduleAssignRead only ?
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    17d6:	86 e4       	ldi	r24, 0x46	; 70
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    17de:	ca e7       	ldi	r28, 0x7A	; 122
    17e0:	d3 e0       	ldi	r29, 0x03	; 3
    17e2:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    17e4:	87 e4       	ldi	r24, 0x47	; 71
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    17ec:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    17f2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17f6:	88 60       	ori	r24, 0x08	; 8
    17f8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1808:	87 ef       	ldi	r24, 0xF7	; 247
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1810:	ec 01       	movw	r28, r24
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	85 ef       	ldi	r24, 0xF5	; 245
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	b6 de       	rcall	.-660    	; 0x1588 <crc16_eeprom>
    181c:	c8 17       	cp	r28, r24
    181e:	d9 07       	cpc	r29, r25
    1820:	81 f4       	brne	.+32     	; 0x1842 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    1822:	84 ef       	ldi	r24, 0xF4	; 244
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    182a:	84 35       	cpi	r24, 0x54	; 84
    182c:	51 f4       	brne	.+20     	; 0x1842 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    182e:	42 e0       	ldi	r20, 0x02	; 2
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	65 ef       	ldi	r22, 0xF5	; 245
    1834:	73 e0       	ldi	r23, 0x03	; 3
    1836:	8e e4       	ldi	r24, 0x4E	; 78
    1838:	98 e0       	ldi	r25, 0x08	; 8
    183a:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	06 c0       	rjmp	.+12     	; 0x184e <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1842:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    184c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1858:	8c e4       	ldi	r24, 0x4C	; 76
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1860:	ec 01       	movw	r28, r24
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	8b e4       	ldi	r24, 0x4B	; 75
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	8e de       	rcall	.-740    	; 0x1588 <crc16_eeprom>
    186c:	c8 17       	cp	r28, r24
    186e:	d9 07       	cpc	r29, r25
    1870:	71 f4       	brne	.+28     	; 0x188e <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1872:	8a e4       	ldi	r24, 0x4A	; 74
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    187a:	85 35       	cpi	r24, 0x55	; 85
    187c:	41 f4       	brne	.+16     	; 0x188e <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    187e:	8b e4       	ldi	r24, 0x4B	; 75
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    1886:	80 93 7e 16 	sts	0x167E, r24	; 0x80167e <serUSB_Active>
		return (EE_LOAD_OK);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	06 c0       	rjmp	.+12     	; 0x189a <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    188e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1892:	88 60       	ori	r24, 0x08	; 8
    1894:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1898:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	8f e4       	ldi	r24, 0x4F	; 79
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	6d de       	rcall	.-806    	; 0x1588 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    18ae:	ac 01       	movw	r20, r24
    18b0:	68 e1       	ldi	r22, 0x18	; 24
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	80 e5       	ldi	r24, 0x50	; 80
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	c3 de       	rcall	.-634    	; 0x1640 <crc16_eeprom_startVal>
    18ba:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    18bc:	88 e6       	ldi	r24, 0x68	; 104
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    18c4:	c8 17       	cp	r28, r24
    18c6:	d9 07       	cpc	r29, r25
    18c8:	b1 f4       	brne	.+44     	; 0x18f6 <eeprom_ReadReg+0x56>
    18ca:	8e e4       	ldi	r24, 0x4E	; 78
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    18d2:	82 35       	cpi	r24, 0x52	; 82
    18d4:	81 f4       	brne	.+32     	; 0x18f6 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    18d6:	8f e4       	ldi	r24, 0x4F	; 79
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    18de:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    18e2:	48 e1       	ldi	r20, 0x18	; 24
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	60 e5       	ldi	r22, 0x50	; 80
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	8f e1       	ldi	r24, 0x1F	; 31
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    18f6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1900:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    190c:	8b ee       	ldi	r24, 0xEB	; 235
    190e:	93 e0       	ldi	r25, 0x03	; 3
    1910:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1914:	ec 01       	movw	r28, r24
    1916:	60 e8       	ldi	r22, 0x80	; 128
    1918:	72 e0       	ldi	r23, 0x02	; 2
    191a:	8b e6       	ldi	r24, 0x6B	; 107
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	34 de       	rcall	.-920    	; 0x1588 <crc16_eeprom>
    1920:	c8 17       	cp	r28, r24
    1922:	d9 07       	cpc	r29, r25
    1924:	81 f4       	brne	.+32     	; 0x1946 <eeprom_ReadProg+0x3e>
    1926:	8a e6       	ldi	r24, 0x6A	; 106
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    192e:	80 35       	cpi	r24, 0x50	; 80
    1930:	51 f4       	brne	.+20     	; 0x1946 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	52 e0       	ldi	r21, 0x02	; 2
    1936:	6b e6       	ldi	r22, 0x6B	; 107
    1938:	71 e0       	ldi	r23, 0x01	; 1
    193a:	80 e9       	ldi	r24, 0x90	; 144
    193c:	99 e0       	ldi	r25, 0x09	; 9
    193e:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1946:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    194a:	80 64       	ori	r24, 0x40	; 64
    194c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1950:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    195c:	82 ef       	ldi	r24, 0xF2	; 242
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    1964:	ec 01       	movw	r28, r24
    1966:	64 e0       	ldi	r22, 0x04	; 4
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	8e ee       	ldi	r24, 0xEE	; 238
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	0c de       	rcall	.-1000   	; 0x1588 <crc16_eeprom>
    1970:	c8 17       	cp	r28, r24
    1972:	d9 07       	cpc	r29, r25
    1974:	51 f4       	brne	.+20     	; 0x198a <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1976:	44 e0       	ldi	r20, 0x04	; 4
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	6e ee       	ldi	r22, 0xEE	; 238
    197c:	73 e0       	ldi	r23, 0x03	; 3
    197e:	8b ed       	ldi	r24, 0xDB	; 219
    1980:	95 e0       	ldi	r25, 0x05	; 5
    1982:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    198a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    198e:	80 68       	ori	r24, 0x80	; 128
    1990:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1994:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <eeprom_ReadRegOut>:

uint8_t eeprom_ReadRegOut(){
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.regOut_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.reg_Out, sizeof (reg_Out)))){
    19a0:	8a e1       	ldi	r24, 0x1A	; 26
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    19a8:	ec 01       	movw	r28, r24
    19aa:	60 e2       	ldi	r22, 0x20	; 32
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	8a ef       	ldi	r24, 0xFA	; 250
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	ea dd       	rcall	.-1068   	; 0x1588 <crc16_eeprom>
    19b4:	c8 17       	cp	r28, r24
    19b6:	d9 07       	cpc	r29, r25
    19b8:	51 f4       	brne	.+20     	; 0x19ce <eeprom_ReadRegOut+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof (ee.eeData.ee.reg_Out));
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	6a ef       	ldi	r22, 0xFA	; 250
    19c0:	73 e0       	ldi	r23, 0x03	; 3
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	92 e0       	ldi	r25, 0x02	; 2
    19c6:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <eeprom_ReadRegOut+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    19ce:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    19d2:	80 62       	ori	r24, 0x20	; 32
    19d4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <eeprom_ReadCCreg>:

uint8_t eeprom_ReadCCreg(){
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiCCreg_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (midi_ccReg)))){
    19e4:	81 e2       	ldi	r24, 0x21	; 33
    19e6:	94 e0       	ldi	r25, 0x04	; 4
    19e8:	0e 94 03 41 	call	0x8206	; 0x8206 <eeprom_read_word>
    19ec:	ec 01       	movw	r28, r24
    19ee:	64 e0       	ldi	r22, 0x04	; 4
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	8d e1       	ldi	r24, 0x1D	; 29
    19f4:	94 e0       	ldi	r25, 0x04	; 4
    19f6:	c8 dd       	rcall	.-1136   	; 0x1588 <crc16_eeprom>
    19f8:	c8 17       	cp	r28, r24
    19fa:	d9 07       	cpc	r29, r25
    19fc:	51 f4       	brne	.+20     	; 0x1a12 <eeprom_ReadCCreg+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (ee.eeData.ee.midi_CCreg));
    19fe:	44 e0       	ldi	r20, 0x04	; 4
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	6d e1       	ldi	r22, 0x1D	; 29
    1a04:	74 e0       	ldi	r23, 0x04	; 4
    1a06:	8c e5       	ldi	r24, 0x5C	; 92
    1a08:	99 e0       	ldi	r25, 0x09	; 9
    1a0a:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	06 c0       	rjmp	.+12     	; 0x1a1e <eeprom_ReadCCreg+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    1a12:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1a16:	80 62       	ori	r24, 0x20	; 32
    1a18:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1a2e:	65 e6       	ldi	r22, 0x65	; 101
    1a30:	83 e2       	ldi	r24, 0x23	; 35
    1a32:	94 e0       	ldi	r25, 0x04	; 4
    1a34:	0c 94 17 41 	jmp	0x822e	; 0x822e <eeprom_update_byte>
    1a38:	08 95       	ret

00001a3a <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1a3e:	60 e3       	ldi	r22, 0x30	; 48
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	80 e6       	ldi	r24, 0x60	; 96
    1a44:	99 e0       	ldi	r25, 0x09	; 9
    1a46:	7a dd       	rcall	.-1292   	; 0x153c <crc16_ram>
    1a48:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a4a:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1a4e:	6d e4       	ldi	r22, 0x4D	; 77
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    1a58:	40 e3       	ldi	r20, 0x30	; 48
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	80 e6       	ldi	r24, 0x60	; 96
    1a62:	99 e0       	ldi	r25, 0x09	; 9
    1a64:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1a68:	be 01       	movw	r22, r28
    1a6a:	82 e3       	ldi	r24, 0x32	; 50
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1a72:	d8 df       	rcall	.-80     	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a74:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret

00001a7e <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	71 e0       	ldi	r23, 0x01	; 1
    1a86:	80 e5       	ldi	r24, 0x50	; 80
    1a88:	98 e0       	ldi	r25, 0x08	; 8
    1a8a:	58 dd       	rcall	.-1360   	; 0x153c <crc16_ram>
    1a8c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a8e:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1a92:	69 e4       	ldi	r22, 0x49	; 73
    1a94:	84 e3       	ldi	r24, 0x34	; 52
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	51 e0       	ldi	r21, 0x01	; 1
    1aa0:	65 e3       	ldi	r22, 0x35	; 53
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	80 e5       	ldi	r24, 0x50	; 80
    1aa6:	98 e0       	ldi	r25, 0x08	; 8
    1aa8:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1aac:	be 01       	movw	r22, r28
    1aae:	85 e3       	ldi	r24, 0x35	; 53
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1ab6:	b6 df       	rcall	.-148    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1ab8:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    1ac6:	68 e0       	ldi	r22, 0x08	; 8
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	80 e5       	ldi	r24, 0x50	; 80
    1acc:	99 e0       	ldi	r25, 0x09	; 9
    1ace:	36 dd       	rcall	.-1428   	; 0x153c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	63 e0       	ldi	r22, 0x03	; 3
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	88 e5       	ldi	r24, 0x58	; 88
    1ad8:	99 e0       	ldi	r25, 0x09	; 9
    1ada:	8d dd       	rcall	.-1254   	; 0x15f6 <crc16_ram_startVal>
    1adc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1ade:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1ae2:	6f e4       	ldi	r22, 0x4F	; 79
    1ae4:	87 e3       	ldi	r24, 0x37	; 55
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1aec:	48 e0       	ldi	r20, 0x08	; 8
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	68 e3       	ldi	r22, 0x38	; 56
    1af2:	71 e0       	ldi	r23, 0x01	; 1
    1af4:	80 e5       	ldi	r24, 0x50	; 80
    1af6:	99 e0       	ldi	r25, 0x09	; 9
    1af8:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1afc:	43 e0       	ldi	r20, 0x03	; 3
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	60 e4       	ldi	r22, 0x40	; 64
    1b02:	71 e0       	ldi	r23, 0x01	; 1
    1b04:	88 e5       	ldi	r24, 0x58	; 88
    1b06:	99 e0       	ldi	r25, 0x09	; 9
    1b08:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1b0c:	be 01       	movw	r22, r28
    1b0e:	83 e4       	ldi	r24, 0x43	; 67
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1b16:	86 df       	rcall	.-244    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b18:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	8a e7       	ldi	r24, 0x7A	; 122
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	04 dd       	rcall	.-1528   	; 0x153c <crc16_ram>
    1b34:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1b36:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1b3a:	69 e6       	ldi	r22, 0x69	; 105
    1b3c:	85 e4       	ldi	r24, 0x45	; 69
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1b44:	ca e7       	ldi	r28, 0x7A	; 122
    1b46:	d3 e0       	ldi	r29, 0x03	; 3
    1b48:	68 81       	ld	r22, Y
    1b4a:	86 e4       	ldi	r24, 0x46	; 70
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1b52:	69 81       	ldd	r22, Y+1	; 0x01
    1b54:	87 e4       	ldi	r24, 0x47	; 71
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1b5c:	b8 01       	movw	r22, r16
    1b5e:	88 e4       	ldi	r24, 0x48	; 72
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1b66:	5e df       	rcall	.-324    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b68:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	08 95       	ret

00001b76 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	8e e7       	ldi	r24, 0x7E	; 126
    1b80:	96 e1       	ldi	r25, 0x16	; 22
    1b82:	dc dc       	rcall	.-1608   	; 0x153c <crc16_ram>
    1b84:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b86:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1b8a:	65 e5       	ldi	r22, 0x55	; 85
    1b8c:	8a e4       	ldi	r24, 0x4A	; 74
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1b94:	60 91 7e 16 	lds	r22, 0x167E	; 0x80167e <serUSB_Active>
    1b98:	8b e4       	ldi	r24, 0x4B	; 75
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1ba0:	be 01       	movw	r22, r28
    1ba2:	8c e4       	ldi	r24, 0x4C	; 76
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1baa:	3c df       	rcall	.-392    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bac:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1bba:	62 e0       	ldi	r22, 0x02	; 2
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	8e e4       	ldi	r24, 0x4E	; 78
    1bc0:	98 e0       	ldi	r25, 0x08	; 8
    1bc2:	bc dc       	rcall	.-1672   	; 0x153c <crc16_ram>
    1bc4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1bc6:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1bca:	64 e5       	ldi	r22, 0x54	; 84
    1bcc:	84 ef       	ldi	r24, 0xF4	; 244
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1bd4:	42 e0       	ldi	r20, 0x02	; 2
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	65 ef       	ldi	r22, 0xF5	; 245
    1bda:	73 e0       	ldi	r23, 0x03	; 3
    1bdc:	8e e4       	ldi	r24, 0x4E	; 78
    1bde:	98 e0       	ldi	r25, 0x08	; 8
    1be0:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1be4:	be 01       	movw	r22, r28
    1be6:	87 ef       	ldi	r24, 0xF7	; 247
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1bee:	1a df       	rcall	.-460    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bf0:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	88 e3       	ldi	r24, 0x38	; 56
    1c04:	98 e0       	ldi	r25, 0x08	; 8
    1c06:	9a dc       	rcall	.-1740   	; 0x153c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1c08:	ac 01       	movw	r20, r24
    1c0a:	68 e1       	ldi	r22, 0x18	; 24
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	8f e1       	ldi	r24, 0x1F	; 31
    1c10:	98 e0       	ldi	r25, 0x08	; 8
    1c12:	f1 dc       	rcall	.-1566   	; 0x15f6 <crc16_ram_startVal>
    1c14:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c16:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1c1a:	62 e5       	ldi	r22, 0x52	; 82
    1c1c:	8e e4       	ldi	r24, 0x4E	; 78
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1c24:	60 91 38 08 	lds	r22, 0x0838	; 0x800838 <registerCount>
    1c28:	8f e4       	ldi	r24, 0x4F	; 79
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1c30:	48 e1       	ldi	r20, 0x18	; 24
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	60 e5       	ldi	r22, 0x50	; 80
    1c36:	71 e0       	ldi	r23, 0x01	; 1
    1c38:	8f e1       	ldi	r24, 0x1F	; 31
    1c3a:	98 e0       	ldi	r25, 0x08	; 8
    1c3c:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1c40:	be 01       	movw	r22, r28
    1c42:	88 e6       	ldi	r24, 0x68	; 104
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1c4a:	ec de       	rcall	.-552    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c4c:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1c5a:	60 e8       	ldi	r22, 0x80	; 128
    1c5c:	72 e0       	ldi	r23, 0x02	; 2
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	99 e0       	ldi	r25, 0x09	; 9
    1c62:	6c dc       	rcall	.-1832   	; 0x153c <crc16_ram>
    1c64:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c66:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1c6a:	60 e5       	ldi	r22, 0x50	; 80
    1c6c:	8a e6       	ldi	r24, 0x6A	; 106
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	52 e0       	ldi	r21, 0x02	; 2
    1c78:	6b e6       	ldi	r22, 0x6B	; 107
    1c7a:	71 e0       	ldi	r23, 0x01	; 1
    1c7c:	80 e9       	ldi	r24, 0x90	; 144
    1c7e:	99 e0       	ldi	r25, 0x09	; 9
    1c80:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1c84:	be 01       	movw	r22, r28
    1c86:	8b ee       	ldi	r24, 0xEB	; 235
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1c8e:	ca de       	rcall	.-620    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c90:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	8b ed       	ldi	r24, 0xDB	; 219
    1ca4:	95 e0       	ldi	r25, 0x05	; 5
    1ca6:	4a dc       	rcall	.-1900   	; 0x153c <crc16_ram>
    1ca8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1caa:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1cae:	6b e4       	ldi	r22, 0x4B	; 75
    1cb0:	8d ee       	ldi	r24, 0xED	; 237
    1cb2:	93 e0       	ldi	r25, 0x03	; 3
    1cb4:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1cb8:	44 e0       	ldi	r20, 0x04	; 4
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	6e ee       	ldi	r22, 0xEE	; 238
    1cbe:	73 e0       	ldi	r23, 0x03	; 3
    1cc0:	8b ed       	ldi	r24, 0xDB	; 219
    1cc2:	95 e0       	ldi	r25, 0x05	; 5
    1cc4:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1cc8:	be 01       	movw	r22, r28
    1cca:	82 ef       	ldi	r24, 0xF2	; 242
    1ccc:	93 e0       	ldi	r25, 0x03	; 3
    1cce:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1cd2:	a8 de       	rcall	.-688    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1cd4:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <eeprom_UpdateRegOut>:

void eeprom_UpdateRegOut(){
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) reg_Out, sizeof(reg_Out));
    1ce2:	60 e2       	ldi	r22, 0x20	; 32
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	28 dc       	rcall	.-1968   	; 0x153c <crc16_ram>
    1cec:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1cee:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charRegOut), EE_CHAR_REGOUT);
    1cf2:	62 e7       	ldi	r22, 0x72	; 114
    1cf4:	89 ef       	ldi	r24, 0xF9	; 249
    1cf6:	93 e0       	ldi	r25, 0x03	; 3
    1cf8:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof(reg_Out));
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	6a ef       	ldi	r22, 0xFA	; 250
    1d02:	73 e0       	ldi	r23, 0x03	; 3
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.regOut_crc), crc);
    1d0c:	be 01       	movw	r22, r28
    1d0e:	8a e1       	ldi	r24, 0x1A	; 26
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1d16:	86 de       	rcall	.-756    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1d18:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <eeprom_UpdateCCreg>:

void eeprom_UpdateCCreg(){
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midi_ccReg, sizeof(midi_ccReg));
    1d26:	64 e0       	ldi	r22, 0x04	; 4
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	8c e5       	ldi	r24, 0x5C	; 92
    1d2c:	99 e0       	ldi	r25, 0x09	; 9
    1d2e:	06 dc       	rcall	.-2036   	; 0x153c <crc16_ram>
    1d30:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1d32:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiCCreg), EE_CHAR_CC);
    1d36:	63 e4       	ldi	r22, 0x43	; 67
    1d38:	8c e1       	ldi	r24, 0x1C	; 28
    1d3a:	94 e0       	ldi	r25, 0x04	; 4
    1d3c:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof(midi_ccReg));
    1d40:	44 e0       	ldi	r20, 0x04	; 4
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	6d e1       	ldi	r22, 0x1D	; 29
    1d46:	74 e0       	ldi	r23, 0x04	; 4
    1d48:	8c e5       	ldi	r24, 0x5C	; 92
    1d4a:	99 e0       	ldi	r25, 0x09	; 9
    1d4c:	0e 94 08 41 	call	0x8210	; 0x8210 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiCCreg_crc), crc);
    1d50:	be 01       	movw	r22, r28
    1d52:	81 e2       	ldi	r24, 0x21	; 33
    1d54:	94 e0       	ldi	r25, 0x04	; 4
    1d56:	0e 94 29 41 	call	0x8252	; 0x8252 <eeprom_update_word>
	eepromWriteSignature();
    1d5a:	64 de       	rcall	.-824    	; 0x1a24 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1d5c:	0e 94 23 40 	call	0x8046	; 0x8046 <lcd_waitSymbolOff>
}
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	08 95       	ret

00001d66 <eeprom_UpdateALL>:


void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1d66:	69 de       	rcall	.-814    	; 0x1a3a <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1d68:	8a de       	rcall	.-748    	; 0x1a7e <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1d6a:	ab de       	rcall	.-682    	; 0x1ac2 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1d6c:	da de       	rcall	.-588    	; 0x1b22 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1d6e:	03 df       	rcall	.-506    	; 0x1b76 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1d70:	44 df       	rcall	.-376    	; 0x1bfa <eeprom_UpdateReg>
	eeprom_UpdateProg();
    1d72:	71 df       	rcall	.-286    	; 0x1c56 <eeprom_UpdateProg>
    1d74:	92 df       	rcall	.-220    	; 0x1c9a <eeprom_UpdateSoftkeys>
	eeprom_UpdateSoftkeys();
    1d76:	1f df       	rcall	.-450    	; 0x1bb6 <eeprom_UpdateMidiThrough>
    1d78:	b2 df       	rcall	.-156    	; 0x1cde <eeprom_UpdateRegOut>
	eeprom_UpdateMidiThrough();
    1d7a:	d3 cf       	rjmp	.-90     	; 0x1d22 <eeprom_UpdateCCreg>
    1d7c:	08 95       	ret

00001d7e <eepromCopy>:
	eeprom_UpdateRegOut();
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
	eeprom_UpdateCCreg();
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1d90:	11 c0       	rjmp	.+34     	; 0x1db4 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1d92:	7c 01       	movw	r14, r24
    1d94:	2f ef       	ldi	r18, 0xFF	; 255
    1d96:	e2 1a       	sub	r14, r18
    1d98:	f2 0a       	sbc	r15, r18
    1d9a:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <eeprom_read_byte>
    1d9e:	6e 01       	movw	r12, r28
    1da0:	9f ef       	ldi	r25, 0xFF	; 255
    1da2:	c9 1a       	sub	r12, r25
    1da4:	d9 0a       	sbc	r13, r25
    1da6:	68 2f       	mov	r22, r24
    1da8:	ce 01       	movw	r24, r28
    1daa:	0e 94 17 41 	call	0x822e	; 0x822e <eeprom_update_byte>
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1dae:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1db0:	e6 01       	movw	r28, r12
    1db2:	c7 01       	movw	r24, r14
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1db4:	8a 01       	movw	r16, r20
    1db6:	01 50       	subi	r16, 0x01	; 1
    1db8:	11 09       	sbc	r17, r1
    1dba:	45 2b       	or	r20, r21
    1dbc:	51 f7       	brne	.-44     	; 0x1d92 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	08 95       	ret

00001dd0 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1dd0:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	58 e0       	ldi	r21, 0x08	; 8
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	78 e0       	ldi	r23, 0x08	; 8
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	ce df       	rcall	.-100    	; 0x1d7e <eepromCopy>
	lcd_waitSymbolOff();
    1de2:	0c 94 23 40 	jmp	0x8046	; 0x8046 <lcd_waitSymbolOff>
    1de6:	08 95       	ret

00001de8 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1de8:	0e 94 15 40 	call	0x802a	; 0x802a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	58 e0       	ldi	r21, 0x08	; 8
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	98 e0       	ldi	r25, 0x08	; 8
    1df8:	c2 df       	rcall	.-124    	; 0x1d7e <eepromCopy>
	lcd_waitSymbolOff();
    1dfa:	0c 94 23 40 	jmp	0x8046	; 0x8046 <lcd_waitSymbolOff>
    1dfe:	08 95       	ret

00001e00 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	0a c0       	rjmp	.+20     	; 0x1e18 <init_Timers+0x18>
    1e04:	e8 2f       	mov	r30, r24
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	e0 5b       	subi	r30, 0xB0	; 176
    1e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
    1e12:	90 83       	st	Z, r25
    1e14:	11 82       	std	Z+1, r1	; 0x01
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	8b 30       	cpi	r24, 0x0B	; 11
    1e1a:	a0 f3       	brcs	.-24     	; 0x1e04 <init_Timers+0x4>
    1e1c:	e6 e6       	ldi	r30, 0x66	; 102
    1e1e:	f2 e0       	ldi	r31, 0x02	; 2
    1e20:	10 82       	st	Z, r1
    1e22:	11 82       	std	Z+1, r1	; 0x01
    1e24:	12 82       	std	Z+2, r1	; 0x02
    1e26:	13 82       	std	Z+3, r1	; 0x03
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <time_UpTimeUpdated>
    1e2e:	08 95       	ret

00001e30 <init_HwTimer>:
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	84 bd       	out	0x24, r24	; 36
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	95 bd       	out	0x25, r25	; 37
    1e38:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1e3c:	89 ef       	ldi	r24, 0xF9	; 249
    1e3e:	87 bd       	out	0x27, r24	; 39
    1e40:	85 b1       	in	r24, 0x05	; 5
    1e42:	8f 77       	andi	r24, 0x7F	; 127
    1e44:	85 b9       	out	0x05, r24	; 5
    1e46:	84 b1       	in	r24, 0x04	; 4
    1e48:	80 68       	ori	r24, 0x80	; 128
    1e4a:	84 b9       	out	0x04, r24	; 4
    1e4c:	08 95       	ret

00001e4e <init_ADC>:
    1e4e:	87 e8       	ldi	r24, 0x87	; 135
    1e50:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1e54:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1e58:	8f e7       	ldi	r24, 0x7F	; 127
    1e5a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1e64:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1e68:	ee e6       	ldi	r30, 0x6E	; 110
    1e6a:	f3 e0       	ldi	r31, 0x03	; 3
    1e6c:	10 82       	st	Z, r1
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	81 83       	std	Z+1, r24	; 0x01
    1e72:	82 83       	std	Z+2, r24	; 0x02
    1e74:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	10 c0       	rjmp	.+32     	; 0x1e9c <init_ADC+0x4e>
    1e7c:	85 30       	cpi	r24, 0x05	; 5
    1e7e:	39 f4       	brne	.+14     	; 0x1e8e <init_ADC+0x40>
    1e80:	e8 2f       	mov	r30, r24
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	ec 58       	subi	r30, 0x8C	; 140
    1e86:	fc 4f       	sbci	r31, 0xFC	; 252
    1e88:	96 e0       	ldi	r25, 0x06	; 6
    1e8a:	90 83       	st	Z, r25
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <init_ADC+0x4c>
    1e8e:	e8 2f       	mov	r30, r24
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	ec 58       	subi	r30, 0x8C	; 140
    1e94:	fc 4f       	sbci	r31, 0xFC	; 252
    1e96:	9a e0       	ldi	r25, 0x0A	; 10
    1e98:	90 83       	st	Z, r25
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	86 30       	cpi	r24, 0x06	; 6
    1e9e:	70 f3       	brcs	.-36     	; 0x1e7c <init_ADC+0x2e>
    1ea0:	08 95       	ret

00001ea2 <init_Pipe>:
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	88 b9       	out	0x08, r24	; 8
    1ea6:	87 b9       	out	0x07, r24	; 7
    1ea8:	82 b9       	out	0x02, r24	; 2
    1eaa:	11 b8       	out	0x01, r1	; 1
    1eac:	84 b3       	in	r24, 0x14	; 20
    1eae:	87 60       	ori	r24, 0x07	; 7
    1eb0:	84 bb       	out	0x14, r24	; 20
    1eb2:	83 b3       	in	r24, 0x13	; 19
    1eb4:	87 60       	ori	r24, 0x07	; 7
    1eb6:	83 bb       	out	0x13, r24	; 19
    1eb8:	8b b1       	in	r24, 0x0b	; 11
    1eba:	8f 77       	andi	r24, 0x7F	; 127
    1ebc:	8b b9       	out	0x0b, r24	; 11
    1ebe:	8a b1       	in	r24, 0x0a	; 10
    1ec0:	80 68       	ori	r24, 0x80	; 128
    1ec2:	8a b9       	out	0x0a, r24	; 10
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <init_Pipe+0x42>
    1ec8:	e8 2f       	mov	r30, r24
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e2 59       	subi	r30, 0x92	; 146
    1eda:	fd 4f       	sbci	r31, 0xFD	; 253
    1edc:	9f ef       	ldi	r25, 0xFF	; 255
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	90 83       	st	Z, r25
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	80 32       	cpi	r24, 0x20	; 32
    1ee6:	80 f3       	brcs	.-32     	; 0x1ec8 <init_Pipe+0x26>
    1ee8:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <pipeProcessing>
    1eec:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <pipe_PowerStatus>
    1ef0:	08 95       	ret

00001ef2 <init_PipeModules>:
    1ef2:	5c dc       	rcall	.-1864   	; 0x17ac <eeprom_ReadModules>
    1ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef6:	59 f4       	brne	.+22     	; 0x1f0e <init_PipeModules+0x1c>
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
    1f04:	ea e7       	ldi	r30, 0x7A	; 122
    1f06:	f3 e0       	ldi	r31, 0x03	; 3
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	80 83       	st	Z, r24
    1f0c:	81 83       	std	Z+1, r24	; 0x01
    1f0e:	8b b1       	in	r24, 0x0b	; 11
    1f10:	8f 77       	andi	r24, 0x7F	; 127
    1f12:	8b b9       	out	0x0b, r24	; 11
    1f14:	84 b3       	in	r24, 0x14	; 20
    1f16:	87 60       	ori	r24, 0x07	; 7
    1f18:	84 bb       	out	0x14, r24	; 20
    1f1a:	84 b3       	in	r24, 0x14	; 20
    1f1c:	8b 7f       	andi	r24, 0xFB	; 251
    1f1e:	84 bb       	out	0x14, r24	; 20
    1f20:	85 e0       	ldi	r24, 0x05	; 5
    1f22:	8a 95       	dec	r24
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <init_PipeModules+0x30>
    1f26:	00 00       	nop
    1f28:	84 b3       	in	r24, 0x14	; 20
    1f2a:	84 60       	ori	r24, 0x04	; 4
    1f2c:	84 bb       	out	0x14, r24	; 20
    1f2e:	90 e2       	ldi	r25, 0x20	; 32
    1f30:	84 b3       	in	r24, 0x14	; 20
    1f32:	81 60       	ori	r24, 0x01	; 1
    1f34:	84 bb       	out	0x14, r24	; 20
    1f36:	90 fd       	sbrc	r25, 0
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <init_PipeModules+0x4c>
    1f3a:	85 e5       	ldi	r24, 0x55	; 85
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <init_PipeModules+0x4e>
    1f3e:	8a ea       	ldi	r24, 0xAA	; 170
    1f40:	88 b9       	out	0x08, r24	; 8
    1f42:	80 b1       	in	r24, 0x00	; 0
    1f44:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <pipe+0xff>
    1f48:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <pipe+0xfe>
    1f4c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <pipe+0xfd>
    1f50:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <pipe+0xfc>
    1f54:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pipe+0xfb>
    1f58:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pipe+0xfa>
    1f5c:	84 b3       	in	r24, 0x14	; 20
    1f5e:	8e 7f       	andi	r24, 0xFE	; 254
    1f60:	84 bb       	out	0x14, r24	; 20
    1f62:	85 e0       	ldi	r24, 0x05	; 5
    1f64:	8a 95       	dec	r24
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <init_PipeModules+0x72>
    1f68:	00 00       	nop
    1f6a:	91 50       	subi	r25, 0x01	; 1
    1f6c:	09 f7       	brne	.-62     	; 0x1f30 <init_PipeModules+0x3e>
    1f6e:	90 e2       	ldi	r25, 0x20	; 32
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <init_PipeModules+0x9e>
    1f72:	84 b3       	in	r24, 0x14	; 20
    1f74:	81 60       	ori	r24, 0x01	; 1
    1f76:	84 bb       	out	0x14, r24	; 20
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	8a 95       	dec	r24
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <init_PipeModules+0x88>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <init_PipeModules+0x8e>
    1f80:	84 b3       	in	r24, 0x14	; 20
    1f82:	8e 7f       	andi	r24, 0xFE	; 254
    1f84:	84 bb       	out	0x14, r24	; 20
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	8a 95       	dec	r24
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <init_PipeModules+0x96>
    1f8c:	00 c0       	rjmp	.+0      	; 0x1f8e <init_PipeModules+0x9c>
    1f8e:	91 50       	subi	r25, 0x01	; 1
    1f90:	91 11       	cpse	r25, r1
    1f92:	ef cf       	rjmp	.-34     	; 0x1f72 <init_PipeModules+0x80>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <pipe_ModuleTested>
    1f9a:	90 e2       	ldi	r25, 0x20	; 32
    1f9c:	84 b3       	in	r24, 0x14	; 20
    1f9e:	81 60       	ori	r24, 0x01	; 1
    1fa0:	84 bb       	out	0x14, r24	; 20
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	88 b9       	out	0x08, r24	; 8
    1fa6:	20 b1       	in	r18, 0x00	; 0
    1fa8:	90 fd       	sbrc	r25, 0
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <init_PipeModules+0xbe>
    1fac:	8a ea       	ldi	r24, 0xAA	; 170
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <init_PipeModules+0xc0>
    1fb0:	85 e5       	ldi	r24, 0x55	; 85
    1fb2:	82 27       	eor	r24, r18
    1fb4:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <pipe_ModuleTested>
    1fb8:	82 23       	and	r24, r18
    1fba:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <pipe_ModuleTested>
    1fbe:	84 b3       	in	r24, 0x14	; 20
    1fc0:	8e 7f       	andi	r24, 0xFE	; 254
    1fc2:	84 bb       	out	0x14, r24	; 20
    1fc4:	85 e0       	ldi	r24, 0x05	; 5
    1fc6:	8a 95       	dec	r24
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <init_PipeModules+0xd4>
    1fca:	00 00       	nop
    1fcc:	91 50       	subi	r25, 0x01	; 1
    1fce:	31 f7       	brne	.-52     	; 0x1f9c <init_PipeModules+0xaa>
    1fd0:	00 00       	nop
    1fd2:	00 00       	nop
    1fd4:	84 b3       	in	r24, 0x14	; 20
    1fd6:	81 60       	ori	r24, 0x01	; 1
    1fd8:	84 bb       	out	0x14, r24	; 20
    1fda:	84 b3       	in	r24, 0x14	; 20
    1fdc:	87 60       	ori	r24, 0x07	; 7
    1fde:	84 bb       	out	0x14, r24	; 20
    1fe0:	84 b3       	in	r24, 0x14	; 20
    1fe2:	8b 7f       	andi	r24, 0xFB	; 251
    1fe4:	84 bb       	out	0x14, r24	; 20
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	8a 95       	dec	r24
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <init_PipeModules+0xf6>
    1fec:	00 c0       	rjmp	.+0      	; 0x1fee <init_PipeModules+0xfc>
    1fee:	84 b3       	in	r24, 0x14	; 20
    1ff0:	84 60       	ori	r24, 0x04	; 4
    1ff2:	84 bb       	out	0x14, r24	; 20
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	e6 e6       	ldi	r30, 0x66	; 102
    1ff8:	f3 e0       	ldi	r31, 0x03	; 3
    1ffa:	83 81       	ldd	r24, Z+3	; 0x03
    1ffc:	82 83       	std	Z+2, r24	; 0x02
    1ffe:	84 81       	ldd	r24, Z+4	; 0x04
    2000:	83 83       	std	Z+3, r24	; 0x03
    2002:	84 b3       	in	r24, 0x14	; 20
    2004:	81 60       	ori	r24, 0x01	; 1
    2006:	84 bb       	out	0x14, r24	; 20
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	81 83       	std	Z+1, r24	; 0x01
    200c:	88 b9       	out	0x08, r24	; 8
    200e:	85 81       	ldd	r24, Z+5	; 0x05
    2010:	84 83       	std	Z+4, r24	; 0x04
    2012:	86 81       	ldd	r24, Z+6	; 0x06
    2014:	85 83       	std	Z+5, r24	; 0x05
    2016:	80 b1       	in	r24, 0x00	; 0
    2018:	86 83       	std	Z+6, r24	; 0x06
    201a:	82 83       	std	Z+2, r24	; 0x02
    201c:	83 83       	std	Z+3, r24	; 0x03
    201e:	84 83       	std	Z+4, r24	; 0x04
    2020:	85 83       	std	Z+5, r24	; 0x05
    2022:	87 83       	std	Z+7, r24	; 0x07
    2024:	84 b3       	in	r24, 0x14	; 20
    2026:	8e 7f       	andi	r24, 0xFE	; 254
    2028:	84 bb       	out	0x14, r24	; 20
    202a:	38 97       	sbiw	r30, 0x08	; 8
    202c:	91 50       	subi	r25, 0x01	; 1
    202e:	29 f7       	brne	.-54     	; 0x1ffa <init_PipeModules+0x108>
    2030:	00 00       	nop
    2032:	00 00       	nop
    2034:	84 b3       	in	r24, 0x14	; 20
    2036:	81 60       	ori	r24, 0x01	; 1
    2038:	84 bb       	out	0x14, r24	; 20
    203a:	84 b3       	in	r24, 0x14	; 20
    203c:	8d 7f       	andi	r24, 0xFD	; 253
    203e:	84 bb       	out	0x14, r24	; 20
    2040:	18 b8       	out	0x08, r1	; 8
    2042:	85 e0       	ldi	r24, 0x05	; 5
    2044:	8a 95       	dec	r24
    2046:	f1 f7       	brne	.-4      	; 0x2044 <init_PipeModules+0x152>
    2048:	00 00       	nop
    204a:	84 b3       	in	r24, 0x14	; 20
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	84 bb       	out	0x14, r24	; 20
    2050:	ea e7       	ldi	r30, 0x7A	; 122
    2052:	f3 e0       	ldi	r31, 0x03	; 3
    2054:	81 81       	ldd	r24, Z+1	; 0x01
    2056:	40 81       	ld	r20, Z
    2058:	84 2b       	or	r24, r20
    205a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <pipe_ModuleTested>
    205e:	89 17       	cp	r24, r25
    2060:	39 f0       	breq	.+14     	; 0x2070 <init_PipeModules+0x17e>
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	54 2f       	mov	r21, r20
    2066:	44 27       	eor	r20, r20
    2068:	49 2b       	or	r20, r25
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	a8 c7       	rjmp	.+3920   	; 0x2fc0 <log_putError>
    2070:	08 95       	ret

00002072 <test_PipeModule>:
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	08 f0       	brcs	.+2      	; 0x2078 <test_PipeModule+0x6>
    2076:	6a c0       	rjmp	.+212    	; 0x214c <test_PipeModule+0xda>
    2078:	31 e0       	ldi	r19, 0x01	; 1
    207a:	01 c0       	rjmp	.+2      	; 0x207e <test_PipeModule+0xc>
    207c:	33 0f       	add	r19, r19
    207e:	8a 95       	dec	r24
    2080:	ea f7       	brpl	.-6      	; 0x207c <test_PipeModule+0xa>
    2082:	80 e8       	ldi	r24, 0x80	; 128
    2084:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipeProcessing>
    2088:	8b b1       	in	r24, 0x0b	; 11
    208a:	8f 77       	andi	r24, 0x7F	; 127
    208c:	8b b9       	out	0x0b, r24	; 11
    208e:	84 b3       	in	r24, 0x14	; 20
    2090:	87 60       	ori	r24, 0x07	; 7
    2092:	84 bb       	out	0x14, r24	; 20
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	1d c0       	rjmp	.+58     	; 0x20d2 <test_PipeModule+0x60>
    2098:	20 fd       	sbrc	r18, 0
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <test_PipeModule+0x30>
    209c:	83 2f       	mov	r24, r19
    209e:	80 95       	com	r24
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <test_PipeModule+0x32>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	88 b9       	out	0x08, r24	; 8
    20a6:	26 95       	lsr	r18
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	8a 95       	dec	r24
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <test_PipeModule+0x38>
    20ae:	00 c0       	rjmp	.+0      	; 0x20b0 <test_PipeModule+0x3e>
    20b0:	84 b3       	in	r24, 0x14	; 20
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	84 bb       	out	0x14, r24	; 20
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	8a 95       	dec	r24
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <test_PipeModule+0x46>
    20bc:	00 c0       	rjmp	.+0      	; 0x20be <test_PipeModule+0x4c>
    20be:	84 b3       	in	r24, 0x14	; 20
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	84 bb       	out	0x14, r24	; 20
    20c4:	9f 5f       	subi	r25, 0xFF	; 255
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <test_PipeModule+0x5a>
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	25 ea       	ldi	r18, 0xA5	; 165
    20cc:	98 30       	cpi	r25, 0x08	; 8
    20ce:	20 f3       	brcs	.-56     	; 0x2098 <test_PipeModule+0x26>
    20d0:	4f 5f       	subi	r20, 0xFF	; 255
    20d2:	44 30       	cpi	r20, 0x04	; 4
    20d4:	c8 f3       	brcs	.-14     	; 0x20c8 <test_PipeModule+0x56>
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <test_PipeModule+0x86>
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	8a 95       	dec	r24
    20de:	f1 f7       	brne	.-4      	; 0x20dc <test_PipeModule+0x6a>
    20e0:	00 c0       	rjmp	.+0      	; 0x20e2 <test_PipeModule+0x70>
    20e2:	84 b3       	in	r24, 0x14	; 20
    20e4:	8e 7f       	andi	r24, 0xFE	; 254
    20e6:	84 bb       	out	0x14, r24	; 20
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	8a 95       	dec	r24
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <test_PipeModule+0x78>
    20ee:	00 c0       	rjmp	.+0      	; 0x20f0 <test_PipeModule+0x7e>
    20f0:	84 b3       	in	r24, 0x14	; 20
    20f2:	81 60       	ori	r24, 0x01	; 1
    20f4:	84 bb       	out	0x14, r24	; 20
    20f6:	9f 5f       	subi	r25, 0xFF	; 255
    20f8:	90 32       	cpi	r25, 0x20	; 32
    20fa:	78 f3       	brcs	.-34     	; 0x20da <test_PipeModule+0x68>
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	ba 01       	movw	r22, r20
    2104:	17 c0       	rjmp	.+46     	; 0x2134 <test_PipeModule+0xc2>
    2106:	44 0f       	add	r20, r20
    2108:	55 1f       	adc	r21, r21
    210a:	66 1f       	adc	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	8a 95       	dec	r24
    2112:	f1 f7       	brne	.-4      	; 0x2110 <test_PipeModule+0x9e>
    2114:	00 c0       	rjmp	.+0      	; 0x2116 <test_PipeModule+0xa4>
    2116:	84 b3       	in	r24, 0x14	; 20
    2118:	8e 7f       	andi	r24, 0xFE	; 254
    211a:	84 bb       	out	0x14, r24	; 20
    211c:	80 b1       	in	r24, 0x00	; 0
    211e:	83 23       	and	r24, r19
    2120:	09 f0       	breq	.+2      	; 0x2124 <test_PipeModule+0xb2>
    2122:	41 60       	ori	r20, 0x01	; 1
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	8a 95       	dec	r24
    2128:	f1 f7       	brne	.-4      	; 0x2126 <test_PipeModule+0xb4>
    212a:	00 c0       	rjmp	.+0      	; 0x212c <test_PipeModule+0xba>
    212c:	84 b3       	in	r24, 0x14	; 20
    212e:	81 60       	ori	r24, 0x01	; 1
    2130:	84 bb       	out	0x14, r24	; 20
    2132:	9f 5f       	subi	r25, 0xFF	; 255
    2134:	90 32       	cpi	r25, 0x20	; 32
    2136:	38 f3       	brcs	.-50     	; 0x2106 <test_PipeModule+0x94>
    2138:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <pipeProcessing>
    213c:	8b b1       	in	r24, 0x0b	; 11
    213e:	80 68       	ori	r24, 0x80	; 128
    2140:	8b b9       	out	0x0b, r24	; 11
    2142:	34 2f       	mov	r19, r20
    2144:	25 2f       	mov	r18, r21
    2146:	86 2f       	mov	r24, r22
    2148:	97 2f       	mov	r25, r23
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <test_PipeModule+0xe2>
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	63 2f       	mov	r22, r19
    2156:	72 2f       	mov	r23, r18
    2158:	08 95       	ret

0000215a <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    215a:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    215c:	ee e6       	ldi	r30, 0x6E	; 110
    215e:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    2160:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off -> but should already be off, since read takes some time
    2164:	2f ef       	ldi	r18, 0xFF	; 255
    2166:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    2168:	26 81       	ldd	r18, Z+6	; 0x06
    216a:	82 2b       	or	r24, r18
		pPipe++;
    216c:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    216e:	9f 5f       	subi	r25, 0xFF	; 255
    2170:	90 32       	cpi	r25, 0x20	; 32
    2172:	c0 f3       	brcs	.-16     	; 0x2164 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off -> but should already be off, since read takes some time
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    2174:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <pipe_Module>
    2178:	89 23       	and	r24, r25
    217a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <pipe_ModuleTested>
}
    217e:	89 23       	and	r24, r25
    2180:	08 95       	ret

00002182 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    2182:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2186:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    218a:	81 ff       	sbrs	r24, 1
    218c:	fc cf       	rjmp	.-8      	; 0x2186 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    218e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2192:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    2196:	81 ff       	sbrs	r24, 1
    2198:	fc cf       	rjmp	.-8      	; 0x2192 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    219a:	08 95       	ret

0000219c <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    21a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21a4:	f8 94       	cli
    21a6:	06 c0       	rjmp	.+12     	; 0x21b4 <module_StartPowerOn+0x18>
    21a8:	e0 e5       	ldi	r30, 0x50	; 80
    21aa:	f2 e0       	ldi	r31, 0x02	; 2
    21ac:	88 e2       	ldi	r24, 0x28	; 40
    21ae:	82 83       	std	Z+2, r24	; 0x02
    21b0:	13 82       	std	Z+3, r1	; 0x03
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	81 11       	cpse	r24, r1
    21b6:	f8 cf       	rjmp	.-16     	; 0x21a8 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21b8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    21ba:	08 95       	ret

000021bc <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    21bc:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pipe_PowerStatus>
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	31 f5       	brne	.+76     	; 0x2210 <__stack+0x11>
		// part1: now check inputs
		if (module_TestAllInputs() == 0){
    21c4:	ca df       	rcall	.-108    	; 0x215a <module_TestAllInputs>
    21c6:	81 11       	cpse	r24, r1
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <module_PowerControl+0x36>
			// all inputs are low, no key is pressed, no register active, start power on and wait a little bit
			POWER_ON
    21ca:	85 b1       	in	r24, 0x05	; 5
    21cc:	80 64       	ori	r24, 0x40	; 64
    21ce:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    21d0:	82 e1       	ldi	r24, 0x12	; 18
    21d2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    21d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21d8:	f8 94       	cli
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <module_PowerControl+0x2e>
    21de:	e0 e5       	ldi	r30, 0x50	; 80
    21e0:	f2 e0       	ldi	r31, 0x02	; 2
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	82 83       	std	Z+2, r24	; 0x02
    21e6:	13 82       	std	Z+3, r1	; 0x03
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	81 11       	cpse	r24, r1
    21ec:	f8 cf       	rjmp	.-16     	; 0x21de <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21ee:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    21f0:	08 95       	ret
		} else {
			// keys are not released: wait some time and then test again
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    21f2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21f4:	f8 94       	cli
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	07 c0       	rjmp	.+14     	; 0x2208 <__stack+0x9>
    21fa:	e0 e5       	ldi	r30, 0x50	; 80
    21fc:	f2 e0       	ldi	r31, 0x02	; 2
    21fe:	8c e0       	ldi	r24, 0x0C	; 12
    2200:	82 83       	std	Z+2, r24	; 0x02
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	83 83       	std	Z+3, r24	; 0x03
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	81 11       	cpse	r24, r1
    220a:	f7 cf       	rjmp	.-18     	; 0x21fa <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    220c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    220e:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2210:	82 31       	cpi	r24, 0x12	; 18
		// part2: power is on for some time, test if every input is still inactive
		uint8_t testResult = module_TestAllInputs();
    2212:	b1 f4       	brne	.+44     	; 0x2240 <__stack+0x41>
    2214:	a2 df       	rcall	.-188    	; 0x215a <module_TestAllInputs>
		if (testResult == 0){
    2216:	81 11       	cpse	r24, r1
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <__stack+0x23>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    221a:	84 e1       	ldi	r24, 0x14	; 20
    221c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
    2220:	0b c0       	rjmp	.+22     	; 0x2238 <__stack+0x39>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    2222:	48 2f       	mov	r20, r24
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	85 e0       	ldi	r24, 0x05	; 5
    222a:	ca d6       	rcall	.+3476   	; 0x2fc0 <log_putError>
			POWER_OFF
    222c:	85 b1       	in	r24, 0x05	; 5
    222e:	8f 7b       	andi	r24, 0xBF	; 191
    2230:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    2232:	80 e8       	ldi	r24, 0x80	; 128
    2234:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    223e:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    2246:	08 95       	ret

00002248 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, 1= 0 for want longpress
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0d c0       	rjmp	.+26     	; 0x2266 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    224c:	94 30       	cpi	r25, 0x04	; 4
    224e:	50 f4       	brcc	.+20     	; 0x2264 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    2250:	e9 2f       	mov	r30, r25
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	81 11       	cpse	r24, r1
    2256:	02 c0       	rjmp	.+4      	; 0x225c <softKey_WantLong+0x14>
    2258:	2a e0       	ldi	r18, 0x0A	; 10
    225a:	01 c0       	rjmp	.+2      	; 0x225e <softKey_WantLong+0x16>
    225c:	26 e0       	ldi	r18, 0x06	; 6
    225e:	ec 58       	subi	r30, 0x8C	; 140
    2260:	fc 4f       	sbci	r31, 0xFC	; 252
    2262:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, 1= 0 for want longpress
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    2264:	9f 5f       	subi	r25, 0xFF	; 255
    2266:	96 30       	cpi	r25, 0x06	; 6
    2268:	88 f3       	brcs	.-30     	; 0x224c <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    226a:	08 95       	ret

0000226c <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    226c:	1f 92       	push	r1
    226e:	0f 92       	push	r0
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	0f 92       	push	r0
    2274:	11 24       	eor	r1, r1
    2276:	0b b6       	in	r0, 0x3b	; 59
    2278:	0f 92       	push	r0
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	2f 93       	push	r18
    2284:	3f 93       	push	r19
    2286:	4f 93       	push	r20
    2288:	5f 93       	push	r21
    228a:	6f 93       	push	r22
    228c:	7f 93       	push	r23
    228e:	8f 93       	push	r24
    2290:	9f 93       	push	r25
    2292:	af 93       	push	r26
    2294:	bf 93       	push	r27
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	ef 93       	push	r30
    229c:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    229e:	85 b1       	in	r24, 0x05	; 5
    22a0:	80 68       	ori	r24, 0x80	; 128
    22a2:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    22a4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <msecCtr>
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <msecCtr>
    22ae:	83 70       	andi	r24, 0x03	; 3
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__vector_21+0x4a>
    22b4:	58 c1       	rjmp	.+688    	; 0x2566 <__vector_21+0x2fa>
    22b6:	38 f0       	brcs	.+14     	; 0x22c6 <__vector_21+0x5a>
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	09 f4       	brne	.+2      	; 0x22be <__vector_21+0x52>
    22bc:	a5 c1       	rjmp	.+842    	; 0x2608 <__vector_21+0x39c>
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <__vector_21+0x58>
    22c2:	ca c1       	rjmp	.+916    	; 0x2658 <__vector_21+0x3ec>
    22c4:	05 c2       	rjmp	.+1034   	; 0x26d0 <__vector_21+0x464>
//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	// main task for ADC is read analog "key line". Resistor ladder transform key press to input voltage
	// will call message_push() then
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    22c6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    22ca:	81 11       	cpse	r24, r1
    22cc:	1a c1       	rjmp	.+564    	; 0x2502 <__vector_21+0x296>
    22ce:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    22d2:	96 fd       	sbrc	r25, 6
    22d4:	16 c1       	rjmp	.+556    	; 0x2502 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f9 01       	movw	r30, r18
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	e2 0f       	add	r30, r18
    22e2:	f3 1f       	adc	r31, r19
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	e2 59       	subi	r30, 0x92	; 146
    22ea:	fc 4f       	sbci	r31, 0xFC	; 252
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    22ee:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    22f2:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    22f4:	49 17       	cp	r20, r25
    22f6:	10 f4       	brcc	.+4      	; 0x22fc <__vector_21+0x90>
		return data1-data2;
    22f8:	94 1b       	sub	r25, r20
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <__vector_21+0x96>
	} else {
		return data2-data1;
    22fc:	54 2f       	mov	r21, r20
    22fe:	59 1b       	sub	r21, r25
    2300:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    2302:	94 30       	cpi	r25, 0x04	; 4
    2304:	08 f0       	brcs	.+2      	; 0x2308 <__vector_21+0x9c>
    2306:	fd c0       	rjmp	.+506    	; 0x2502 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    2308:	81 11       	cpse	r24, r1
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    230c:	42 32       	cpi	r20, 0x22	; 34
    230e:	70 f0       	brcs	.+28     	; 0x232c <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    2310:	4f 33       	cpi	r20, 0x3F	; 63
    2312:	70 f0       	brcs	.+28     	; 0x2330 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    2314:	48 36       	cpi	r20, 0x68	; 104
    2316:	70 f0       	brcs	.+28     	; 0x2334 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    2318:	46 39       	cpi	r20, 0x96	; 150
    231a:	70 f0       	brcs	.+28     	; 0x2338 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    231c:	4f 3b       	cpi	r20, 0xBF	; 191
    231e:	70 f0       	brcs	.+28     	; 0x233c <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    2320:	48 3e       	cpi	r20, 0xE8	; 232
    2322:	70 f4       	brcc	.+28     	; 0x2340 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    2324:	c6 e0       	ldi	r28, 0x06	; 6
    2326:	0d c0       	rjmp	.+26     	; 0x2342 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    2328:	cf ef       	ldi	r28, 0xFF	; 255
    232a:	0b c0       	rjmp	.+22     	; 0x2342 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    232c:	c4 e0       	ldi	r28, 0x04	; 4
    232e:	09 c0       	rjmp	.+18     	; 0x2342 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    2330:	c3 e0       	ldi	r28, 0x03	; 3
    2332:	07 c0       	rjmp	.+14     	; 0x2342 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    2334:	c5 e0       	ldi	r28, 0x05	; 5
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    2338:	c1 e0       	ldi	r28, 0x01	; 1
    233a:	03 c0       	rjmp	.+6      	; 0x2342 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    233c:	c2 e0       	ldi	r28, 0x02	; 2
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    2340:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    2342:	f9 01       	movw	r30, r18
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	e2 59       	subi	r30, 0x92	; 146
    2352:	fc 4f       	sbci	r31, 0xFC	; 252
    2354:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    2356:	dc 17       	cp	r29, r28
    2358:	09 f4       	brne	.+2      	; 0x235c <__vector_21+0xf0>
    235a:	48 c0       	rjmp	.+144    	; 0x23ec <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    235c:	df 3f       	cpi	r29, 0xFF	; 255
    235e:	19 f0       	breq	.+6      	; 0x2366 <__vector_21+0xfa>
    2360:	cf 3f       	cpi	r28, 0xFF	; 255
    2362:	09 f0       	breq	.+2      	; 0x2366 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    2364:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    2366:	f9 01       	movw	r30, r18
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	e2 59       	subi	r30, 0x92	; 146
    2376:	fc 4f       	sbci	r31, 0xFC	; 252
    2378:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    237a:	df 3f       	cpi	r29, 0xFF	; 255
    237c:	f9 f4       	brne	.+62     	; 0x23bc <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    237e:	c9 01       	movw	r24, r18
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	fc 01       	movw	r30, r24
    2386:	e2 0f       	add	r30, r18
    2388:	f3 1f       	adc	r31, r19
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	e2 59       	subi	r30, 0x92	; 146
    2390:	fc 4f       	sbci	r31, 0xFC	; 252
    2392:	15 82       	std	Z+5, r1	; 0x05
    2394:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	e2 59       	subi	r30, 0x92	; 146
    23a2:	fc 4f       	sbci	r31, 0xFC	; 252
    23a4:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    23a6:	ec 2f       	mov	r30, r28
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	ed 58       	subi	r30, 0x8D	; 141
    23ac:	fc 4f       	sbci	r31, 0xFC	; 252
    23ae:	80 81       	ld	r24, Z
    23b0:	80 ff       	sbrs	r24, 0
    23b2:	a7 c0       	rjmp	.+334    	; 0x2502 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    23b4:	8c 2f       	mov	r24, r28
    23b6:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
    23ba:	a3 c0       	rjmp	.+326    	; 0x2502 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    23bc:	ed 2f       	mov	r30, r29
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	ed 58       	subi	r30, 0x8D	; 141
    23c2:	fc 4f       	sbci	r31, 0xFC	; 252
    23c4:	80 81       	ld	r24, Z
    23c6:	81 ff       	sbrs	r24, 1
    23c8:	9c c0       	rjmp	.+312    	; 0x2502 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    23ca:	f9 01       	movw	r30, r18
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	e2 0f       	add	r30, r18
    23d2:	f3 1f       	adc	r31, r19
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	e2 59       	subi	r30, 0x92	; 146
    23da:	fc 4f       	sbci	r31, 0xFC	; 252
    23dc:	83 81       	ldd	r24, Z+3	; 0x03
    23de:	83 70       	andi	r24, 0x03	; 3
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <__vector_21+0x178>
    23e2:	8f c0       	rjmp	.+286    	; 0x2502 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    23e4:	8d 2f       	mov	r24, r29
    23e6:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
    23ea:	8b c0       	rjmp	.+278    	; 0x2502 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    23ec:	cf 3f       	cpi	r28, 0xFF	; 255
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <__vector_21+0x186>
    23f0:	88 c0       	rjmp	.+272    	; 0x2502 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    23f2:	f9 01       	movw	r30, r18
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	df 01       	movw	r26, r30
    23fa:	a2 0f       	add	r26, r18
    23fc:	b3 1f       	adc	r27, r19
    23fe:	aa 0f       	add	r26, r26
    2400:	bb 1f       	adc	r27, r27
    2402:	a2 59       	subi	r26, 0x92	; 146
    2404:	bc 4f       	sbci	r27, 0xFC	; 252
    2406:	14 96       	adiw	r26, 0x04	; 4
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	15 97       	sbiw	r26, 0x05	; 5
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	15 96       	adiw	r26, 0x05	; 5
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
    2416:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    2418:	fd 01       	movw	r30, r26
    241a:	84 81       	ldd	r24, Z+4	; 0x04
    241c:	95 81       	ldd	r25, Z+5	; 0x05
    241e:	8b 34       	cpi	r24, 0x4B	; 75
    2420:	91 05       	cpc	r25, r1
    2422:	a9 f4       	brne	.+42     	; 0x244e <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    2424:	ed 2f       	mov	r30, r29
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	ed 58       	subi	r30, 0x8D	; 141
    242a:	fc 4f       	sbci	r31, 0xFC	; 252
    242c:	80 81       	ld	r24, Z
    242e:	82 ff       	sbrs	r24, 2
    2430:	0e c0       	rjmp	.+28     	; 0x244e <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2432:	8c 2f       	mov	r24, r28
    2434:	80 68       	ori	r24, 0x80	; 128
    2436:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    243a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <adcNr>
    243e:	86 e0       	ldi	r24, 0x06	; 6
    2440:	e8 9f       	mul	r30, r24
    2442:	f0 01       	movw	r30, r0
    2444:	11 24       	eor	r1, r1
    2446:	e2 59       	subi	r30, 0x92	; 146
    2448:	fc 4f       	sbci	r31, 0xFC	; 252
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    244e:	ed 2f       	mov	r30, r29
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	ed 58       	subi	r30, 0x8D	; 141
    2454:	fc 4f       	sbci	r31, 0xFC	; 252
    2456:	80 81       	ld	r24, Z
    2458:	83 ff       	sbrs	r24, 3
    245a:	53 c0       	rjmp	.+166    	; 0x2502 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    245c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	fc 01       	movw	r30, r24
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	e8 0f       	add	r30, r24
    246a:	f9 1f       	adc	r31, r25
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e2 59       	subi	r30, 0x92	; 146
    2472:	fc 4f       	sbci	r31, 0xFC	; 252
    2474:	23 81       	ldd	r18, Z+3	; 0x03
    2476:	21 11       	cpse	r18, r1
    2478:	1e c0       	rjmp	.+60     	; 0x24b6 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    247a:	fc 01       	movw	r30, r24
    247c:	ee 0f       	add	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	e8 0f       	add	r30, r24
    2482:	f9 1f       	adc	r31, r25
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	e2 59       	subi	r30, 0x92	; 146
    248a:	fc 4f       	sbci	r31, 0xFC	; 252
    248c:	24 81       	ldd	r18, Z+4	; 0x04
    248e:	35 81       	ldd	r19, Z+5	; 0x05
    2490:	22 33       	cpi	r18, 0x32	; 50
    2492:	31 05       	cpc	r19, r1
    2494:	b1 f5       	brne	.+108    	; 0x2502 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2496:	26 e0       	ldi	r18, 0x06	; 6
    2498:	28 9f       	mul	r18, r24
    249a:	f0 01       	movw	r30, r0
    249c:	29 9f       	mul	r18, r25
    249e:	f0 0d       	add	r31, r0
    24a0:	11 24       	eor	r1, r1
    24a2:	e2 59       	subi	r30, 0x92	; 146
    24a4:	fc 4f       	sbci	r31, 0xFC	; 252
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    24aa:	15 82       	std	Z+5, r1	; 0x05
    24ac:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    24ae:	8c 2f       	mov	r24, r28
    24b0:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
    24b4:	26 c0       	rjmp	.+76     	; 0x2502 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    24b6:	fc 01       	movw	r30, r24
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	e8 0f       	add	r30, r24
    24be:	f9 1f       	adc	r31, r25
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	e2 59       	subi	r30, 0x92	; 146
    24c6:	fc 4f       	sbci	r31, 0xFC	; 252
    24c8:	23 81       	ldd	r18, Z+3	; 0x03
    24ca:	21 30       	cpi	r18, 0x01	; 1
    24cc:	d1 f4       	brne	.+52     	; 0x2502 <__vector_21+0x296>
    24ce:	26 e0       	ldi	r18, 0x06	; 6
    24d0:	28 9f       	mul	r18, r24
    24d2:	f0 01       	movw	r30, r0
    24d4:	29 9f       	mul	r18, r25
    24d6:	f0 0d       	add	r31, r0
    24d8:	11 24       	eor	r1, r1
    24da:	e2 59       	subi	r30, 0x92	; 146
    24dc:	fc 4f       	sbci	r31, 0xFC	; 252
    24de:	24 81       	ldd	r18, Z+4	; 0x04
    24e0:	35 81       	ldd	r19, Z+5	; 0x05
    24e2:	2c 30       	cpi	r18, 0x0C	; 12
    24e4:	31 05       	cpc	r19, r1
    24e6:	69 f4       	brne	.+26     	; 0x2502 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    24e8:	26 e0       	ldi	r18, 0x06	; 6
    24ea:	28 9f       	mul	r18, r24
    24ec:	f0 01       	movw	r30, r0
    24ee:	29 9f       	mul	r18, r25
    24f0:	f0 0d       	add	r31, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	e2 59       	subi	r30, 0x92	; 146
    24f6:	fc 4f       	sbci	r31, 0xFC	; 252
    24f8:	15 82       	std	Z+5, r1	; 0x05
    24fa:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    24fc:	8c 2f       	mov	r24, r28
    24fe:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2502:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    250c:	84 30       	cpi	r24, 0x04	; 4
    250e:	10 f0       	brcs	.+4      	; 0x2514 <__vector_21+0x2a8>
		adcNr = 0;
    2510:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    2514:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2518:	81 11       	cpse	r24, r1
    251a:	0c c0       	rjmp	.+24     	; 0x2534 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	ee 0f       	add	r30, r30
    2522:	ff 1f       	adc	r31, r31
    2524:	e8 0f       	add	r30, r24
    2526:	f9 1f       	adc	r31, r25
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	e2 59       	subi	r30, 0x92	; 146
    252e:	fc 4f       	sbci	r31, 0xFC	; 252
    2530:	80 81       	ld	r24, Z
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    2534:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2536:	98 2f       	mov	r25, r24
    2538:	9f 71       	andi	r25, 0x1F	; 31
    253a:	90 66       	ori	r25, 0x60	; 96
    253c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2540:	eb e7       	ldi	r30, 0x7B	; 123
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	20 81       	ld	r18, Z
    2546:	80 72       	andi	r24, 0x20	; 32
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	95 95       	asr	r25
    254c:	87 95       	ror	r24
    254e:	95 95       	asr	r25
    2550:	87 95       	ror	r24
    2552:	92 2f       	mov	r25, r18
    2554:	9f 7d       	andi	r25, 0xDF	; 223
    2556:	89 2b       	or	r24, r25
    2558:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    255a:	ea e7       	ldi	r30, 0x7A	; 122
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	80 64       	ori	r24, 0x40	; 64
    2562:	80 83       	st	Z, r24
    2564:	b5 c0       	rjmp	.+362    	; 0x26d0 <__vector_21+0x464>
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0:
			timerADC();
			break; // evetnually timer has also been called (only every 100ms)
		case 1:
			 if (pipeProcessing != PIPE_IO_DISABLE) {
    2566:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    256a:	80 38       	cpi	r24, 0x80	; 128
    256c:	09 f4       	brne	.+2      	; 0x2570 <__vector_21+0x304>
    256e:	b0 c0       	rjmp	.+352    	; 0x26d0 <__vector_21+0x464>
}

static inline void timerPipeIO(){
	// send and receice data to and from modules
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (as they are low active 1=off)
    2570:	84 b3       	in	r24, 0x14	; 20
    2572:	87 60       	ori	r24, 0x07	; 7
    2574:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_ actives input latches from lines so that they can be read serially
    2576:	84 b3       	in	r24, 0x14	; 20
    2578:	8b 7f       	andi	r24, 0xFB	; 251
    257a:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    257c:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <pipe_Module+0x1>
    2580:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2582:	e2 e0       	ldi	r30, 0x02	; 2
    2584:	ea 95       	dec	r30
    2586:	f1 f7       	brne	.-4      	; 0x2584 <__vector_21+0x318>
    2588:	00 c0       	rjmp	.+0      	; 0x258a <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5); // 0.5 us low time for latch pulse.
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    258a:	84 b3       	in	r24, 0x14	; 20
    258c:	84 60       	ori	r24, 0x04	; 4
    258e:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (as they are low active 1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_ actives input latches from lines so that they can be read serially
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2590:	90 e2       	ldi	r25, 0x20	; 32
static inline void timerPipeIO(){
	// send and receice data to and from modules
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (as they are low active 1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_ actives input latches from lines so that they can be read serially
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2592:	e6 e6       	ldi	r30, 0x66	; 102
    2594:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5); // 0.5 us low time for latch pulse.
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2596:	83 81       	ldd	r24, Z+3	; 0x03
    2598:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    259a:	84 81       	ldd	r24, Z+4	; 0x04
    259c:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    259e:	84 b3       	in	r24, 0x14	; 20
    25a0:	81 60       	ori	r24, 0x01	; 1
    25a2:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Set Data to Pipe
    25a4:	81 81       	ldd	r24, Z+1	; 0x01
    25a6:	82 2b       	or	r24, r18
    25a8:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    25aa:	85 81       	ldd	r24, Z+5	; 0x05
    25ac:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    25ae:	86 81       	ldd	r24, Z+6	; 0x06
    25b0:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    25b2:	80 b1       	in	r24, 0x00	; 0
    25b4:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_ -> write Data to pipe, shift next read Data bit
    25b6:	84 b3       	in	r24, 0x14	; 20
    25b8:	8e 7f       	andi	r24, 0xFE	; 254
    25ba:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    25bc:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    25be:	91 50       	subi	r25, 0x01	; 1
    25c0:	51 f7       	brne	.-44     	; 0x2596 <__vector_21+0x32a>
	asm("nop");
    25c2:	00 00       	nop
	asm("nop");
    25c4:	00 00       	nop
	PIPE_CLOCK_H
    25c6:	84 b3       	in	r24, 0x14	; 20
    25c8:	81 60       	ori	r24, 0x01	; 1
    25ca:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    25cc:	84 b3       	in	r24, 0x14	; 20
    25ce:	8d 7f       	andi	r24, 0xFD	; 253
    25d0:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // update processing status
    25d2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    25d6:	82 60       	ori	r24, 0x02	; 2
    25d8:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed but for debugging with scope: turn output off
    25dc:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    25de:	8b b1       	in	r24, 0x0b	; 11
    25e0:	80 68       	ori	r24, 0x80	; 128
    25e2:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H // end transaction of data to pipe
    25e4:	84 b3       	in	r24, 0x14	; 20
    25e6:	82 60       	ori	r24, 0x02	; 2
    25e8:	84 bb       	out	0x14, r24	; 20
    25ea:	72 c0       	rjmp	.+228    	; 0x26d0 <__vector_21+0x464>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    25ec:	80 81       	ld	r24, Z
    25ee:	81 50       	subi	r24, 0x01	; 1
    25f0:	8e 3f       	cpi	r24, 0xFE	; 254
    25f2:	38 f4       	brcc	.+14     	; 0x2602 <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    25f4:	21 81       	ldd	r18, Z+1	; 0x01
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    25f8:	25 30       	cpi	r18, 0x05	; 5
    25fa:	10 f0       	brcs	.+4      	; 0x2600 <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    25fc:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    25fe:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    2600:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2602:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2604:	9f 5f       	subi	r25, 0xFF	; 255
    2606:	03 c0       	rjmp	.+6      	; 0x260e <__vector_21+0x3a2>
    2608:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    260a:	e0 e5       	ldi	r30, 0x50	; 80
    260c:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    260e:	9b 30       	cpi	r25, 0x0B	; 11
    2610:	68 f3       	brcs	.-38     	; 0x25ec <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    2612:	e6 e6       	ldi	r30, 0x66	; 102
    2614:	f2 e0       	ldi	r31, 0x02	; 2
    2616:	80 81       	ld	r24, Z
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	80 83       	st	Z, r24
    261c:	8a 3f       	cpi	r24, 0xFA	; 250
    261e:	09 f0       	breq	.+2      	; 0x2622 <__vector_21+0x3b6>
    2620:	57 c0       	rjmp	.+174    	; 0x26d0 <__vector_21+0x464>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    2628:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    262a:	81 81       	ldd	r24, Z+1	; 0x01
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	81 83       	std	Z+1, r24	; 0x01
    2630:	8c 33       	cpi	r24, 0x3C	; 60
    2632:	08 f4       	brcc	.+2      	; 0x2636 <__vector_21+0x3ca>
    2634:	4d c0       	rjmp	.+154    	; 0x26d0 <__vector_21+0x464>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2636:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	82 83       	std	Z+2, r24	; 0x02
    263e:	8c 33       	cpi	r24, 0x3C	; 60
    2640:	08 f4       	brcc	.+2      	; 0x2644 <__vector_21+0x3d8>
    2642:	46 c0       	rjmp	.+140    	; 0x26d0 <__vector_21+0x464>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2644:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2646:	83 81       	ldd	r24, Z+3	; 0x03
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	83 83       	std	Z+3, r24	; 0x03
    264c:	84 36       	cpi	r24, 0x64	; 100
    264e:	08 f4       	brcc	.+2      	; 0x2652 <__vector_21+0x3e6>
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <__vector_21+0x464>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2652:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <time_Uptime+0x3>
    2656:	3c c0       	rjmp	.+120    	; 0x26d0 <__vector_21+0x464>
			break;
		case 2:
			timerTimers();
			break;
		case 3:
			if (pipeProcessing != PIPE_IO_DISABLE) {
    2658:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    265c:	80 38       	cpi	r24, 0x80	; 128
    265e:	c1 f1       	breq	.+112    	; 0x26d0 <__vector_21+0x464>
	// each pipe event may contain up to 8 modules that share the same organ key changes in the same bit
	// splitting one "pipe event" into up to 8 real organ key events is done in midi.c - not here due to performance
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    2660:	e0 90 7a 03 	lds	r14, 0x037A	; 0x80037a <pipe_Module>
    2664:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <pipe_ModuleTested>
    2668:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    266a:	f1 2c       	mov	r15, r1
static inline void timerPipeProcess(){
	// process changes in bits of all modules and eventually generates pipe events (key press and realease in organ manual)
	// each pipe event may contain up to 8 modules that share the same organ key changes in the same bit
	// splitting one "pipe event" into up to 8 real organ key events is done in midi.c - not here due to performance
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    266c:	0e e6       	ldi	r16, 0x6E	; 110
    266e:	12 e0       	ldi	r17, 0x02	; 2
    2670:	2c c0       	rjmp	.+88     	; 0x26ca <__vector_21+0x45e>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2672:	f8 01       	movw	r30, r16
    2674:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2676:	83 81       	ldd	r24, Z+3	; 0x03
    2678:	9c 2f       	mov	r25, r28
    267a:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    267c:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    267e:	84 81       	ldd	r24, Z+4	; 0x04
    2680:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2682:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2684:	25 81       	ldd	r18, Z+5	; 0x05
    2686:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2688:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    268a:	86 81       	ldd	r24, Z+6	; 0x06
    268c:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    268e:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2690:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2692:	cd 23       	and	r28, r29
    2694:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2696:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2698:	8d 2f       	mov	r24, r29
    269a:	80 95       	com	r24
    269c:	8c 23       	and	r24, r28
    269e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    26a0:	21 f0       	breq	.+8      	; 0x26aa <__vector_21+0x43e>
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			// one pipe message may contain state changes for up to 8 modules (statChange has one bit for each module)
			// splitting one pipe message into up to its 8 organ key events is done in midi.c
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			// a pipe message tells which of all 32 bits of all 8 bits are concerned (MSG_BYTE_CMD_SHIFTBIT) and if it is one or off now
			pipeMsgPush(myMessage);
    26a2:	9f 2d       	mov	r25, r15
    26a4:	90 62       	ori	r25, 0x20	; 32
    26a6:	0e 94 4a 30 	call	0x6094	; 0x6094 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    26aa:	c0 95       	com	r28
    26ac:	cd 23       	and	r28, r29
    26ae:	8c 2f       	mov	r24, r28
    26b0:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    26b2:	19 f0       	breq	.+6      	; 0x26ba <__vector_21+0x44e>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    26b4:	9f 2d       	mov	r25, r15
    26b6:	0e 94 4a 30 	call	0x6094	; 0x6094 <pipeMsgPush>
		}
		curPipe++;
    26ba:	08 5f       	subi	r16, 0xF8	; 248
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    26be:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipeProcessing>
    26c2:	81 60       	ori	r24, 0x01	; 1
    26c4:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipeProcessing>
	// splitting one "pipe event" into up to 8 real organ key events is done in midi.c - not here due to performance
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    26c8:	f3 94       	inc	r15
    26ca:	ff e1       	ldi	r31, 0x1F	; 31
    26cc:	ff 15       	cp	r31, r15
    26ce:	88 f6       	brcc	.-94     	; 0x2672 <__vector_21+0x406>
			if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    26d0:	85 b1       	in	r24, 0x05	; 5
    26d2:	8f 77       	andi	r24, 0x7F	; 127
    26d4:	85 b9       	out	0x05, r24	; 5

}
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	bf 91       	pop	r27
    26e0:	af 91       	pop	r26
    26e2:	9f 91       	pop	r25
    26e4:	8f 91       	pop	r24
    26e6:	7f 91       	pop	r23
    26e8:	6f 91       	pop	r22
    26ea:	5f 91       	pop	r21
    26ec:	4f 91       	pop	r20
    26ee:	3f 91       	pop	r19
    26f0:	2f 91       	pop	r18
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	0f 90       	pop	r0
    26fc:	0b be       	out	0x3b, r0	; 59
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	0f 90       	pop	r0
    2704:	1f 90       	pop	r1
    2706:	18 95       	reti

00002708 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    2708:	e8 2f       	mov	r30, r24
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	e2 59       	subi	r30, 0x92	; 146
    271a:	fd 4f       	sbci	r31, 0xFD	; 253
    271c:	60 95       	com	r22
    271e:	81 81       	ldd	r24, Z+1	; 0x01
    2720:	68 23       	and	r22, r24
    2722:	61 83       	std	Z+1, r22	; 0x01
    2724:	08 95       	ret

00002726 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    2726:	e8 2f       	mov	r30, r24
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	e2 59       	subi	r30, 0x92	; 146
    2738:	fd 4f       	sbci	r31, 0xFD	; 253
    273a:	81 81       	ldd	r24, Z+1	; 0x01
    273c:	68 2b       	or	r22, r24
    273e:	61 83       	std	Z+1, r22	; 0x01
    2740:	08 95       	ret

00002742 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2746:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2748:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    274a:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    274c:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    274e:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2750:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2752:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    2756:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    275a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    275e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2762:	8a b1       	in	r24, 0x0a	; 10
    2764:	80 68       	ori	r24, 0x80	; 128
    2766:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2768:	8b b1       	in	r24, 0x0b	; 11
    276a:	8f 77       	andi	r24, 0x7F	; 127
    276c:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    276e:	84 b1       	in	r24, 0x04	; 4
    2770:	80 64       	ori	r24, 0x40	; 64
    2772:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2774:	85 b1       	in	r24, 0x05	; 5
    2776:	8f 7b       	andi	r24, 0xBF	; 191
    2778:	85 b9       	out	0x05, r24	; 5
    277a:	08 95       	ret

0000277c <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    277c:	88 23       	and	r24, r24
    277e:	34 f4       	brge	.+12     	; 0x278c <lcd_write_nibble+0x10>
    2780:	e2 e0       	ldi	r30, 0x02	; 2
    2782:	f1 e0       	ldi	r31, 0x01	; 1
    2784:	90 81       	ld	r25, Z
    2786:	90 61       	ori	r25, 0x10	; 16
    2788:	90 83       	st	Z, r25
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <lcd_write_nibble+0x1a>
    278c:	e2 e0       	ldi	r30, 0x02	; 2
    278e:	f1 e0       	ldi	r31, 0x01	; 1
    2790:	90 81       	ld	r25, Z
    2792:	9f 7e       	andi	r25, 0xEF	; 239
    2794:	90 83       	st	Z, r25
    2796:	86 ff       	sbrs	r24, 6
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <lcd_write_nibble+0x2a>
    279a:	e2 e0       	ldi	r30, 0x02	; 2
    279c:	f1 e0       	ldi	r31, 0x01	; 1
    279e:	90 81       	ld	r25, Z
    27a0:	98 60       	ori	r25, 0x08	; 8
    27a2:	90 83       	st	Z, r25
    27a4:	05 c0       	rjmp	.+10     	; 0x27b0 <lcd_write_nibble+0x34>
    27a6:	e2 e0       	ldi	r30, 0x02	; 2
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	90 81       	ld	r25, Z
    27ac:	97 7f       	andi	r25, 0xF7	; 247
    27ae:	90 83       	st	Z, r25
    27b0:	85 ff       	sbrs	r24, 5
    27b2:	04 c0       	rjmp	.+8      	; 0x27bc <lcd_write_nibble+0x40>
    27b4:	9e b1       	in	r25, 0x0e	; 14
    27b6:	98 60       	ori	r25, 0x08	; 8
    27b8:	9e b9       	out	0x0e, r25	; 14
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <lcd_write_nibble+0x46>
    27bc:	9e b1       	in	r25, 0x0e	; 14
    27be:	97 7f       	andi	r25, 0xF7	; 247
    27c0:	9e b9       	out	0x0e, r25	; 14
    27c2:	84 ff       	sbrs	r24, 4
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <lcd_write_nibble+0x52>
    27c6:	84 b3       	in	r24, 0x14	; 20
    27c8:	80 62       	ori	r24, 0x20	; 32
    27ca:	84 bb       	out	0x14, r24	; 20
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <lcd_write_nibble+0x58>
    27ce:	84 b3       	in	r24, 0x14	; 20
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	84 bb       	out	0x14, r24	; 20
    27d4:	e2 e0       	ldi	r30, 0x02	; 2
    27d6:	f1 e0       	ldi	r31, 0x01	; 1
    27d8:	80 81       	ld	r24, Z
    27da:	80 64       	ori	r24, 0x40	; 64
    27dc:	80 83       	st	Z, r24
    27de:	85 e0       	ldi	r24, 0x05	; 5
    27e0:	8a 95       	dec	r24
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <lcd_write_nibble+0x64>
    27e4:	00 00       	nop
    27e6:	80 81       	ld	r24, Z
    27e8:	8f 7b       	andi	r24, 0xBF	; 191
    27ea:	80 83       	st	Z, r24
    27ec:	85 e0       	ldi	r24, 0x05	; 5
    27ee:	8a 95       	dec	r24
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <lcd_write_nibble+0x72>
    27f2:	00 00       	nop
    27f4:	08 95       	ret

000027f6 <lcd_write_character>:
    27f6:	cf 93       	push	r28
    27f8:	c8 2f       	mov	r28, r24
    27fa:	e2 e0       	ldi	r30, 0x02	; 2
    27fc:	f1 e0       	ldi	r31, 0x01	; 1
    27fe:	80 81       	ld	r24, Z
    2800:	80 62       	ori	r24, 0x20	; 32
    2802:	80 83       	st	Z, r24
    2804:	80 81       	ld	r24, Z
    2806:	8f 7b       	andi	r24, 0xBF	; 191
    2808:	80 83       	st	Z, r24
    280a:	8c 2f       	mov	r24, r28
    280c:	b7 df       	rcall	.-146    	; 0x277c <lcd_write_nibble>
    280e:	8c 2f       	mov	r24, r28
    2810:	82 95       	swap	r24
    2812:	80 7f       	andi	r24, 0xF0	; 240
    2814:	b3 df       	rcall	.-154    	; 0x277c <lcd_write_nibble>
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <lcd_write_character+0x24>
    281e:	00 c0       	rjmp	.+0      	; 0x2820 <lcd_write_character+0x2a>
    2820:	00 00       	nop
    2822:	cf 91       	pop	r28
    2824:	08 95       	ret

00002826 <lcd_write_command>:
    2826:	cf 93       	push	r28
    2828:	c8 2f       	mov	r28, r24
    282a:	e2 e0       	ldi	r30, 0x02	; 2
    282c:	f1 e0       	ldi	r31, 0x01	; 1
    282e:	80 81       	ld	r24, Z
    2830:	8f 7d       	andi	r24, 0xDF	; 223
    2832:	80 83       	st	Z, r24
    2834:	80 81       	ld	r24, Z
    2836:	8f 7b       	andi	r24, 0xBF	; 191
    2838:	80 83       	st	Z, r24
    283a:	8c 2f       	mov	r24, r28
    283c:	9f df       	rcall	.-194    	; 0x277c <lcd_write_nibble>
    283e:	8c 2f       	mov	r24, r28
    2840:	82 95       	swap	r24
    2842:	80 7f       	andi	r24, 0xF0	; 240
    2844:	9b df       	rcall	.-202    	; 0x277c <lcd_write_nibble>
    2846:	c1 50       	subi	r28, 0x01	; 1
    2848:	c2 30       	cpi	r28, 0x02	; 2
    284a:	38 f4       	brcc	.+14     	; 0x285a <lcd_write_command+0x34>
    284c:	8f e0       	ldi	r24, 0x0F	; 15
    284e:	97 e2       	ldi	r25, 0x27	; 39
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <lcd_write_command+0x2a>
    2854:	00 c0       	rjmp	.+0      	; 0x2856 <lcd_write_command+0x30>
    2856:	00 00       	nop
    2858:	06 c0       	rjmp	.+12     	; 0x2866 <lcd_write_command+0x40>
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <lcd_write_command+0x38>
    2862:	00 c0       	rjmp	.+0      	; 0x2864 <lcd_write_command+0x3e>
    2864:	00 00       	nop
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <lcd_init>:
    286a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <lcd_displayingMessage>
    286e:	e1 e0       	ldi	r30, 0x01	; 1
    2870:	f1 e0       	ldi	r31, 0x01	; 1
    2872:	80 81       	ld	r24, Z
    2874:	80 61       	ori	r24, 0x10	; 16
    2876:	80 83       	st	Z, r24
    2878:	80 81       	ld	r24, Z
    287a:	88 60       	ori	r24, 0x08	; 8
    287c:	80 83       	st	Z, r24
    287e:	8d b1       	in	r24, 0x0d	; 13
    2880:	88 60       	ori	r24, 0x08	; 8
    2882:	8d b9       	out	0x0d, r24	; 13
    2884:	83 b3       	in	r24, 0x13	; 19
    2886:	80 62       	ori	r24, 0x20	; 32
    2888:	83 bb       	out	0x13, r24	; 19
    288a:	80 81       	ld	r24, Z
    288c:	80 64       	ori	r24, 0x40	; 64
    288e:	80 83       	st	Z, r24
    2890:	80 81       	ld	r24, Z
    2892:	80 62       	ori	r24, 0x20	; 32
    2894:	80 83       	st	Z, r24
    2896:	2f ef       	ldi	r18, 0xFF	; 255
    2898:	81 ee       	ldi	r24, 0xE1	; 225
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	21 50       	subi	r18, 0x01	; 1
    289e:	80 40       	sbci	r24, 0x00	; 0
    28a0:	90 40       	sbci	r25, 0x00	; 0
    28a2:	e1 f7       	brne	.-8      	; 0x289c <lcd_init+0x32>
    28a4:	00 c0       	rjmp	.+0      	; 0x28a6 <lcd_init+0x3c>
    28a6:	00 00       	nop
    28a8:	e2 e0       	ldi	r30, 0x02	; 2
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 7d       	andi	r24, 0xDF	; 223
    28b0:	80 83       	st	Z, r24
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 7b       	andi	r24, 0xBF	; 191
    28b6:	80 83       	st	Z, r24
    28b8:	80 e3       	ldi	r24, 0x30	; 48
    28ba:	60 df       	rcall	.-320    	; 0x277c <lcd_write_nibble>
    28bc:	8f e1       	ldi	r24, 0x1F	; 31
    28be:	9e e4       	ldi	r25, 0x4E	; 78
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <lcd_init+0x56>
    28c4:	00 c0       	rjmp	.+0      	; 0x28c6 <lcd_init+0x5c>
    28c6:	00 00       	nop
    28c8:	80 e3       	ldi	r24, 0x30	; 48
    28ca:	58 df       	rcall	.-336    	; 0x277c <lcd_write_nibble>
    28cc:	8f e1       	ldi	r24, 0x1F	; 31
    28ce:	9e e4       	ldi	r25, 0x4E	; 78
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <lcd_init+0x66>
    28d4:	00 c0       	rjmp	.+0      	; 0x28d6 <lcd_init+0x6c>
    28d6:	00 00       	nop
    28d8:	80 e3       	ldi	r24, 0x30	; 48
    28da:	50 df       	rcall	.-352    	; 0x277c <lcd_write_nibble>
    28dc:	8f e1       	ldi	r24, 0x1F	; 31
    28de:	9e e4       	ldi	r25, 0x4E	; 78
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <lcd_init+0x76>
    28e4:	00 c0       	rjmp	.+0      	; 0x28e6 <lcd_init+0x7c>
    28e6:	00 00       	nop
    28e8:	88 e2       	ldi	r24, 0x28	; 40
    28ea:	48 df       	rcall	.-368    	; 0x277c <lcd_write_nibble>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <lcd_init+0x86>
    28f4:	00 c0       	rjmp	.+0      	; 0x28f6 <lcd_init+0x8c>
    28f6:	00 00       	nop
    28f8:	88 e2       	ldi	r24, 0x28	; 40
    28fa:	95 df       	rcall	.-214    	; 0x2826 <lcd_write_command>
    28fc:	88 e0       	ldi	r24, 0x08	; 8
    28fe:	93 df       	rcall	.-218    	; 0x2826 <lcd_write_command>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	91 df       	rcall	.-222    	; 0x2826 <lcd_write_command>
    2904:	86 e0       	ldi	r24, 0x06	; 6
    2906:	8f df       	rcall	.-226    	; 0x2826 <lcd_write_command>
    2908:	8c e0       	ldi	r24, 0x0C	; 12
    290a:	8d cf       	rjmp	.-230    	; 0x2826 <lcd_write_command>
    290c:	08 95       	ret

0000290e <lcd_goto>:
    290e:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <lcd_cursorPos>
    2912:	80 58       	subi	r24, 0x80	; 128
    2914:	88 cf       	rjmp	.-240    	; 0x2826 <lcd_write_command>
    2916:	08 95       	ret

00002918 <lcd_clrscr>:
    2918:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <lcd_cursorPos>
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	83 df       	rcall	.-250    	; 0x2826 <lcd_write_command>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	ee e7       	ldi	r30, 0x7E	; 126
    2924:	f3 e0       	ldi	r31, 0x03	; 3
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <lcd_clrscr+0x18>
    2928:	90 e2       	ldi	r25, 0x20	; 32
    292a:	90 83       	st	Z, r25
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	31 96       	adiw	r30, 0x01	; 1
    2930:	80 35       	cpi	r24, 0x50	; 80
    2932:	d0 f3       	brcs	.-12     	; 0x2928 <lcd_clrscr+0x10>
    2934:	08 95       	ret

00002936 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	// convert non linear LCD-Cursor to linear Cursor 0..19 = line 0, 20..39 = line 1... for buffer
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2936:	84 31       	cpi	r24, 0x14	; 20
    2938:	98 f0       	brcs	.+38     	; 0x2960 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    293a:	90 ec       	ldi	r25, 0xC0	; 192
    293c:	98 0f       	add	r25, r24
    293e:	94 31       	cpi	r25, 0x14	; 20
    2940:	10 f4       	brcc	.+4      	; 0x2946 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2942:	8c 52       	subi	r24, 0x2C	; 44
    2944:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2946:	9c ee       	ldi	r25, 0xEC	; 236
    2948:	98 0f       	add	r25, r24
    294a:	94 31       	cpi	r25, 0x14	; 20
    294c:	10 f4       	brcc	.+4      	; 0x2952 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    294e:	8c 5e       	subi	r24, 0xEC	; 236
    2950:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2952:	9c ea       	ldi	r25, 0xAC	; 172
    2954:	98 0f       	add	r25, r24
    2956:	94 31       	cpi	r25, 0x14	; 20
    2958:	10 f4       	brcc	.+4      	; 0x295e <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    295a:	88 51       	subi	r24, 0x18	; 24
    295c:	08 95       	ret
	}
	return 0xFF; // default should not occure
    295e:	8f ef       	ldi	r24, 0xFF	; 255

}
    2960:	08 95       	ret

00002962 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	d8 2f       	mov	r29, r24
	// V 0.76 no output if displaying message
	if ((lcd_displayingMessage == FALSE) || (lcd_cursorPos < MENU_LCD_CURSOR_MAINMESSAGE)
    2968:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <lcd_displayingMessage>
    296c:	88 23       	and	r24, r24
    296e:	31 f0       	breq	.+12     	; 0x297c <lcd_putc+0x1a>
    2970:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <lcd_cursorPos>
    2974:	80 34       	cpi	r24, 0x40	; 64
    2976:	10 f0       	brcs	.+4      	; 0x297c <lcd_putc+0x1a>
		|| (lcd_cursorPos >= MENU_LCD_CURSOR_MAINMESSAGE+MENU_LCD_LEN_MAINMESSAGE)) {
    2978:	84 35       	cpi	r24, 0x54	; 84
    297a:	10 f0       	brcs	.+4      	; 0x2980 <lcd_putc+0x1e>
		// cursor is not in message area or no message is beeing displayed
		lcd_write_character(c);
    297c:	8d 2f       	mov	r24, r29
    297e:	3b df       	rcall	.-394    	; 0x27f6 <lcd_write_character>
	}
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    2980:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>
    2984:	8c 2f       	mov	r24, r28
    2986:	d7 df       	rcall	.-82     	; 0x2936 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	29 f1       	breq	.+74     	; 0x29d6 <lcd_putc+0x74>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    298c:	d1 3a       	cpi	r29, 0xA1	; 161
    298e:	79 f0       	breq	.+30     	; 0x29ae <lcd_putc+0x4c>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2990:	d0 38       	cpi	r29, 0x80	; 128
    2992:	79 f0       	breq	.+30     	; 0x29b2 <lcd_putc+0x50>
			stored_char = LCD_CHARREPL_STATEONOFF;
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2994:	d5 3a       	cpi	r29, 0xA5	; 165
    2996:	79 f0       	breq	.+30     	; 0x29b6 <lcd_putc+0x54>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHAR_STATEON){
    2998:	da 32       	cpi	r29, 0x2A	; 42
    299a:	79 f0       	breq	.+30     	; 0x29ba <lcd_putc+0x58>
			stored_char = LCD_CHARREPL_STATEON;
		} else if (stored_char == LCD_CHAR_SZ){
    299c:	d2 3e       	cpi	r29, 0xE2	; 226
    299e:	79 f0       	breq	.+30     	; 0x29be <lcd_putc+0x5c>
			stored_char = LCD_CHARREPL_SZ;
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    29a0:	d5 3f       	cpi	r29, 0xF5	; 245
    29a2:	79 f0       	breq	.+30     	; 0x29c2 <lcd_putc+0x60>
			stored_char = LCD_CHARREPL_UMLAUTU;
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    29a4:	df 3e       	cpi	r29, 0xEF	; 239
    29a6:	79 f0       	breq	.+30     	; 0x29c6 <lcd_putc+0x64>
			stored_char = LCD_CHARREPL_UMLAUTO;
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    29a8:	d1 3e       	cpi	r29, 0xE1	; 225
    29aa:	81 f4       	brne	.+32     	; 0x29cc <lcd_putc+0x6a>
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <lcd_putc+0x68>
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
    29ae:	d0 e2       	ldi	r29, 0x20	; 32
    29b0:	0d c0       	rjmp	.+26     	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF;
    29b2:	d0 e2       	ldi	r29, 0x20	; 32
    29b4:	0b c0       	rjmp	.+22     	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
    29b6:	d4 e1       	ldi	r29, 0x14	; 20
    29b8:	09 c0       	rjmp	.+18     	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON;
    29ba:	d5 e1       	ldi	r29, 0x15	; 21
    29bc:	07 c0       	rjmp	.+14     	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ;
    29be:	d3 e1       	ldi	r29, 0x13	; 19
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU;
    29c2:	d2 e1       	ldi	r29, 0x12	; 18
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO;
    29c6:	d1 e1       	ldi	r29, 0x11	; 17
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA;
    29ca:	d0 e1       	ldi	r29, 0x10	; 16
		}
		lcd_buffer[cursor] = stored_char;
    29cc:	e8 2f       	mov	r30, r24
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	e2 58       	subi	r30, 0x82	; 130
    29d2:	fc 4f       	sbci	r31, 0xFC	; 252
    29d4:	d0 83       	st	Z, r29
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    29d6:	cf 5f       	subi	r28, 0xFF	; 255
    29d8:	cf 77       	andi	r28, 0x7F	; 127
    29da:	c0 93 cf 03 	sts	0x03CF, r28	; 0x8003cf <lcd_cursorPos>
}
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	08 95       	ret

000029e4 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	fc 01       	movw	r30, r24
	if (s != NULL){
    29ea:	89 2b       	or	r24, r25
    29ec:	19 f4       	brne	.+6      	; 0x29f4 <lcd_puts+0x10>
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    29f0:	b8 df       	rcall	.-144    	; 0x2962 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    29f2:	fe 01       	movw	r30, r28
    29f4:	ef 01       	movw	r28, r30
    29f6:	21 96       	adiw	r28, 0x01	; 1
    29f8:	80 81       	ld	r24, Z
    29fa:	81 11       	cpse	r24, r1
    29fc:	f9 cf       	rjmp	.-14     	; 0x29f0 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2a0a:	89 2b       	or	r24, r25
    2a0c:	19 f4       	brne	.+6      	; 0x2a14 <lcd_puts_P+0x10>
    2a0e:	07 c0       	rjmp	.+14     	; 0x2a1e <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    2a10:	a8 df       	rcall	.-176    	; 0x2962 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2a12:	fe 01       	movw	r30, r28
    2a14:	ef 01       	movw	r28, r30
    2a16:	21 96       	adiw	r28, 0x01	; 1
    2a18:	84 91       	lpm	r24, Z
    2a1a:	81 11       	cpse	r24, r1
    2a1c:	f9 cf       	rjmp	.-14     	; 0x2a10 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
}
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	08 95       	ret

00002a24 <lcd_message>:
//------------------------------ MESSAGE ------------------------------

uint8_t lcd_displayingMessage; // TRUE when a message is beeing displayed. Then all lcd outputs are wirten to buffer only
uint8_t lcd_saveCursorIsOn;

void lcd_message(const char *pMessage){
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	8c 01       	movw	r16, r24
	// clear message area and display message from RAM, start timer
	// TODO check max len for message in case of missing '\0'
	uint8_t saveCursor = lcd_cursorPos;
    2a30:	f0 90 cf 03 	lds	r15, 0x03CF	; 0x8003cf <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2a34:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <lcd_cursorIsOn>
    2a38:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLen(pMessage);
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	0e 94 cc 40 	call	0x8198	; 0x8198 <get_StrLen>
    2a42:	d8 2f       	mov	r29, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2a44:	80 e4       	ldi	r24, 0x40	; 64
    2a46:	63 df       	rcall	.-314    	; 0x290e <lcd_goto>
	uint8_t pos = 0;
    2a48:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <lcd_message+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2a4c:	80 e2       	ldi	r24, 0x20	; 32
    2a4e:	d3 de       	rcall	.-602    	; 0x27f6 <lcd_write_character>
		pos++;
    2a50:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLen(pMessage);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a52:	2c 2f       	mov	r18, r28
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	84 e1       	ldi	r24, 0x14	; 20
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	8d 1b       	sub	r24, r29
    2a5c:	91 09       	sbc	r25, r1
    2a5e:	95 95       	asr	r25
    2a60:	87 95       	ror	r24
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	94 f3       	brlt	.-28     	; 0x2a4c <lcd_message+0x28>
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <lcd_message+0x4e>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
    2a6a:	0f 5f       	subi	r16, 0xFF	; 255
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	c3 de       	rcall	.-634    	; 0x27f6 <lcd_write_character>
		pos++;
    2a70:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
    2a72:	f8 01       	movw	r30, r16
    2a74:	80 81       	ld	r24, Z
    2a76:	81 11       	cpse	r24, r1
    2a78:	f8 cf       	rjmp	.-16     	; 0x2a6a <lcd_message+0x46>
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <lcd_message+0x5e>
    2a7c:	80 e2       	ldi	r24, 0x20	; 32
    2a7e:	bb de       	rcall	.-650    	; 0x27f6 <lcd_write_character>
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2a80:	c1 2f       	mov	r28, r17
    2a82:	11 e0       	ldi	r17, 0x01	; 1
    2a84:	1c 0f       	add	r17, r28
    2a86:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2a88:	c8 f3       	brcs	.-14     	; 0x2a7c <lcd_message+0x58>
    2a8a:	8f 2d       	mov	r24, r15
    2a8c:	40 df       	rcall	.-384    	; 0x290e <lcd_goto>
	lcd_displayingMessage = TRUE;
    2a8e:	8f ef       	ldi	r24, 0xFF	; 255
    2a90:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2a94:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a96:	f8 94       	cli
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	06 c0       	rjmp	.+12     	; 0x2aa8 <lcd_message+0x84>
    2a9c:	e0 e5       	ldi	r30, 0x50	; 80
    2a9e:	f2 e0       	ldi	r31, 0x02	; 2
    2aa0:	84 e6       	ldi	r24, 0x64	; 100
    2aa2:	86 87       	std	Z+14, r24	; 0x0e
    2aa4:	17 86       	std	Z+15, r1	; 0x0f
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	f8 cf       	rjmp	.-16     	; 0x2a9c <lcd_message+0x78>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2aac:	9f bf       	out	0x3f, r25	; 63
}
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	08 95       	ret

00002aba <lcd_message_P>:

void lcd_message_P(const char *pMessage_P){
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	8c 01       	movw	r16, r24
	// clear message area and display message from FLASH, start timer
	// TODO check max len for message in case of missing '\0'
	uint8_t saveCursor = lcd_cursorPos;
    2ac6:	d0 91 cf 03 	lds	r29, 0x03CF	; 0x8003cf <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2aca:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <lcd_cursorIsOn>
    2ace:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLenP(pMessage_P);
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	0e 94 c2 40 	call	0x8184	; 0x8184 <get_StrLenP>
    2ad8:	f8 2e       	mov	r15, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2ada:	80 e4       	ldi	r24, 0x40	; 64
    2adc:	18 df       	rcall	.-464    	; 0x290e <lcd_goto>
	uint8_t pos = 0;
    2ade:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2ae0:	03 c0       	rjmp	.+6      	; 0x2ae8 <lcd_message_P+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2ae2:	80 e2       	ldi	r24, 0x20	; 32
    2ae4:	88 de       	rcall	.-752    	; 0x27f6 <lcd_write_character>
		pos++;
    2ae6:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLenP(pMessage_P);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2ae8:	2c 2f       	mov	r18, r28
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	84 e1       	ldi	r24, 0x14	; 20
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	8f 19       	sub	r24, r15
    2af2:	91 09       	sbc	r25, r1
    2af4:	95 95       	asr	r25
    2af6:	87 95       	ror	r24
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	94 f3       	brlt	.-28     	; 0x2ae2 <lcd_message_P+0x28>
    2afe:	06 c0       	rjmp	.+12     	; 0x2b0c <lcd_message_P+0x52>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
    2b00:	0f 5f       	subi	r16, 0xFF	; 255
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	fc 01       	movw	r30, r24
    2b06:	84 91       	lpm	r24, Z
    2b08:	76 de       	rcall	.-788    	; 0x27f6 <lcd_write_character>
		pos++;
    2b0a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	f8 01       	movw	r30, r16
    2b10:	24 91       	lpm	r18, Z
    2b12:	21 11       	cpse	r18, r1
    2b14:	f5 cf       	rjmp	.-22     	; 0x2b00 <lcd_message_P+0x46>
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <lcd_message_P+0x64>
    2b18:	80 e2       	ldi	r24, 0x20	; 32
    2b1a:	6d de       	rcall	.-806    	; 0x27f6 <lcd_write_character>
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2b1c:	c1 2f       	mov	r28, r17
    2b1e:	11 e0       	ldi	r17, 0x01	; 1
    2b20:	1c 0f       	add	r17, r28
    2b22:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2b24:	c8 f3       	brcs	.-14     	; 0x2b18 <lcd_message_P+0x5e>
    2b26:	8d 2f       	mov	r24, r29
    2b28:	f2 de       	rcall	.-540    	; 0x290e <lcd_goto>
	lcd_displayingMessage = TRUE;
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2b30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b32:	f8 94       	cli
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	06 c0       	rjmp	.+12     	; 0x2b44 <lcd_message_P+0x8a>
    2b38:	e0 e5       	ldi	r30, 0x50	; 80
    2b3a:	f2 e0       	ldi	r31, 0x02	; 2
    2b3c:	84 e6       	ldi	r24, 0x64	; 100
    2b3e:	86 87       	std	Z+14, r24	; 0x0e
    2b40:	17 86       	std	Z+15, r1	; 0x0f
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	81 11       	cpse	r24, r1
    2b46:	f8 cf       	rjmp	.-16     	; 0x2b38 <lcd_message_P+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b48:	9f bf       	out	0x3f, r25	; 63
}
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	08 95       	ret

00002b56 <lcd_setCG>:
	0b00011011,
	0b00011011,
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	eb 01       	movw	r28, r22
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	80 64       	ori	r24, 0x40	; 64
    2b72:	59 de       	rcall	.-846    	; 0x2826 <lcd_write_command>
	for (uint8_t i = 0; i < 8; i++){
    2b74:	10 e0       	ldi	r17, 0x00	; 0
    2b76:	09 c0       	rjmp	.+18     	; 0x2b8a <lcd_setCG+0x34>
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b78:	7e 01       	movw	r14, r28
    2b7a:	8f ef       	ldi	r24, 0xFF	; 255
    2b7c:	e8 1a       	sub	r14, r24
    2b7e:	f8 0a       	sbc	r15, r24
    2b80:	fe 01       	movw	r30, r28
    2b82:	84 91       	lpm	r24, Z
    2b84:	38 de       	rcall	.-912    	; 0x27f6 <lcd_write_character>
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b86:	1f 5f       	subi	r17, 0xFF	; 255
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b88:	e7 01       	movw	r28, r14
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b8a:	18 30       	cpi	r17, 0x08	; 8
    2b8c:	a8 f3       	brcs	.-22     	; 0x2b78 <lcd_setCG+0x22>
		lcd_write_character(pgm_read_byte(patternPtr++));
	}
}
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <lcd_initCG>:

void lcd_initCG(){
	lcd_setCG(0,cgPattern_Up); // 0x08 = Arrow Up
    2b9a:	6c e9       	ldi	r22, 0x9C	; 156
    2b9c:	71 e0       	ldi	r23, 0x01	; 1
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	da df       	rcall	.-76     	; 0x2b56 <lcd_setCG>
	lcd_setCG(1,cgPattern_Down); // 0x09 = Arrow Down
    2ba2:	64 e9       	ldi	r22, 0x94	; 148
    2ba4:	71 e0       	ldi	r23, 0x01	; 1
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	d6 df       	rcall	.-84     	; 0x2b56 <lcd_setCG>
	// old: 0x0A = Block = State On
	lcd_setCG(2,cgPattern_RegOff); // 0x0A = Single Reg Off
    2baa:	6c e8       	ldi	r22, 0x8C	; 140
    2bac:	71 e0       	ldi	r23, 0x01	; 1
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	d2 df       	rcall	.-92     	; 0x2b56 <lcd_setCG>
	lcd_setCG(3,cgPattern_RegOn); // 0x0B = Single Reg Off
    2bb2:	64 e8       	ldi	r22, 0x84	; 132
    2bb4:	71 e0       	ldi	r23, 0x01	; 1
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	ce df       	rcall	.-100    	; 0x2b56 <lcd_setCG>
	lcd_setCG(4,cgPattern_RegOffOff); // 0x0C = 2 Reg Off Off
    2bba:	6c e7       	ldi	r22, 0x7C	; 124
    2bbc:	71 e0       	ldi	r23, 0x01	; 1
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	ca df       	rcall	.-108    	; 0x2b56 <lcd_setCG>
	lcd_setCG(5,cgPattern_RegOffOn); // 0x0D = 2 Reg Off On
    2bc2:	64 e7       	ldi	r22, 0x74	; 116
    2bc4:	71 e0       	ldi	r23, 0x01	; 1
    2bc6:	85 e0       	ldi	r24, 0x05	; 5
    2bc8:	c6 df       	rcall	.-116    	; 0x2b56 <lcd_setCG>
	lcd_setCG(6,cgPattern_RegOnOff); // 0x0E = 2 Reg On Off
    2bca:	6c e6       	ldi	r22, 0x6C	; 108
    2bcc:	71 e0       	ldi	r23, 0x01	; 1
    2bce:	86 e0       	ldi	r24, 0x06	; 6
    2bd0:	c2 df       	rcall	.-124    	; 0x2b56 <lcd_setCG>
	lcd_setCG(7,cgPattern_RegOnOn); // 0x0F = 2 Reg On On
    2bd2:	64 e6       	ldi	r22, 0x64	; 100
    2bd4:	71 e0       	ldi	r23, 0x01	; 1
    2bd6:	87 e0       	ldi	r24, 0x07	; 7
    2bd8:	be cf       	rjmp	.-132    	; 0x2b56 <lcd_setCG>
    2bda:	08 95       	ret

00002bdc <lcd_cursosblink>:
    2bdc:	8d e0       	ldi	r24, 0x0D	; 13
}

//----------------------------------- CURSOR -------------------------#

void lcd_cursosblink(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON) | (1 << LCD_DISPLAYMODE_BLINK));
    2bde:	23 de       	rcall	.-954    	; 0x2826 <lcd_write_command>
	lcd_cursorIsOn = TRUE;
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <lcd_cursorIsOn>
    2be6:	08 95       	ret

00002be8 <lcd_cursoroff>:
}

void lcd_cursoroff(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON));
    2be8:	8c e0       	ldi	r24, 0x0C	; 12
    2bea:	1d de       	rcall	.-966    	; 0x2826 <lcd_write_command>
	lcd_cursorIsOn = FALSE;
    2bec:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <lcd_cursorIsOn>
    2bf0:	08 95       	ret

00002bf2 <lcd_message_clear>:
	lcd_displayingMessage = TRUE;
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
}


void lcd_message_clear(){
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
    2bfa:	00 91 cf 03 	lds	r16, 0x03CF	; 0x8003cf <lcd_cursorPos>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
    2bfe:	80 e4       	ldi	r24, 0x40	; 64
    2c00:	9a de       	rcall	.-716    	; 0x2936 <getCursorFromLCDRAMcursor>
    2c02:	c8 2f       	mov	r28, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2c04:	80 e4       	ldi	r24, 0x40	; 64
    2c06:	83 de       	rcall	.-762    	; 0x290e <lcd_goto>
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c08:	d0 e0       	ldi	r29, 0x00	; 0
    2c0a:	22 c0       	rjmp	.+68     	; 0x2c50 <lcd_message_clear+0x5e>
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2c0c:	11 e0       	ldi	r17, 0x01	; 1
    2c0e:	1c 0f       	add	r17, r28
    2c10:	ec 2f       	mov	r30, r28
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	e2 58       	subi	r30, 0x82	; 130
    2c16:	fc 4f       	sbci	r31, 0xFC	; 252
    2c18:	80 81       	ld	r24, Z
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
    2c1a:	84 31       	cpi	r24, 0x14	; 20
    2c1c:	59 f0       	breq	.+22     	; 0x2c34 <lcd_message_clear+0x42>
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHARREPL_STATEON){
    2c1e:	85 31       	cpi	r24, 0x15	; 21
    2c20:	59 f0       	breq	.+22     	; 0x2c38 <lcd_message_clear+0x46>
			stored_char = LCD_CHAR_STATEON;
		} else if (stored_char == LCD_CHARREPL_SZ){
    2c22:	83 31       	cpi	r24, 0x13	; 19
    2c24:	59 f0       	breq	.+22     	; 0x2c3c <lcd_message_clear+0x4a>
			stored_char = LCD_CHAR_SZ;
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
    2c26:	82 31       	cpi	r24, 0x12	; 18
    2c28:	59 f0       	breq	.+22     	; 0x2c40 <lcd_message_clear+0x4e>
			stored_char = LCD_CHAR_UMLAUTU;
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
    2c2a:	81 31       	cpi	r24, 0x11	; 17
    2c2c:	59 f0       	breq	.+22     	; 0x2c44 <lcd_message_clear+0x52>
			stored_char = LCD_CHAR_UMLAUTO;
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
    2c2e:	80 31       	cpi	r24, 0x10	; 16
    2c30:	61 f4       	brne	.+24     	; 0x2c4a <lcd_message_clear+0x58>
    2c32:	0a c0       	rjmp	.+20     	; 0x2c48 <lcd_message_clear+0x56>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
    2c34:	85 ea       	ldi	r24, 0xA5	; 165
    2c36:	09 c0       	rjmp	.+18     	; 0x2c4a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_STATEON){
			stored_char = LCD_CHAR_STATEON;
    2c38:	8a e2       	ldi	r24, 0x2A	; 42
    2c3a:	07 c0       	rjmp	.+14     	; 0x2c4a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_SZ){
			stored_char = LCD_CHAR_SZ;
    2c3c:	82 ee       	ldi	r24, 0xE2	; 226
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
			stored_char = LCD_CHAR_UMLAUTU;
    2c40:	85 ef       	ldi	r24, 0xF5	; 245
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
			stored_char = LCD_CHAR_UMLAUTO;
    2c44:	8f ee       	ldi	r24, 0xEF	; 239
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <lcd_message_clear+0x58>
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
    2c48:	81 ee       	ldi	r24, 0xE1	; 225
    2c4a:	d5 dd       	rcall	.-1110   	; 0x27f6 <lcd_write_character>
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c4c:	df 5f       	subi	r29, 0xFF	; 255
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2c4e:	c1 2f       	mov	r28, r17
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c50:	d4 31       	cpi	r29, 0x14	; 20
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
	}
	lcd_goto(saveCursor);
    2c52:	e0 f2       	brcs	.-72     	; 0x2c0c <lcd_message_clear+0x1a>
    2c54:	80 2f       	mov	r24, r16
    2c56:	5b de       	rcall	.-842    	; 0x290e <lcd_goto>
	if 	(lcd_saveCursorIsOn == TRUE){
    2c58:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_saveCursorIsOn>
		lcd_cursosblink();
    2c5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <lcd_message_clear+0x72>
    2c60:	bd df       	rcall	.-134    	; 0x2bdc <lcd_cursosblink>
	} else {
		lcd_cursoroff();
    2c62:	01 c0       	rjmp	.+2      	; 0x2c66 <lcd_message_clear+0x74>
    2c64:	c1 df       	rcall	.-126    	; 0x2be8 <lcd_cursoroff>
	}
	lcd_displayingMessage = FALSE;
    2c66:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <lcd_displayingMessage>
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	08 95       	ret

00002c74 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2c74:	8a ef       	ldi	r24, 0xFA	; 250
    2c76:	93 e0       	ldi	r25, 0x03	; 3
    2c78:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <pLogStart+0x1>
    2c7c:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <pLogStart>
    2c80:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogEnd+0x1>
    2c84:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogEnd>
    2c88:	08 95       	ret

00002c8a <log_count>:
    2c8a:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogEnd>
    2c8e:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogEnd+0x1>
    2c92:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <pLogStart>
    2c96:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <pLogStart+0x1>
    2c9a:	82 17       	cp	r24, r18
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	48 f0       	brcs	.+18     	; 0x2cb2 <log_count+0x28>
    2ca0:	82 1b       	sub	r24, r18
    2ca2:	93 0b       	sbc	r25, r19
    2ca4:	95 95       	asr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	9d ec       	ldi	r25, 0xCD	; 205
    2caa:	89 9f       	mul	r24, r25
    2cac:	80 2d       	mov	r24, r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	08 95       	ret
    2cb2:	80 57       	subi	r24, 0x70	; 112
    2cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb6:	82 1b       	sub	r24, r18
    2cb8:	93 0b       	sbc	r25, r19
    2cba:	95 95       	asr	r25
    2cbc:	87 95       	ror	r24
    2cbe:	9d ec       	ldi	r25, 0xCD	; 205
    2cc0:	89 9f       	mul	r24, r25
    2cc2:	80 2d       	mov	r24, r0
    2cc4:	11 24       	eor	r1, r1
    2cc6:	08 95       	ret

00002cc8 <log_getLog>:
    2cc8:	cf 93       	push	r28
    2cca:	c8 2f       	mov	r28, r24
    2ccc:	de df       	rcall	.-68     	; 0x2c8a <log_count>
    2cce:	c8 17       	cp	r28, r24
    2cd0:	f8 f4       	brcc	.+62     	; 0x2d10 <log_getLog+0x48>
    2cd2:	40 91 8c 05 	lds	r20, 0x058C	; 0x80058c <pLogStart>
    2cd6:	50 91 8d 05 	lds	r21, 0x058D	; 0x80058d <pLogStart+0x1>
    2cda:	8c 2f       	mov	r24, r28
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9c 01       	movw	r18, r24
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	28 0f       	add	r18, r24
    2cf2:	39 1f       	adc	r19, r25
    2cf4:	ca 01       	movw	r24, r20
    2cf6:	82 0f       	add	r24, r18
    2cf8:	93 1f       	adc	r25, r19
    2cfa:	65 e0       	ldi	r22, 0x05	; 5
    2cfc:	80 38       	cpi	r24, 0x80	; 128
    2cfe:	96 07       	cpc	r25, r22
    2d00:	49 f0       	breq	.+18     	; 0x2d14 <log_getLog+0x4c>
    2d02:	40 f0       	brcs	.+16     	; 0x2d14 <log_getLog+0x4c>
    2d04:	20 59       	subi	r18, 0x90	; 144
    2d06:	31 40       	sbci	r19, 0x01	; 1
    2d08:	ca 01       	movw	r24, r20
    2d0a:	82 0f       	add	r24, r18
    2d0c:	93 1f       	adc	r25, r19
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <log_getLog+0x4c>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	cf 91       	pop	r28
    2d16:	08 95       	ret

00002d18 <log_getErrorText>:
    2d18:	d7 df       	rcall	.-82     	; 0x2cc8 <log_getLog>
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	f1 f1       	breq	.+124    	; 0x2d9a <log_getErrorText+0x82>
    2d1e:	fc 01       	movw	r30, r24
    2d20:	36 81       	ldd	r19, Z+6	; 0x06
    2d22:	67 81       	ldd	r22, Z+7	; 0x07
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	34 c0       	rjmp	.+104    	; 0x2d90 <log_getErrorText+0x78>
    2d28:	42 2f       	mov	r20, r18
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	fa 01       	movw	r30, r20
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	cf 01       	movw	r24, r30
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	e8 0f       	add	r30, r24
    2d42:	f9 1f       	adc	r31, r25
    2d44:	e6 55       	subi	r30, 0x56	; 86
    2d46:	fe 4f       	sbci	r31, 0xFE	; 254
    2d48:	84 91       	lpm	r24, Z
    2d4a:	38 13       	cpse	r19, r24
    2d4c:	20 c0       	rjmp	.+64     	; 0x2d8e <log_getErrorText+0x76>
    2d4e:	fa 01       	movw	r30, r20
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	cf 01       	movw	r24, r30
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	e8 0f       	add	r30, r24
    2d64:	f9 1f       	adc	r31, r25
    2d66:	e5 55       	subi	r30, 0x55	; 85
    2d68:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6a:	84 91       	lpm	r24, Z
    2d6c:	68 13       	cpse	r22, r24
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <log_getErrorText+0x76>
    2d70:	44 0f       	add	r20, r20
    2d72:	55 1f       	adc	r21, r21
    2d74:	ca 01       	movw	r24, r20
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	48 0f       	add	r20, r24
    2d84:	59 1f       	adc	r21, r25
    2d86:	ca 01       	movw	r24, r20
    2d88:	84 55       	subi	r24, 0x54	; 84
    2d8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d8c:	08 95       	ret
    2d8e:	2f 5f       	subi	r18, 0xFF	; 255
    2d90:	22 31       	cpi	r18, 0x12	; 18
    2d92:	50 f2       	brcs	.-108    	; 0x2d28 <log_getErrorText+0x10>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	08 95       	ret
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	08 95       	ret

00002da0 <logCheckUnreadErrorLogs>:
    2da0:	cf 93       	push	r28
    2da2:	73 df       	rcall	.-282    	; 0x2c8a <log_count>
    2da4:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <log_unreadErrors>
    2da8:	81 11       	cpse	r24, r1
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <logCheckUnreadErrorLogs+0x34>
    2dac:	17 c0       	rjmp	.+46     	; 0x2ddc <logCheckUnreadErrorLogs+0x3c>
    2dae:	8c 2f       	mov	r24, r28
    2db0:	8b df       	rcall	.-234    	; 0x2cc8 <log_getLog>
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	61 f0       	breq	.+24     	; 0x2dce <logCheckUnreadErrorLogs+0x2e>
    2db6:	fc 01       	movw	r30, r24
    2db8:	24 81       	ldd	r18, Z+4	; 0x04
    2dba:	20 32       	cpi	r18, 0x20	; 32
    2dbc:	51 f0       	breq	.+20     	; 0x2dd2 <logCheckUnreadErrorLogs+0x32>
    2dbe:	95 81       	ldd	r25, Z+5	; 0x05
    2dc0:	8c 2f       	mov	r24, r28
    2dc2:	95 34       	cpi	r25, 0x45	; 69
    2dc4:	39 f4       	brne	.+14     	; 0x2dd4 <logCheckUnreadErrorLogs+0x34>
    2dc6:	8f ef       	ldi	r24, 0xFF	; 255
    2dc8:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <log_unreadErrors>
    2dcc:	07 c0       	rjmp	.+14     	; 0x2ddc <logCheckUnreadErrorLogs+0x3c>
    2dce:	8c 2f       	mov	r24, r28
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <logCheckUnreadErrorLogs+0x34>
    2dd2:	8c 2f       	mov	r24, r28
    2dd4:	cf ef       	ldi	r28, 0xFF	; 255
    2dd6:	c8 0f       	add	r28, r24
    2dd8:	81 11       	cpse	r24, r1
    2dda:	e9 cf       	rjmp	.-46     	; 0x2dae <logCheckUnreadErrorLogs+0xe>
    2ddc:	cf 91       	pop	r28
    2dde:	08 95       	ret

00002de0 <log_getShortTextFromPtr>:
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	09 f4       	brne	.+2      	; 0x2dec <log_getShortTextFromPtr+0xc>
    2dea:	7b c0       	rjmp	.+246    	; 0x2ee2 <log_getShortTextFromPtr+0x102>
    2dec:	16 2f       	mov	r17, r22
    2dee:	ec 01       	movw	r28, r24
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	88 23       	and	r24, r24
    2df4:	79 f0       	breq	.+30     	; 0x2e14 <log_getShortTextFromPtr+0x34>
    2df6:	62 ed       	ldi	r22, 0xD2	; 210
    2df8:	73 e0       	ldi	r23, 0x03	; 3
    2dfa:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    2dfe:	bc 01       	movw	r22, r24
    2e00:	6f 5f       	subi	r22, 0xFF	; 255
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	28 e6       	ldi	r18, 0x68	; 104
    2e06:	fc 01       	movw	r30, r24
    2e08:	20 83       	st	Z, r18
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    2e10:	dc 01       	movw	r26, r24
    2e12:	2f c0       	rjmp	.+94     	; 0x2e72 <log_getShortTextFromPtr+0x92>
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	88 23       	and	r24, r24
    2e18:	79 f0       	breq	.+30     	; 0x2e38 <log_getShortTextFromPtr+0x58>
    2e1a:	62 ed       	ldi	r22, 0xD2	; 210
    2e1c:	73 e0       	ldi	r23, 0x03	; 3
    2e1e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    2e22:	bc 01       	movw	r22, r24
    2e24:	6f 5f       	subi	r22, 0xFF	; 255
    2e26:	7f 4f       	sbci	r23, 0xFF	; 255
    2e28:	2d e6       	ldi	r18, 0x6D	; 109
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	20 83       	st	Z, r18
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    2e34:	dc 01       	movw	r26, r24
    2e36:	1d c0       	rjmp	.+58     	; 0x2e72 <log_getShortTextFromPtr+0x92>
    2e38:	62 ed       	ldi	r22, 0xD2	; 210
    2e3a:	73 e0       	ldi	r23, 0x03	; 3
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    2e42:	fc 01       	movw	r30, r24
    2e44:	83 e7       	ldi	r24, 0x73	; 115
    2e46:	80 83       	st	Z, r24
    2e48:	98 81       	ld	r25, Y
    2e4a:	99 0f       	add	r25, r25
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <log_getShortTextFromPtr+0x74>
    2e50:	99 51       	subi	r25, 0x19	; 25
    2e52:	2f 5f       	subi	r18, 0xFF	; 255
    2e54:	99 31       	cpi	r25, 0x19	; 25
    2e56:	e0 f7       	brcc	.-8      	; 0x2e50 <log_getShortTextFromPtr+0x70>
    2e58:	20 5d       	subi	r18, 0xD0	; 208
    2e5a:	21 83       	std	Z+1, r18	; 0x01
    2e5c:	99 0f       	add	r25, r25
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <log_getShortTextFromPtr+0x86>
    2e62:	95 50       	subi	r25, 0x05	; 5
    2e64:	2f 5f       	subi	r18, 0xFF	; 255
    2e66:	95 30       	cpi	r25, 0x05	; 5
    2e68:	e0 f7       	brcc	.-8      	; 0x2e62 <log_getShortTextFromPtr+0x82>
    2e6a:	df 01       	movw	r26, r30
    2e6c:	13 96       	adiw	r26, 0x03	; 3
    2e6e:	20 5d       	subi	r18, 0xD0	; 208
    2e70:	22 83       	std	Z+2, r18	; 0x02
    2e72:	9c 81       	ldd	r25, Y+4	; 0x04
    2e74:	90 34       	cpi	r25, 0x40	; 64
    2e76:	51 f0       	breq	.+20     	; 0x2e8c <log_getShortTextFromPtr+0xac>
    2e78:	90 38       	cpi	r25, 0x80	; 128
    2e7a:	19 f0       	breq	.+6      	; 0x2e82 <log_getShortTextFromPtr+0xa2>
    2e7c:	90 32       	cpi	r25, 0x20	; 32
    2e7e:	81 f4       	brne	.+32     	; 0x2ea0 <log_getShortTextFromPtr+0xc0>
    2e80:	0a c0       	rjmp	.+20     	; 0x2e96 <log_getShortTextFromPtr+0xb6>
    2e82:	fd 01       	movw	r30, r26
    2e84:	31 96       	adiw	r30, 0x01	; 1
    2e86:	8a e2       	ldi	r24, 0x2A	; 42
    2e88:	8c 93       	st	X, r24
    2e8a:	0e c0       	rjmp	.+28     	; 0x2ea8 <log_getShortTextFromPtr+0xc8>
    2e8c:	fd 01       	movw	r30, r26
    2e8e:	31 96       	adiw	r30, 0x01	; 1
    2e90:	85 ea       	ldi	r24, 0xA5	; 165
    2e92:	8c 93       	st	X, r24
    2e94:	09 c0       	rjmp	.+18     	; 0x2ea8 <log_getShortTextFromPtr+0xc8>
    2e96:	fd 01       	movw	r30, r26
    2e98:	31 96       	adiw	r30, 0x01	; 1
    2e9a:	80 e2       	ldi	r24, 0x20	; 32
    2e9c:	8c 93       	st	X, r24
    2e9e:	04 c0       	rjmp	.+8      	; 0x2ea8 <log_getShortTextFromPtr+0xc8>
    2ea0:	fd 01       	movw	r30, r26
    2ea2:	31 96       	adiw	r30, 0x01	; 1
    2ea4:	8f e3       	ldi	r24, 0x3F	; 63
    2ea6:	8c 93       	st	X, r24
    2ea8:	bf 01       	movw	r22, r30
    2eaa:	6f 5f       	subi	r22, 0xFF	; 255
    2eac:	7f 4f       	sbci	r23, 0xFF	; 255
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	80 83       	st	Z, r24
    2eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb4:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    2eb8:	bc 01       	movw	r22, r24
    2eba:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebc:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	6f 5f       	subi	r22, 0xFF	; 255
    2ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec6:	2d e2       	ldi	r18, 0x2D	; 45
    2ec8:	fc 01       	movw	r30, r24
    2eca:	20 83       	st	Z, r18
    2ecc:	88 85       	ldd	r24, Y+8	; 0x08
    2ece:	99 85       	ldd	r25, Y+9	; 0x09
    2ed0:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <putChar_word>
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	10 82       	st	Z, r1
    2ed8:	1f 3f       	cpi	r17, 0xFF	; 255
    2eda:	41 f0       	breq	.+16     	; 0x2eec <log_getShortTextFromPtr+0x10c>
    2edc:	1c 83       	std	Y+4, r17	; 0x04
    2ede:	60 df       	rcall	.-320    	; 0x2da0 <logCheckUnreadErrorLogs>
    2ee0:	05 c0       	rjmp	.+10     	; 0x2eec <log_getShortTextFromPtr+0x10c>
    2ee2:	e2 ed       	ldi	r30, 0xD2	; 210
    2ee4:	f3 e0       	ldi	r31, 0x03	; 3
    2ee6:	8d e2       	ldi	r24, 0x2D	; 45
    2ee8:	80 83       	st	Z, r24
    2eea:	11 82       	std	Z+1, r1	; 0x01
    2eec:	82 ed       	ldi	r24, 0xD2	; 210
    2eee:	93 e0       	ldi	r25, 0x03	; 3
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	08 95       	ret

00002ef8 <log_put>:
    2ef8:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <pLogEnd>
    2efc:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f00:	a6 e6       	ldi	r26, 0x66	; 102
    2f02:	b2 e0       	ldi	r27, 0x02	; 2
    2f04:	9c 91       	ld	r25, X
    2f06:	90 83       	st	Z, r25
    2f08:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <pLogEnd>
    2f0c:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f10:	11 96       	adiw	r26, 0x01	; 1
    2f12:	9c 91       	ld	r25, X
    2f14:	11 97       	sbiw	r26, 0x01	; 1
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <pLogEnd>
    2f1c:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f20:	12 96       	adiw	r26, 0x02	; 2
    2f22:	9c 91       	ld	r25, X
    2f24:	12 97       	sbiw	r26, 0x02	; 2
    2f26:	92 83       	std	Z+2, r25	; 0x02
    2f28:	13 96       	adiw	r26, 0x03	; 3
    2f2a:	9c 91       	ld	r25, X
    2f2c:	93 83       	std	Z+3, r25	; 0x03
    2f2e:	25 83       	std	Z+5, r18	; 0x05
    2f30:	86 83       	std	Z+6, r24	; 0x06
    2f32:	67 83       	std	Z+7, r22	; 0x07
    2f34:	51 87       	std	Z+9, r21	; 0x09
    2f36:	40 87       	std	Z+8, r20	; 0x08
    2f38:	80 e8       	ldi	r24, 0x80	; 128
    2f3a:	84 83       	std	Z+4, r24	; 0x04
    2f3c:	80 91 7e 16 	lds	r24, 0x167E	; 0x80167e <serUSB_Active>
    2f40:	8f 3f       	cpi	r24, 0xFF	; 255
    2f42:	81 f4       	brne	.+32     	; 0x2f64 <log_put+0x6c>
    2f44:	84 ea       	ldi	r24, 0xA4	; 164
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    2f4c:	6f ef       	ldi	r22, 0xFF	; 255
    2f4e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogEnd>
    2f52:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f56:	44 df       	rcall	.-376    	; 0x2de0 <log_getShortTextFromPtr>
    2f58:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    2f5c:	83 ef       	ldi	r24, 0xF3	; 243
    2f5e:	94 e1       	ldi	r25, 0x14	; 20
    2f60:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    2f64:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogEnd>
    2f68:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f6c:	0a 96       	adiw	r24, 0x0a	; 10
    2f6e:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogEnd+0x1>
    2f72:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogEnd>
    2f76:	80 58       	subi	r24, 0x80	; 128
    2f78:	95 40       	sbci	r25, 0x05	; 5
    2f7a:	39 f0       	breq	.+14     	; 0x2f8a <log_put+0x92>
    2f7c:	30 f0       	brcs	.+12     	; 0x2f8a <log_put+0x92>
    2f7e:	8a ef       	ldi	r24, 0xFA	; 250
    2f80:	93 e0       	ldi	r25, 0x03	; 3
    2f82:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogEnd+0x1>
    2f86:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogEnd>
    2f8a:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <pLogEnd>
    2f8e:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <pLogEnd+0x1>
    2f92:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <pLogStart>
    2f96:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <pLogStart+0x1>
    2f9a:	28 17       	cp	r18, r24
    2f9c:	39 07       	cpc	r19, r25
    2f9e:	79 f4       	brne	.+30     	; 0x2fbe <log_put+0xc6>
    2fa0:	0a 96       	adiw	r24, 0x0a	; 10
    2fa2:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <pLogStart+0x1>
    2fa6:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <pLogStart>
    2faa:	80 58       	subi	r24, 0x80	; 128
    2fac:	95 40       	sbci	r25, 0x05	; 5
    2fae:	39 f0       	breq	.+14     	; 0x2fbe <log_put+0xc6>
    2fb0:	30 f0       	brcs	.+12     	; 0x2fbe <log_put+0xc6>
    2fb2:	8a ef       	ldi	r24, 0xFA	; 250
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <pLogStart+0x1>
    2fba:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <pLogStart>
    2fbe:	08 95       	ret

00002fc0 <log_putError>:
    2fc0:	25 e4       	ldi	r18, 0x45	; 69
    2fc2:	9a df       	rcall	.-204    	; 0x2ef8 <log_put>
    2fc4:	8f ef       	ldi	r24, 0xFF	; 255
    2fc6:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <log_unreadErrors>
    2fca:	08 95       	ret

00002fcc <log_putWarning>:
    2fcc:	27 e5       	ldi	r18, 0x57	; 87
    2fce:	94 cf       	rjmp	.-216    	; 0x2ef8 <log_put>
    2fd0:	08 95       	ret

00002fd2 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2fd2:	cf 93       	push	r28
    2fd4:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2fd6:	78 de       	rcall	.-784    	; 0x2cc8 <log_getLog>
	if (pLogEntry != NULL){
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	19 f0       	breq	.+6      	; 0x2fe2 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2fdc:	6c 2f       	mov	r22, r28
    2fde:	00 df       	rcall	.-512    	; 0x2de0 <log_getShortTextFromPtr>
    2fe0:	06 c0       	rjmp	.+12     	; 0x2fee <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2fe2:	e2 ed       	ldi	r30, 0xD2	; 210
    2fe4:	f3 e0       	ldi	r31, 0x03	; 3
    2fe6:	8d e2       	ldi	r24, 0x2D	; 45
    2fe8:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2fea:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2fec:	cf 01       	movw	r24, r30
	}
    2fee:	cf 91       	pop	r28
    2ff0:	08 95       	ret

00002ff2 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2ff2:	a7 db       	rcall	.-2226   	; 0x2742 <init_iopins>
	DEBUG_OUT_MAIN
	init_log();	// init error and event log
    2ff4:	3f de       	rcall	.-898    	; 0x2c74 <init_log>
    2ff6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <init_Serial0SerUSB>
	init_Serial0SerUSB(); // serial port to PC
    2ffa:	0e 94 03 30 	call	0x6006	; 0x6006 <init_message>
	init_message(); // init keyboard message handling
    2ffe:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <init_HwTimer>
	init_HwTimer(); // init timer interrupts and ports for module IO
    3002:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <init_Timers>
	init_Timers(); // init timers
    3006:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <init_ADC>
	init_ADC(); // init ADC variable and ports (for keyboard polling)
    300a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <init_Pipe>
	init_Pipe(); // init ports and vars for module IO
    300e:	0e 94 ee 39 	call	0x73dc	; 0x73dc <init_Serial1MIDI>
	init_Serial1MIDI(); // init serial IO for MIDI
    3012:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <init_PipeModules>
	init_PipeModules(); // find out which modules are working
    3016:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <init_Midi2Manual>
	init_Midi2Manual(); // init mapping midi in -> manuals
    301a:	0e 94 13 35 	call	0x6a26	; 0x6a26 <init_Manual2Midi>
	init_Manual2Midi(); // init mapping manuals -> midi out
    301e:	0e 94 95 30 	call	0x612a	; 0x612a <init_Midi>
	init_Midi(); //  init midi handling
    3022:	0e 94 10 31 	call	0x6220	; 0x6220 <init_Registers>
	init_Registers(); // init mapping registers - modules
    3026:	0e 94 1b 34 	call	0x6836	; 0x6836 <init_RegOut>
	init_RegOut(); // init mapping registers - display of registers
    302a:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <init_Manual2Module>
	init_Manual2Module(); // init mapping manuals - modules
    302e:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <init_SoftKeys>
	init_SoftKeys(); // init softkeys
    3032:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    3036:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <menu_TestModulePattern>
	INIT_MENU // reset menu


	// BOOT MESSAGE

	lcd_init (); // init lcd
    303a:	17 dc       	rcall	.-2002   	; 0x286a <lcd_init>
	lcd_initCG(); // init Character generator RAM in LCD
    303c:	ae dd       	rcall	.-1188   	; 0x2b9a <lcd_initCG>
	lcd_clrscr (); // display boot message
    303e:	6c dc       	rcall	.-1832   	; 0x2918 <lcd_clrscr>
	lcd_goto(LCD_LINE1+3);
    3040:	83 e4       	ldi	r24, 0x43	; 67
    3042:	65 dc       	rcall	.-1846   	; 0x290e <lcd_goto>
	lcd_puts_P(prog_name);
    3044:	89 e0       	ldi	r24, 0x09	; 9
    3046:	93 e0       	ldi	r25, 0x03	; 3
    3048:	dd dc       	rcall	.-1606   	; 0x2a04 <lcd_puts_P>
	lcd_goto(LCD_LINE2+7);
    304a:	8b e1       	ldi	r24, 0x1B	; 27
    304c:	60 dc       	rcall	.-1856   	; 0x290e <lcd_goto>
    304e:	8b ea       	ldi	r24, 0xAB	; 171
	lcd_puts_P(sw_version);
    3050:	94 e1       	ldi	r25, 0x14	; 20
    3052:	d8 dc       	rcall	.-1616   	; 0x2a04 <lcd_puts_P>
    3054:	78 94       	sei
    3056:	2f ef       	ldi	r18, 0xFF	; 255
	sei(); // start timer, module handling, keyboard polling
    3058:	47 e9       	ldi	r20, 0x97	; 151
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    305a:	8a e3       	ldi	r24, 0x3A	; 58
    305c:	21 50       	subi	r18, 0x01	; 1
    305e:	40 40       	sbci	r20, 0x00	; 0
    3060:	80 40       	sbci	r24, 0x00	; 0
    3062:	e1 f7       	brne	.-8      	; 0x305c <main+0x6a>
    3064:	00 c0       	rjmp	.+0      	; 0x3066 <main+0x74>
    3066:	00 00       	nop
	_delay_ms(1200); // time to show booot message
	init_Serial3SerESP(); // activate serial from esp8266 not too early to ignore it's scrambled boot messages
    3068:	0e 94 a8 3c 	call	0x7950	; 0x7950 <init_Serial3SerESP>
	lcd_clrscr ();
    306c:	55 dc       	rcall	.-1878   	; 0x2918 <lcd_clrscr>
    306e:	96 d8       	rcall	.-3796   	; 0x219c <module_StartPowerOn>

	// TURN ON POWER

	module_StartPowerOn(); // does not turn power on, but start power on cycle
    3070:	8f ef       	ldi	r24, 0xFF	; 255
    3072:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)
    3076:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <menuNotActive>

	menuNotActive = TRUE; // show main screen, menu not active
    307a:	8e ef       	ldi	r24, 0xFE	; 254
    307c:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <messageFromESP>
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    3080:	df ef       	ldi	r29, 0xFF	; 255
    3082:	20 91 2a 14 	lds	r18, 0x142A	; 0x80142a <serESPRxInIndex>
    while (1)
    {
		DEBUG_OUT_MAIN
		// V0.60 read message from usart3 (esp)
		// --------------------------- ESP MESSAGE HANDLING --------------------------------------
		if SER_ESP_RX_BUFFER_NONEMPTY {
    3086:	30 91 2b 14 	lds	r19, 0x142B	; 0x80142b <serESPRxInIndex+0x1>
    308a:	80 91 25 14 	lds	r24, 0x1425	; 0x801425 <serESPRxOutIndex>
    308e:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <serESPRxOutIndex+0x1>
    3092:	28 17       	cp	r18, r24
    3094:	39 07       	cpc	r19, r25
    3096:	09 f4       	brne	.+2      	; 0x309a <main+0xa8>
    3098:	66 c0       	rjmp	.+204    	; 0x3166 <main+0x174>
    309a:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <serial3SER_ESPReadRx>
			uint8_t esp_message = serial3SER_ESPReadRx();
    309e:	c8 2f       	mov	r28, r24
    30a0:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <messageFromESP>
			messageFromESP = esp_message; // save for later transfer of LCD
    30a4:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    30a8:	8f e7       	ldi	r24, 0x7F	; 127
    30aa:	8c 0f       	add	r24, r28
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    30ac:	86 30       	cpi	r24, 0x06	; 6
    30ae:	28 f4       	brcc	.+10     	; 0x30ba <main+0xc8>
    30b0:	80 e8       	ldi	r24, 0x80	; 128
    30b2:	8c 0f       	add	r24, r28
				// message from esp that simulates keystroke: push key to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    30b4:	0e 94 0a 30 	call	0x6014	; 0x6014 <message_push>
    30b8:	56 c0       	rjmp	.+172    	; 0x3166 <main+0x174>
    30ba:	c0 39       	cpi	r28, 0x90	; 144
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <main+0xce>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    30be:	53 c0       	rjmp	.+166    	; 0x3166 <main+0x174>
    30c0:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <serESPInBuffer>
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    30c4:	80 39       	cpi	r24, 0x90	; 144
    30c6:	09 f0       	breq	.+2      	; 0x30ca <main+0xd8>
    30c8:	4e c0       	rjmp	.+156    	; 0x3166 <main+0x174>
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	e9 2f       	mov	r30, r25
    30ce:	09 2e       	mov	r0, r25
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    30d0:	00 0c       	add	r0, r0
    30d2:	ff 0b       	sbc	r31, r31
    30d4:	e3 5e       	subi	r30, 0xE3	; 227
    30d6:	fb 4e       	sbci	r31, 0xEB	; 235
    30d8:	80 81       	ld	r24, Z
    30da:	8d 33       	cpi	r24, 0x3D	; 61
    30dc:	19 f0       	breq	.+6      	; 0x30e4 <main+0xf2>
    30de:	9f 5f       	subi	r25, 0xFF	; 255
    30e0:	98 30       	cpi	r25, 0x08	; 8
							break;
						}
						i++;
    30e2:	a4 f3       	brlt	.-24     	; 0x30cc <main+0xda>
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    30e4:	98 30       	cpi	r25, 0x08	; 8
    30e6:	0c f0       	brlt	.+2      	; 0x30ea <main+0xf8>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    30e8:	3e c0       	rjmp	.+124    	; 0x3166 <main+0x174>
    30ea:	89 2f       	mov	r24, r25
    30ec:	85 95       	asr	r24
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	06 c0       	rjmp	.+12     	; 0x30fe <main+0x10c>
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    30f2:	e2 2f       	mov	r30, r18
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
							serESPMidiTmp[j] = 0;
    30f6:	e9 58       	subi	r30, 0x89	; 137
    30f8:	f9 4e       	sbci	r31, 0xE9	; 233
    30fa:	10 82       	st	Z, r1
    30fc:	2f 5f       	subi	r18, 0xFF	; 255
    30fe:	23 30       	cpi	r18, 0x03	; 3
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    3100:	c0 f3       	brcs	.-16     	; 0x30f2 <main+0x100>
    3102:	2c c0       	rjmp	.+88     	; 0x315c <main+0x16a>
    3104:	e9 2f       	mov	r30, r25
    3106:	09 2e       	mov	r0, r25
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    3108:	00 0c       	add	r0, r0
    310a:	ff 0b       	sbc	r31, r31
    310c:	e3 5e       	subi	r30, 0xE3	; 227
    310e:	fb 4e       	sbci	r31, 0xEB	; 235
    3110:	30 81       	ld	r19, Z
    3112:	20 ed       	ldi	r18, 0xD0	; 208
    3114:	23 0f       	add	r18, r19
    3116:	2a 30       	cpi	r18, 0x0A	; 10
    3118:	10 f0       	brcs	.+4      	; 0x311e <main+0x12c>
							if (asciiData > 9){
    311a:	27 ed       	ldi	r18, 0xD7	; 215
    311c:	23 0f       	add	r18, r19
								asciiData = asciiData - (0x0A - 'A' + '0');
    311e:	a2 2f       	mov	r26, r18
    3120:	af 70       	andi	r26, 0x0F	; 15
							}
							asciiData &= 0x0F;
    3122:	e7 e7       	ldi	r30, 0x77	; 119
    3124:	f6 e1       	ldi	r31, 0x16	; 22
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    3126:	62 81       	ldd	r22, Z+2	; 0x02
    3128:	20 e1       	ldi	r18, 0x10	; 16
    312a:	62 9f       	mul	r22, r18
    312c:	b0 01       	movw	r22, r0
    312e:	11 24       	eor	r1, r1
    3130:	41 81       	ldd	r20, Z+1	; 0x01
    3132:	24 2f       	mov	r18, r20
    3134:	22 95       	swap	r18
    3136:	2f 70       	andi	r18, 0x0F	; 15
    3138:	62 2b       	or	r22, r18
    313a:	62 83       	std	Z+2, r22	; 0x02
    313c:	20 e1       	ldi	r18, 0x10	; 16
    313e:	42 9f       	mul	r20, r18
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    3140:	a0 01       	movw	r20, r0
    3142:	11 24       	eor	r1, r1
    3144:	20 81       	ld	r18, Z
    3146:	32 2f       	mov	r19, r18
    3148:	32 95       	swap	r19
    314a:	3f 70       	andi	r19, 0x0F	; 15
    314c:	43 2b       	or	r20, r19
    314e:	41 83       	std	Z+1, r20	; 0x01
    3150:	40 e1       	ldi	r20, 0x10	; 16
    3152:	24 9f       	mul	r18, r20
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    3154:	90 01       	movw	r18, r0
    3156:	11 24       	eor	r1, r1
    3158:	2a 2b       	or	r18, r26
    315a:	20 83       	st	Z, r18
    315c:	91 50       	subi	r25, 0x01	; 1
    315e:	19 16       	cp	r1, r25
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    3160:	8c f2       	brlt	.-94     	; 0x3104 <main+0x112>
    3162:	0e 94 82 38 	call	0x7104	; 0x7104 <proc_ESPmidi>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    3166:	0e 94 37 30 	call	0x606e	; 0x606e <message_status>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU HANDLING ----------------------
		if MESSAGE_PENDING {
    316a:	88 23       	and	r24, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <main+0x17e>
    316e:	53 c0       	rjmp	.+166    	; 0x3216 <main+0x224>
    3170:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <lcd_displayingMessage>
			// key press has to be processed
			DEBUG_OUT_MENU
			if (lcd_displayingMessage == TRUE) {
    3174:	8f 3f       	cpi	r24, 0xFF	; 255
    3176:	09 f4       	brne	.+2      	; 0x317a <main+0x188>
    3178:	3c dd       	rcall	.-1416   	; 0x2bf2 <lcd_message_clear>
				// if message is beeing displayed: any key stroke clears message display area
				lcd_message_clear();
    317a:	0e 94 1e 30 	call	0x603c	; 0x603c <message_get>
			}
			uint8_t keyMessage = message_get();
    317e:	c8 2f       	mov	r28, r24
    3180:	86 38       	cpi	r24, 0x86	; 134
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    3182:	b9 f4       	brne	.+46     	; 0x31b2 <main+0x1c0>
    3184:	0e 94 c3 39 	call	0x7386	; 0x7386 <midiSendAllNotesOff>
				// PANIC BUTTON (longpress Escape)
				midiSendAllNotesOff(); // to MIDI out
    3188:	0e 94 43 37 	call	0x6e86	; 0x6e86 <midi_AllManualsOff>
				midi_AllManualsOff(); // all manual mosefets outputs off
    318c:	0e 94 b3 33 	call	0x6766	; 0x6766 <midi_resetRegisters>
				midi_resetRegisters(); // all register mosfets outputs off
    3190:	0e 94 8b 30 	call	0x6116	; 0x6116 <midi_CouplerReset>
				midi_CouplerReset();
    3194:	6f dd       	rcall	.-1314   	; 0x2c74 <init_log>
				init_log(); // clear log V 0.70
    3196:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <midiRxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    319a:	10 92 76 16 	sts	0x1676, r1	; 0x801676 <midiTxBuffUsage>
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    319e:	85 b1       	in	r24, 0x05	; 5
				POWER_ON
    31a0:	80 64       	ori	r24, 0x40	; 64
    31a2:	85 b9       	out	0x05, r24	; 5
    31a4:	83 e1       	ldi	r24, 0x13	; 19
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on manually
    31a6:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
    31aa:	8e ee       	ldi	r24, 0xEE	; 238
				lcd_message_P(panicString);
    31ac:	92 e0       	ldi	r25, 0x02	; 2
    31ae:	85 dc       	rcall	.-1782   	; 0x2aba <lcd_message_P>
    31b0:	32 c0       	rjmp	.+100    	; 0x3216 <main+0x224>
    31b2:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menuNotActive>
			} else {
				// --- REGULAR KEY MESSAGE ----
				if (menuNotActive == TRUE) {
    31b6:	8f 3f       	cpi	r24, 0xFF	; 255
    31b8:	f9 f4       	brne	.+62     	; 0x31f8 <main+0x206>
    31ba:	8c 2f       	mov	r24, r28
    31bc:	8f 73       	andi	r24, 0x3F	; 63
					// not in menu; start page is displayed
					uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    31be:	c5 30       	cpi	r28, 0x05	; 5
					if 	(keyMessage == MESSAGE_KEY_SEL) {
    31c0:	69 f4       	brne	.+26     	; 0x31dc <main+0x1ea>
    31c2:	60 e0       	ldi	r22, 0x00	; 0
						// SELECT: Start menu
						// first call of menu after exit: init LCD
						menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <menu_Init>
    31ce:	0e 94 4c 2c 	call	0x5898	; 0x5898 <menu_InitLCD>
						menu_InitLCD(); //display menu
    31d2:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <menuNotActive>
						menuNotActive = FALSE; // notify that menu is displayed
    31d6:	80 e0       	ldi	r24, 0x00	; 0
						softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    31d8:	37 d8       	rcall	.-3986   	; 0x2248 <softKey_WantLong>
    31da:	1d c0       	rjmp	.+58     	; 0x3216 <main+0x224>
    31dc:	9f ef       	ldi	r25, 0xFF	; 255
    31de:	98 0f       	add	r25, r24
					} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    31e0:	94 30       	cpi	r25, 0x04	; 4
    31e2:	c8 f4       	brcc	.+50     	; 0x3216 <main+0x224>
    31e4:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <softKey_MessageKey_ToSoftKeyNr>
						// SOFTKEY pressed
						uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    31e8:	6c 2f       	mov	r22, r28
    31ea:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <softKey_Execute>
						menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    31ee:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <menuNotActive>
    31f2:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <softKeys_toLCD>
						softKeys_toLCD();
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <main+0x224>
    31f8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <menu_TestModulePattern>
					} // Esc is not handled when no menu active
				} else {
					// MENU IS ACTIVE: PROCESS MESSAGE
					if (menu_TestModulePattern == 0){
    31fc:	81 11       	cpse	r24, r1
    31fe:	06 c0       	rjmp	.+12     	; 0x320c <main+0x21a>
    3200:	8c 2f       	mov	r24, r28
    3202:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <menu_ProcessMessage>
						// no pattern test running (regular case)
						menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    3206:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <menuNotActive>
    320a:	05 c0       	rjmp	.+10     	; 0x3216 <main+0x224>
    320c:	8d ef       	ldi	r24, 0xFD	; 253
    320e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_TestModuleBitCounter>
					} else {
						// special case: there is a module pattern test running: abort test
						menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    3212:	0e 94 8b 2a 	call	0x5516	; 0x5516 <menu_ModuleTestExecute>
						menu_ModuleTestExecute(); // start abort, on next timer finish
    3216:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menuNotActive>
					}
				}
			}
		}
		if (menuNotActive == TRUE) {
    321a:	8f 3f       	cpi	r24, 0xFF	; 255
    321c:	69 f4       	brne	.+26     	; 0x3238 <main+0x246>
    321e:	df 3f       	cpi	r29, 0xFF	; 255
			// Startpage is still displayed or should be displayed now because menu is terminated
			if (updateStatus == TRUE) {
    3220:	61 f4       	brne	.+24     	; 0x323a <main+0x248>
    3222:	0e 94 98 2b 	call	0x5730	; 0x5730 <menu_ClearAllDisp>
				// menu has been terminated: clear display to have more room for status
				menu_ClearAllDisp(); // clear menu display area
    3226:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <softKeys_toLCD>
				softKeys_toLCD(); // show softkeys
    322a:	8f ef       	ldi	r24, 0xFF	; 255
				softKey_WantLong(TRUE);
    322c:	0d d8       	rcall	.-4070   	; 0x2248 <softKey_WantLong>
    322e:	8f ef       	ldi	r24, 0xFF	; 255
				prog_UpdDisplay = TRUE; // update program display
    3230:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <prog_UpdDisplay>
    3234:	d0 e0       	ldi	r29, 0x00	; 0
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    3236:	01 c0       	rjmp	.+2      	; 0x323a <main+0x248>
    3238:	df ef       	ldi	r29, 0xFF	; 255
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventually after next menu exit
    323a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <swTimer+0xe>
		}
		DEBUG_OUT_MAIN
		// ------------------------- TIMER_MESSAGE_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MESSAGE_LCDCLEAR) {
    323e:	81 11       	cpse	r24, r1
    3240:	04 c0       	rjmp	.+8      	; 0x324a <main+0x258>
    3242:	d7 dc       	rcall	.-1618   	; 0x2bf2 <lcd_message_clear>
			// if LCD is displaying a "message" and message timer is elapsed: clear message display area now
			lcd_message_clear();
    3244:	8f ef       	ldi	r24, 0xFF	; 255
    3246:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <swTimer+0xe>
			TIMER_DEACTIVATE(TIMER_MESSAGE_LCDCLEAR)
    324a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    324e:	81 11       	cpse	r24, r1
    3250:	0a c0       	rjmp	.+20     	; 0x3266 <main+0x274>
    3252:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <menu_TestModulePattern>
			// used in menu function "test module": periodically update test pattern
			if (menu_TestModulePattern != 0){
    3256:	88 23       	and	r24, r24
    3258:	19 f0       	breq	.+6      	; 0x3260 <main+0x26e>
    325a:	0e 94 8b 2a 	call	0x5516	; 0x5516 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    325e:	03 c0       	rjmp	.+6      	; 0x3266 <main+0x274>
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <swTimer+0xc>
			} else {
				// last call of menu_ModuleTestExecute() told us to stopp timer
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    3266:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    326a:	81 11       	cpse	r24, r1
    326c:	1b c0       	rjmp	.+54     	; 0x32a4 <main+0x2b2>
    326e:	0e 94 de 10 	call	0x21bc	; 0x21bc <module_PowerControl>
			// at startup timer is set to control power on of the mosfet outputs after testing modules
			module_PowerControl(); //
    3272:	0e 94 c9 2f 	call	0x5f92	; 0x5f92 <menu_showPowerState>
			menu_showPowerState();
    3276:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menuNotActive>
			if (menuNotActive == TRUE) {
    327a:	8f 3f       	cpi	r24, 0xFF	; 255
    327c:	99 f4       	brne	.+38     	; 0x32a4 <main+0x2b2>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    327e:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    3282:	84 e1       	ldi	r24, 0x14	; 20
    3284:	44 db       	rcall	.-2424   	; 0x290e <lcd_goto>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    3286:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pipe_PowerStatus>
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	21 f4       	brne	.+8      	; 0x3296 <main+0x2a4>
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    328e:	87 ef       	ldi	r24, 0xF7	; 247
    3290:	92 e0       	ldi	r25, 0x02	; 2
    3292:	b8 db       	rcall	.-2192   	; 0x2a04 <lcd_puts_P>
    3294:	05 c0       	rjmp	.+10     	; 0x32a0 <main+0x2ae>
    3296:	82 31       	cpi	r24, 0x12	; 18
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    3298:	19 f4       	brne	.+6      	; 0x32a0 <main+0x2ae>
    329a:	84 e1       	ldi	r24, 0x14	; 20
					lcd_blank(LCD_LINELEN);
    329c:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <lcd_blank>
    32a0:	8c 2f       	mov	r24, r28
				}
				lcd_goto(saveCursor);
    32a2:	35 db       	rcall	.-2454   	; 0x290e <lcd_goto>
    32a4:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    32a8:	9f e7       	ldi	r25, 0x7F	; 127
    32aa:	98 0f       	add	r25, r24
    32ac:	96 30       	cpi	r25, 0x06	; 6
    32ae:	10 f0       	brcs	.+4      	; 0x32b4 <main+0x2c2>
    32b0:	8e 3f       	cpi	r24, 0xFE	; 254
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    32b2:	09 f5       	brne	.+66     	; 0x32f6 <main+0x304>
    32b4:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    32b8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ba:	31 f4       	brne	.+12     	; 0x32c8 <main+0x2d6>
    32bc:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    32c0:	3a db       	rcall	.-2444   	; 0x2936 <getCursorFromLCDRAMcursor>
    32c2:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <serial3SER_ESPSend>
    32c6:	03 c0       	rjmp	.+6      	; 0x32ce <main+0x2dc>
    32c8:	8f e7       	ldi	r24, 0x7F	; 127
    32ca:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor position so that no cursor is displayed
    32ce:	81 e8       	ldi	r24, 0x81	; 129
    32d0:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // send cursor position
    32d4:	c0 e0       	ldi	r28, 0x00	; 0
    32d6:	ee e7       	ldi	r30, 0x7E	; 126
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32d8:	f3 e0       	ldi	r31, 0x03	; 3
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor position so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // send cursor position
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    32da:	08 c0       	rjmp	.+16     	; 0x32ec <main+0x2fa>
    32dc:	8f 01       	movw	r16, r30
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32de:	0f 5f       	subi	r16, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    32e0:	1f 4f       	sbci	r17, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <serial3SER_ESPSend>
    32e8:	cf 5f       	subi	r28, 0xFF	; 255
    32ea:	f8 01       	movw	r30, r16
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor position so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // send cursor position
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32ec:	c0 35       	cpi	r28, 0x50	; 80
				serial3SER_ESPSend(*pChar++);
    32ee:	b0 f3       	brcs	.-20     	; 0x32dc <main+0x2ea>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor position so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // send cursor position
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32f0:	80 e8       	ldi	r24, 0x80	; 128
    32f2:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    32f6:	8f ef       	ldi	r24, 0xFF	; 255
    32f8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    32fc:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <midi_CheckTxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // must we send active Sense if midi out was inactive for some time to keep midi out line "alive"?
    3300:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of missing incoming Active Sense
    3304:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    3308:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
		// status line lin0 left corner: midi in display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    330c:	88 23       	and	r24, r24
    330e:	29 f0       	breq	.+10     	; 0x331a <main+0x328>
    3310:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    3314:	8f 3f       	cpi	r24, 0xFF	; 255
    3316:	09 f0       	breq	.+2      	; 0x331a <main+0x328>
    3318:	70 c0       	rjmp	.+224    	; 0x33fa <main+0x408>
    331a:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
			if (prog_Display > PROGR_MAX) {
    331e:	80 34       	cpi	r24, 0x40	; 64
    3320:	08 f4       	brcc	.+2      	; 0x3324 <main+0x332>
    3322:	6b c0       	rjmp	.+214    	; 0x33fa <main+0x408>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    3324:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
    3328:	8f 3f       	cpi	r24, 0xFF	; 255
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    332a:	91 f1       	breq	.+100    	; 0x3390 <main+0x39e>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	ef da       	rcall	.-2594   	; 0x290e <lcd_goto>
					if (midiLastInManual == MANUAL_NONE) {
    3330:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    3334:	8f 3f       	cpi	r24, 0xFF	; 255
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    3336:	69 f4       	brne	.+26     	; 0x3352 <main+0x360>
    3338:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <midiLastInChannel>
    333c:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <lcd_ChannelOut>
						lcd_putc('?');
    3340:	8f e3       	ldi	r24, 0x3F	; 63
						lcd_noteOut(midiLastInNote);
    3342:	0f db       	rcall	.-2530   	; 0x2962 <lcd_putc>
    3344:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(' ');
    3348:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <lcd_noteOut>
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	09 db       	rcall	.-2542   	; 0x2962 <lcd_putc>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    3350:	0c c0       	rjmp	.+24     	; 0x336a <main+0x378>
    3352:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
    3356:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    335a:	8e e7       	ldi	r24, 0x7E	; 126
    335c:	02 db       	rcall	.-2556   	; 0x2962 <lcd_putc>
						lcd_ManualOutDec(midiLastInManual);
    335e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    3362:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <lcd_ManualOutDec>
						lcd_putc(' ');
    3366:	80 e2       	ldi	r24, 0x20	; 32
    3368:	fc da       	rcall	.-2568   	; 0x2962 <lcd_putc>
    336a:	8c 2f       	mov	r24, r28
					}
					lcd_goto(oldcursor);
    336c:	d0 da       	rcall	.-2656   	; 0x290e <lcd_goto>
    336e:	8f ef       	ldi	r24, 0xFF	; 255
					midiLastInNote = MIDI_NOTE_NONE;
    3370:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <midiLastInNote>
					// now start timer
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    3374:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3376:	f8 94       	cli
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	06 c0       	rjmp	.+12     	; 0x3388 <main+0x396>
    337c:	e0 e5       	ldi	r30, 0x50	; 80
    337e:	f2 e0       	ldi	r31, 0x02	; 2
    3380:	83 e2       	ldi	r24, 0x23	; 35
    3382:	80 87       	std	Z+8, r24	; 0x08
    3384:	11 86       	std	Z+9, r1	; 0x09
    3386:	80 e0       	ldi	r24, 0x00	; 0
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    3388:	81 11       	cpse	r24, r1
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    338a:	f8 cf       	rjmp	.-16     	; 0x337c <main+0x38a>
    338c:	9f bf       	out	0x3f, r25	; 63
    338e:	35 c0       	rjmp	.+106    	; 0x33fa <main+0x408>
    3390:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    3394:	8f 3f       	cpi	r24, 0xFF	; 255
    3396:	21 f1       	breq	.+72     	; 0x33e0 <main+0x3ee>
					lcd_putc('p');
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	b9 da       	rcall	.-2702   	; 0x290e <lcd_goto>
    339c:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('A'+((midiLastProgram >> 3) & 0x07));
    339e:	e1 da       	rcall	.-2622   	; 0x2962 <lcd_putc>
    33a0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    33a4:	86 95       	lsr	r24
    33a6:	86 95       	lsr	r24
    33a8:	86 95       	lsr	r24
    33aa:	87 70       	andi	r24, 0x07	; 7
    33ac:	8f 5b       	subi	r24, 0xBF	; 191
    33ae:	d9 da       	rcall	.-2638   	; 0x2962 <lcd_putc>
					lcd_putc('1'+(midiLastProgram & 0x07)); // V 0.81 show Prog Nr and Bank
    33b0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    33b4:	87 70       	andi	r24, 0x07	; 7
    33b6:	8f 5c       	subi	r24, 0xCF	; 207
    33b8:	d4 da       	rcall	.-2648   	; 0x2962 <lcd_putc>
					//lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    33ba:	8e e7       	ldi	r24, 0x7E	; 126
    33bc:	d2 da       	rcall	.-2652   	; 0x2962 <lcd_putc>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <midiLastProgram>
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    33c4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33c6:	f8 94       	cli
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	06 c0       	rjmp	.+12     	; 0x33d8 <main+0x3e6>
    33cc:	e0 e5       	ldi	r30, 0x50	; 80
    33ce:	f2 e0       	ldi	r31, 0x02	; 2
    33d0:	83 e2       	ldi	r24, 0x23	; 35
    33d2:	80 87       	std	Z+8, r24	; 0x08
    33d4:	11 86       	std	Z+9, r1	; 0x09
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33da:	f8 cf       	rjmp	.-16     	; 0x33cc <main+0x3da>
    __asm__ volatile ("" ::: "memory");
    33dc:	9f bf       	out	0x3f, r25	; 63
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    33de:	0d c0       	rjmp	.+26     	; 0x33fa <main+0x408>
    33e0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    33e4:	81 11       	cpse	r24, r1
    33e6:	09 c0       	rjmp	.+18     	; 0x33fa <main+0x408>
					lcd_blank(6);
    33e8:	92 da       	rcall	.-2780   	; 0x290e <lcd_goto>
    33ea:	86 e0       	ldi	r24, 0x06	; 6
    33ec:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <lcd_blank>
					lcd_goto(oldcursor);
    33f0:	8c 2f       	mov	r24, r28
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    33f2:	8d da       	rcall	.-2790   	; 0x290e <lcd_goto>
    33f4:	8f ef       	ldi	r24, 0xFF	; 255
    33f6:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <swTimer+0x8>
				}
			}
		}
		// status line lin0 right corner: midi out display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    33fa:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    33fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3400:	21 f0       	breq	.+8      	; 0x340a <main+0x418>
    3402:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    3406:	81 11       	cpse	r24, r1
			if (midiLastOutNote != MIDI_NOTE_NONE){
    3408:	5c c0       	rjmp	.+184    	; 0x34c2 <main+0x4d0>
    340a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    340e:	8f 3f       	cpi	r24, 0xFF	; 255
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3410:	f9 f0       	breq	.+62     	; 0x3450 <main+0x45e>
    3412:	8f e0       	ldi	r24, 0x0F	; 15
    3414:	7c da       	rcall	.-2824   	; 0x290e <lcd_goto>
				lcd_ManualOutDec(midiLastOutManual);
    3416:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <midiLastOutManual>
    341a:	0e 94 28 3e 	call	0x7c50	; 0x7c50 <lcd_ManualOutDec>
				lcd_putc(MENU_MIDI_IO_SIGN);
    341e:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_noteOut(midiLastOutNote);
    3420:	a0 da       	rcall	.-2752   	; 0x2962 <lcd_putc>
    3422:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    3426:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <lcd_noteOut>
				lcd_goto(oldcursor);
    342a:	8c 2f       	mov	r24, r28
    342c:	70 da       	rcall	.-2848   	; 0x290e <lcd_goto>
				midiLastOutNote = MIDI_NOTE_NONE;
    342e:	8f ef       	ldi	r24, 0xFF	; 255
    3430:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <midiLastOutNote>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    3434:	9f b7       	in	r25, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <main+0x456>
    343c:	e0 e5       	ldi	r30, 0x50	; 80
    343e:	f2 e0       	ldi	r31, 0x02	; 2
    3440:	88 e2       	ldi	r24, 0x28	; 40
    3442:	82 87       	std	Z+10, r24	; 0x0a
    3444:	13 86       	std	Z+11, r1	; 0x0b
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3446:	80 e0       	ldi	r24, 0x00	; 0
    __asm__ volatile ("" ::: "memory");
    3448:	81 11       	cpse	r24, r1
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    344a:	f8 cf       	rjmp	.-16     	; 0x343c <main+0x44a>
    344c:	9f bf       	out	0x3f, r25	; 63
    344e:	39 c0       	rjmp	.+114    	; 0x34c2 <main+0x4d0>
    3450:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3454:	8f 3f       	cpi	r24, 0xFF	; 255
    3456:	39 f1       	breq	.+78     	; 0x34a6 <main+0x4b4>
				lcd_putc('R');
    3458:	8f e0       	ldi	r24, 0x0F	; 15
    345a:	59 da       	rcall	.-2894   	; 0x290e <lcd_goto>
    345c:	82 e5       	ldi	r24, 0x52	; 82
				lcd_dec2out((midi_RegisterChanged & ~REGISTER_WAS_SET)+1); // remove MSB, add 1 for user register numbers
    345e:	81 da       	rcall	.-2814   	; 0x2962 <lcd_putc>
    3460:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <midi_RegisterChanged>
    3464:	8f 77       	andi	r24, 0x7F	; 127
    3466:	8f 5f       	subi	r24, 0xFF	; 255
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_REG_OFF : LCD_CHAR_REG_ON); // MSB = register was set
    3468:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <lcd_dec2out>
    346c:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <midi_RegisterChanged>
    3470:	88 23       	and	r24, r24
    3472:	14 f0       	brlt	.+4      	; 0x3478 <main+0x486>
    3474:	8a e0       	ldi	r24, 0x0A	; 10
    3476:	01 c0       	rjmp	.+2      	; 0x347a <main+0x488>
				lcd_putc(' ');
    3478:	8b e0       	ldi	r24, 0x0B	; 11
    347a:	73 da       	rcall	.-2842   	; 0x2962 <lcd_putc>
    347c:	80 e2       	ldi	r24, 0x20	; 32
				lcd_goto(oldcursor);
    347e:	71 da       	rcall	.-2846   	; 0x2962 <lcd_putc>
    3480:	8c 2f       	mov	r24, r28
    3482:	45 da       	rcall	.-2934   	; 0x290e <lcd_goto>
				midi_RegisterChanged = REGISTER_NONE;
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <midi_RegisterChanged>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    348a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    348c:	f8 94       	cli
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	06 c0       	rjmp	.+12     	; 0x349e <main+0x4ac>
    3492:	e0 e5       	ldi	r30, 0x50	; 80
    3494:	f2 e0       	ldi	r31, 0x02	; 2
    3496:	88 e2       	ldi	r24, 0x28	; 40
    3498:	82 87       	std	Z+10, r24	; 0x0a
    349a:	13 86       	std	Z+11, r1	; 0x0b
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	81 11       	cpse	r24, r1
    34a0:	f8 cf       	rjmp	.-16     	; 0x3492 <main+0x4a0>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34a2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    34a4:	0e c0       	rjmp	.+28     	; 0x34c2 <main+0x4d0>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    34a6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    34aa:	81 11       	cpse	r24, r1
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    34ac:	0a c0       	rjmp	.+20     	; 0x34c2 <main+0x4d0>
    34ae:	8f e0       	ldi	r24, 0x0F	; 15
    34b0:	2e da       	rcall	.-2980   	; 0x290e <lcd_goto>
				lcd_blank(5);
    34b2:	85 e0       	ldi	r24, 0x05	; 5
    34b4:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <lcd_blank>
				lcd_goto(oldcursor);
    34b8:	8c 2f       	mov	r24, r28
    34ba:	29 da       	rcall	.-2990   	; 0x290e <lcd_goto>
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    34be:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <swTimer+0xa>
    34c2:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menuNotActive>
			}
		}
		#endif
		//----------------------- program display line0 left corner and registers ------------------------
		if ((menuNotActive == TRUE) &&((prog_UpdDisplay == TRUE) || (TIMER_ELAPSED(TIMER_REGDISPLAY)))) {
    34c6:	8f 3f       	cpi	r24, 0xFF	; 255
    34c8:	71 f5       	brne	.+92     	; 0x3526 <main+0x534>
    34ca:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <prog_UpdDisplay>
    34ce:	8f 3f       	cpi	r24, 0xFF	; 255
    34d0:	21 f0       	breq	.+8      	; 0x34da <main+0x4e8>
    34d2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <swTimer+0x12>
    34d6:	81 11       	cpse	r24, r1
    34d8:	26 c0       	rjmp	.+76     	; 0x3526 <main+0x534>
    34da:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <prog_UpdDisplay>
			// 0.77: only if menu is not active!
			prog_UpdDisplay = FALSE; // can be set in midi.c by midi commands or in menu.c by menu or softkeys
    34de:	9f b7       	in	r25, 0x3f	; 63
			TIMER_SET(TIMER_REGDISPLAY,TIMER_REGDISPLAY_MS)
    34e0:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	06 c0       	rjmp	.+12     	; 0x34f2 <main+0x500>
    34e6:	e0 e5       	ldi	r30, 0x50	; 80
    34e8:	f2 e0       	ldi	r31, 0x02	; 2
    34ea:	84 e1       	ldi	r24, 0x14	; 20
    34ec:	82 8b       	std	Z+18, r24	; 0x12
    34ee:	13 8a       	std	Z+19, r1	; 0x13
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	81 11       	cpse	r24, r1
    34f4:	f8 cf       	rjmp	.-16     	; 0x34e6 <main+0x4f4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34f6:	9f bf       	out	0x3f, r25	; 63
			lcd_goto(MENU_LCD_CURSOR_PROG);
    34f8:	0a da       	rcall	.-3052   	; 0x290e <lcd_goto>
    34fa:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <prog_toLcd>
			prog_toLcd();
    34fe:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pipe_PowerStatus>
			if (pipe_PowerStatus != POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	81 f0       	breq	.+32     	; 0x3526 <main+0x534>
    3506:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
				// only if not displaying message to release keys
				if (prog_Display <= PROGR_MAX) {
    350a:	80 34       	cpi	r24, 0x40	; 64
    350c:	50 f4       	brcc	.+20     	; 0x3522 <main+0x530>
    350e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
					// show register settings
					reg_toLCD(regShowHW);
    3512:	0e 94 26 34 	call	0x684c	; 0x684c <reg_toLCD>
    3516:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
					regShowHW = ~regShowHW; // alternate between SW output and HW read registers
    351a:	80 95       	com	r24
    351c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <regShowHW>
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <main+0x534>
    3522:	0e 94 aa 34 	call	0x6954	; 0x6954 <reg_ClearOnLCD>
				} else {
					reg_ClearOnLCD();
    3526:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <time_UpTimeUpdated>
				}
			}
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    352a:	8f 3f       	cpi	r24, 0xFF	; 255
    352c:	09 f0       	breq	.+2      	; 0x3530 <main+0x53e>
    352e:	7c c0       	rjmp	.+248    	; 0x3628 <main+0x636>
			time_UpTimeUpdated = FALSE;
    3530:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <time_UpTimeUpdated>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    3534:	f0 90 cf 03 	lds	r15, 0x03CF	; 0x8003cf <lcd_cursorPos>
			uint8_t oldBlink = lcd_cursorIsOn;
    3538:	c0 91 7d 03 	lds	r28, 0x037D	; 0x80037d <lcd_cursorIsOn>
			if (oldBlink == TRUE) {
    353c:	cf 3f       	cpi	r28, 0xFF	; 255
				lcd_cursoroff();
    353e:	09 f4       	brne	.+2      	; 0x3542 <main+0x550>
    3540:	53 db       	rcall	.-2394   	; 0x2be8 <lcd_cursoroff>
			}
			char separator;
			if (*pTime == 0) {
    3542:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <time_Uptime+0x3>
    3546:	88 23       	and	r24, r24
    3548:	59 f0       	breq	.+22     	; 0x3560 <main+0x56e>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    354a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <time_Uptime+0x1>
    354e:	80 fd       	sbrc	r24, 0
				// when displaying hr:min blink ":"
				separator = ':';
    3550:	0e c0       	rjmp	.+28     	; 0x356e <main+0x57c>
    3552:	0f 2e       	mov	r0, r31
    3554:	fa e3       	ldi	r31, 0x3A	; 58
    3556:	ef 2e       	mov	r14, r31
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3558:	f0 2d       	mov	r31, r0
    355a:	09 e6       	ldi	r16, 0x69	; 105
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    355c:	12 e0       	ldi	r17, 0x02	; 2
    355e:	0c c0       	rjmp	.+24     	; 0x3578 <main+0x586>
    3560:	0f 2e       	mov	r0, r31
    3562:	fa e3       	ldi	r31, 0x3A	; 58
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    3564:	ef 2e       	mov	r14, r31
    3566:	f0 2d       	mov	r31, r0
    3568:	08 e6       	ldi	r16, 0x68	; 104
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    356a:	12 e0       	ldi	r17, 0x02	; 2
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <main+0x586>
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    356e:	68 94       	set
    3570:	ee 24       	eor	r14, r14
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    3572:	e5 f8       	bld	r14, 5
    3574:	09 e6       	ldi	r16, 0x69	; 105
    3576:	12 e0       	ldi	r17, 0x02	; 2
			lcd_dec2out(*(pTime--));
    3578:	87 e0       	ldi	r24, 0x07	; 7
    357a:	c9 d9       	rcall	.-3182   	; 0x290e <lcd_goto>
    357c:	f8 01       	movw	r30, r16
			lcd_putc(separator);
    357e:	80 81       	ld	r24, Z
    3580:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <lcd_dec2out>
			lcd_dec2out(*pTime);
    3584:	8e 2d       	mov	r24, r14
    3586:	ed d9       	rcall	.-3110   	; 0x2962 <lcd_putc>
    3588:	f8 01       	movw	r30, r16
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    358a:	31 97       	sbiw	r30, 0x01	; 1
    358c:	80 81       	ld	r24, Z
			if (ovflCount > 0){
    358e:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <lcd_dec2out>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    3592:	40 91 7b 16 	lds	r20, 0x167B	; 0x80167b <midiRxOvflCount>
    3596:	44 23       	and	r20, r20
    3598:	31 f0       	breq	.+12     	; 0x35a6 <main+0x5b4>
    359a:	50 e0       	ldi	r21, 0x00	; 0
				midiRxOvflCount = 0;
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	83 e0       	ldi	r24, 0x03	; 3
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    35a0:	0f dd       	rcall	.-1506   	; 0x2fc0 <log_putError>
    35a2:	10 92 7b 16 	sts	0x167B, r1	; 0x80167b <midiRxOvflCount>
			if (ovflCount > 0){
    35a6:	40 91 82 16 	lds	r20, 0x1682	; 0x801682 <midiTxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    35aa:	44 23       	and	r20, r20
    35ac:	31 f0       	breq	.+12     	; 0x35ba <main+0x5c8>
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	61 e0       	ldi	r22, 0x01	; 1
				midiTxOvflCount = 0;
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	05 dd       	rcall	.-1526   	; 0x2fc0 <log_putError>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    35b6:	10 92 82 16 	sts	0x1682, r1	; 0x801682 <midiTxOvflCount>
    35ba:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pipe_PowerStatus>
    35be:	84 ff       	sbrs	r24, 4
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <main+0x5d4>
    35c2:	80 e2       	ldi	r24, 0x20	; 32
    35c4:	01 c0       	rjmp	.+2      	; 0x35c8 <main+0x5d6>
    35c6:	89 e0       	ldi	r24, 0x09	; 9
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    35c8:	cc d9       	rcall	.-3176   	; 0x2962 <lcd_putc>
    35ca:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <log_unreadErrors>
    35ce:	8f 3f       	cpi	r24, 0xFF	; 255
    35d0:	11 f4       	brne	.+4      	; 0x35d6 <main+0x5e4>
    35d2:	85 e4       	ldi	r24, 0x45	; 69
    35d4:	01 c0       	rjmp	.+2      	; 0x35d8 <main+0x5e6>
    35d6:	80 e2       	ldi	r24, 0x20	; 32
    35d8:	c4 d9       	rcall	.-3192   	; 0x2962 <lcd_putc>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    35da:	8f 2d       	mov	r24, r15
    35dc:	98 d9       	rcall	.-3280   	; 0x290e <lcd_goto>
			if (oldBlink == TRUE) {
    35de:	cf 3f       	cpi	r28, 0xFF	; 255
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <main+0x5f2>
				lcd_cursosblink();
    35e2:	fc da       	rcall	.-2568   	; 0x2bdc <lcd_cursosblink>
    35e4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    35e8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ea:	69 f4       	brne	.+26     	; 0x3606 <main+0x614>
    35ec:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    35ee:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	06 c0       	rjmp	.+12     	; 0x3600 <main+0x60e>
    35f4:	e0 e5       	ldi	r30, 0x50	; 80
    35f6:	f2 e0       	ldi	r31, 0x02	; 2
    35f8:	8d e7       	ldi	r24, 0x7D	; 125
    35fa:	80 87       	std	Z+8, r24	; 0x08
    35fc:	11 86       	std	Z+9, r1	; 0x09
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	81 11       	cpse	r24, r1
    3602:	f8 cf       	rjmp	.-16     	; 0x35f4 <main+0x602>
    3604:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3606:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    360a:	8f 3f       	cpi	r24, 0xFF	; 255
    360c:	69 f4       	brne	.+26     	; 0x3628 <main+0x636>
    360e:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3610:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	06 c0       	rjmp	.+12     	; 0x3622 <main+0x630>
    3616:	e0 e5       	ldi	r30, 0x50	; 80
    3618:	f2 e0       	ldi	r31, 0x02	; 2
    361a:	8d e7       	ldi	r24, 0x7D	; 125
    361c:	82 87       	std	Z+10, r24	; 0x0a
    361e:	13 86       	std	Z+11, r1	; 0x0b
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	81 11       	cpse	r24, r1
    3624:	f8 cf       	rjmp	.-16     	; 0x3616 <main+0x624>
    3626:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3628:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <msgPipeOverflow>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    362c:	8f 3f       	cpi	r24, 0xFF	; 255
    362e:	39 f4       	brne	.+14     	; 0x363e <main+0x64c>
    3630:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <msgPipeOverflow>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    3634:	40 e0       	ldi	r20, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	c1 dc       	rcall	.-1662   	; 0x2fc0 <log_putError>
    363e:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <midiRxInIndex>
		}
		DEBUG_OUT_MIDI
		//---------------------- PROCESS MIDI IN DATA --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3642:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <midiRxOutIndex>
    3646:	98 17       	cp	r25, r24
    3648:	21 f0       	breq	.+8      	; 0x3652 <main+0x660>
    364a:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <serial1MIDIReadRx>
			midiIn_Process(serial1MIDIReadRx());
    364e:	0e 94 d5 37 	call	0x6faa	; 0x6faa <midiIn_Process>
    3652:	0e 94 81 30 	call	0x6102	; 0x6102 <pipeMsgStatus>
		}
		//----------------------- PIPE KEY PROCESSING -> MIDI OUT (AND COUPLERS) -----------------------------
		if MESSAGE_PIPE_PENDING	{
    3656:	8f 3f       	cpi	r24, 0xFF	; 255
    3658:	09 f0       	breq	.+2      	; 0x365c <main+0x66a>
    365a:	13 cd       	rjmp	.-1498   	; 0x3082 <main+0x90>
    365c:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <pipeMsgGet>
			midiKeyPress_Process(pipeMsgGet()); // events from module read (->midi out, couplers)
    3660:	0e 94 b3 38 	call	0x7166	; 0x7166 <midiKeyPress_Process>
    3664:	0e cd       	rjmp	.-1508   	; 0x3082 <main+0x90>

00003666 <menu_enterWriteModule>:
    3666:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <menuModVal>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    366a:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <menuModVal+0x1>
    366e:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <menuModVal+0x2>
    3672:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <menuModVal+0x3>
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	00 90 a0 05 	lds	r0, 0x05A0	; 0x8005a0 <menuVmodule>
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <menu_enterWriteModule+0x1e>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	0a 94       	dec	r0
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <menu_enterWriteModule+0x1a>
    3688:	48 2f       	mov	r20, r24
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	e6 e6       	ldi	r30, 0x66	; 102
    368e:	f3 e0       	ldi	r31, 0x03	; 3
    3690:	22 c0       	rjmp	.+68     	; 0x36d6 <menu_enterWriteModule+0x70>
    3692:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <menuModVal>
    3696:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <menuModVal+0x1>
    369a:	a0 91 d7 05 	lds	r26, 0x05D7	; 0x8005d7 <menuModVal+0x2>
    369e:	b0 91 d8 05 	lds	r27, 0x05D8	; 0x8005d8 <menuModVal+0x3>
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <menuModVal>
    36ae:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <menuModVal+0x1>
    36b2:	a0 93 d7 05 	sts	0x05D7, r26	; 0x8005d7 <menuModVal+0x2>
    36b6:	b0 93 d8 05 	sts	0x05D8, r27	; 0x8005d8 <menuModVal+0x3>
    36ba:	21 81       	ldd	r18, Z+1	; 0x01
    36bc:	24 23       	and	r18, r20
    36be:	49 f0       	breq	.+18     	; 0x36d2 <menu_enterWriteModule+0x6c>
    36c0:	81 60       	ori	r24, 0x01	; 1
    36c2:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <menuModVal>
    36c6:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <menuModVal+0x1>
    36ca:	a0 93 d7 05 	sts	0x05D7, r26	; 0x8005d7 <menuModVal+0x2>
    36ce:	b0 93 d8 05 	sts	0x05D8, r27	; 0x8005d8 <menuModVal+0x3>
    36d2:	38 97       	sbiw	r30, 0x08	; 8
    36d4:	3f 5f       	subi	r19, 0xFF	; 255
    36d6:	30 32       	cpi	r19, 0x20	; 32
    36d8:	e0 f2       	brcs	.-72     	; 0x3692 <menu_enterWriteModule+0x2c>
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	08 95       	ret

000036de <menu_exitWriteModule>:
    36de:	40 91 d5 05 	lds	r20, 0x05D5	; 0x8005d5 <menuModVal>
    36e2:	50 91 d6 05 	lds	r21, 0x05D6	; 0x8005d6 <menuModVal+0x1>
    36e6:	60 91 d7 05 	lds	r22, 0x05D7	; 0x8005d7 <menuModVal+0x2>
    36ea:	70 91 d8 05 	lds	r23, 0x05D8	; 0x8005d8 <menuModVal+0x3>
    36ee:	85 30       	cpi	r24, 0x05	; 5
    36f0:	09 f5       	brne	.+66     	; 0x3734 <menu_exitWriteModule+0x56>
    36f2:	a1 e0       	ldi	r26, 0x01	; 1
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	00 90 a0 05 	lds	r0, 0x05A0	; 0x8005a0 <menuVmodule>
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <menu_exitWriteModule+0x22>
    36fc:	aa 0f       	add	r26, r26
    36fe:	bb 1f       	adc	r27, r27
    3700:	0a 94       	dec	r0
    3702:	e2 f7       	brpl	.-8      	; 0x36fc <menu_exitWriteModule+0x1e>
    3704:	3a 2f       	mov	r19, r26
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	e6 e6       	ldi	r30, 0x66	; 102
    370a:	f3 e0       	ldi	r31, 0x03	; 3
    370c:	11 c0       	rjmp	.+34     	; 0x3730 <menu_exitWriteModule+0x52>
    370e:	77 23       	and	r23, r23
    3710:	24 f4       	brge	.+8      	; 0x371a <menu_exitWriteModule+0x3c>
    3712:	81 81       	ldd	r24, Z+1	; 0x01
    3714:	83 2b       	or	r24, r19
    3716:	81 83       	std	Z+1, r24	; 0x01
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <menu_exitWriteModule+0x46>
    371a:	21 81       	ldd	r18, Z+1	; 0x01
    371c:	8a 2f       	mov	r24, r26
    371e:	80 95       	com	r24
    3720:	82 23       	and	r24, r18
    3722:	81 83       	std	Z+1, r24	; 0x01
    3724:	44 0f       	add	r20, r20
    3726:	55 1f       	adc	r21, r21
    3728:	66 1f       	adc	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	38 97       	sbiw	r30, 0x08	; 8
    372e:	9f 5f       	subi	r25, 0xFF	; 255
    3730:	90 32       	cpi	r25, 0x20	; 32
    3732:	68 f3       	brcs	.-38     	; 0x370e <menu_exitWriteModule+0x30>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	08 95       	ret

00003738 <menuOnEnterModSel>:
    3738:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    373c:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    3740:	3e 96       	adiw	r30, 0x0e	; 14
    3742:	85 91       	lpm	r24, Z+
    3744:	95 91       	lpm	r25, Z+
    3746:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <menuVmodule>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	08 95       	ret

0000374e <menuOnEnterMidiInCh>:
    374e:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    3752:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    3756:	3e 96       	adiw	r30, 0x0e	; 14
    3758:	85 91       	lpm	r24, Z+
    375a:	95 91       	lpm	r25, Z+
    375c:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <menuVmidiChan>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	08 95       	ret

00003764 <menuOnEnterMidiInSec>:
    3764:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    3768:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    376c:	3e 96       	adiw	r30, 0x0e	; 14
    376e:	25 91       	lpm	r18, Z+
    3770:	35 91       	lpm	r19, Z+
    3772:	20 93 df 05 	sts	0x05DF, r18	; 0x8005df <menuVsection>
    3776:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <menuVmidiChan>
    377a:	8f 70       	andi	r24, 0x0F	; 15
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	23 70       	andi	r18, 0x03	; 3
    3780:	88 0f       	add	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	82 0f       	add	r24, r18
    378a:	91 1d       	adc	r25, r1
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <DataAdressOffset+0x1>
    3798:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DataAdressOffset>
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	08 95       	ret

000037a0 <menuOnEnterModManual>:
    37a0:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    37a4:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    37a8:	3e 96       	adiw	r30, 0x0e	; 14
    37aa:	85 91       	lpm	r24, Z+
    37ac:	95 91       	lpm	r25, Z+
    37ae:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuVmanual>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	08 95       	ret

000037b6 <menuOnEnterModSec>:
    37b6:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    37ba:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    37be:	3e 96       	adiw	r30, 0x0e	; 14
    37c0:	85 91       	lpm	r24, Z+
    37c2:	95 91       	lpm	r25, Z+
    37c4:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <menuVsection>
    37c8:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <menuVmanual>
    37cc:	2f 70       	andi	r18, 0x0F	; 15
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	83 70       	andi	r24, 0x03	; 3
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	a9 01       	movw	r20, r18
    37d6:	44 0f       	add	r20, r20
    37d8:	55 1f       	adc	r21, r21
    37da:	24 0f       	add	r18, r20
    37dc:	35 1f       	adc	r19, r21
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	22 0f       	add	r18, r18
    37e4:	33 1f       	adc	r19, r19
    37e6:	ac 01       	movw	r20, r24
    37e8:	44 0f       	add	r20, r20
    37ea:	55 1f       	adc	r21, r21
    37ec:	84 0f       	add	r24, r20
    37ee:	95 1f       	adc	r25, r21
    37f0:	82 0f       	add	r24, r18
    37f2:	93 1f       	adc	r25, r19
    37f4:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <DataAdressOffset+0x1>
    37f8:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DataAdressOffset>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	08 95       	ret

00003800 <menuOnEnterModSecReg>:
    3800:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    3804:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    3808:	3e 96       	adiw	r30, 0x0e	; 14
    380a:	85 91       	lpm	r24, Z+
    380c:	95 91       	lpm	r25, Z+
    380e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <menuVsection>
    3812:	87 70       	andi	r24, 0x07	; 7
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	9c 01       	movw	r18, r24
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	82 0f       	add	r24, r18
    381e:	93 1f       	adc	r25, r19
    3820:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <DataAdressOffset+0x1>
    3824:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DataAdressOffset>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	08 95       	ret

0000382c <menuOnEnterRegOut>:
    382c:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    3830:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    3834:	3e 96       	adiw	r30, 0x0e	; 14
    3836:	85 91       	lpm	r24, Z+
    3838:	95 91       	lpm	r25, Z+
    383a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <menuVsection>
    383e:	87 70       	andi	r24, 0x07	; 7
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <DataAdressOffset+0x1>
    384e:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DataAdressOffset>
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	08 95       	ret

00003856 <menuOnEnterKey>:
    3856:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    385a:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    385e:	3e 96       	adiw	r30, 0x0e	; 14
    3860:	85 91       	lpm	r24, Z+
    3862:	95 91       	lpm	r25, Z+
    3864:	84 30       	cpi	r24, 0x04	; 4
    3866:	60 f4       	brcc	.+24     	; 0x3880 <menuOnEnterKey+0x2a>
    3868:	fc 01       	movw	r30, r24
    386a:	ff 27       	eor	r31, r31
    386c:	ee 0f       	add	r30, r30
    386e:	ff 1f       	adc	r31, r31
    3870:	ee 51       	subi	r30, 0x1E	; 30
    3872:	fa 4f       	sbci	r31, 0xFA	; 250
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	90 93 f6 05 	sts	0x05F6, r25	; 0x8005f6 <menuVMenuSoftKey+0x1>
    387c:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <menuVMenuSoftKey>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	08 95       	ret

00003884 <menuOnExitMidiCCreg>:
    3884:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <eeprom_UpdateCCreg>
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	08 95       	ret

0000388c <menuOnExitRegisterOut>:
    388c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <eeprom_UpdateRegOut>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	08 95       	ret

00003894 <menuOnExitMidiThrough>:
    3894:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <eeprom_UpdateMidiThrough>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	08 95       	ret

0000389c <menuOnExitRegisterEdit>:
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	86 30       	cpi	r24, 0x06	; 6
    38a4:	f1 f0       	breq	.+60     	; 0x38e2 <menuOnExitRegisterEdit+0x46>
    38a6:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    38aa:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    38ae:	3e 96       	adiw	r30, 0x0e	; 14
    38b0:	05 90       	lpm	r0, Z+
    38b2:	f4 91       	lpm	r31, Z
    38b4:	e0 2d       	mov	r30, r0
    38b6:	cf 01       	movw	r24, r30
    38b8:	85 59       	subi	r24, 0x95	; 149
    38ba:	95 40       	sbci	r25, 0x05	; 5
    38bc:	88 0f       	add	r24, r24
    38be:	88 0f       	add	r24, r24
    38c0:	88 0f       	add	r24, r24
    38c2:	d0 81       	ld	r29, Z
    38c4:	c0 e0       	ldi	r28, 0x00	; 0
    38c6:	0b c0       	rjmp	.+22     	; 0x38de <menuOnExitRegisterEdit+0x42>
    38c8:	11 e0       	ldi	r17, 0x01	; 1
    38ca:	18 0f       	add	r17, r24
    38cc:	6d 2f       	mov	r22, r29
    38ce:	66 1f       	adc	r22, r22
    38d0:	66 27       	eor	r22, r22
    38d2:	66 1f       	adc	r22, r22
    38d4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <register_onOff>
    38d8:	dd 0f       	add	r29, r29
    38da:	cf 5f       	subi	r28, 0xFF	; 255
    38dc:	81 2f       	mov	r24, r17
    38de:	c8 30       	cpi	r28, 0x08	; 8
    38e0:	98 f3       	brcs	.-26     	; 0x38c8 <menuOnExitRegisterEdit+0x2c>
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	08 95       	ret

000038ec <softKeyRegOff>:
    38ec:	81 11       	cpse	r24, r1
    38ee:	0e 94 b3 33 	call	0x6766	; 0x6766 <midi_resetRegisters>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	08 95       	ret

000038f6 <menuOnExitCoupler>:
    38f6:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    38fa:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    38fe:	3e 96       	adiw	r30, 0x0e	; 14
    3900:	85 91       	lpm	r24, Z+
    3902:	95 91       	lpm	r25, Z+
    3904:	89 53       	subi	r24, 0x39	; 57
    3906:	98 40       	sbci	r25, 0x08	; 8
    3908:	fc 01       	movw	r30, r24
    390a:	ff 27       	eor	r31, r31
    390c:	e7 5c       	subi	r30, 0xC7	; 199
    390e:	f7 4f       	sbci	r31, 0xF7	; 247
    3910:	20 81       	ld	r18, Z
    3912:	21 11       	cpse	r18, r1
    3914:	0e 94 9c 30 	call	0x6138	; 0x6138 <set_Coupler>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	08 95       	ret

0000391c <menuOnExitSaveProgram>:
    391c:	86 30       	cpi	r24, 0x06	; 6
    391e:	39 f0       	breq	.+14     	; 0x392e <menuOnExitSaveProgram+0x12>
    3920:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <menuVKombination>
    3924:	80 34       	cpi	r24, 0x40	; 64
    3926:	18 f4       	brcc	.+6      	; 0x392e <menuOnExitSaveProgram+0x12>
    3928:	6f ef       	ldi	r22, 0xFF	; 255
    392a:	0e 94 c2 33 	call	0x6784	; 0x6784 <register_toProgram>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	08 95       	ret

00003932 <menuOnExitKeys>:
    3932:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <eeprom_UpdateSoftkeys>
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	08 95       	ret

0000393a <menu_readModule>:
    393a:	cf 92       	push	r12
    393c:	df 92       	push	r13
    393e:	ef 92       	push	r14
    3940:	ff 92       	push	r15
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	00 90 a0 05 	lds	r0, 0x05A0	; 0x8005a0 <menuVmodule>
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <menu_readModule+0x16>
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	0a 94       	dec	r0
    3952:	e2 f7       	brpl	.-8      	; 0x394c <menu_readModule+0x12>
    3954:	28 2f       	mov	r18, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	e6 e6       	ldi	r30, 0x66	; 102
    395a:	f3 e0       	ldi	r31, 0x03	; 3
    395c:	c1 2c       	mov	r12, r1
    395e:	d1 2c       	mov	r13, r1
    3960:	76 01       	movw	r14, r12
    3962:	0b c0       	rjmp	.+22     	; 0x397a <menu_readModule+0x40>
    3964:	cc 0c       	add	r12, r12
    3966:	dd 1c       	adc	r13, r13
    3968:	ee 1c       	adc	r14, r14
    396a:	ff 1c       	adc	r15, r15
    396c:	86 81       	ldd	r24, Z+6	; 0x06
    396e:	82 23       	and	r24, r18
    3970:	11 f0       	breq	.+4      	; 0x3976 <menu_readModule+0x3c>
    3972:	68 94       	set
    3974:	c0 f8       	bld	r12, 0
    3976:	38 97       	sbiw	r30, 0x08	; 8
    3978:	9f 5f       	subi	r25, 0xFF	; 255
    397a:	90 32       	cpi	r25, 0x20	; 32
    397c:	98 f3       	brcs	.-26     	; 0x3964 <menu_readModule+0x2a>
    397e:	8e e1       	ldi	r24, 0x1E	; 30
    3980:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3984:	c0 92 08 19 	sts	0x1908, r12	; 0x801908 <editLong>
    3988:	d0 92 09 19 	sts	0x1909, r13	; 0x801909 <editLong+0x1>
    398c:	e0 92 0a 19 	sts	0x190A, r14	; 0x80190a <editLong+0x2>
    3990:	f0 92 0b 19 	sts	0x190B, r15	; 0x80190b <editLong+0x3>
    3994:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <lcd_longout>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	ff 90       	pop	r15
    399c:	ef 90       	pop	r14
    399e:	df 90       	pop	r13
    39a0:	cf 90       	pop	r12
    39a2:	08 95       	ret

000039a4 <menu_testModule>:
    39a4:	8e e1       	ldi	r24, 0x1E	; 30
    39a6:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    39aa:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <menuVmodule>
    39ae:	0e 94 39 10 	call	0x2072	; 0x2072 <test_PipeModule>
    39b2:	60 93 08 19 	sts	0x1908, r22	; 0x801908 <editLong>
    39b6:	70 93 09 19 	sts	0x1909, r23	; 0x801909 <editLong+0x1>
    39ba:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <editLong+0x2>
    39be:	90 93 0b 19 	sts	0x190B, r25	; 0x80190b <editLong+0x3>
    39c2:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <lcd_longout>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	08 95       	ret

000039ca <menuOnEnterTune>:
    39ca:	cf 93       	push	r28
    39cc:	8f 3f       	cpi	r24, 0xFF	; 255
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <menuOnEnterTune+0x8>
    39d0:	79 c0       	rjmp	.+242    	; 0x3ac4 <menuOnEnterTune+0xfa>
    39d2:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minManNote.3072>
    39d6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <maxManNote.3073>
    39da:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    39de:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    39e2:	3e 96       	adiw	r30, 0x0e	; 14
    39e4:	85 91       	lpm	r24, Z+
    39e6:	95 91       	lpm	r25, Z+
    39e8:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuVmanual>
    39ec:	84 30       	cpi	r24, 0x04	; 4
    39ee:	10 f0       	brcs	.+4      	; 0x39f4 <menuOnEnterTune+0x2a>
    39f0:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <menuVmanual>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	39 c0       	rjmp	.+114    	; 0x3a6a <menuOnEnterTune+0xa0>
    39f8:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	e2 2f       	mov	r30, r18
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	df 01       	movw	r26, r30
    3a04:	aa 0f       	add	r26, r26
    3a06:	bb 1f       	adc	r27, r27
    3a08:	ad 01       	movw	r20, r26
    3a0a:	4e 0f       	add	r20, r30
    3a0c:	5f 1f       	adc	r21, r31
    3a0e:	dc 01       	movw	r26, r24
    3a10:	aa 0f       	add	r26, r26
    3a12:	bb 1f       	adc	r27, r27
    3a14:	a8 0f       	add	r26, r24
    3a16:	b9 1f       	adc	r27, r25
    3a18:	aa 0f       	add	r26, r26
    3a1a:	bb 1f       	adc	r27, r27
    3a1c:	aa 0f       	add	r26, r26
    3a1e:	bb 1f       	adc	r27, r27
    3a20:	a4 0f       	add	r26, r20
    3a22:	b5 1f       	adc	r27, r21
    3a24:	a0 5a       	subi	r26, 0xA0	; 160
    3a26:	b6 4f       	sbci	r27, 0xF6	; 246
    3a28:	3c 91       	ld	r19, X
    3a2a:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <minManNote.3072>
    3a2e:	34 17       	cp	r19, r20
    3a30:	10 f4       	brcc	.+4      	; 0x3a36 <menuOnEnterTune+0x6c>
    3a32:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <minManNote.3072>
    3a36:	af 01       	movw	r20, r30
    3a38:	44 0f       	add	r20, r20
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	e4 0f       	add	r30, r20
    3a3e:	f5 1f       	adc	r31, r21
    3a40:	ac 01       	movw	r20, r24
    3a42:	44 0f       	add	r20, r20
    3a44:	55 1f       	adc	r21, r21
    3a46:	84 0f       	add	r24, r20
    3a48:	95 1f       	adc	r25, r21
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	e8 0f       	add	r30, r24
    3a54:	f9 1f       	adc	r31, r25
    3a56:	e0 5a       	subi	r30, 0xA0	; 160
    3a58:	f6 4f       	sbci	r31, 0xF6	; 246
    3a5a:	81 81       	ldd	r24, Z+1	; 0x01
    3a5c:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <maxManNote.3073>
    3a60:	98 17       	cp	r25, r24
    3a62:	10 f4       	brcc	.+4      	; 0x3a68 <menuOnEnterTune+0x9e>
    3a64:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <maxManNote.3073>
    3a68:	2f 5f       	subi	r18, 0xFF	; 255
    3a6a:	24 30       	cpi	r18, 0x04	; 4
    3a6c:	28 f2       	brcs	.-118    	; 0x39f8 <menuOnEnterTune+0x2e>
    3a6e:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3072>
    3a72:	88 23       	and	r24, r24
    3a74:	5c f4       	brge	.+22     	; 0x3a8c <menuOnEnterTune+0xc2>
    3a76:	8e e1       	ldi	r24, 0x1E	; 30
    3a78:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3a7c:	85 e4       	ldi	r24, 0x45	; 69
    3a7e:	94 e0       	ldi	r25, 0x04	; 4
    3a80:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menuNote>
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <menuOnEnterTune+0xca>
    3a8c:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menuNote>
    3a90:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3074>
    3a94:	63 ed       	ldi	r22, 0xD3	; 211
    3a96:	74 e1       	ldi	r23, 0x14	; 20
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    3a9e:	62 ee       	ldi	r22, 0xE2	; 226
    3aa0:	74 e1       	ldi	r23, 0x14	; 20
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    3aa8:	67 ee       	ldi	r22, 0xE7	; 231
    3aaa:	74 e1       	ldi	r23, 0x14	; 20
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    3ab2:	69 ee       	ldi	r22, 0xE9	; 233
    3ab4:	74 e1       	ldi	r23, 0x14	; 20
    3ab6:	83 e0       	ldi	r24, 0x03	; 3
    3ab8:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    3abc:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    3ac0:	cf ef       	ldi	r28, 0xFF	; 255
    3ac2:	71 c0       	rjmp	.+226    	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3ac4:	60 91 c7 05 	lds	r22, 0x05C7	; 0x8005c7 <menuNote>
    3ac8:	6f 3f       	cpi	r22, 0xFF	; 255
    3aca:	09 f4       	brne	.+2      	; 0x3ace <menuOnEnterTune+0x104>
    3acc:	61 c0       	rjmp	.+194    	; 0x3b90 <menuOnEnterTune+0x1c6>
    3ace:	81 30       	cpi	r24, 0x01	; 1
    3ad0:	d9 f4       	brne	.+54     	; 0x3b08 <menuOnEnterTune+0x13e>
    3ad2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <maxManNote.3073>
    3ad6:	68 17       	cp	r22, r24
    3ad8:	08 f0       	brcs	.+2      	; 0x3adc <menuOnEnterTune+0x112>
    3ada:	5c c0       	rjmp	.+184    	; 0x3b94 <menuOnEnterTune+0x1ca>
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3ae2:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3ae6:	60 91 c7 05 	lds	r22, 0x05C7	; 0x8005c7 <menuNote>
    3aea:	6f 5f       	subi	r22, 0xFF	; 255
    3aec:	60 93 c7 05 	sts	0x05C7, r22	; 0x8005c7 <menuNote>
    3af0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	09 f0       	breq	.+2      	; 0x3afa <menuOnEnterTune+0x130>
    3af8:	4f c0       	rjmp	.+158    	; 0x3b98 <menuOnEnterTune+0x1ce>
    3afa:	41 e0       	ldi	r20, 0x01	; 1
    3afc:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b00:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b04:	cf ef       	ldi	r28, 0xFF	; 255
    3b06:	4f c0       	rjmp	.+158    	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b08:	84 30       	cpi	r24, 0x04	; 4
    3b0a:	d1 f4       	brne	.+52     	; 0x3b40 <menuOnEnterTune+0x176>
    3b0c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3072>
    3b10:	86 17       	cp	r24, r22
    3b12:	08 f0       	brcs	.+2      	; 0x3b16 <menuOnEnterTune+0x14c>
    3b14:	43 c0       	rjmp	.+134    	; 0x3b9c <menuOnEnterTune+0x1d2>
    3b16:	40 e0       	ldi	r20, 0x00	; 0
    3b18:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b1c:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b20:	60 91 c7 05 	lds	r22, 0x05C7	; 0x8005c7 <menuNote>
    3b24:	61 50       	subi	r22, 0x01	; 1
    3b26:	60 93 c7 05 	sts	0x05C7, r22	; 0x8005c7 <menuNote>
    3b2a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3b2e:	81 30       	cpi	r24, 0x01	; 1
    3b30:	b9 f5       	brne	.+110    	; 0x3ba0 <menuOnEnterTune+0x1d6>
    3b32:	41 e0       	ldi	r20, 0x01	; 1
    3b34:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b38:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b3c:	cf ef       	ldi	r28, 0xFF	; 255
    3b3e:	33 c0       	rjmp	.+102    	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b40:	83 30       	cpi	r24, 0x03	; 3
    3b42:	91 f4       	brne	.+36     	; 0x3b68 <menuOnEnterTune+0x19e>
    3b44:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3b48:	81 11       	cpse	r24, r1
    3b4a:	04 c0       	rjmp	.+8      	; 0x3b54 <menuOnEnterTune+0x18a>
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <notOnOff.3074>
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <menuOnEnterTune+0x18e>
    3b54:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3074>
    3b58:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <notOnOff.3074>
    3b5c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b60:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b64:	cf ef       	ldi	r28, 0xFF	; 255
    3b66:	1f c0       	rjmp	.+62     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b68:	82 30       	cpi	r24, 0x02	; 2
    3b6a:	11 f0       	breq	.+4      	; 0x3b70 <menuOnEnterTune+0x1a6>
    3b6c:	86 30       	cpi	r24, 0x06	; 6
    3b6e:	39 f4       	brne	.+14     	; 0x3b7e <menuOnEnterTune+0x1b4>
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b76:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b7a:	c0 e0       	ldi	r28, 0x00	; 0
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b7e:	85 30       	cpi	r24, 0x05	; 5
    3b80:	89 f4       	brne	.+34     	; 0x3ba4 <menuOnEnterTune+0x1da>
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuVmanual>
    3b88:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <manual_NoteOnOff>
    3b8c:	c0 e0       	ldi	r28, 0x00	; 0
    3b8e:	0b c0       	rjmp	.+22     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b90:	c0 e0       	ldi	r28, 0x00	; 0
    3b92:	09 c0       	rjmp	.+18     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b94:	cf ef       	ldi	r28, 0xFF	; 255
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b98:	cf ef       	ldi	r28, 0xFF	; 255
    3b9a:	05 c0       	rjmp	.+10     	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3b9c:	cf ef       	ldi	r28, 0xFF	; 255
    3b9e:	03 c0       	rjmp	.+6      	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3ba0:	cf ef       	ldi	r28, 0xFF	; 255
    3ba2:	01 c0       	rjmp	.+2      	; 0x3ba6 <menuOnEnterTune+0x1dc>
    3ba4:	cf ef       	ldi	r28, 0xFF	; 255
    3ba6:	cf 3f       	cpi	r28, 0xFF	; 255
    3ba8:	a1 f5       	brne	.+104    	; 0x3c12 <menuOnEnterTune+0x248>
    3baa:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <menuNote>
    3bae:	8f 3f       	cpi	r24, 0xFF	; 255
    3bb0:	69 f1       	breq	.+90     	; 0x3c0c <menuOnEnterTune+0x242>
    3bb2:	8e e1       	ldi	r24, 0x1E	; 30
    3bb4:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3bb8:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <menuNote>
    3bbc:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <lcd_noteOut>
    3bc0:	80 e2       	ldi	r24, 0x20	; 32
    3bc2:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3bc6:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3bca:	81 11       	cpse	r24, r1
    3bcc:	0a c0       	rjmp	.+20     	; 0x3be2 <menuOnEnterTune+0x218>
    3bce:	81 e6       	ldi	r24, 0x61	; 97
    3bd0:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3bd4:	85 e7       	ldi	r24, 0x75	; 117
    3bd6:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3bda:	83 e7       	ldi	r24, 0x73	; 115
    3bdc:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3be0:	09 c0       	rjmp	.+18     	; 0x3bf4 <menuOnEnterTune+0x22a>
    3be2:	85 e6       	ldi	r24, 0x65	; 101
    3be4:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3be8:	89 e6       	ldi	r24, 0x69	; 105
    3bea:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3bee:	8e e6       	ldi	r24, 0x6E	; 110
    3bf0:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    3bf4:	61 e0       	ldi	r22, 0x01	; 1
    3bf6:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3bfa:	81 11       	cpse	r24, r1
    3bfc:	01 c0       	rjmp	.+2      	; 0x3c00 <menuOnEnterTune+0x236>
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	0e 94 9f 40 	call	0x813e	; 0x813e <keylabel_statcheck>
    3c06:	81 11       	cpse	r24, r1
    3c08:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    3c0c:	8e e1       	ldi	r24, 0x1E	; 30
    3c0e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c12:	8c 2f       	mov	r24, r28
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <menuOnExitMidiActiveSense>:
    3c18:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <eeprom_UpdateMidiOutMap>
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	08 95       	ret

00003c20 <menuOnExitMidiOut>:
    3c20:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <eeprom_UpdateMidiOutMap>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	08 95       	ret

00003c28 <menuOnExitMidiIn>:
    3c28:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <eeprom_UpdateMidiInMap>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	08 95       	ret

00003c30 <menuOnExitManual>:
    3c30:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_UpdateManualMap>
    3c34:	0e 94 f6 30 	call	0x61ec	; 0x61ec <registers_CalcCount>
    3c38:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <eeprom_UpdateReg>
    3c3c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <Midi_updateManualRange>
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	08 95       	ret

00003c44 <menuOnExitModules>:
    3c44:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <eeprom_UpdateModules>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	08 95       	ret

00003c4c <menuOnEnterEEBackup>:
    3c4c:	8e e1       	ldi	r24, 0x1E	; 30
    3c4e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c52:	86 e3       	ldi	r24, 0x36	; 54
    3c54:	94 e0       	ldi	r25, 0x04	; 4
    3c56:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3c5a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <eeprom_Backup>
    3c5e:	8e e1       	ldi	r24, 0x1E	; 30
    3c60:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c64:	8e e2       	ldi	r24, 0x2E	; 46
    3c66:	94 e0       	ldi	r25, 0x04	; 4
    3c68:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	08 95       	ret

00003c70 <menuOnEnterEERestore>:
    3c70:	8e e1       	ldi	r24, 0x1E	; 30
    3c72:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c76:	86 e3       	ldi	r24, 0x36	; 54
    3c78:	94 e0       	ldi	r25, 0x04	; 4
    3c7a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3c7e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <eeprom_Restore>
    3c82:	8e e1       	ldi	r24, 0x1E	; 30
    3c84:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c88:	8e e2       	ldi	r24, 0x2E	; 46
    3c8a:	94 e0       	ldi	r25, 0x04	; 4
    3c8c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	08 95       	ret

00003c94 <menuOnEnterEEUpdate>:
    3c94:	8e e1       	ldi	r24, 0x1E	; 30
    3c96:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3c9a:	86 e3       	ldi	r24, 0x36	; 54
    3c9c:	94 e0       	ldi	r25, 0x04	; 4
    3c9e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3ca2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <eeprom_UpdateALL>
    3ca6:	8e e1       	ldi	r24, 0x1E	; 30
    3ca8:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    3cac:	8e e2       	ldi	r24, 0x2E	; 46
    3cae:	94 e0       	ldi	r25, 0x04	; 4
    3cb0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	08 95       	ret

00003cb8 <menuOnEnterUSBprotokoll>:
    3cb8:	cf 93       	push	r28
    3cba:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3cbe:	80 e2       	ldi	r24, 0x20	; 32
    3cc0:	94 e0       	ldi	r25, 0x04	; 4
    3cc2:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3cc6:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <log_count>
    3cca:	81 11       	cpse	r24, r1
    3ccc:	17 c0       	rjmp	.+46     	; 0x3cfc <menuOnEnterUSBprotokoll+0x44>
    3cce:	86 e2       	ldi	r24, 0x26	; 38
    3cd0:	94 e0       	ldi	r25, 0x04	; 4
    3cd2:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3cd6:	16 c0       	rjmp	.+44     	; 0x3d04 <menuOnEnterUSBprotokoll+0x4c>
    3cd8:	6f ef       	ldi	r22, 0xFF	; 255
    3cda:	8c 2f       	mov	r24, r28
    3cdc:	7a d9       	rcall	.-3340   	; 0x2fd2 <log_getShortTextFromIndex>
    3cde:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3ce2:	83 ef       	ldi	r24, 0xF3	; 243
    3ce4:	94 e1       	ldi	r25, 0x14	; 20
    3ce6:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3cea:	8c 2f       	mov	r24, r28
    3cec:	15 d8       	rcall	.-4054   	; 0x2d18 <log_getErrorText>
    3cee:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3cf2:	83 ef       	ldi	r24, 0xF3	; 243
    3cf4:	94 e1       	ldi	r25, 0x14	; 20
    3cf6:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3cfa:	8c 2f       	mov	r24, r28
    3cfc:	cf ef       	ldi	r28, 0xFF	; 255
    3cfe:	c8 0f       	add	r28, r24
    3d00:	81 11       	cpse	r24, r1
    3d02:	ea cf       	rjmp	.-44     	; 0x3cd8 <menuOnEnterUSBprotokoll+0x20>
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <menuOnExitUSBactive>:
    3d0a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <eeprom_UpdateUSB>
    3d0e:	80 91 7e 16 	lds	r24, 0x167E	; 0x80167e <serUSB_Active>
    3d12:	8f 3f       	cpi	r24, 0xFF	; 255
    3d14:	81 f4       	brne	.+32     	; 0x3d36 <menuOnExitUSBactive+0x2c>
    3d16:	83 ef       	ldi	r24, 0xF3	; 243
    3d18:	94 e1       	ldi	r25, 0x14	; 20
    3d1a:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d1e:	87 e0       	ldi	r24, 0x07	; 7
    3d20:	94 e0       	ldi	r25, 0x04	; 4
    3d22:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d26:	8b ea       	ldi	r24, 0xAB	; 171
    3d28:	94 e1       	ldi	r25, 0x14	; 20
    3d2a:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d2e:	83 ef       	ldi	r24, 0xF3	; 243
    3d30:	94 e1       	ldi	r25, 0x14	; 20
    3d32:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	08 95       	ret

00003d3a <menuOnEnterUSBsendHW>:
    3d3a:	9f 92       	push	r9
    3d3c:	af 92       	push	r10
    3d3e:	bf 92       	push	r11
    3d40:	cf 92       	push	r12
    3d42:	df 92       	push	r13
    3d44:	ef 92       	push	r14
    3d46:	ff 92       	push	r15
    3d48:	0f 93       	push	r16
    3d4a:	1f 93       	push	r17
    3d4c:	cf 93       	push	r28
    3d4e:	df 93       	push	r29
    3d50:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3d54:	8e ee       	ldi	r24, 0xEE	; 238
    3d56:	93 e0       	ldi	r25, 0x03	; 3
    3d58:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d5c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3d60:	8b ed       	ldi	r24, 0xDB	; 219
    3d62:	93 e0       	ldi	r25, 0x03	; 3
    3d64:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3d68:	ca e7       	ldi	r28, 0x7A	; 122
    3d6a:	d3 e0       	ldi	r29, 0x03	; 3
    3d6c:	6c e0       	ldi	r22, 0x0C	; 12
    3d6e:	79 e1       	ldi	r23, 0x19	; 25
    3d70:	88 81       	ld	r24, Y
    3d72:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3d76:	22 e7       	ldi	r18, 0x72	; 114
    3d78:	dc 01       	movw	r26, r24
    3d7a:	2c 93       	st	X, r18
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	6e 5f       	subi	r22, 0xFE	; 254
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	20 e2       	ldi	r18, 0x20	; 32
    3d84:	11 96       	adiw	r26, 0x01	; 1
    3d86:	2c 93       	st	X, r18
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3d8e:	27 e7       	ldi	r18, 0x77	; 119
    3d90:	fc 01       	movw	r30, r24
    3d92:	20 83       	st	Z, r18
    3d94:	8c e0       	ldi	r24, 0x0C	; 12
    3d96:	99 e1       	ldi	r25, 0x19	; 25
    3d98:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3d9c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3da0:	89 ec       	ldi	r24, 0xC9	; 201
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3da8:	6c e0       	ldi	r22, 0x0C	; 12
    3daa:	79 e1       	ldi	r23, 0x19	; 25
    3dac:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <pipe_ModuleTested>
    3db0:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3db4:	8c e0       	ldi	r24, 0x0C	; 12
    3db6:	99 e1       	ldi	r25, 0x19	; 25
    3db8:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3dbc:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3dc0:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3dc4:	e1 2c       	mov	r14, r1
    3dc6:	d1 c0       	rjmp	.+418    	; 0x3f6a <menuOnEnterUSBsendHW+0x230>
    3dc8:	80 ec       	ldi	r24, 0xC0	; 192
    3dca:	93 e0       	ldi	r25, 0x03	; 3
    3dcc:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3dd0:	6c e0       	ldi	r22, 0x0C	; 12
    3dd2:	79 e1       	ldi	r23, 0x19	; 25
    3dd4:	8e 2d       	mov	r24, r14
    3dd6:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <putChar_Manual>
    3dda:	8c e0       	ldi	r24, 0x0C	; 12
    3ddc:	99 e1       	ldi	r25, 0x19	; 25
    3dde:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3de2:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3de6:	f1 2c       	mov	r15, r1
    3de8:	a4 c0       	rjmp	.+328    	; 0x3f32 <menuOnEnterUSBsendHW+0x1f8>
    3dea:	89 eb       	ldi	r24, 0xB9	; 185
    3dec:	93 e0       	ldi	r25, 0x03	; 3
    3dee:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3df2:	80 e3       	ldi	r24, 0x30	; 48
    3df4:	8f 0d       	add	r24, r15
    3df6:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3dfa:	8a e3       	ldi	r24, 0x3A	; 58
    3dfc:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3e00:	80 e2       	ldi	r24, 0x20	; 32
    3e02:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3e06:	0e 2d       	mov	r16, r14
    3e08:	10 e0       	ldi	r17, 0x00	; 0
    3e0a:	cf 2c       	mov	r12, r15
    3e0c:	d1 2c       	mov	r13, r1
    3e0e:	e6 01       	movw	r28, r12
    3e10:	cc 0f       	add	r28, r28
    3e12:	dd 1f       	adc	r29, r29
    3e14:	ce 01       	movw	r24, r28
    3e16:	8c 0d       	add	r24, r12
    3e18:	9d 1d       	adc	r25, r13
    3e1a:	e8 01       	movw	r28, r16
    3e1c:	cc 0f       	add	r28, r28
    3e1e:	dd 1f       	adc	r29, r29
    3e20:	c0 0f       	add	r28, r16
    3e22:	d1 1f       	adc	r29, r17
    3e24:	cc 0f       	add	r28, r28
    3e26:	dd 1f       	adc	r29, r29
    3e28:	cc 0f       	add	r28, r28
    3e2a:	dd 1f       	adc	r29, r29
    3e2c:	c8 0f       	add	r28, r24
    3e2e:	d9 1f       	adc	r29, r25
    3e30:	c0 5a       	subi	r28, 0xA0	; 160
    3e32:	d6 4f       	sbci	r29, 0xF6	; 246
    3e34:	6c e0       	ldi	r22, 0x0C	; 12
    3e36:	79 e1       	ldi	r23, 0x19	; 25
    3e38:	88 81       	ld	r24, Y
    3e3a:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3e3e:	bc 01       	movw	r22, r24
    3e40:	6f 5f       	subi	r22, 0xFF	; 255
    3e42:	7f 4f       	sbci	r23, 0xFF	; 255
    3e44:	0f 2e       	mov	r0, r31
    3e46:	fe e2       	ldi	r31, 0x2E	; 46
    3e48:	bf 2e       	mov	r11, r31
    3e4a:	f0 2d       	mov	r31, r0
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	bc 92       	st	X, r11
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3e56:	bc 01       	movw	r22, r24
    3e58:	6f 5f       	subi	r22, 0xFF	; 255
    3e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	b0 82       	st	Z, r11
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3e66:	fc 01       	movw	r30, r24
    3e68:	80 e2       	ldi	r24, 0x20	; 32
    3e6a:	80 83       	st	Z, r24
    3e6c:	9d e3       	ldi	r25, 0x3D	; 61
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	82 83       	std	Z+2, r24	; 0x02
    3e72:	8c e0       	ldi	r24, 0x0C	; 12
    3e74:	99 e1       	ldi	r25, 0x19	; 25
    3e76:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3e7a:	88 81       	ld	r24, Y
    3e7c:	88 23       	and	r24, r24
    3e7e:	2c f4       	brge	.+10     	; 0x3e8a <menuOnEnterUSBsendHW+0x150>
    3e80:	87 ea       	ldi	r24, 0xA7	; 167
    3e82:	93 e0       	ldi	r25, 0x03	; 3
    3e84:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3e88:	51 c0       	rjmp	.+162    	; 0x3f2c <menuOnEnterUSBsendHW+0x1f2>
    3e8a:	6c e0       	ldi	r22, 0x0C	; 12
    3e8c:	79 e1       	ldi	r23, 0x19	; 25
    3e8e:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <putChar_Note>
    3e92:	bc 01       	movw	r22, r24
    3e94:	6f 5f       	subi	r22, 0xFF	; 255
    3e96:	7f 4f       	sbci	r23, 0xFF	; 255
    3e98:	0f 2e       	mov	r0, r31
    3e9a:	fd e2       	ldi	r31, 0x2D	; 45
    3e9c:	9f 2e       	mov	r9, r31
    3e9e:	f0 2d       	mov	r31, r0
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	9c 92       	st	X, r9
    3ea4:	f6 01       	movw	r30, r12
    3ea6:	ee 0f       	add	r30, r30
    3ea8:	ff 1f       	adc	r31, r31
    3eaa:	ce 0e       	add	r12, r30
    3eac:	df 1e       	adc	r13, r31
    3eae:	58 01       	movw	r10, r16
    3eb0:	aa 0c       	add	r10, r10
    3eb2:	bb 1c       	adc	r11, r11
    3eb4:	e5 01       	movw	r28, r10
    3eb6:	c0 0f       	add	r28, r16
    3eb8:	d1 1f       	adc	r29, r17
    3eba:	cc 0f       	add	r28, r28
    3ebc:	dd 1f       	adc	r29, r29
    3ebe:	cc 0f       	add	r28, r28
    3ec0:	dd 1f       	adc	r29, r29
    3ec2:	cc 0d       	add	r28, r12
    3ec4:	dd 1d       	adc	r29, r13
    3ec6:	c0 5a       	subi	r28, 0xA0	; 160
    3ec8:	d6 4f       	sbci	r29, 0xF6	; 246
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <putChar_Note>
    3ed0:	20 e2       	ldi	r18, 0x20	; 32
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	20 83       	st	Z, r18
    3ed6:	11 82       	std	Z+1, r1	; 0x01
    3ed8:	8c e0       	ldi	r24, 0x0C	; 12
    3eda:	99 e1       	ldi	r25, 0x19	; 25
    3edc:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3ee0:	8f e9       	ldi	r24, 0x9F	; 159
    3ee2:	93 e0       	ldi	r25, 0x03	; 3
    3ee4:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eea:	82 95       	swap	r24
    3eec:	86 95       	lsr	r24
    3eee:	87 70       	andi	r24, 0x07	; 7
    3ef0:	80 5d       	subi	r24, 0xD0	; 208
    3ef2:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3ef6:	87 e9       	ldi	r24, 0x97	; 151
    3ef8:	93 e0       	ldi	r25, 0x03	; 3
    3efa:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	6c e0       	ldi	r22, 0x0C	; 12
    3f02:	79 e1       	ldi	r23, 0x19	; 25
    3f04:	8f 71       	andi	r24, 0x1F	; 31
    3f06:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	6f 5f       	subi	r22, 0xFF	; 255
    3f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f10:	dc 01       	movw	r26, r24
    3f12:	9c 92       	st	X, r9
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	99 81       	ldd	r25, Y+1	; 0x01
    3f18:	28 81       	ld	r18, Y
    3f1a:	8f 71       	andi	r24, 0x1F	; 31
    3f1c:	89 0f       	add	r24, r25
    3f1e:	82 1b       	sub	r24, r18
    3f20:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    3f24:	8c e0       	ldi	r24, 0x0C	; 12
    3f26:	99 e1       	ldi	r25, 0x19	; 25
    3f28:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3f2c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3f30:	f3 94       	inc	r15
    3f32:	b3 e0       	ldi	r27, 0x03	; 3
    3f34:	bf 15       	cp	r27, r15
    3f36:	08 f0       	brcs	.+2      	; 0x3f3a <menuOnEnterUSBsendHW+0x200>
    3f38:	58 cf       	rjmp	.-336    	; 0x3dea <menuOnEnterUSBsendHW+0xb0>
    3f3a:	85 e7       	ldi	r24, 0x75	; 117
    3f3c:	93 e0       	ldi	r25, 0x03	; 3
    3f3e:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3f42:	ee 2d       	mov	r30, r14
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	ee 0f       	add	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	e0 5b       	subi	r30, 0xB0	; 176
    3f4c:	f6 4f       	sbci	r31, 0xF6	; 246
    3f4e:	6c e0       	ldi	r22, 0x0C	; 12
    3f50:	79 e1       	ldi	r23, 0x19	; 25
    3f52:	81 81       	ldd	r24, Z+1	; 0x01
    3f54:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <putChar_MidiChan>
    3f58:	8c e0       	ldi	r24, 0x0C	; 12
    3f5a:	99 e1       	ldi	r25, 0x19	; 25
    3f5c:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3f60:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3f64:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    3f68:	e3 94       	inc	r14
    3f6a:	e3 e0       	ldi	r30, 0x03	; 3
    3f6c:	ee 15       	cp	r30, r14
    3f6e:	08 f0       	brcs	.+2      	; 0x3f72 <menuOnEnterUSBsendHW+0x238>
    3f70:	2b cf       	rjmp	.-426    	; 0x3dc8 <menuOnEnterUSBsendHW+0x8e>
    3f72:	8d ea       	ldi	r24, 0xAD	; 173
    3f74:	93 e0       	ldi	r25, 0x03	; 3
    3f76:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3f7a:	f1 2c       	mov	r15, r1
    3f7c:	96 c0       	rjmp	.+300    	; 0x40aa <menuOnEnterUSBsendHW+0x370>
    3f7e:	89 eb       	ldi	r24, 0xB9	; 185
    3f80:	93 e0       	ldi	r25, 0x03	; 3
    3f82:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    3f86:	80 e3       	ldi	r24, 0x30	; 48
    3f88:	8f 0d       	add	r24, r15
    3f8a:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3f8e:	8a e3       	ldi	r24, 0x3A	; 58
    3f90:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3f94:	80 e2       	ldi	r24, 0x20	; 32
    3f96:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    3f9a:	cf 2d       	mov	r28, r15
    3f9c:	d0 e0       	ldi	r29, 0x00	; 0
    3f9e:	8e 01       	movw	r16, r28
    3fa0:	00 0f       	add	r16, r16
    3fa2:	11 1f       	adc	r17, r17
    3fa4:	0c 0f       	add	r16, r28
    3fa6:	1d 1f       	adc	r17, r29
    3fa8:	01 5e       	subi	r16, 0xE1	; 225
    3faa:	17 4f       	sbci	r17, 0xF7	; 247
    3fac:	6c e0       	ldi	r22, 0x0C	; 12
    3fae:	79 e1       	ldi	r23, 0x19	; 25
    3fb0:	d8 01       	movw	r26, r16
    3fb2:	8c 91       	ld	r24, X
    3fb4:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3fb8:	bc 01       	movw	r22, r24
    3fba:	6f 5f       	subi	r22, 0xFF	; 255
    3fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbe:	0f 2e       	mov	r0, r31
    3fc0:	fe e2       	ldi	r31, 0x2E	; 46
    3fc2:	ef 2e       	mov	r14, r31
    3fc4:	f0 2d       	mov	r31, r0
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e0 82       	st	Z, r14
    3fca:	d8 01       	movw	r26, r16
    3fcc:	11 96       	adiw	r26, 0x01	; 1
    3fce:	8c 91       	ld	r24, X
    3fd0:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	6f 5f       	subi	r22, 0xFF	; 255
    3fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fda:	fc 01       	movw	r30, r24
    3fdc:	e0 82       	st	Z, r14
    3fde:	d8 01       	movw	r26, r16
    3fe0:	12 96       	adiw	r26, 0x02	; 2
    3fe2:	8c 91       	ld	r24, X
    3fe4:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    3fe8:	fc 01       	movw	r30, r24
    3fea:	80 e2       	ldi	r24, 0x20	; 32
    3fec:	80 83       	st	Z, r24
    3fee:	9d e3       	ldi	r25, 0x3D	; 61
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	82 83       	std	Z+2, r24	; 0x02
    3ff4:	13 82       	std	Z+3, r1	; 0x03
    3ff6:	8c e0       	ldi	r24, 0x0C	; 12
    3ff8:	99 e1       	ldi	r25, 0x19	; 25
    3ffa:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    3ffe:	f8 01       	movw	r30, r16
    4000:	80 81       	ld	r24, Z
    4002:	8f 3f       	cpi	r24, 0xFF	; 255
    4004:	29 f4       	brne	.+10     	; 0x4010 <menuOnEnterUSBsendHW+0x2d6>
    4006:	87 ea       	ldi	r24, 0xA7	; 167
    4008:	93 e0       	ldi	r25, 0x03	; 3
    400a:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    400e:	4a c0       	rjmp	.+148    	; 0x40a4 <menuOnEnterUSBsendHW+0x36a>
    4010:	ec e0       	ldi	r30, 0x0C	; 12
    4012:	f9 e1       	ldi	r31, 0x19	; 25
    4014:	92 e5       	ldi	r25, 0x52	; 82
    4016:	90 83       	st	Z, r25
    4018:	9e e2       	ldi	r25, 0x2E	; 46
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	6e e0       	ldi	r22, 0x0E	; 14
    401e:	79 e1       	ldi	r23, 0x19	; 25
    4020:	8f 5f       	subi	r24, 0xFF	; 255
    4022:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <putChar_Dec>
    4026:	bc 01       	movw	r22, r24
    4028:	6f 5f       	subi	r22, 0xFF	; 255
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	1d e2       	ldi	r17, 0x2D	; 45
    402e:	dc 01       	movw	r26, r24
    4030:	1c 93       	st	X, r17
    4032:	ce 01       	movw	r24, r28
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	c8 0f       	add	r28, r24
    403a:	d9 1f       	adc	r29, r25
    403c:	c1 5e       	subi	r28, 0xE1	; 225
    403e:	d7 4f       	sbci	r29, 0xF7	; 247
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	8f 5f       	subi	r24, 0xFF	; 255
    4044:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <putChar_Dec>
    4048:	20 e2       	ldi	r18, 0x20	; 32
    404a:	fc 01       	movw	r30, r24
    404c:	20 83       	st	Z, r18
    404e:	11 82       	std	Z+1, r1	; 0x01
    4050:	8c e0       	ldi	r24, 0x0C	; 12
    4052:	99 e1       	ldi	r25, 0x19	; 25
    4054:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    4058:	8f e9       	ldi	r24, 0x9F	; 159
    405a:	93 e0       	ldi	r25, 0x03	; 3
    405c:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    4060:	8a 81       	ldd	r24, Y+2	; 0x02
    4062:	82 95       	swap	r24
    4064:	86 95       	lsr	r24
    4066:	87 70       	andi	r24, 0x07	; 7
    4068:	80 5d       	subi	r24, 0xD0	; 208
    406a:	0e 94 a1 3a 	call	0x7542	; 0x7542 <serial0SER_USBSend>
    406e:	87 e9       	ldi	r24, 0x97	; 151
    4070:	93 e0       	ldi	r25, 0x03	; 3
    4072:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	6c e0       	ldi	r22, 0x0C	; 12
    407a:	79 e1       	ldi	r23, 0x19	; 25
    407c:	8f 71       	andi	r24, 0x1F	; 31
    407e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    4082:	bc 01       	movw	r22, r24
    4084:	6f 5f       	subi	r22, 0xFF	; 255
    4086:	7f 4f       	sbci	r23, 0xFF	; 255
    4088:	dc 01       	movw	r26, r24
    408a:	1c 93       	st	X, r17
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	99 81       	ldd	r25, Y+1	; 0x01
    4090:	28 81       	ld	r18, Y
    4092:	8f 71       	andi	r24, 0x1F	; 31
    4094:	89 0f       	add	r24, r25
    4096:	82 1b       	sub	r24, r18
    4098:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    409c:	8c e0       	ldi	r24, 0x0C	; 12
    409e:	99 e1       	ldi	r25, 0x19	; 25
    40a0:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    40a4:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    40a8:	f3 94       	inc	r15
    40aa:	b7 e0       	ldi	r27, 0x07	; 7
    40ac:	bf 15       	cp	r27, r15
    40ae:	08 f0       	brcs	.+2      	; 0x40b2 <menuOnEnterUSBsendHW+0x378>
    40b0:	66 cf       	rjmp	.-308    	; 0x3f7e <menuOnEnterUSBsendHW+0x244>
    40b2:	8e e3       	ldi	r24, 0x3E	; 62
    40b4:	93 e0       	ldi	r25, 0x03	; 3
    40b6:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    40ba:	c0 e0       	ldi	r28, 0x00	; 0
    40bc:	54 c0       	rjmp	.+168    	; 0x4166 <menuOnEnterUSBsendHW+0x42c>
    40be:	0c 2f       	mov	r16, r28
    40c0:	10 e0       	ldi	r17, 0x00	; 0
    40c2:	f8 01       	movw	r30, r16
    40c4:	ee 0f       	add	r30, r30
    40c6:	ff 1f       	adc	r31, r31
    40c8:	ee 0f       	add	r30, r30
    40ca:	ff 1f       	adc	r31, r31
    40cc:	e0 50       	subi	r30, 0x00	; 0
    40ce:	fe 4f       	sbci	r31, 0xFE	; 254
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	80 34       	cpi	r24, 0x40	; 64
    40d4:	08 f0       	brcs	.+2      	; 0x40d8 <menuOnEnterUSBsendHW+0x39e>
    40d6:	46 c0       	rjmp	.+140    	; 0x4164 <menuOnEnterUSBsendHW+0x42a>
    40d8:	80 e4       	ldi	r24, 0x40	; 64
    40da:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <string_Buf>
    40de:	c8 01       	movw	r24, r16
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	88 0f       	add	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	fc 01       	movw	r30, r24
    40ea:	e0 50       	subi	r30, 0x00	; 0
    40ec:	fe 4f       	sbci	r31, 0xFE	; 254
    40ee:	7f 01       	movw	r14, r30
    40f0:	6d e0       	ldi	r22, 0x0D	; 13
    40f2:	79 e1       	ldi	r23, 0x19	; 25
    40f4:	80 81       	ld	r24, Z
    40f6:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    40fa:	20 e2       	ldi	r18, 0x20	; 32
    40fc:	dc 01       	movw	r26, r24
    40fe:	2c 93       	st	X, r18
    4100:	f7 01       	movw	r30, r14
    4102:	21 81       	ldd	r18, Z+1	; 0x01
    4104:	3f ed       	ldi	r19, 0xDF	; 223
    4106:	32 0f       	add	r19, r18
    4108:	3e 35       	cpi	r19, 0x5E	; 94
    410a:	28 f4       	brcc	.+10     	; 0x4116 <menuOnEnterUSBsendHW+0x3dc>
    410c:	fc 01       	movw	r30, r24
    410e:	32 96       	adiw	r30, 0x02	; 2
    4110:	11 96       	adiw	r26, 0x01	; 1
    4112:	2c 93       	st	X, r18
    4114:	06 c0       	rjmp	.+12     	; 0x4122 <menuOnEnterUSBsendHW+0x3e8>
    4116:	fc 01       	movw	r30, r24
    4118:	32 96       	adiw	r30, 0x02	; 2
    411a:	20 e2       	ldi	r18, 0x20	; 32
    411c:	dc 01       	movw	r26, r24
    411e:	11 96       	adiw	r26, 0x01	; 1
    4120:	2c 93       	st	X, r18
    4122:	bf 01       	movw	r22, r30
    4124:	6f 5f       	subi	r22, 0xFF	; 255
    4126:	7f 4f       	sbci	r23, 0xFF	; 255
    4128:	80 e2       	ldi	r24, 0x20	; 32
    412a:	80 83       	st	Z, r24
    412c:	00 0f       	add	r16, r16
    412e:	11 1f       	adc	r17, r17
    4130:	00 0f       	add	r16, r16
    4132:	11 1f       	adc	r17, r17
    4134:	00 50       	subi	r16, 0x00	; 0
    4136:	1e 4f       	sbci	r17, 0xFE	; 254
    4138:	f8 01       	movw	r30, r16
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	8f 5f       	subi	r24, 0xFF	; 255
    413e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    4142:	bc 01       	movw	r22, r24
    4144:	6f 5f       	subi	r22, 0xFF	; 255
    4146:	7f 4f       	sbci	r23, 0xFF	; 255
    4148:	2d e2       	ldi	r18, 0x2D	; 45
    414a:	dc 01       	movw	r26, r24
    414c:	2c 93       	st	X, r18
    414e:	f8 01       	movw	r30, r16
    4150:	83 81       	ldd	r24, Z+3	; 0x03
    4152:	8f 5f       	subi	r24, 0xFF	; 255
    4154:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <putChar_Dec2>
    4158:	8c e0       	ldi	r24, 0x0C	; 12
    415a:	99 e1       	ldi	r25, 0x19	; 25
    415c:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    4160:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4164:	cf 5f       	subi	r28, 0xFF	; 255
    4166:	c8 30       	cpi	r28, 0x08	; 8
    4168:	08 f4       	brcc	.+2      	; 0x416c <menuOnEnterUSBsendHW+0x432>
    416a:	a9 cf       	rjmp	.-174    	; 0x40be <menuOnEnterUSBsendHW+0x384>
    416c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4170:	8c e6       	ldi	r24, 0x6C	; 108
    4172:	93 e0       	ldi	r25, 0x03	; 3
    4174:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    4178:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    417c:	e1 2c       	mov	r14, r1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	64 c0       	rjmp	.+200    	; 0x424a <menuOnEnterUSBsendHW+0x510>
    4182:	ce 2d       	mov	r28, r14
    4184:	d0 e0       	ldi	r29, 0x00	; 0
    4186:	0f 2d       	mov	r16, r15
    4188:	10 e0       	ldi	r17, 0x00	; 0
    418a:	fe 01       	movw	r30, r28
    418c:	ee 0f       	add	r30, r30
    418e:	ff 1f       	adc	r31, r31
    4190:	ee 0f       	add	r30, r30
    4192:	ff 1f       	adc	r31, r31
    4194:	e0 0f       	add	r30, r16
    4196:	f1 1f       	adc	r31, r17
    4198:	ee 0f       	add	r30, r30
    419a:	ff 1f       	adc	r31, r31
    419c:	ee 0f       	add	r30, r30
    419e:	ff 1f       	adc	r31, r31
    41a0:	e0 5b       	subi	r30, 0xB0	; 176
    41a2:	f7 4f       	sbci	r31, 0xF7	; 247
    41a4:	80 81       	ld	r24, Z
    41a6:	8f 3f       	cpi	r24, 0xFF	; 255
    41a8:	09 f4       	brne	.+2      	; 0x41ac <menuOnEnterUSBsendHW+0x472>
    41aa:	47 c0       	rjmp	.+142    	; 0x423a <menuOnEnterUSBsendHW+0x500>
    41ac:	6c e0       	ldi	r22, 0x0C	; 12
    41ae:	79 e1       	ldi	r23, 0x19	; 25
    41b0:	8e 2d       	mov	r24, r14
    41b2:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <putChar_MidiChan>
    41b6:	bc 01       	movw	r22, r24
    41b8:	6f 5f       	subi	r22, 0xFF	; 255
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	0f 2e       	mov	r0, r31
    41be:	f8 e2       	ldi	r31, 0x28	; 40
    41c0:	df 2e       	mov	r13, r31
    41c2:	f0 2d       	mov	r31, r0
    41c4:	dc 01       	movw	r26, r24
    41c6:	dc 92       	st	X, r13
    41c8:	cc 0f       	add	r28, r28
    41ca:	dd 1f       	adc	r29, r29
    41cc:	cc 0f       	add	r28, r28
    41ce:	dd 1f       	adc	r29, r29
    41d0:	c0 0f       	add	r28, r16
    41d2:	d1 1f       	adc	r29, r17
    41d4:	cc 0f       	add	r28, r28
    41d6:	dd 1f       	adc	r29, r29
    41d8:	cc 0f       	add	r28, r28
    41da:	dd 1f       	adc	r29, r29
    41dc:	c0 5b       	subi	r28, 0xB0	; 176
    41de:	d7 4f       	sbci	r29, 0xF7	; 247
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <putChar_Note>
    41e6:	bc 01       	movw	r22, r24
    41e8:	6f 5f       	subi	r22, 0xFF	; 255
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255
    41ec:	2d e2       	ldi	r18, 0x2D	; 45
    41ee:	fc 01       	movw	r30, r24
    41f0:	20 83       	st	Z, r18
    41f2:	99 81       	ldd	r25, Y+1	; 0x01
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	89 0f       	add	r24, r25
    41f8:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <putChar_Note>
    41fc:	fc 01       	movw	r30, r24
    41fe:	19 e2       	ldi	r17, 0x29	; 41
    4200:	10 83       	st	Z, r17
    4202:	80 e2       	ldi	r24, 0x20	; 32
    4204:	81 83       	std	Z+1, r24	; 0x01
    4206:	bf 01       	movw	r22, r30
    4208:	6d 5f       	subi	r22, 0xFD	; 253
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	8e e3       	ldi	r24, 0x3E	; 62
    420e:	82 83       	std	Z+2, r24	; 0x02
    4210:	88 81       	ld	r24, Y
    4212:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <putChar_Manual>
    4216:	bc 01       	movw	r22, r24
    4218:	6f 5f       	subi	r22, 0xFF	; 255
    421a:	7f 4f       	sbci	r23, 0xFF	; 255
    421c:	dc 01       	movw	r26, r24
    421e:	dc 92       	st	X, r13
    4220:	8b 81       	ldd	r24, Y+3	; 0x03
    4222:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <putChar_Note>
    4226:	fc 01       	movw	r30, r24
    4228:	10 83       	st	Z, r17
    422a:	11 82       	std	Z+1, r1	; 0x01
    422c:	8c e0       	ldi	r24, 0x0C	; 12
    422e:	99 e1       	ldi	r25, 0x19	; 25
    4230:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    4234:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4238:	9f ef       	ldi	r25, 0xFF	; 255
    423a:	f3 94       	inc	r15
    423c:	01 c0       	rjmp	.+2      	; 0x4240 <menuOnEnterUSBsendHW+0x506>
    423e:	f1 2c       	mov	r15, r1
    4240:	f3 e0       	ldi	r31, 0x03	; 3
    4242:	ff 15       	cp	r31, r15
    4244:	08 f0       	brcs	.+2      	; 0x4248 <menuOnEnterUSBsendHW+0x50e>
    4246:	9d cf       	rjmp	.-198    	; 0x4182 <menuOnEnterUSBsendHW+0x448>
    4248:	e3 94       	inc	r14
    424a:	2f e0       	ldi	r18, 0x0F	; 15
    424c:	2e 15       	cp	r18, r14
    424e:	b8 f7       	brcc	.-18     	; 0x423e <menuOnEnterUSBsendHW+0x504>
    4250:	91 11       	cpse	r25, r1
    4252:	06 c0       	rjmp	.+12     	; 0x4260 <menuOnEnterUSBsendHW+0x526>
    4254:	81 e5       	ldi	r24, 0x51	; 81
    4256:	93 e0       	ldi	r25, 0x03	; 3
    4258:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    425c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4260:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4264:	82 e6       	ldi	r24, 0x62	; 98
    4266:	93 e0       	ldi	r25, 0x03	; 3
    4268:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    426c:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    4270:	c0 e0       	ldi	r28, 0x00	; 0
    4272:	25 c0       	rjmp	.+74     	; 0x42be <menuOnEnterUSBsendHW+0x584>
    4274:	6c e0       	ldi	r22, 0x0C	; 12
    4276:	79 e1       	ldi	r23, 0x19	; 25
    4278:	8c 2f       	mov	r24, r28
    427a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <putChar_Manual>
    427e:	dc 01       	movw	r26, r24
    4280:	bc 01       	movw	r22, r24
    4282:	6f 5f       	subi	r22, 0xFF	; 255
    4284:	7f 4f       	sbci	r23, 0xFF	; 255
    4286:	8a e3       	ldi	r24, 0x3A	; 58
    4288:	8c 93       	st	X, r24
    428a:	ec 2f       	mov	r30, r28
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	ee 0f       	add	r30, r30
    4290:	ff 1f       	adc	r31, r31
    4292:	e0 5b       	subi	r30, 0xB0	; 176
    4294:	f6 4f       	sbci	r31, 0xF6	; 246
    4296:	80 81       	ld	r24, Z
    4298:	8f 3f       	cpi	r24, 0xFF	; 255
    429a:	19 f0       	breq	.+6      	; 0x42a2 <menuOnEnterUSBsendHW+0x568>
    429c:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <putChar_MidiChan>
    42a0:	05 c0       	rjmp	.+10     	; 0x42ac <menuOnEnterUSBsendHW+0x572>
    42a2:	cd 01       	movw	r24, r26
    42a4:	02 96       	adiw	r24, 0x02	; 2
    42a6:	2d e2       	ldi	r18, 0x2D	; 45
    42a8:	11 96       	adiw	r26, 0x01	; 1
    42aa:	2c 93       	st	X, r18
    42ac:	dc 01       	movw	r26, r24
    42ae:	1c 92       	st	X, r1
    42b0:	8c e0       	ldi	r24, 0x0C	; 12
    42b2:	99 e1       	ldi	r25, 0x19	; 25
    42b4:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    42b8:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    42bc:	cf 5f       	subi	r28, 0xFF	; 255
    42be:	c4 30       	cpi	r28, 0x04	; 4
    42c0:	c8 f2       	brcs	.-78     	; 0x4274 <menuOnEnterUSBsendHW+0x53a>
    42c2:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    42c6:	86 e5       	ldi	r24, 0x56	; 86
    42c8:	93 e0       	ldi	r25, 0x03	; 3
    42ca:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    42ce:	ce e4       	ldi	r28, 0x4E	; 78
    42d0:	d8 e0       	ldi	r29, 0x08	; 8
    42d2:	6c e0       	ldi	r22, 0x0C	; 12
    42d4:	79 e1       	ldi	r23, 0x19	; 25
    42d6:	88 81       	ld	r24, Y
    42d8:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <putChar_MidiChan>
    42dc:	bc 01       	movw	r22, r24
    42de:	6f 5f       	subi	r22, 0xFF	; 255
    42e0:	7f 4f       	sbci	r23, 0xFF	; 255
    42e2:	2e e3       	ldi	r18, 0x3E	; 62
    42e4:	fc 01       	movw	r30, r24
    42e6:	20 83       	st	Z, r18
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	0e 94 16 3f 	call	0x7e2c	; 0x7e2c <putChar_MidiChan>
    42ee:	dc 01       	movw	r26, r24
    42f0:	1c 92       	st	X, r1
    42f2:	8c e0       	ldi	r24, 0x0C	; 12
    42f4:	99 e1       	ldi	r25, 0x19	; 25
    42f6:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    42fa:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    42fe:	88 e1       	ldi	r24, 0x18	; 24
    4300:	93 e0       	ldi	r25, 0x03	; 3
    4302:	0e 94 9e 3b 	call	0x773c	; 0x773c <serial0SER_USB_sendStringP>
    4306:	ec e0       	ldi	r30, 0x0C	; 12
    4308:	f9 e1       	ldi	r31, 0x19	; 25
    430a:	89 e4       	ldi	r24, 0x49	; 73
    430c:	80 83       	st	Z, r24
    430e:	0a e3       	ldi	r16, 0x3A	; 58
    4310:	01 83       	std	Z+1, r16	; 0x01
    4312:	cc e5       	ldi	r28, 0x5C	; 92
    4314:	d9 e0       	ldi	r29, 0x09	; 9
    4316:	6e e0       	ldi	r22, 0x0E	; 14
    4318:	79 e1       	ldi	r23, 0x19	; 25
    431a:	88 81       	ld	r24, Y
    431c:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    4320:	bc 01       	movw	r22, r24
    4322:	6f 5f       	subi	r22, 0xFF	; 255
    4324:	7f 4f       	sbci	r23, 0xFF	; 255
    4326:	1c e2       	ldi	r17, 0x2C	; 44
    4328:	fc 01       	movw	r30, r24
    432a:	10 83       	st	Z, r17
    432c:	89 81       	ldd	r24, Y+1	; 0x01
    432e:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    4332:	fc 01       	movw	r30, r24
    4334:	80 e2       	ldi	r24, 0x20	; 32
    4336:	80 83       	st	Z, r24
    4338:	8f e4       	ldi	r24, 0x4F	; 79
    433a:	81 83       	std	Z+1, r24	; 0x01
    433c:	bf 01       	movw	r22, r30
    433e:	6d 5f       	subi	r22, 0xFD	; 253
    4340:	7f 4f       	sbci	r23, 0xFF	; 255
    4342:	02 83       	std	Z+2, r16	; 0x02
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    434a:	bc 01       	movw	r22, r24
    434c:	6f 5f       	subi	r22, 0xFF	; 255
    434e:	7f 4f       	sbci	r23, 0xFF	; 255
    4350:	dc 01       	movw	r26, r24
    4352:	1c 93       	st	X, r17
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <putChar_hex>
    435a:	fc 01       	movw	r30, r24
    435c:	10 82       	st	Z, r1
    435e:	8c e0       	ldi	r24, 0x0C	; 12
    4360:	99 e1       	ldi	r25, 0x19	; 25
    4362:	0e 94 13 3c 	call	0x7826	; 0x7826 <serial0SER_USB_sendString>
    4366:	0e 94 ef 3b 	call	0x77de	; 0x77de <serial0SER_USB_sendCRLF>
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	df 91       	pop	r29
    436e:	cf 91       	pop	r28
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	ff 90       	pop	r15
    4376:	ef 90       	pop	r14
    4378:	df 90       	pop	r13
    437a:	cf 90       	pop	r12
    437c:	bf 90       	pop	r11
    437e:	af 90       	pop	r10
    4380:	9f 90       	pop	r9
    4382:	08 95       	ret

00004384 <reverseRegisterBits>:
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	10 e0       	ldi	r17, 0x00	; 0
    438c:	09 c0       	rjmp	.+18     	; 0x43a0 <reverseRegisterBits+0x1c>
    438e:	c1 2f       	mov	r28, r17
    4390:	d0 e0       	ldi	r29, 0x00	; 0
    4392:	cb 56       	subi	r28, 0x6B	; 107
    4394:	da 4f       	sbci	r29, 0xFA	; 250
    4396:	88 81       	ld	r24, Y
    4398:	0e 94 d6 40 	call	0x81ac	; 0x81ac <reverse_Bits>
    439c:	88 83       	st	Y, r24
    439e:	1f 5f       	subi	r17, 0xFF	; 255
    43a0:	18 30       	cpi	r17, 0x08	; 8
    43a2:	a8 f3       	brcs	.-22     	; 0x438e <reverseRegisterBits+0xa>
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	08 95       	ret

000043ac <menuOnUpdateRegister>:
    43ac:	85 e9       	ldi	r24, 0x95	; 149
    43ae:	95 e0       	ldi	r25, 0x05	; 5
    43b0:	0e 94 47 32 	call	0x648e	; 0x648e <read_allRegister>
    43b4:	e7 df       	rcall	.-50     	; 0x4384 <reverseRegisterBits>
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	08 95       	ret

000043ba <menuOnEnterResetReg>:
    43ba:	0e 94 b3 33 	call	0x6766	; 0x6766 <midi_resetRegisters>
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	f5 df       	rcall	.-22     	; 0x43ac <menuOnUpdateRegister>
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	08 95       	ret

000043c6 <menuOnExitLoadProgran>:
    43c6:	86 30       	cpi	r24, 0x06	; 6
    43c8:	31 f0       	breq	.+12     	; 0x43d6 <menuOnExitLoadProgran+0x10>
    43ca:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <menuVKombination>
    43ce:	80 34       	cpi	r24, 0x40	; 64
    43d0:	10 f4       	brcc	.+4      	; 0x43d6 <menuOnExitLoadProgran+0x10>
    43d2:	0e 94 28 33 	call	0x6650	; 0x6650 <program_toRegister>
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	e9 df       	rcall	.-46     	; 0x43ac <menuOnUpdateRegister>
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	08 95       	ret

000043de <softkeyCoupler>:
    43de:	cf 93       	push	r28
    43e0:	c6 2f       	mov	r28, r22
    43e2:	88 23       	and	r24, r24
    43e4:	d9 f0       	breq	.+54     	; 0x441c <softkeyCoupler+0x3e>
    43e6:	e6 2f       	mov	r30, r22
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	df 01       	movw	r26, r30
    43ec:	a7 5c       	subi	r26, 0xC7	; 199
    43ee:	b7 4f       	sbci	r27, 0xF7	; 247
    43f0:	8c 91       	ld	r24, X
    43f2:	81 11       	cpse	r24, r1
    43f4:	08 c0       	rjmp	.+16     	; 0x4406 <softkeyCoupler+0x28>
    43f6:	86 2f       	mov	r24, r22
    43f8:	0e 94 9c 30 	call	0x6138	; 0x6138 <set_Coupler>
    43fc:	8f 3f       	cpi	r24, 0xFF	; 255
    43fe:	71 f0       	breq	.+28     	; 0x441c <softkeyCoupler+0x3e>
    4400:	0e 94 08 37 	call	0x6e10	; 0x6e10 <midi_ManualOff>
    4404:	0b c0       	rjmp	.+22     	; 0x441c <softkeyCoupler+0x3e>
    4406:	df 01       	movw	r26, r30
    4408:	a7 5c       	subi	r26, 0xC7	; 199
    440a:	b7 4f       	sbci	r27, 0xF7	; 247
    440c:	1c 92       	st	X, r1
    440e:	ee 0f       	add	r30, r30
    4410:	ff 1f       	adc	r31, r31
    4412:	ef 54       	subi	r30, 0x4F	; 79
    4414:	fb 4e       	sbci	r31, 0xEB	; 235
    4416:	84 91       	lpm	r24, Z
    4418:	0e 94 08 37 	call	0x6e10	; 0x6e10 <midi_ManualOff>
    441c:	ec 2f       	mov	r30, r28
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	e7 5c       	subi	r30, 0xC7	; 199
    4422:	f7 4f       	sbci	r31, 0xF7	; 247
    4424:	80 81       	ld	r24, Z
    4426:	81 11       	cpse	r24, r1
    4428:	02 c0       	rjmp	.+4      	; 0x442e <softkeyCoupler+0x50>
    442a:	82 e8       	ldi	r24, 0x82	; 130
    442c:	01 c0       	rjmp	.+2      	; 0x4430 <softkeyCoupler+0x52>
    442e:	81 e8       	ldi	r24, 0x81	; 129
    4430:	cf 91       	pop	r28
    4432:	08 95       	ret

00004434 <softKeyCoupler2from3>:
    4434:	60 e0       	ldi	r22, 0x00	; 0
    4436:	d3 cf       	rjmp	.-90     	; 0x43de <softkeyCoupler>
    4438:	08 95       	ret

0000443a <softKeyCoupler1from3>:
    443a:	61 e0       	ldi	r22, 0x01	; 1
    443c:	d0 cf       	rjmp	.-96     	; 0x43de <softkeyCoupler>
    443e:	08 95       	ret

00004440 <softKeyCouplerPfrom3>:
    4440:	63 e0       	ldi	r22, 0x03	; 3
    4442:	cd cf       	rjmp	.-102    	; 0x43de <softkeyCoupler>
    4444:	08 95       	ret

00004446 <softKeyCoupler1from2>:
    4446:	62 e0       	ldi	r22, 0x02	; 2
    4448:	ca cf       	rjmp	.-108    	; 0x43de <softkeyCoupler>
    444a:	08 95       	ret

0000444c <softKeyCouplerPfrom2>:
    444c:	64 e0       	ldi	r22, 0x04	; 4
    444e:	c7 cf       	rjmp	.-114    	; 0x43de <softkeyCoupler>
    4450:	08 95       	ret

00004452 <softKeyCouplerPfrom1>:
    4452:	65 e0       	ldi	r22, 0x05	; 5
    4454:	c4 cf       	rjmp	.-120    	; 0x43de <softkeyCoupler>
    4456:	08 95       	ret

00004458 <softKeyCoupler3from2>:
    4458:	66 e0       	ldi	r22, 0x06	; 6
    445a:	c1 cf       	rjmp	.-126    	; 0x43de <softkeyCoupler>
    445c:	08 95       	ret

0000445e <softKeyCoupler3from1>:
    445e:	67 e0       	ldi	r22, 0x07	; 7
    4460:	be cf       	rjmp	.-132    	; 0x43de <softkeyCoupler>
    4462:	08 95       	ret

00004464 <softKeyCoupler3fromP>:
    4464:	69 e0       	ldi	r22, 0x09	; 9
    4466:	bb cf       	rjmp	.-138    	; 0x43de <softkeyCoupler>
    4468:	08 95       	ret

0000446a <softKeyCoupler2from1>:
    446a:	68 e0       	ldi	r22, 0x08	; 8
    446c:	b8 cf       	rjmp	.-144    	; 0x43de <softkeyCoupler>
    446e:	08 95       	ret

00004470 <softKeyCoupler2fromP>:
    4470:	6a e0       	ldi	r22, 0x0A	; 10
    4472:	b5 cf       	rjmp	.-150    	; 0x43de <softkeyCoupler>
    4474:	08 95       	ret

00004476 <softKeyCoupler1fromP>:
    4476:	6b e0       	ldi	r22, 0x0B	; 11
    4478:	b2 cf       	rjmp	.-156    	; 0x43de <softkeyCoupler>
    447a:	08 95       	ret

0000447c <menuDisplaySaveMessage>:
    447c:	cf 93       	push	r28
    447e:	c6 2f       	mov	r28, r22
    4480:	6c e0       	ldi	r22, 0x0C	; 12
    4482:	79 e1       	ldi	r23, 0x19	; 25
    4484:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <putChar_Dec>
    4488:	bc 01       	movw	r22, r24
    448a:	83 e7       	ldi	r24, 0x73	; 115
    448c:	94 e0       	ldi	r25, 0x04	; 4
    448e:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <putString_P>
    4492:	6c 2f       	mov	r22, r28
    4494:	0e 94 05 40 	call	0x800a	; 0x800a <putString_Prog>
    4498:	8c e0       	ldi	r24, 0x0C	; 12
    449a:	99 e1       	ldi	r25, 0x19	; 25
    449c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <lcd_message>
    44a0:	cf 91       	pop	r28
    44a2:	08 95       	ret

000044a4 <softKeyPrSet>:
    44a4:	cf 93       	push	r28
    44a6:	df 93       	push	r29
    44a8:	88 23       	and	r24, r24
    44aa:	79 f0       	breq	.+30     	; 0x44ca <softKeyPrSet+0x26>
    44ac:	c0 91 1e 08 	lds	r28, 0x081E	; 0x80081e <prog_Display>
    44b0:	c0 34       	cpi	r28, 0x40	; 64
    44b2:	58 f4       	brcc	.+22     	; 0x44ca <softKeyPrSet+0x26>
    44b4:	dc 2f       	mov	r29, r28
    44b6:	d0 68       	ori	r29, 0x80	; 128
    44b8:	6f ef       	ldi	r22, 0xFF	; 255
    44ba:	8c 2f       	mov	r24, r28
    44bc:	0e 94 c2 33 	call	0x6784	; 0x6784 <register_toProgram>
    44c0:	6c 2f       	mov	r22, r28
    44c2:	dc df       	rcall	.-72     	; 0x447c <menuDisplaySaveMessage>
    44c4:	8d 2f       	mov	r24, r29
    44c6:	0e 94 1e 33 	call	0x663c	; 0x663c <prog_set>
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	08 95       	ret

000044d2 <menuDisplayLoadMessage>:
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	c8 2f       	mov	r28, r24
    44da:	8c e0       	ldi	r24, 0x0C	; 12
    44dc:	99 e1       	ldi	r25, 0x19	; 25
    44de:	0e 94 05 40 	call	0x800a	; 0x800a <putString_Prog>
    44e2:	bc 01       	movw	r22, r24
    44e4:	6f 5f       	subi	r22, 0xFF	; 255
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	2e e7       	ldi	r18, 0x7E	; 126
    44ea:	fc 01       	movw	r30, r24
    44ec:	20 83       	st	Z, r18
    44ee:	8c 2f       	mov	r24, r28
    44f0:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <putChar_Dec>
    44f4:	bc 01       	movw	r22, r24
    44f6:	8e e6       	ldi	r24, 0x6E	; 110
    44f8:	94 e0       	ldi	r25, 0x04	; 4
    44fa:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <putString_P>
    44fe:	8c 01       	movw	r16, r24
    4500:	0e 94 c1 10 	call	0x2182	; 0x2182 <module_WaitOutputInput2Cycles>
    4504:	84 e0       	ldi	r24, 0x04	; 4
    4506:	0e 94 33 32 	call	0x6466	; 0x6466 <count_Registers>
    450a:	c8 2f       	mov	r28, r24
    450c:	88 23       	and	r24, r24
    450e:	49 f0       	breq	.+18     	; 0x4522 <menuDisplayLoadMessage+0x50>
    4510:	b8 01       	movw	r22, r16
    4512:	8c e6       	ldi	r24, 0x6C	; 108
    4514:	94 e0       	ldi	r25, 0x04	; 4
    4516:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <putString_P>
    451a:	bc 01       	movw	r22, r24
    451c:	8c 2f       	mov	r24, r28
    451e:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <putChar_Dec>
    4522:	8c e0       	ldi	r24, 0x0C	; 12
    4524:	99 e1       	ldi	r25, 0x19	; 25
    4526:	0e 94 12 15 	call	0x2a24	; 0x2a24 <lcd_message>
    452a:	cf 91       	pop	r28
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	08 95       	ret

00004532 <send_progrChange_toMidiThru>:
    4532:	cf 93       	push	r28
    4534:	80 34       	cpi	r24, 0x40	; 64
    4536:	58 f4       	brcc	.+22     	; 0x454e <send_progrChange_toMidiThru+0x1c>
    4538:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    453c:	6f 3f       	cpi	r22, 0xFF	; 255
    453e:	39 f0       	breq	.+14     	; 0x454e <send_progrChange_toMidiThru+0x1c>
    4540:	c8 2f       	mov	r28, r24
    4542:	80 ec       	ldi	r24, 0xC0	; 192
    4544:	0e 94 67 3b 	call	0x76ce	; 0x76ce <serial1MIDISendCmd>
    4548:	8c 2f       	mov	r24, r28
    454a:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <serial1MIDISendData>
    454e:	cf 91       	pop	r28
    4550:	08 95       	ret

00004552 <handle_programKey>:
    4552:	cf 93       	push	r28
    4554:	c6 2f       	mov	r28, r22
    4556:	88 23       	and	r24, r24
    4558:	3c f4       	brge	.+14     	; 0x4568 <handle_programKey+0x16>
    455a:	6f ef       	ldi	r22, 0xFF	; 255
    455c:	8c 2f       	mov	r24, r28
    455e:	0e 94 c2 33 	call	0x6784	; 0x6784 <register_toProgram>
    4562:	6c 2f       	mov	r22, r28
    4564:	8b df       	rcall	.-234    	; 0x447c <menuDisplaySaveMessage>
    4566:	09 c0       	rjmp	.+18     	; 0x457a <handle_programKey+0x28>
    4568:	88 23       	and	r24, r24
    456a:	39 f0       	breq	.+14     	; 0x457a <handle_programKey+0x28>
    456c:	86 2f       	mov	r24, r22
    456e:	0e 94 28 33 	call	0x6650	; 0x6650 <program_toRegister>
    4572:	6c 2f       	mov	r22, r28
    4574:	ae df       	rcall	.-164    	; 0x44d2 <menuDisplayLoadMessage>
    4576:	8c 2f       	mov	r24, r28
    4578:	dc df       	rcall	.-72     	; 0x4532 <send_progrChange_toMidiThru>
    457a:	8c 2f       	mov	r24, r28
    457c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <midi_CountRegisterInProgram>
    4580:	88 23       	and	r24, r24
    4582:	39 f0       	breq	.+14     	; 0x4592 <handle_programKey+0x40>
    4584:	8c 2f       	mov	r24, r28
    4586:	0e 94 98 32 	call	0x6530	; 0x6530 <midi_RegisterMatchProgram>
    458a:	81 11       	cpse	r24, r1
    458c:	04 c0       	rjmp	.+8      	; 0x4596 <handle_programKey+0x44>
    458e:	81 e8       	ldi	r24, 0x81	; 129
    4590:	03 c0       	rjmp	.+6      	; 0x4598 <handle_programKey+0x46>
    4592:	82 e8       	ldi	r24, 0x82	; 130
    4594:	01 c0       	rjmp	.+2      	; 0x4598 <handle_programKey+0x46>
    4596:	82 e8       	ldi	r24, 0x82	; 130
    4598:	cf 91       	pop	r28
    459a:	08 95       	ret

0000459c <softKeyK1A>:
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	d9 cf       	rjmp	.-78     	; 0x4552 <handle_programKey>
    45a0:	08 95       	ret

000045a2 <softKeyK2A>:
    45a2:	61 e0       	ldi	r22, 0x01	; 1
    45a4:	d6 cf       	rjmp	.-84     	; 0x4552 <handle_programKey>
    45a6:	08 95       	ret

000045a8 <softKeyK3A>:
    45a8:	62 e0       	ldi	r22, 0x02	; 2
    45aa:	d3 cf       	rjmp	.-90     	; 0x4552 <handle_programKey>
    45ac:	08 95       	ret

000045ae <softKeyK4A>:
    45ae:	63 e0       	ldi	r22, 0x03	; 3
    45b0:	d0 cf       	rjmp	.-96     	; 0x4552 <handle_programKey>
    45b2:	08 95       	ret

000045b4 <softKeyUpdateProg>:
    45b4:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    45b8:	80 34       	cpi	r24, 0x40	; 64
    45ba:	30 f4       	brcc	.+12     	; 0x45c8 <softKeyUpdateProg+0x14>
    45bc:	ba df       	rcall	.-140    	; 0x4532 <send_progrChange_toMidiThru>
    45be:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    45c2:	0e 94 28 33 	call	0x6650	; 0x6650 <program_toRegister>
    45c6:	02 c0       	rjmp	.+4      	; 0x45cc <softKeyUpdateProg+0x18>
    45c8:	0e 94 b3 33 	call	0x6766	; 0x6766 <midi_resetRegisters>
    45cc:	8f ef       	ldi	r24, 0xFF	; 255
    45ce:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <prog_UpdDisplay>
    45d2:	08 95       	ret

000045d4 <softKeyPBInc>:
    45d4:	88 23       	and	r24, r24
    45d6:	39 f0       	breq	.+14     	; 0x45e6 <softKeyPBInc+0x12>
    45d8:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    45dc:	88 5f       	subi	r24, 0xF8	; 248
    45de:	88 73       	andi	r24, 0x38	; 56
    45e0:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    45e4:	e7 df       	rcall	.-50     	; 0x45b4 <softKeyUpdateProg>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	08 95       	ret

000045ea <softKeyPBDec>:
    45ea:	88 23       	and	r24, r24
    45ec:	39 f0       	breq	.+14     	; 0x45fc <softKeyPBDec+0x12>
    45ee:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    45f2:	88 50       	subi	r24, 0x08	; 8
    45f4:	88 73       	andi	r24, 0x38	; 56
    45f6:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    45fa:	dc df       	rcall	.-72     	; 0x45b4 <softKeyUpdateProg>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	08 95       	ret

00004600 <progDec>:
    4600:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    4604:	8f 3f       	cpi	r24, 0xFF	; 255
    4606:	21 f4       	brne	.+8      	; 0x4610 <progDec+0x10>
    4608:	8f e3       	ldi	r24, 0x3F	; 63
    460a:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    460e:	08 95       	ret
    4610:	80 34       	cpi	r24, 0x40	; 64
    4612:	20 f4       	brcc	.+8      	; 0x461c <progDec+0x1c>
    4614:	81 50       	subi	r24, 0x01	; 1
    4616:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    461a:	08 95       	ret
    461c:	8f 77       	andi	r24, 0x7F	; 127
    461e:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    4622:	08 95       	ret

00004624 <softKeyPrM>:
    4624:	cf 93       	push	r28
    4626:	88 23       	and	r24, r24
    4628:	4c f4       	brge	.+18     	; 0x463c <softKeyPrM+0x18>
    462a:	c0 91 1e 08 	lds	r28, 0x081E	; 0x80081e <prog_Display>
    462e:	c0 68       	ori	r28, 0x80	; 128
    4630:	0e 94 b3 33 	call	0x6766	; 0x6766 <midi_resetRegisters>
    4634:	8c 2f       	mov	r24, r28
    4636:	0e 94 1e 33 	call	0x663c	; 0x663c <prog_set>
    463a:	04 c0       	rjmp	.+8      	; 0x4644 <softKeyPrM+0x20>
    463c:	88 23       	and	r24, r24
    463e:	11 f0       	breq	.+4      	; 0x4644 <softKeyPrM+0x20>
    4640:	df df       	rcall	.-66     	; 0x4600 <progDec>
    4642:	b8 df       	rcall	.-144    	; 0x45b4 <softKeyUpdateProg>
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	cf 91       	pop	r28
    4648:	08 95       	ret

0000464a <softKeyPrDec>:
    464a:	88 23       	and	r24, r24
    464c:	69 f0       	breq	.+26     	; 0x4668 <softKeyPrDec+0x1e>
    464e:	4c f4       	brge	.+18     	; 0x4662 <softKeyPrDec+0x18>
    4650:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    4654:	80 34       	cpi	r24, 0x40	; 64
    4656:	38 f4       	brcc	.+14     	; 0x4666 <softKeyPrDec+0x1c>
    4658:	88 50       	subi	r24, 0x08	; 8
    465a:	88 73       	andi	r24, 0x38	; 56
    465c:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <softKeyPrDec+0x1c>
    4662:	81 11       	cpse	r24, r1
    4664:	cd df       	rcall	.-102    	; 0x4600 <progDec>
    4666:	a6 df       	rcall	.-180    	; 0x45b4 <softKeyUpdateProg>
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	08 95       	ret

0000466c <progInc>:
    466c:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    4670:	8f 33       	cpi	r24, 0x3F	; 63
    4672:	21 f4       	brne	.+8      	; 0x467c <progInc+0x10>
    4674:	8f ef       	ldi	r24, 0xFF	; 255
    4676:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    467a:	08 95       	ret
    467c:	8f 33       	cpi	r24, 0x3F	; 63
    467e:	20 f4       	brcc	.+8      	; 0x4688 <progInc+0x1c>
    4680:	8f 5f       	subi	r24, 0xFF	; 255
    4682:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    4686:	08 95       	ret
    4688:	8f 3f       	cpi	r24, 0xFF	; 255
    468a:	19 f4       	brne	.+6      	; 0x4692 <progInc+0x26>
    468c:	10 92 1e 08 	sts	0x081E, r1	; 0x80081e <prog_Display>
    4690:	08 95       	ret
    4692:	8f 77       	andi	r24, 0x7F	; 127
    4694:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    4698:	08 95       	ret

0000469a <softKeyPrP>:
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	88 23       	and	r24, r24
    46a0:	84 f4       	brge	.+32     	; 0x46c2 <softKeyPrP+0x28>
    46a2:	c0 91 1e 08 	lds	r28, 0x081E	; 0x80081e <prog_Display>
    46a6:	c0 34       	cpi	r28, 0x40	; 64
    46a8:	80 f4       	brcc	.+32     	; 0x46ca <softKeyPrP+0x30>
    46aa:	dc 2f       	mov	r29, r28
    46ac:	d0 68       	ori	r29, 0x80	; 128
    46ae:	6f ef       	ldi	r22, 0xFF	; 255
    46b0:	8c 2f       	mov	r24, r28
    46b2:	0e 94 c2 33 	call	0x6784	; 0x6784 <register_toProgram>
    46b6:	6c 2f       	mov	r22, r28
    46b8:	e1 de       	rcall	.-574    	; 0x447c <menuDisplaySaveMessage>
    46ba:	8d 2f       	mov	r24, r29
    46bc:	0e 94 1e 33 	call	0x663c	; 0x663c <prog_set>
    46c0:	04 c0       	rjmp	.+8      	; 0x46ca <softKeyPrP+0x30>
    46c2:	88 23       	and	r24, r24
    46c4:	11 f0       	breq	.+4      	; 0x46ca <softKeyPrP+0x30>
    46c6:	d2 df       	rcall	.-92     	; 0x466c <progInc>
    46c8:	75 df       	rcall	.-278    	; 0x45b4 <softKeyUpdateProg>
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	df 91       	pop	r29
    46ce:	cf 91       	pop	r28
    46d0:	08 95       	ret

000046d2 <softKeyPrInc>:
    46d2:	88 23       	and	r24, r24
    46d4:	69 f0       	breq	.+26     	; 0x46f0 <softKeyPrInc+0x1e>
    46d6:	4c f4       	brge	.+18     	; 0x46ea <softKeyPrInc+0x18>
    46d8:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    46dc:	80 34       	cpi	r24, 0x40	; 64
    46de:	38 f4       	brcc	.+14     	; 0x46ee <softKeyPrInc+0x1c>
    46e0:	88 5f       	subi	r24, 0xF8	; 248
    46e2:	88 73       	andi	r24, 0x38	; 56
    46e4:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <softKeyPrInc+0x1c>
    46ea:	81 11       	cpse	r24, r1
    46ec:	bf df       	rcall	.-130    	; 0x466c <progInc>
    46ee:	62 df       	rcall	.-316    	; 0x45b4 <softKeyUpdateProg>
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	08 95       	ret

000046f4 <menu_Init>:
    46f4:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <menuStackIndex>
    46f8:	00 97       	sbiw	r24, 0x00	; 0
    46fa:	69 f4       	brne	.+26     	; 0x4716 <menu_Init+0x22>
    46fc:	8b e7       	ldi	r24, 0x7B	; 123
    46fe:	98 e0       	ldi	r25, 0x08	; 8
    4700:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <currentMenu+0x1>
    4704:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <currentMenu>
    4708:	84 e8       	ldi	r24, 0x84	; 132
    470a:	94 e0       	ldi	r25, 0x04	; 4
    470c:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <pMenuTopTitle+0x1>
    4710:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <pMenuTopTitle>
    4714:	08 c0       	rjmp	.+16     	; 0x4726 <menu_Init+0x32>
    4716:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <currentMenu+0x1>
    471a:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <currentMenu>
    471e:	70 93 c5 05 	sts	0x05C5, r23	; 0x8005c5 <pMenuTopTitle+0x1>
    4722:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <pMenuTopTitle>
    4726:	8f ef       	ldi	r24, 0xFF	; 255
    4728:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    472c:	8e e8       	ldi	r24, 0x8E	; 142
    472e:	94 e0       	ldi	r25, 0x04	; 4
    4730:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <pNibbleInfo+0x1>
    4734:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <pNibbleInfo>
    4738:	08 95       	ret

0000473a <softkeyLeft>:
    473a:	6b ee       	ldi	r22, 0xEB	; 235
    473c:	74 e1       	ldi	r23, 0x14	; 20
    473e:	82 e0       	ldi	r24, 0x02	; 2
    4740:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4744:	08 95       	ret

00004746 <softkeyRight>:
    4746:	6d ee       	ldi	r22, 0xED	; 237
    4748:	74 e1       	ldi	r23, 0x14	; 20
    474a:	83 e0       	ldi	r24, 0x03	; 3
    474c:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4750:	08 95       	ret

00004752 <softkeyDown>:
    4752:	6f ee       	ldi	r22, 0xEF	; 239
    4754:	74 e1       	ldi	r23, 0x14	; 20
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    475c:	08 95       	ret

0000475e <softkeyOn>:
    475e:	6d ed       	ldi	r22, 0xDD	; 221
    4760:	74 e1       	ldi	r23, 0x14	; 20
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4768:	08 95       	ret

0000476a <softkeyOff>:
    476a:	68 ed       	ldi	r22, 0xD8	; 216
    476c:	74 e1       	ldi	r23, 0x14	; 20
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4774:	08 95       	ret

00004776 <softkeyUp>:
    4776:	61 ef       	ldi	r22, 0xF1	; 241
    4778:	74 e1       	ldi	r23, 0x14	; 20
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4780:	08 95       	ret

00004782 <softkeyPlus>:
    4782:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <dataType>
    4786:	8a 30       	cpi	r24, 0x0A	; 10
    4788:	11 f0       	breq	.+4      	; 0x478e <softkeyPlus+0xc>
    478a:	8e 30       	cpi	r24, 0x0E	; 14
    478c:	31 f4       	brne	.+12     	; 0x479a <softkeyPlus+0x18>
    478e:	69 ec       	ldi	r22, 0xC9	; 201
    4790:	74 e1       	ldi	r23, 0x14	; 20
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    4798:	08 95       	ret
    479a:	69 ee       	ldi	r22, 0xE9	; 233
    479c:	74 e1       	ldi	r23, 0x14	; 20
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    47a4:	08 95       	ret

000047a6 <softkeyMinus>:
    47a6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <dataType>
    47aa:	8a 30       	cpi	r24, 0x0A	; 10
    47ac:	11 f0       	breq	.+4      	; 0x47b2 <softkeyMinus+0xc>
    47ae:	8e 30       	cpi	r24, 0x0E	; 14
    47b0:	31 f4       	brne	.+12     	; 0x47be <softkeyMinus+0x18>
    47b2:	6b ec       	ldi	r22, 0xCB	; 203
    47b4:	74 e1       	ldi	r23, 0x14	; 20
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    47bc:	08 95       	ret
    47be:	67 ee       	ldi	r22, 0xE7	; 231
    47c0:	74 e1       	ldi	r23, 0x14	; 20
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	0c 94 31 40 	jmp	0x8062	; 0x8062 <keylabel_set>
    47c8:	08 95       	ret

000047ca <dataToNibbles>:
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <dataType>
    47d2:	8e 2f       	mov	r24, r30
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	fc 01       	movw	r30, r24
    47d8:	32 97       	sbiw	r30, 0x02	; 2
    47da:	ed 30       	cpi	r30, 0x0D	; 13
    47dc:	f1 05       	cpc	r31, r1
    47de:	08 f0       	brcs	.+2      	; 0x47e2 <dataToNibbles+0x18>
    47e0:	e4 c0       	rjmp	.+456    	; 0x49aa <dataToNibbles+0x1e0>
    47e2:	88 27       	eor	r24, r24
    47e4:	ee 58       	subi	r30, 0x8E	; 142
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ea:	0c 94 e3 40 	jmp	0x81c6	; 0x81c6 <__tablejump2__>
    47ee:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    47f2:	ec ee       	ldi	r30, 0xEC	; 236
    47f4:	f5 e0       	ldi	r31, 0x05	; 5
    47f6:	98 2f       	mov	r25, r24
    47f8:	92 95       	swap	r25
    47fa:	9f 70       	andi	r25, 0x0F	; 15
    47fc:	90 83       	st	Z, r25
    47fe:	8f 70       	andi	r24, 0x0F	; 15
    4800:	81 83       	std	Z+1, r24	; 0x01
    4802:	d3 c0       	rjmp	.+422    	; 0x49aa <dataToNibbles+0x1e0>
    4804:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4808:	80 31       	cpi	r24, 0x10	; 16
    480a:	20 f0       	brcs	.+8      	; 0x4814 <dataToNibbles+0x4a>
    480c:	8f ef       	ldi	r24, 0xFF	; 255
    480e:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4812:	cb c0       	rjmp	.+406    	; 0x49aa <dataToNibbles+0x1e0>
    4814:	8f 5f       	subi	r24, 0xFF	; 255
    4816:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    481a:	c7 c0       	rjmp	.+398    	; 0x49aa <dataToNibbles+0x1e0>
    481c:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4820:	88 23       	and	r24, r24
    4822:	34 f4       	brge	.+12     	; 0x4830 <dataToNibbles+0x66>
    4824:	ec ee       	ldi	r30, 0xEC	; 236
    4826:	f5 e0       	ldi	r31, 0x05	; 5
    4828:	10 82       	st	Z, r1
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	81 83       	std	Z+1, r24	; 0x01
    482e:	bd c0       	rjmp	.+378    	; 0x49aa <dataToNibbles+0x1e0>
    4830:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <nibble+0x1>
    4834:	08 c0       	rjmp	.+16     	; 0x4846 <dataToNibbles+0x7c>
    4836:	ec ee       	ldi	r30, 0xEC	; 236
    4838:	f5 e0       	ldi	r31, 0x05	; 5
    483a:	91 81       	ldd	r25, Z+1	; 0x01
    483c:	9f 5f       	subi	r25, 0xFF	; 255
    483e:	91 83       	std	Z+1, r25	; 0x01
    4840:	8c 50       	subi	r24, 0x0C	; 12
    4842:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    4846:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    484a:	8c 30       	cpi	r24, 0x0C	; 12
    484c:	a0 f7       	brcc	.-24     	; 0x4836 <dataToNibbles+0x6c>
    484e:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4852:	ab c0       	rjmp	.+342    	; 0x49aa <dataToNibbles+0x1e0>
    4854:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4858:	ec ee       	ldi	r30, 0xEC	; 236
    485a:	f5 e0       	ldi	r31, 0x05	; 5
    485c:	98 2f       	mov	r25, r24
    485e:	92 95       	swap	r25
    4860:	96 95       	lsr	r25
    4862:	97 70       	andi	r25, 0x07	; 7
    4864:	90 83       	st	Z, r25
    4866:	8f 71       	andi	r24, 0x1F	; 31
    4868:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    486c:	11 82       	std	Z+1, r1	; 0x01
    486e:	08 c0       	rjmp	.+16     	; 0x4880 <dataToNibbles+0xb6>
    4870:	ec ee       	ldi	r30, 0xEC	; 236
    4872:	f5 e0       	ldi	r31, 0x05	; 5
    4874:	91 81       	ldd	r25, Z+1	; 0x01
    4876:	9f 5f       	subi	r25, 0xFF	; 255
    4878:	91 83       	std	Z+1, r25	; 0x01
    487a:	8a 50       	subi	r24, 0x0A	; 10
    487c:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    4880:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4884:	8a 30       	cpi	r24, 0x0A	; 10
    4886:	a0 f7       	brcc	.-24     	; 0x4870 <dataToNibbles+0xa6>
    4888:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <nibble+0x2>
    488c:	8e c0       	rjmp	.+284    	; 0x49aa <dataToNibbles+0x1e0>
    488e:	ec ee       	ldi	r30, 0xEC	; 236
    4890:	f5 e0       	ldi	r31, 0x05	; 5
    4892:	10 82       	st	Z, r1
    4894:	11 82       	std	Z+1, r1	; 0x01
    4896:	08 c0       	rjmp	.+16     	; 0x48a8 <dataToNibbles+0xde>
    4898:	ec ee       	ldi	r30, 0xEC	; 236
    489a:	f5 e0       	ldi	r31, 0x05	; 5
    489c:	90 81       	ld	r25, Z
    489e:	9f 5f       	subi	r25, 0xFF	; 255
    48a0:	90 83       	st	Z, r25
    48a2:	84 56       	subi	r24, 0x64	; 100
    48a4:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    48a8:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    48ac:	84 36       	cpi	r24, 0x64	; 100
    48ae:	a0 f7       	brcc	.-24     	; 0x4898 <dataToNibbles+0xce>
    48b0:	08 c0       	rjmp	.+16     	; 0x48c2 <dataToNibbles+0xf8>
    48b2:	ec ee       	ldi	r30, 0xEC	; 236
    48b4:	f5 e0       	ldi	r31, 0x05	; 5
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	9f 5f       	subi	r25, 0xFF	; 255
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	8a 50       	subi	r24, 0x0A	; 10
    48be:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    48c2:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    48c6:	8a 30       	cpi	r24, 0x0A	; 10
    48c8:	a0 f7       	brcc	.-24     	; 0x48b2 <dataToNibbles+0xe8>
    48ca:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <nibble+0x2>
    48ce:	6d c0       	rjmp	.+218    	; 0x49aa <dataToNibbles+0x1e0>
    48d0:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    48d4:	84 30       	cpi	r24, 0x04	; 4
    48d6:	20 f0       	brcs	.+8      	; 0x48e0 <dataToNibbles+0x116>
    48d8:	8f ef       	ldi	r24, 0xFF	; 255
    48da:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    48de:	65 c0       	rjmp	.+202    	; 0x49aa <dataToNibbles+0x1e0>
    48e0:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    48e4:	62 c0       	rjmp	.+196    	; 0x49aa <dataToNibbles+0x1e0>
    48e6:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    48ea:	84 30       	cpi	r24, 0x04	; 4
    48ec:	20 f0       	brcs	.+8      	; 0x48f6 <dataToNibbles+0x12c>
    48ee:	83 e0       	ldi	r24, 0x03	; 3
    48f0:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    48f4:	5a c0       	rjmp	.+180    	; 0x49aa <dataToNibbles+0x1e0>
    48f6:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    48fa:	57 c0       	rjmp	.+174    	; 0x49aa <dataToNibbles+0x1e0>
    48fc:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4900:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4904:	52 c0       	rjmp	.+164    	; 0x49aa <dataToNibbles+0x1e0>
    4906:	e9 2f       	mov	r30, r25
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    490e:	28 2f       	mov	r18, r24
    4910:	22 1f       	adc	r18, r18
    4912:	22 27       	eor	r18, r18
    4914:	22 1f       	adc	r18, r18
    4916:	e4 51       	subi	r30, 0x14	; 20
    4918:	fa 4f       	sbci	r31, 0xFA	; 250
    491a:	20 83       	st	Z, r18
    491c:	88 0f       	add	r24, r24
    491e:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    4922:	9f 5f       	subi	r25, 0xFF	; 255
    4924:	01 c0       	rjmp	.+2      	; 0x4928 <dataToNibbles+0x15e>
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	98 30       	cpi	r25, 0x08	; 8
    492a:	68 f3       	brcs	.-38     	; 0x4906 <dataToNibbles+0x13c>
    492c:	3e c0       	rjmp	.+124    	; 0x49aa <dataToNibbles+0x1e0>
    492e:	82 50       	subi	r24, 0x02	; 2
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	de 01       	movw	r26, r28
    4934:	9d 91       	ld	r25, X+
    4936:	e4 51       	subi	r30, 0x14	; 20
    4938:	fa 4f       	sbci	r31, 0xFA	; 250
    493a:	9f 70       	andi	r25, 0x0F	; 15
    493c:	90 83       	st	Z, r25
    493e:	e8 2f       	mov	r30, r24
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	98 81       	ld	r25, Y
    4944:	e4 51       	subi	r30, 0x14	; 20
    4946:	fa 4f       	sbci	r31, 0xFA	; 250
    4948:	92 95       	swap	r25
    494a:	9f 70       	andi	r25, 0x0F	; 15
    494c:	90 83       	st	Z, r25
    494e:	ed 01       	movw	r28, r26
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <dataToNibbles+0x18e>
    4952:	ca ec       	ldi	r28, 0xCA	; 202
    4954:	d5 e0       	ldi	r29, 0x05	; 5
    4956:	88 e0       	ldi	r24, 0x08	; 8
    4958:	ef ef       	ldi	r30, 0xFF	; 255
    495a:	e8 0f       	add	r30, r24
    495c:	81 11       	cpse	r24, r1
    495e:	e7 cf       	rjmp	.-50     	; 0x492e <dataToNibbles+0x164>
    4960:	24 c0       	rjmp	.+72     	; 0x49aa <dataToNibbles+0x1e0>
    4962:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4966:	ec ee       	ldi	r30, 0xEC	; 236
    4968:	f5 e0       	ldi	r31, 0x05	; 5
    496a:	98 2f       	mov	r25, r24
    496c:	96 95       	lsr	r25
    496e:	96 95       	lsr	r25
    4970:	96 95       	lsr	r25
    4972:	9f 5f       	subi	r25, 0xFF	; 255
    4974:	90 83       	st	Z, r25
    4976:	87 70       	andi	r24, 0x07	; 7
    4978:	8f 5f       	subi	r24, 0xFF	; 255
    497a:	81 83       	std	Z+1, r24	; 0x01
    497c:	16 c0       	rjmp	.+44     	; 0x49aa <dataToNibbles+0x1e0>
    497e:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    4982:	8f 5f       	subi	r24, 0xFF	; 255
    4984:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    4988:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <nibble>
    498c:	08 c0       	rjmp	.+16     	; 0x499e <dataToNibbles+0x1d4>
    498e:	ec ee       	ldi	r30, 0xEC	; 236
    4990:	f5 e0       	ldi	r31, 0x05	; 5
    4992:	90 81       	ld	r25, Z
    4994:	9f 5f       	subi	r25, 0xFF	; 255
    4996:	90 83       	st	Z, r25
    4998:	8a 50       	subi	r24, 0x0A	; 10
    499a:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    499e:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    49a2:	8a 30       	cpi	r24, 0x0A	; 10
    49a4:	a0 f7       	brcc	.-24     	; 0x498e <dataToNibbles+0x1c4>
    49a6:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <nibble+0x1>
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	08 95       	ret

000049b0 <nibbleToLCDstring>:
    49b0:	0f 93       	push	r16
    49b2:	1f 93       	push	r17
    49b4:	cf 93       	push	r28
    49b6:	df 93       	push	r29
    49b8:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <dataType>
    49bc:	8e 2f       	mov	r24, r30
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	fc 01       	movw	r30, r24
    49c2:	32 97       	sbiw	r30, 0x02	; 2
    49c4:	ed 30       	cpi	r30, 0x0D	; 13
    49c6:	f1 05       	cpc	r31, r1
    49c8:	08 f0       	brcs	.+2      	; 0x49cc <nibbleToLCDstring+0x1c>
    49ca:	3b c1       	rjmp	.+630    	; 0x4c42 <nibbleToLCDstring+0x292>
    49cc:	88 27       	eor	r24, r24
    49ce:	e1 58       	subi	r30, 0x81	; 129
    49d0:	ff 4f       	sbci	r31, 0xFF	; 255
    49d2:	8f 4f       	sbci	r24, 0xFF	; 255
    49d4:	0c 94 e3 40 	jmp	0x81c6	; 0x81c6 <__tablejump2__>
    49d8:	0c ee       	ldi	r16, 0xEC	; 236
    49da:	15 e0       	ldi	r17, 0x05	; 5
    49dc:	f8 01       	movw	r30, r16
    49de:	80 81       	ld	r24, Z
    49e0:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    49e4:	c6 e4       	ldi	r28, 0x46	; 70
    49e6:	d2 e0       	ldi	r29, 0x02	; 2
    49e8:	88 83       	st	Y, r24
    49ea:	f8 01       	movw	r30, r16
    49ec:	81 81       	ldd	r24, Z+1	; 0x01
    49ee:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    49f2:	89 83       	std	Y+1, r24	; 0x01
    49f4:	1a 82       	std	Y+2, r1	; 0x02
    49f6:	25 c1       	rjmp	.+586    	; 0x4c42 <nibbleToLCDstring+0x292>
    49f8:	e6 e4       	ldi	r30, 0x46	; 70
    49fa:	f2 e0       	ldi	r31, 0x02	; 2
    49fc:	83 e4       	ldi	r24, 0x43	; 67
    49fe:	80 83       	st	Z, r24
    4a00:	88 e6       	ldi	r24, 0x68	; 104
    4a02:	81 83       	std	Z+1, r24	; 0x01
    4a04:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4a08:	8f 3f       	cpi	r24, 0xFF	; 255
    4a0a:	29 f4       	brne	.+10     	; 0x4a16 <nibbleToLCDstring+0x66>
    4a0c:	80 e2       	ldi	r24, 0x20	; 32
    4a0e:	82 83       	std	Z+2, r24	; 0x02
    4a10:	8d e2       	ldi	r24, 0x2D	; 45
    4a12:	83 83       	std	Z+3, r24	; 0x03
    4a14:	12 c0       	rjmp	.+36     	; 0x4a3a <nibbleToLCDstring+0x8a>
    4a16:	8a 30       	cpi	r24, 0x0A	; 10
    4a18:	48 f0       	brcs	.+18     	; 0x4a2c <nibbleToLCDstring+0x7c>
    4a1a:	c6 e4       	ldi	r28, 0x46	; 70
    4a1c:	d2 e0       	ldi	r29, 0x02	; 2
    4a1e:	91 e3       	ldi	r25, 0x31	; 49
    4a20:	9a 83       	std	Y+2, r25	; 0x02
    4a22:	8a 50       	subi	r24, 0x0A	; 10
    4a24:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4a28:	8b 83       	std	Y+3, r24	; 0x03
    4a2a:	07 c0       	rjmp	.+14     	; 0x4a3a <nibbleToLCDstring+0x8a>
    4a2c:	c6 e4       	ldi	r28, 0x46	; 70
    4a2e:	d2 e0       	ldi	r29, 0x02	; 2
    4a30:	90 e2       	ldi	r25, 0x20	; 32
    4a32:	9a 83       	std	Y+2, r25	; 0x02
    4a34:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4a38:	8b 83       	std	Y+3, r24	; 0x03
    4a3a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <lcdData+0x4>
    4a3e:	01 c1       	rjmp	.+514    	; 0x4c42 <nibbleToLCDstring+0x292>
    4a40:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4a44:	8f 3f       	cpi	r24, 0xFF	; 255
    4a46:	21 f0       	breq	.+8      	; 0x4a50 <nibbleToLCDstring+0xa0>
    4a48:	90 91 ed 05 	lds	r25, 0x05ED	; 0x8005ed <nibble+0x1>
    4a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    4a4e:	59 f4       	brne	.+22     	; 0x4a66 <nibbleToLCDstring+0xb6>
    4a50:	e6 e4       	ldi	r30, 0x46	; 70
    4a52:	f2 e0       	ldi	r31, 0x02	; 2
    4a54:	8e e6       	ldi	r24, 0x6E	; 110
    4a56:	80 83       	st	Z, r24
    4a58:	9f e6       	ldi	r25, 0x6F	; 111
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	82 83       	std	Z+2, r24	; 0x02
    4a5e:	85 e6       	ldi	r24, 0x65	; 101
    4a60:	83 83       	std	Z+3, r24	; 0x03
    4a62:	14 82       	std	Z+4, r1	; 0x04
    4a64:	ee c0       	rjmp	.+476    	; 0x4c42 <nibbleToLCDstring+0x292>
    4a66:	9f e5       	ldi	r25, 0x5F	; 95
    4a68:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <lcdData+0x1>
    4a6c:	8b 30       	cpi	r24, 0x0B	; 11
    4a6e:	21 f4       	brne	.+8      	; 0x4a78 <nibbleToLCDstring+0xc8>
    4a70:	88 e4       	ldi	r24, 0x48	; 72
    4a72:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4a76:	20 c0       	rjmp	.+64     	; 0x4ab8 <nibbleToLCDstring+0x108>
    4a78:	85 30       	cpi	r24, 0x05	; 5
    4a7a:	58 f4       	brcc	.+22     	; 0x4a92 <nibbleToLCDstring+0xe2>
    4a7c:	98 2f       	mov	r25, r24
    4a7e:	96 95       	lsr	r25
    4a80:	9d 5b       	subi	r25, 0xBD	; 189
    4a82:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lcdData>
    4a86:	80 ff       	sbrs	r24, 0
    4a88:	17 c0       	rjmp	.+46     	; 0x4ab8 <nibbleToLCDstring+0x108>
    4a8a:	83 e2       	ldi	r24, 0x23	; 35
    4a8c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    4a90:	13 c0       	rjmp	.+38     	; 0x4ab8 <nibbleToLCDstring+0x108>
    4a92:	28 2f       	mov	r18, r24
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	25 50       	subi	r18, 0x05	; 5
    4a98:	31 09       	sbc	r19, r1
    4a9a:	35 95       	asr	r19
    4a9c:	27 95       	ror	r18
    4a9e:	2a 5b       	subi	r18, 0xBA	; 186
    4aa0:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lcdData>
    4aa4:	80 fd       	sbrc	r24, 0
    4aa6:	03 c0       	rjmp	.+6      	; 0x4aae <nibbleToLCDstring+0xfe>
    4aa8:	83 e2       	ldi	r24, 0x23	; 35
    4aaa:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    4aae:	28 34       	cpi	r18, 0x48	; 72
    4ab0:	19 f4       	brne	.+6      	; 0x4ab8 <nibbleToLCDstring+0x108>
    4ab2:	81 e4       	ldi	r24, 0x41	; 65
    4ab4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4ab8:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <nibble+0x1>
    4abc:	81 11       	cpse	r24, r1
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <nibbleToLCDstring+0x118>
    4ac0:	8d e6       	ldi	r24, 0x6D	; 109
    4ac2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4ac6:	0b c0       	rjmp	.+22     	; 0x4ade <nibbleToLCDstring+0x12e>
    4ac8:	8c 30       	cpi	r24, 0x0C	; 12
    4aca:	30 f4       	brcc	.+12     	; 0x4ad8 <nibbleToLCDstring+0x128>
    4acc:	81 50       	subi	r24, 0x01	; 1
    4ace:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4ad2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4ad6:	03 c0       	rjmp	.+6      	; 0x4ade <nibbleToLCDstring+0x12e>
    4ad8:	8d e2       	ldi	r24, 0x2D	; 45
    4ada:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4ade:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4ae2:	af c0       	rjmp	.+350    	; 0x4c42 <nibbleToLCDstring+0x292>
    4ae4:	c6 e4       	ldi	r28, 0x46	; 70
    4ae6:	d2 e0       	ldi	r29, 0x02	; 2
    4ae8:	8d e4       	ldi	r24, 0x4D	; 77
    4aea:	88 83       	st	Y, r24
    4aec:	0c ee       	ldi	r16, 0xEC	; 236
    4aee:	15 e0       	ldi	r17, 0x05	; 5
    4af0:	f8 01       	movw	r30, r16
    4af2:	80 81       	ld	r24, Z
    4af4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4af8:	89 83       	std	Y+1, r24	; 0x01
    4afa:	82 e4       	ldi	r24, 0x42	; 66
    4afc:	8a 83       	std	Y+2, r24	; 0x02
    4afe:	f8 01       	movw	r30, r16
    4b00:	81 81       	ldd	r24, Z+1	; 0x01
    4b02:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4b06:	8b 83       	std	Y+3, r24	; 0x03
    4b08:	f8 01       	movw	r30, r16
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4b10:	8c 83       	std	Y+4, r24	; 0x04
    4b12:	1d 82       	std	Y+5, r1	; 0x05
    4b14:	96 c0       	rjmp	.+300    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b16:	0c ee       	ldi	r16, 0xEC	; 236
    4b18:	15 e0       	ldi	r17, 0x05	; 5
    4b1a:	f8 01       	movw	r30, r16
    4b1c:	80 81       	ld	r24, Z
    4b1e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4b22:	c6 e4       	ldi	r28, 0x46	; 70
    4b24:	d2 e0       	ldi	r29, 0x02	; 2
    4b26:	88 83       	st	Y, r24
    4b28:	f8 01       	movw	r30, r16
    4b2a:	81 81       	ldd	r24, Z+1	; 0x01
    4b2c:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	f8 01       	movw	r30, r16
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4b3a:	8a 83       	std	Y+2, r24	; 0x02
    4b3c:	1b 82       	std	Y+3, r1	; 0x03
    4b3e:	81 c0       	rjmp	.+258    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b40:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4b44:	83 30       	cpi	r24, 0x03	; 3
    4b46:	38 f4       	brcc	.+14     	; 0x4b56 <nibbleToLCDstring+0x1a6>
    4b48:	e6 e4       	ldi	r30, 0x46	; 70
    4b4a:	f2 e0       	ldi	r31, 0x02	; 2
    4b4c:	93 e3       	ldi	r25, 0x33	; 51
    4b4e:	98 1b       	sub	r25, r24
    4b50:	90 83       	st	Z, r25
    4b52:	11 82       	std	Z+1, r1	; 0x01
    4b54:	76 c0       	rjmp	.+236    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b56:	83 30       	cpi	r24, 0x03	; 3
    4b58:	31 f4       	brne	.+12     	; 0x4b66 <nibbleToLCDstring+0x1b6>
    4b5a:	e6 e4       	ldi	r30, 0x46	; 70
    4b5c:	f2 e0       	ldi	r31, 0x02	; 2
    4b5e:	80 e5       	ldi	r24, 0x50	; 80
    4b60:	80 83       	st	Z, r24
    4b62:	11 82       	std	Z+1, r1	; 0x01
    4b64:	6e c0       	rjmp	.+220    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b66:	e6 e4       	ldi	r30, 0x46	; 70
    4b68:	f2 e0       	ldi	r31, 0x02	; 2
    4b6a:	8d e2       	ldi	r24, 0x2D	; 45
    4b6c:	80 83       	st	Z, r24
    4b6e:	11 82       	std	Z+1, r1	; 0x01
    4b70:	68 c0       	rjmp	.+208    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b72:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4b76:	e6 e4       	ldi	r30, 0x46	; 70
    4b78:	f2 e0       	ldi	r31, 0x02	; 2
    4b7a:	80 5d       	subi	r24, 0xD0	; 208
    4b7c:	80 83       	st	Z, r24
    4b7e:	11 82       	std	Z+1, r1	; 0x01
    4b80:	60 c0       	rjmp	.+192    	; 0x4c42 <nibbleToLCDstring+0x292>
    4b82:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4b86:	81 11       	cpse	r24, r1
    4b88:	09 c0       	rjmp	.+18     	; 0x4b9c <nibbleToLCDstring+0x1ec>
    4b8a:	e6 e4       	ldi	r30, 0x46	; 70
    4b8c:	f2 e0       	ldi	r31, 0x02	; 2
    4b8e:	81 e4       	ldi	r24, 0x41	; 65
    4b90:	80 83       	st	Z, r24
    4b92:	85 e7       	ldi	r24, 0x75	; 117
    4b94:	81 83       	std	Z+1, r24	; 0x01
    4b96:	83 e7       	ldi	r24, 0x73	; 115
    4b98:	82 83       	std	Z+2, r24	; 0x02
    4b9a:	08 c0       	rjmp	.+16     	; 0x4bac <nibbleToLCDstring+0x1fc>
    4b9c:	e6 e4       	ldi	r30, 0x46	; 70
    4b9e:	f2 e0       	ldi	r31, 0x02	; 2
    4ba0:	85 e4       	ldi	r24, 0x45	; 69
    4ba2:	80 83       	st	Z, r24
    4ba4:	89 e6       	ldi	r24, 0x69	; 105
    4ba6:	81 83       	std	Z+1, r24	; 0x01
    4ba8:	8e e6       	ldi	r24, 0x6E	; 110
    4baa:	82 83       	std	Z+2, r24	; 0x02
    4bac:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4bb0:	48 c0       	rjmp	.+144    	; 0x4c42 <nibbleToLCDstring+0x292>
    4bb2:	c1 2f       	mov	r28, r17
    4bb4:	d0 e0       	ldi	r29, 0x00	; 0
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e4 51       	subi	r30, 0x14	; 20
    4bba:	fa 4f       	sbci	r31, 0xFA	; 250
    4bbc:	80 81       	ld	r24, Z
    4bbe:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <nibbleToChr>
    4bc2:	ca 5b       	subi	r28, 0xBA	; 186
    4bc4:	dd 4f       	sbci	r29, 0xFD	; 253
    4bc6:	88 83       	st	Y, r24
    4bc8:	1f 5f       	subi	r17, 0xFF	; 255
    4bca:	01 c0       	rjmp	.+2      	; 0x4bce <nibbleToLCDstring+0x21e>
    4bcc:	10 e0       	ldi	r17, 0x00	; 0
    4bce:	18 30       	cpi	r17, 0x08	; 8
    4bd0:	80 f3       	brcs	.-32     	; 0x4bb2 <nibbleToLCDstring+0x202>
    4bd2:	37 c0       	rjmp	.+110    	; 0x4c42 <nibbleToLCDstring+0x292>
    4bd4:	82 2f       	mov	r24, r18
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	fc 01       	movw	r30, r24
    4bda:	e4 51       	subi	r30, 0x14	; 20
    4bdc:	fa 4f       	sbci	r31, 0xFA	; 250
    4bde:	30 81       	ld	r19, Z
    4be0:	31 11       	cpse	r19, r1
    4be2:	02 c0       	rjmp	.+4      	; 0x4be8 <nibbleToLCDstring+0x238>
    4be4:	3f e6       	ldi	r19, 0x6F	; 111
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <nibbleToLCDstring+0x23a>
    4be8:	39 e4       	ldi	r19, 0x49	; 73
    4bea:	fc 01       	movw	r30, r24
    4bec:	ea 5b       	subi	r30, 0xBA	; 186
    4bee:	fd 4f       	sbci	r31, 0xFD	; 253
    4bf0:	30 83       	st	Z, r19
    4bf2:	2f 5f       	subi	r18, 0xFF	; 255
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <nibbleToLCDstring+0x248>
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	28 30       	cpi	r18, 0x08	; 8
    4bfa:	60 f3       	brcs	.-40     	; 0x4bd4 <nibbleToLCDstring+0x224>
    4bfc:	22 c0       	rjmp	.+68     	; 0x4c42 <nibbleToLCDstring+0x292>
    4bfe:	ac ee       	ldi	r26, 0xEC	; 236
    4c00:	b5 e0       	ldi	r27, 0x05	; 5
    4c02:	8c 91       	ld	r24, X
    4c04:	e6 e4       	ldi	r30, 0x46	; 70
    4c06:	f2 e0       	ldi	r31, 0x02	; 2
    4c08:	80 5c       	subi	r24, 0xC0	; 192
    4c0a:	80 83       	st	Z, r24
    4c0c:	11 96       	adiw	r26, 0x01	; 1
    4c0e:	8c 91       	ld	r24, X
    4c10:	80 5d       	subi	r24, 0xD0	; 208
    4c12:	81 83       	std	Z+1, r24	; 0x01
    4c14:	12 82       	std	Z+2, r1	; 0x02
    4c16:	15 c0       	rjmp	.+42     	; 0x4c42 <nibbleToLCDstring+0x292>
    4c18:	ec ee       	ldi	r30, 0xEC	; 236
    4c1a:	f5 e0       	ldi	r31, 0x05	; 5
    4c1c:	90 81       	ld	r25, Z
    4c1e:	81 81       	ldd	r24, Z+1	; 0x01
    4c20:	29 2f       	mov	r18, r25
    4c22:	28 2b       	or	r18, r24
    4c24:	31 f4       	brne	.+12     	; 0x4c32 <nibbleToLCDstring+0x282>
    4c26:	e6 e4       	ldi	r30, 0x46	; 70
    4c28:	f2 e0       	ldi	r31, 0x02	; 2
    4c2a:	8d e2       	ldi	r24, 0x2D	; 45
    4c2c:	80 83       	st	Z, r24
    4c2e:	81 83       	std	Z+1, r24	; 0x01
    4c30:	06 c0       	rjmp	.+12     	; 0x4c3e <nibbleToLCDstring+0x28e>
    4c32:	e6 e4       	ldi	r30, 0x46	; 70
    4c34:	f2 e0       	ldi	r31, 0x02	; 2
    4c36:	90 5d       	subi	r25, 0xD0	; 208
    4c38:	90 83       	st	Z, r25
    4c3a:	80 5d       	subi	r24, 0xD0	; 208
    4c3c:	81 83       	std	Z+1, r24	; 0x01
    4c3e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x2>
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	08 95       	ret

00004c4c <LCDStringOut>:
    4c4c:	0f 93       	push	r16
    4c4e:	1f 93       	push	r17
    4c50:	cf 93       	push	r28
    4c52:	8e e1       	ldi	r24, 0x1E	; 30
    4c54:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    4c58:	c0 e0       	ldi	r28, 0x00	; 0
    4c5a:	06 e4       	ldi	r16, 0x46	; 70
    4c5c:	12 e0       	ldi	r17, 0x02	; 2
    4c5e:	0b c0       	rjmp	.+22     	; 0x4c76 <LCDStringOut+0x2a>
    4c60:	f8 01       	movw	r30, r16
    4c62:	80 81       	ld	r24, Z
    4c64:	88 23       	and	r24, r24
    4c66:	19 f0       	breq	.+6      	; 0x4c6e <LCDStringOut+0x22>
    4c68:	0f 5f       	subi	r16, 0xFF	; 255
    4c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6c:	01 c0       	rjmp	.+2      	; 0x4c70 <LCDStringOut+0x24>
    4c6e:	80 e2       	ldi	r24, 0x20	; 32
    4c70:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    4c74:	cf 5f       	subi	r28, 0xFF	; 255
    4c76:	ca 30       	cpi	r28, 0x0A	; 10
    4c78:	98 f3       	brcs	.-26     	; 0x4c60 <LCDStringOut+0x14>
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	08 95       	ret

00004c82 <nibbleCheckOvfl>:
    4c82:	8a 30       	cpi	r24, 0x0A	; 10
    4c84:	1c f4       	brge	.+6      	; 0x4c8c <nibbleCheckOvfl+0xa>
    4c86:	88 23       	and	r24, r24
    4c88:	1c f0       	brlt	.+6      	; 0x4c90 <nibbleCheckOvfl+0xe>
    4c8a:	08 95       	ret
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	08 95       	ret
    4c90:	89 e0       	ldi	r24, 0x09	; 9
    4c92:	08 95       	ret

00004c94 <nibbleChange>:
    4c94:	0f 93       	push	r16
    4c96:	1f 93       	push	r17
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	c8 2f       	mov	r28, r24
    4c9e:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    4ca2:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    4ca6:	31 96       	adiw	r30, 0x01	; 1
    4ca8:	84 91       	lpm	r24, Z
    4caa:	28 2f       	mov	r18, r24
    4cac:	20 71       	andi	r18, 0x10	; 16
    4cae:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <dataType>
    4cb2:	8e 2f       	mov	r24, r30
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	32 97       	sbiw	r30, 0x02	; 2
    4cba:	ed 30       	cpi	r30, 0x0D	; 13
    4cbc:	f1 05       	cpc	r31, r1
    4cbe:	08 f0       	brcs	.+2      	; 0x4cc2 <nibbleChange+0x2e>
    4cc0:	93 c1       	rjmp	.+806    	; 0x4fe8 <nibbleChange+0x354>
    4cc2:	88 27       	eor	r24, r24
    4cc4:	e4 57       	subi	r30, 0x74	; 116
    4cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4cca:	0c 94 e3 40 	jmp	0x81c6	; 0x81c6 <__tablejump2__>
    4cce:	d0 e0       	ldi	r29, 0x00	; 0
    4cd0:	c4 51       	subi	r28, 0x14	; 20
    4cd2:	da 4f       	sbci	r29, 0xFA	; 250
    4cd4:	88 81       	ld	r24, Y
    4cd6:	68 0f       	add	r22, r24
    4cd8:	6f 70       	andi	r22, 0x0F	; 15
    4cda:	68 83       	st	Y, r22
    4cdc:	85 c1       	rjmp	.+778    	; 0x4fe8 <nibbleChange+0x354>
    4cde:	21 11       	cpse	r18, r1
    4ce0:	1b c0       	rjmp	.+54     	; 0x4d18 <nibbleChange+0x84>
    4ce2:	61 30       	cpi	r22, 0x01	; 1
    4ce4:	41 f4       	brne	.+16     	; 0x4cf6 <nibbleChange+0x62>
    4ce6:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4cea:	80 31       	cpi	r24, 0x10	; 16
    4cec:	20 f0       	brcs	.+8      	; 0x4cf6 <nibbleChange+0x62>
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4cf4:	79 c1       	rjmp	.+754    	; 0x4fe8 <nibbleChange+0x354>
    4cf6:	6f 3f       	cpi	r22, 0xFF	; 255
    4cf8:	49 f4       	brne	.+18     	; 0x4d0c <nibbleChange+0x78>
    4cfa:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4cfe:	82 50       	subi	r24, 0x02	; 2
    4d00:	8f 30       	cpi	r24, 0x0F	; 15
    4d02:	20 f0       	brcs	.+8      	; 0x4d0c <nibbleChange+0x78>
    4d04:	80 e1       	ldi	r24, 0x10	; 16
    4d06:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4d0a:	6e c1       	rjmp	.+732    	; 0x4fe8 <nibbleChange+0x354>
    4d0c:	ec ee       	ldi	r30, 0xEC	; 236
    4d0e:	f5 e0       	ldi	r31, 0x05	; 5
    4d10:	80 81       	ld	r24, Z
    4d12:	68 0f       	add	r22, r24
    4d14:	60 83       	st	Z, r22
    4d16:	68 c1       	rjmp	.+720    	; 0x4fe8 <nibbleChange+0x354>
    4d18:	61 30       	cpi	r22, 0x01	; 1
    4d1a:	41 f4       	brne	.+16     	; 0x4d2c <nibbleChange+0x98>
    4d1c:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4d20:	80 31       	cpi	r24, 0x10	; 16
    4d22:	21 f4       	brne	.+8      	; 0x4d2c <nibbleChange+0x98>
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4d2a:	5e c1       	rjmp	.+700    	; 0x4fe8 <nibbleChange+0x354>
    4d2c:	61 30       	cpi	r22, 0x01	; 1
    4d2e:	41 f4       	brne	.+16     	; 0x4d40 <nibbleChange+0xac>
    4d30:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4d34:	8f 3f       	cpi	r24, 0xFF	; 255
    4d36:	21 f4       	brne	.+8      	; 0x4d40 <nibbleChange+0xac>
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4d3e:	54 c1       	rjmp	.+680    	; 0x4fe8 <nibbleChange+0x354>
    4d40:	6f 3f       	cpi	r22, 0xFF	; 255
    4d42:	41 f4       	brne	.+16     	; 0x4d54 <nibbleChange+0xc0>
    4d44:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4d48:	8f 3f       	cpi	r24, 0xFF	; 255
    4d4a:	21 f4       	brne	.+8      	; 0x4d54 <nibbleChange+0xc0>
    4d4c:	80 e1       	ldi	r24, 0x10	; 16
    4d4e:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4d52:	4a c1       	rjmp	.+660    	; 0x4fe8 <nibbleChange+0x354>
    4d54:	6f 3f       	cpi	r22, 0xFF	; 255
    4d56:	41 f4       	brne	.+16     	; 0x4d68 <nibbleChange+0xd4>
    4d58:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4d5c:	81 30       	cpi	r24, 0x01	; 1
    4d5e:	21 f4       	brne	.+8      	; 0x4d68 <nibbleChange+0xd4>
    4d60:	8f ef       	ldi	r24, 0xFF	; 255
    4d62:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble>
    4d66:	40 c1       	rjmp	.+640    	; 0x4fe8 <nibbleChange+0x354>
    4d68:	ec ee       	ldi	r30, 0xEC	; 236
    4d6a:	f5 e0       	ldi	r31, 0x05	; 5
    4d6c:	80 81       	ld	r24, Z
    4d6e:	68 0f       	add	r22, r24
    4d70:	60 83       	st	Z, r22
    4d72:	3a c1       	rjmp	.+628    	; 0x4fe8 <nibbleChange+0x354>
    4d74:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <nibble+0x1>
    4d78:	8f 3f       	cpi	r24, 0xFF	; 255
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <nibbleChange+0xea>
    4d7c:	c1 e0       	ldi	r28, 0x01	; 1
    4d7e:	c1 11       	cpse	r28, r1
    4d80:	16 c0       	rjmp	.+44     	; 0x4dae <nibbleChange+0x11a>
    4d82:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    4d86:	8c 30       	cpi	r24, 0x0C	; 12
    4d88:	50 f4       	brcc	.+20     	; 0x4d9e <nibbleChange+0x10a>
    4d8a:	8b 30       	cpi	r24, 0x0B	; 11
    4d8c:	11 f4       	brne	.+4      	; 0x4d92 <nibbleChange+0xfe>
    4d8e:	61 30       	cpi	r22, 0x01	; 1
    4d90:	41 f0       	breq	.+16     	; 0x4da2 <nibbleChange+0x10e>
    4d92:	81 11       	cpse	r24, r1
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <nibbleChange+0x106>
    4d96:	6f 3f       	cpi	r22, 0xFF	; 255
    4d98:	31 f0       	breq	.+12     	; 0x4da6 <nibbleChange+0x112>
    4d9a:	68 0f       	add	r22, r24
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <nibbleChange+0x114>
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <nibbleChange+0x114>
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <nibbleChange+0x114>
    4da6:	6b e0       	ldi	r22, 0x0B	; 11
    4da8:	60 93 ec 05 	sts	0x05EC, r22	; 0x8005ec <nibble>
    4dac:	2b c0       	rjmp	.+86     	; 0x4e04 <nibbleChange+0x170>
    4dae:	21 11       	cpse	r18, r1
    4db0:	0a c0       	rjmp	.+20     	; 0x4dc6 <nibbleChange+0x132>
    4db2:	81 11       	cpse	r24, r1
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <nibbleChange+0x126>
    4db6:	6f 3f       	cpi	r22, 0xFF	; 255
    4db8:	c1 f0       	breq	.+48     	; 0x4dea <nibbleChange+0x156>
    4dba:	8a 30       	cpi	r24, 0x0A	; 10
    4dbc:	11 f4       	brne	.+4      	; 0x4dc2 <nibbleChange+0x12e>
    4dbe:	61 30       	cpi	r22, 0x01	; 1
    4dc0:	b1 f0       	breq	.+44     	; 0x4dee <nibbleChange+0x15a>
    4dc2:	68 0f       	add	r22, r24
    4dc4:	1d c0       	rjmp	.+58     	; 0x4e00 <nibbleChange+0x16c>
    4dc6:	81 11       	cpse	r24, r1
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <nibbleChange+0x13a>
    4dca:	6f 3f       	cpi	r22, 0xFF	; 255
    4dcc:	91 f0       	breq	.+36     	; 0x4df2 <nibbleChange+0x15e>
    4dce:	8a 30       	cpi	r24, 0x0A	; 10
    4dd0:	11 f4       	brne	.+4      	; 0x4dd6 <nibbleChange+0x142>
    4dd2:	61 30       	cpi	r22, 0x01	; 1
    4dd4:	81 f0       	breq	.+32     	; 0x4df6 <nibbleChange+0x162>
    4dd6:	8f 3f       	cpi	r24, 0xFF	; 255
    4dd8:	11 f4       	brne	.+4      	; 0x4dde <nibbleChange+0x14a>
    4dda:	61 30       	cpi	r22, 0x01	; 1
    4ddc:	71 f0       	breq	.+28     	; 0x4dfa <nibbleChange+0x166>
    4dde:	8f 3f       	cpi	r24, 0xFF	; 255
    4de0:	11 f4       	brne	.+4      	; 0x4de6 <nibbleChange+0x152>
    4de2:	6f 3f       	cpi	r22, 0xFF	; 255
    4de4:	61 f0       	breq	.+24     	; 0x4dfe <nibbleChange+0x16a>
    4de6:	68 0f       	add	r22, r24
    4de8:	0b c0       	rjmp	.+22     	; 0x4e00 <nibbleChange+0x16c>
    4dea:	6a e0       	ldi	r22, 0x0A	; 10
    4dec:	09 c0       	rjmp	.+18     	; 0x4e00 <nibbleChange+0x16c>
    4dee:	60 e0       	ldi	r22, 0x00	; 0
    4df0:	07 c0       	rjmp	.+14     	; 0x4e00 <nibbleChange+0x16c>
    4df2:	6f ef       	ldi	r22, 0xFF	; 255
    4df4:	05 c0       	rjmp	.+10     	; 0x4e00 <nibbleChange+0x16c>
    4df6:	6f ef       	ldi	r22, 0xFF	; 255
    4df8:	03 c0       	rjmp	.+6      	; 0x4e00 <nibbleChange+0x16c>
    4dfa:	60 e0       	ldi	r22, 0x00	; 0
    4dfc:	01 c0       	rjmp	.+2      	; 0x4e00 <nibbleChange+0x16c>
    4dfe:	6a e0       	ldi	r22, 0x0A	; 10
    4e00:	60 93 ed 05 	sts	0x05ED, r22	; 0x8005ed <nibble+0x1>
    4e04:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <nibble>
    4e08:	9f 3f       	cpi	r25, 0xFF	; 255
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <nibbleChange+0x17a>
    4e0c:	ed c0       	rjmp	.+474    	; 0x4fe8 <nibbleChange+0x354>
    4e0e:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <nibble+0x1>
    4e12:	8f 3f       	cpi	r24, 0xFF	; 255
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <nibbleChange+0x184>
    4e16:	e8 c0       	rjmp	.+464    	; 0x4fe8 <nibbleChange+0x354>
    4e18:	28 2f       	mov	r18, r24
    4e1a:	22 0f       	add	r18, r18
    4e1c:	82 0f       	add	r24, r18
    4e1e:	28 2f       	mov	r18, r24
    4e20:	22 0f       	add	r18, r18
    4e22:	22 0f       	add	r18, r18
    4e24:	92 0f       	add	r25, r18
    4e26:	0a f0       	brmi	.+2      	; 0x4e2a <nibbleChange+0x196>
    4e28:	df c0       	rjmp	.+446    	; 0x4fe8 <nibbleChange+0x354>
    4e2a:	ec ee       	ldi	r30, 0xEC	; 236
    4e2c:	f5 e0       	ldi	r31, 0x05	; 5
    4e2e:	87 e0       	ldi	r24, 0x07	; 7
    4e30:	80 83       	st	Z, r24
    4e32:	8a e0       	ldi	r24, 0x0A	; 10
    4e34:	81 83       	std	Z+1, r24	; 0x01
    4e36:	d8 c0       	rjmp	.+432    	; 0x4fe8 <nibbleChange+0x354>
    4e38:	c1 11       	cpse	r28, r1
    4e3a:	07 c0       	rjmp	.+14     	; 0x4e4a <nibbleChange+0x1b6>
    4e3c:	ec ee       	ldi	r30, 0xEC	; 236
    4e3e:	f5 e0       	ldi	r31, 0x05	; 5
    4e40:	80 81       	ld	r24, Z
    4e42:	68 0f       	add	r22, r24
    4e44:	67 70       	andi	r22, 0x07	; 7
    4e46:	60 83       	st	Z, r22
    4e48:	cf c0       	rjmp	.+414    	; 0x4fe8 <nibbleChange+0x354>
    4e4a:	d0 e0       	ldi	r29, 0x00	; 0
    4e4c:	0c ee       	ldi	r16, 0xEC	; 236
    4e4e:	15 e0       	ldi	r17, 0x05	; 5
    4e50:	c4 51       	subi	r28, 0x14	; 20
    4e52:	da 4f       	sbci	r29, 0xFA	; 250
    4e54:	88 81       	ld	r24, Y
    4e56:	86 0f       	add	r24, r22
    4e58:	14 df       	rcall	.-472    	; 0x4c82 <nibbleCheckOvfl>
    4e5a:	88 83       	st	Y, r24
    4e5c:	f8 01       	movw	r30, r16
    4e5e:	81 81       	ldd	r24, Z+1	; 0x01
    4e60:	92 81       	ldd	r25, Z+2	; 0x02
    4e62:	88 0f       	add	r24, r24
    4e64:	28 2f       	mov	r18, r24
    4e66:	22 0f       	add	r18, r18
    4e68:	22 0f       	add	r18, r18
    4e6a:	82 0f       	add	r24, r18
    4e6c:	89 0f       	add	r24, r25
    4e6e:	80 32       	cpi	r24, 0x20	; 32
    4e70:	2c f0       	brlt	.+10     	; 0x4e7c <nibbleChange+0x1e8>
    4e72:	83 e0       	ldi	r24, 0x03	; 3
    4e74:	81 83       	std	Z+1, r24	; 0x01
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	82 83       	std	Z+2, r24	; 0x02
    4e7a:	b6 c0       	rjmp	.+364    	; 0x4fe8 <nibbleChange+0x354>
    4e7c:	88 23       	and	r24, r24
    4e7e:	0c f0       	brlt	.+2      	; 0x4e82 <nibbleChange+0x1ee>
    4e80:	b3 c0       	rjmp	.+358    	; 0x4fe8 <nibbleChange+0x354>
    4e82:	ec ee       	ldi	r30, 0xEC	; 236
    4e84:	f5 e0       	ldi	r31, 0x05	; 5
    4e86:	11 82       	std	Z+1, r1	; 0x01
    4e88:	12 82       	std	Z+2, r1	; 0x02
    4e8a:	ae c0       	rjmp	.+348    	; 0x4fe8 <nibbleChange+0x354>
    4e8c:	d0 e0       	ldi	r29, 0x00	; 0
    4e8e:	0c ee       	ldi	r16, 0xEC	; 236
    4e90:	15 e0       	ldi	r17, 0x05	; 5
    4e92:	c4 51       	subi	r28, 0x14	; 20
    4e94:	da 4f       	sbci	r29, 0xFA	; 250
    4e96:	88 81       	ld	r24, Y
    4e98:	86 0f       	add	r24, r22
    4e9a:	f3 de       	rcall	.-538    	; 0x4c82 <nibbleCheckOvfl>
    4e9c:	88 83       	st	Y, r24
    4e9e:	f8 01       	movw	r30, r16
    4ea0:	20 81       	ld	r18, Z
    4ea2:	81 81       	ldd	r24, Z+1	; 0x01
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	ac 01       	movw	r20, r24
    4ea8:	44 0f       	add	r20, r20
    4eaa:	55 1f       	adc	r21, r21
    4eac:	88 0f       	add	r24, r24
    4eae:	99 1f       	adc	r25, r25
    4eb0:	88 0f       	add	r24, r24
    4eb2:	99 1f       	adc	r25, r25
    4eb4:	88 0f       	add	r24, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	84 0f       	add	r24, r20
    4eba:	95 1f       	adc	r25, r21
    4ebc:	f4 e6       	ldi	r31, 0x64	; 100
    4ebe:	2f 9f       	mul	r18, r31
    4ec0:	80 0d       	add	r24, r0
    4ec2:	91 1d       	adc	r25, r1
    4ec4:	11 24       	eor	r1, r1
    4ec6:	f8 01       	movw	r30, r16
    4ec8:	22 81       	ldd	r18, Z+2	; 0x02
    4eca:	82 0f       	add	r24, r18
    4ecc:	91 1d       	adc	r25, r1
    4ece:	8f 3f       	cpi	r24, 0xFF	; 255
    4ed0:	91 05       	cpc	r25, r1
    4ed2:	09 f0       	breq	.+2      	; 0x4ed6 <nibbleChange+0x242>
    4ed4:	0c f4       	brge	.+2      	; 0x4ed8 <nibbleChange+0x244>
    4ed6:	88 c0       	rjmp	.+272    	; 0x4fe8 <nibbleChange+0x354>
    4ed8:	82 e0       	ldi	r24, 0x02	; 2
    4eda:	80 83       	st	Z, r24
    4edc:	85 e0       	ldi	r24, 0x05	; 5
    4ede:	81 83       	std	Z+1, r24	; 0x01
    4ee0:	82 83       	std	Z+2, r24	; 0x02
    4ee2:	82 c0       	rjmp	.+260    	; 0x4fe8 <nibbleChange+0x354>
    4ee4:	22 23       	and	r18, r18
    4ee6:	a1 f0       	breq	.+40     	; 0x4f10 <nibbleChange+0x27c>
    4ee8:	d0 e0       	ldi	r29, 0x00	; 0
    4eea:	fe 01       	movw	r30, r28
    4eec:	e4 51       	subi	r30, 0x14	; 20
    4eee:	fa 4f       	sbci	r31, 0xFA	; 250
    4ef0:	80 81       	ld	r24, Z
    4ef2:	68 0f       	add	r22, r24
    4ef4:	60 83       	st	Z, r22
    4ef6:	64 30       	cpi	r22, 0x04	; 4
    4ef8:	19 f4       	brne	.+6      	; 0x4f00 <nibbleChange+0x26c>
    4efa:	8f ef       	ldi	r24, 0xFF	; 255
    4efc:	80 83       	st	Z, r24
    4efe:	74 c0       	rjmp	.+232    	; 0x4fe8 <nibbleChange+0x354>
    4f00:	6e 3f       	cpi	r22, 0xFE	; 254
    4f02:	09 f0       	breq	.+2      	; 0x4f06 <nibbleChange+0x272>
    4f04:	71 c0       	rjmp	.+226    	; 0x4fe8 <nibbleChange+0x354>
    4f06:	c4 51       	subi	r28, 0x14	; 20
    4f08:	da 4f       	sbci	r29, 0xFA	; 250
    4f0a:	83 e0       	ldi	r24, 0x03	; 3
    4f0c:	88 83       	st	Y, r24
    4f0e:	6c c0       	rjmp	.+216    	; 0x4fe8 <nibbleChange+0x354>
    4f10:	d0 e0       	ldi	r29, 0x00	; 0
    4f12:	fe 01       	movw	r30, r28
    4f14:	e4 51       	subi	r30, 0x14	; 20
    4f16:	fa 4f       	sbci	r31, 0xFA	; 250
    4f18:	80 81       	ld	r24, Z
    4f1a:	81 11       	cpse	r24, r1
    4f1c:	05 c0       	rjmp	.+10     	; 0x4f28 <nibbleChange+0x294>
    4f1e:	6f 3f       	cpi	r22, 0xFF	; 255
    4f20:	19 f4       	brne	.+6      	; 0x4f28 <nibbleChange+0x294>
    4f22:	83 e0       	ldi	r24, 0x03	; 3
    4f24:	80 83       	st	Z, r24
    4f26:	60 c0       	rjmp	.+192    	; 0x4fe8 <nibbleChange+0x354>
    4f28:	83 30       	cpi	r24, 0x03	; 3
    4f2a:	31 f4       	brne	.+12     	; 0x4f38 <nibbleChange+0x2a4>
    4f2c:	61 30       	cpi	r22, 0x01	; 1
    4f2e:	21 f4       	brne	.+8      	; 0x4f38 <nibbleChange+0x2a4>
    4f30:	c4 51       	subi	r28, 0x14	; 20
    4f32:	da 4f       	sbci	r29, 0xFA	; 250
    4f34:	18 82       	st	Y, r1
    4f36:	58 c0       	rjmp	.+176    	; 0x4fe8 <nibbleChange+0x354>
    4f38:	c4 51       	subi	r28, 0x14	; 20
    4f3a:	da 4f       	sbci	r29, 0xFA	; 250
    4f3c:	68 0f       	add	r22, r24
    4f3e:	68 83       	st	Y, r22
    4f40:	53 c0       	rjmp	.+166    	; 0x4fe8 <nibbleChange+0x354>
    4f42:	d0 e0       	ldi	r29, 0x00	; 0
    4f44:	c4 51       	subi	r28, 0x14	; 20
    4f46:	da 4f       	sbci	r29, 0xFA	; 250
    4f48:	88 81       	ld	r24, Y
    4f4a:	68 0f       	add	r22, r24
    4f4c:	63 70       	andi	r22, 0x03	; 3
    4f4e:	68 83       	st	Y, r22
    4f50:	4b c0       	rjmp	.+150    	; 0x4fe8 <nibbleChange+0x354>
    4f52:	ec ee       	ldi	r30, 0xEC	; 236
    4f54:	f5 e0       	ldi	r31, 0x05	; 5
    4f56:	80 81       	ld	r24, Z
    4f58:	80 95       	com	r24
    4f5a:	80 83       	st	Z, r24
    4f5c:	45 c0       	rjmp	.+138    	; 0x4fe8 <nibbleChange+0x354>
    4f5e:	d0 e0       	ldi	r29, 0x00	; 0
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	61 fd       	sbrc	r22, 1
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	c4 51       	subi	r28, 0x14	; 20
    4f68:	da 4f       	sbci	r29, 0xFA	; 250
    4f6a:	88 83       	st	Y, r24
    4f6c:	3d c0       	rjmp	.+122    	; 0x4fe8 <nibbleChange+0x354>
    4f6e:	61 30       	cpi	r22, 0x01	; 1
    4f70:	41 f4       	brne	.+16     	; 0x4f82 <nibbleChange+0x2ee>
    4f72:	d0 e0       	ldi	r29, 0x00	; 0
    4f74:	c4 51       	subi	r28, 0x14	; 20
    4f76:	da 4f       	sbci	r29, 0xFA	; 250
    4f78:	88 81       	ld	r24, Y
    4f7a:	87 70       	andi	r24, 0x07	; 7
    4f7c:	8f 5f       	subi	r24, 0xFF	; 255
    4f7e:	88 83       	st	Y, r24
    4f80:	33 c0       	rjmp	.+102    	; 0x4fe8 <nibbleChange+0x354>
    4f82:	ec 2f       	mov	r30, r28
    4f84:	f0 e0       	ldi	r31, 0x00	; 0
    4f86:	e4 51       	subi	r30, 0x14	; 20
    4f88:	fa 4f       	sbci	r31, 0xFA	; 250
    4f8a:	80 81       	ld	r24, Z
    4f8c:	82 50       	subi	r24, 0x02	; 2
    4f8e:	87 70       	andi	r24, 0x07	; 7
    4f90:	8f 5f       	subi	r24, 0xFF	; 255
    4f92:	80 83       	st	Z, r24
    4f94:	29 c0       	rjmp	.+82     	; 0x4fe8 <nibbleChange+0x354>
    4f96:	ec ee       	ldi	r30, 0xEC	; 236
    4f98:	f5 e0       	ldi	r31, 0x05	; 5
    4f9a:	90 81       	ld	r25, Z
    4f9c:	81 81       	ldd	r24, Z+1	; 0x01
    4f9e:	99 0f       	add	r25, r25
    4fa0:	29 2f       	mov	r18, r25
    4fa2:	22 0f       	add	r18, r18
    4fa4:	22 0f       	add	r18, r18
    4fa6:	92 0f       	add	r25, r18
    4fa8:	89 0f       	add	r24, r25
    4faa:	c1 11       	cpse	r28, r1
    4fac:	07 c0       	rjmp	.+14     	; 0x4fbc <nibbleChange+0x328>
    4fae:	66 0f       	add	r22, r22
    4fb0:	96 2f       	mov	r25, r22
    4fb2:	99 0f       	add	r25, r25
    4fb4:	99 0f       	add	r25, r25
    4fb6:	69 0f       	add	r22, r25
    4fb8:	68 0f       	add	r22, r24
    4fba:	01 c0       	rjmp	.+2      	; 0x4fbe <nibbleChange+0x32a>
    4fbc:	68 0f       	add	r22, r24
    4fbe:	66 23       	and	r22, r22
    4fc0:	1c f0       	brlt	.+6      	; 0x4fc8 <nibbleChange+0x334>
    4fc2:	61 34       	cpi	r22, 0x41	; 65
    4fc4:	1c f4       	brge	.+6      	; 0x4fcc <nibbleChange+0x338>
    4fc6:	03 c0       	rjmp	.+6      	; 0x4fce <nibbleChange+0x33a>
    4fc8:	60 e0       	ldi	r22, 0x00	; 0
    4fca:	01 c0       	rjmp	.+2      	; 0x4fce <nibbleChange+0x33a>
    4fcc:	60 e0       	ldi	r22, 0x00	; 0
    4fce:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <nibble>
    4fd2:	06 c0       	rjmp	.+12     	; 0x4fe0 <nibbleChange+0x34c>
    4fd4:	ec ee       	ldi	r30, 0xEC	; 236
    4fd6:	f5 e0       	ldi	r31, 0x05	; 5
    4fd8:	80 81       	ld	r24, Z
    4fda:	8f 5f       	subi	r24, 0xFF	; 255
    4fdc:	80 83       	st	Z, r24
    4fde:	6a 50       	subi	r22, 0x0A	; 10
    4fe0:	6a 30       	cpi	r22, 0x0A	; 10
    4fe2:	c4 f7       	brge	.-16     	; 0x4fd4 <nibbleChange+0x340>
    4fe4:	60 93 ed 05 	sts	0x05ED, r22	; 0x8005ed <nibble+0x1>
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	1f 91       	pop	r17
    4fee:	0f 91       	pop	r16
    4ff0:	08 95       	ret

00004ff2 <nibbleToData>:
    4ff2:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <dataType>
    4ff6:	8e 2f       	mov	r24, r30
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	32 97       	sbiw	r30, 0x02	; 2
    4ffe:	ed 30       	cpi	r30, 0x0D	; 13
    5000:	f1 05       	cpc	r31, r1
    5002:	08 f0       	brcs	.+2      	; 0x5006 <nibbleToData+0x14>
    5004:	da c0       	rjmp	.+436    	; 0x51ba <nibbleToData+0x1c8>
    5006:	88 27       	eor	r24, r24
    5008:	e7 56       	subi	r30, 0x67	; 103
    500a:	ff 4f       	sbci	r31, 0xFF	; 255
    500c:	8f 4f       	sbci	r24, 0xFF	; 255
    500e:	0c 94 e3 40 	jmp	0x81c6	; 0x81c6 <__tablejump2__>
    5012:	ec ee       	ldi	r30, 0xEC	; 236
    5014:	f5 e0       	ldi	r31, 0x05	; 5
    5016:	80 81       	ld	r24, Z
    5018:	20 e1       	ldi	r18, 0x10	; 16
    501a:	82 9f       	mul	r24, r18
    501c:	c0 01       	movw	r24, r0
    501e:	11 24       	eor	r1, r1
    5020:	91 81       	ldd	r25, Z+1	; 0x01
    5022:	9f 70       	andi	r25, 0x0F	; 15
    5024:	89 2b       	or	r24, r25
    5026:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    502a:	08 95       	ret
    502c:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <nibble>
    5030:	8f ef       	ldi	r24, 0xFF	; 255
    5032:	89 0f       	add	r24, r25
    5034:	80 31       	cpi	r24, 0x10	; 16
    5036:	18 f0       	brcs	.+6      	; 0x503e <nibbleToData+0x4c>
    5038:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <dataEntry>
    503c:	08 95       	ret
    503e:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    5042:	08 95       	ret
    5044:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <nibble>
    5048:	9f 3f       	cpi	r25, 0xFF	; 255
    504a:	21 f0       	breq	.+8      	; 0x5054 <nibbleToData+0x62>
    504c:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <nibble+0x1>
    5050:	8f 3f       	cpi	r24, 0xFF	; 255
    5052:	21 f4       	brne	.+8      	; 0x505c <nibbleToData+0x6a>
    5054:	8f ef       	ldi	r24, 0xFF	; 255
    5056:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    505a:	08 95       	ret
    505c:	28 2f       	mov	r18, r24
    505e:	22 0f       	add	r18, r18
    5060:	82 0f       	add	r24, r18
    5062:	88 0f       	add	r24, r24
    5064:	88 0f       	add	r24, r24
    5066:	89 0f       	add	r24, r25
    5068:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    506c:	08 95       	ret
    506e:	ec ee       	ldi	r30, 0xEC	; 236
    5070:	f5 e0       	ldi	r31, 0x05	; 5
    5072:	80 81       	ld	r24, Z
    5074:	30 e2       	ldi	r19, 0x20	; 32
    5076:	83 9f       	mul	r24, r19
    5078:	c0 01       	movw	r24, r0
    507a:	11 24       	eor	r1, r1
    507c:	21 81       	ldd	r18, Z+1	; 0x01
    507e:	32 81       	ldd	r19, Z+2	; 0x02
    5080:	22 0f       	add	r18, r18
    5082:	42 2f       	mov	r20, r18
    5084:	44 0f       	add	r20, r20
    5086:	44 0f       	add	r20, r20
    5088:	24 0f       	add	r18, r20
    508a:	23 0f       	add	r18, r19
    508c:	20 32       	cpi	r18, 0x20	; 32
    508e:	20 f0       	brcs	.+8      	; 0x5098 <nibbleToData+0xa6>
    5090:	8f 61       	ori	r24, 0x1F	; 31
    5092:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    5096:	08 95       	ret
    5098:	82 2b       	or	r24, r18
    509a:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    509e:	08 95       	ret
    50a0:	ec ee       	ldi	r30, 0xEC	; 236
    50a2:	f5 e0       	ldi	r31, 0x05	; 5
    50a4:	20 81       	ld	r18, Z
    50a6:	81 81       	ldd	r24, Z+1	; 0x01
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	ac 01       	movw	r20, r24
    50ac:	44 0f       	add	r20, r20
    50ae:	55 1f       	adc	r21, r21
    50b0:	88 0f       	add	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	88 0f       	add	r24, r24
    50b6:	99 1f       	adc	r25, r25
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	84 0f       	add	r24, r20
    50be:	95 1f       	adc	r25, r21
    50c0:	34 e6       	ldi	r19, 0x64	; 100
    50c2:	23 9f       	mul	r18, r19
    50c4:	80 0d       	add	r24, r0
    50c6:	91 1d       	adc	r25, r1
    50c8:	11 24       	eor	r1, r1
    50ca:	22 81       	ldd	r18, Z+2	; 0x02
    50cc:	82 0f       	add	r24, r18
    50ce:	91 1d       	adc	r25, r1
    50d0:	8f 3f       	cpi	r24, 0xFF	; 255
    50d2:	91 05       	cpc	r25, r1
    50d4:	29 f0       	breq	.+10     	; 0x50e0 <nibbleToData+0xee>
    50d6:	20 f0       	brcs	.+8      	; 0x50e0 <nibbleToData+0xee>
    50d8:	8f ef       	ldi	r24, 0xFF	; 255
    50da:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    50de:	08 95       	ret
    50e0:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    50e4:	08 95       	ret
    50e6:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    50ea:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    50ee:	84 30       	cpi	r24, 0x04	; 4
    50f0:	08 f4       	brcc	.+2      	; 0x50f4 <nibbleToData+0x102>
    50f2:	63 c0       	rjmp	.+198    	; 0x51ba <nibbleToData+0x1c8>
    50f4:	8f ef       	ldi	r24, 0xFF	; 255
    50f6:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    50fa:	08 95       	ret
    50fc:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    5100:	83 70       	andi	r24, 0x03	; 3
    5102:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    5106:	08 95       	ret
    5108:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <nibble>
    510c:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    5110:	08 95       	ret
    5112:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <dataEntry>
    5116:	80 e0       	ldi	r24, 0x00	; 0
    5118:	0c c0       	rjmp	.+24     	; 0x5132 <nibbleToData+0x140>
    511a:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <dataEntry>
    511e:	99 0f       	add	r25, r25
    5120:	e8 2f       	mov	r30, r24
    5122:	f0 e0       	ldi	r31, 0x00	; 0
    5124:	e4 51       	subi	r30, 0x14	; 20
    5126:	fa 4f       	sbci	r31, 0xFA	; 250
    5128:	20 81       	ld	r18, Z
    512a:	92 0f       	add	r25, r18
    512c:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <dataEntry>
    5130:	8f 5f       	subi	r24, 0xFF	; 255
    5132:	88 30       	cpi	r24, 0x08	; 8
    5134:	90 f3       	brcs	.-28     	; 0x511a <nibbleToData+0x128>
    5136:	08 95       	ret
    5138:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <dataEntry32>
    513c:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <dataEntry32+0x1>
    5140:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <dataEntry32+0x2>
    5144:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <dataEntry32+0x3>
    5148:	aa ec       	ldi	r26, 0xCA	; 202
    514a:	b5 e0       	ldi	r27, 0x05	; 5
    514c:	88 e0       	ldi	r24, 0x08	; 8
    514e:	10 c0       	rjmp	.+32     	; 0x5170 <nibbleToData+0x17e>
    5150:	82 50       	subi	r24, 0x02	; 2
    5152:	f0 e0       	ldi	r31, 0x00	; 0
    5154:	e4 51       	subi	r30, 0x14	; 20
    5156:	fa 4f       	sbci	r31, 0xFA	; 250
    5158:	90 81       	ld	r25, Z
    515a:	e8 2f       	mov	r30, r24
    515c:	f0 e0       	ldi	r31, 0x00	; 0
    515e:	e4 51       	subi	r30, 0x14	; 20
    5160:	fa 4f       	sbci	r31, 0xFA	; 250
    5162:	20 81       	ld	r18, Z
    5164:	30 e1       	ldi	r19, 0x10	; 16
    5166:	23 9f       	mul	r18, r19
    5168:	90 0d       	add	r25, r0
    516a:	11 24       	eor	r1, r1
    516c:	9c 93       	st	X, r25
    516e:	11 96       	adiw	r26, 0x01	; 1
    5170:	ef ef       	ldi	r30, 0xFF	; 255
    5172:	e8 0f       	add	r30, r24
    5174:	81 11       	cpse	r24, r1
    5176:	ec cf       	rjmp	.-40     	; 0x5150 <nibbleToData+0x15e>
    5178:	08 95       	ret
    517a:	ec ee       	ldi	r30, 0xEC	; 236
    517c:	f5 e0       	ldi	r31, 0x05	; 5
    517e:	21 81       	ldd	r18, Z+1	; 0x01
    5180:	90 81       	ld	r25, Z
    5182:	89 2f       	mov	r24, r25
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	01 97       	sbiw	r24, 0x01	; 1
    5188:	88 0f       	add	r24, r24
    518a:	99 1f       	adc	r25, r25
    518c:	88 0f       	add	r24, r24
    518e:	99 1f       	adc	r25, r25
    5190:	88 0f       	add	r24, r24
    5192:	99 1f       	adc	r25, r25
    5194:	9f ef       	ldi	r25, 0xFF	; 255
    5196:	92 0f       	add	r25, r18
    5198:	89 2b       	or	r24, r25
    519a:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    519e:	08 95       	ret
    51a0:	ec ee       	ldi	r30, 0xEC	; 236
    51a2:	f5 e0       	ldi	r31, 0x05	; 5
    51a4:	80 81       	ld	r24, Z
    51a6:	91 81       	ldd	r25, Z+1	; 0x01
    51a8:	88 0f       	add	r24, r24
    51aa:	28 2f       	mov	r18, r24
    51ac:	22 0f       	add	r18, r18
    51ae:	22 0f       	add	r18, r18
    51b0:	82 0f       	add	r24, r18
    51b2:	89 0f       	add	r24, r25
    51b4:	81 50       	subi	r24, 0x01	; 1
    51b6:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    51ba:	08 95       	ret

000051bc <menuTextOut>:
    51bc:	0f 93       	push	r16
    51be:	1f 93       	push	r17
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	8c 01       	movw	r16, r24
    51c6:	d6 2f       	mov	r29, r22
    51c8:	c0 e0       	ldi	r28, 0x00	; 0
    51ca:	0c c0       	rjmp	.+24     	; 0x51e4 <menuTextOut+0x28>
    51cc:	f8 01       	movw	r30, r16
    51ce:	84 91       	lpm	r24, Z
    51d0:	88 23       	and	r24, r24
    51d2:	19 f0       	breq	.+6      	; 0x51da <menuTextOut+0x1e>
    51d4:	0f 5f       	subi	r16, 0xFF	; 255
    51d6:	1f 4f       	sbci	r17, 0xFF	; 255
    51d8:	02 c0       	rjmp	.+4      	; 0x51de <menuTextOut+0x22>
    51da:	8d 2f       	mov	r24, r29
    51dc:	d0 e2       	ldi	r29, 0x20	; 32
    51de:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    51e2:	cf 5f       	subi	r28, 0xFF	; 255
    51e4:	ca 30       	cpi	r28, 0x0A	; 10
    51e6:	90 f3       	brcs	.-28     	; 0x51cc <menuTextOut+0x10>
    51e8:	df 91       	pop	r29
    51ea:	cf 91       	pop	r28
    51ec:	1f 91       	pop	r17
    51ee:	0f 91       	pop	r16
    51f0:	08 95       	ret

000051f2 <menuParentMenuToLCD>:
    51f2:	80 e4       	ldi	r24, 0x40	; 64
    51f4:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    51f8:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <menuStackIndex>
    51fc:	e1 11       	cpse	r30, r1
    51fe:	07 c0       	rjmp	.+14     	; 0x520e <menuParentMenuToLCD+0x1c>
    5200:	6a e3       	ldi	r22, 0x3A	; 58
    5202:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <pMenuTopTitle>
    5206:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <pMenuTopTitle+0x1>
    520a:	d8 cf       	rjmp	.-80     	; 0x51bc <menuTextOut>
    520c:	08 95       	ret
    520e:	f0 e0       	ldi	r31, 0x00	; 0
    5210:	31 97       	sbiw	r30, 0x01	; 1
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	ed 55       	subi	r30, 0x5D	; 93
    5218:	fa 4f       	sbci	r31, 0xFA	; 250
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	6a e3       	ldi	r22, 0x3A	; 58
    5220:	02 96       	adiw	r24, 0x02	; 2
    5222:	cc cf       	rjmp	.-104    	; 0x51bc <menuTextOut>
    5224:	08 95       	ret

00005226 <menuDisplayValue>:
    5226:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    522a:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    522e:	84 91       	lpm	r24, Z
    5230:	8f 73       	andi	r24, 0x3F	; 63
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	02 97       	sbiw	r24, 0x02	; 2
    5236:	1c f0       	brlt	.+6      	; 0x523e <menuDisplayValue+0x18>
    5238:	c8 da       	rcall	.-2672   	; 0x47ca <dataToNibbles>
    523a:	ba db       	rcall	.-2188   	; 0x49b0 <nibbleToLCDstring>
    523c:	07 cd       	rjmp	.-1522   	; 0x4c4c <LCDStringOut>
    523e:	08 95       	ret

00005240 <menuCursorSetDataNibble>:
    5240:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <pNibbleInfo>
    5244:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <pNibbleInfo+0x1>
    5248:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <nibbleIndex>
    524c:	e8 0f       	add	r30, r24
    524e:	f1 1d       	adc	r31, r1
    5250:	31 96       	adiw	r30, 0x01	; 1
    5252:	84 91       	lpm	r24, Z
    5254:	82 5e       	subi	r24, 0xE2	; 226
    5256:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    525a:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <nibbleIndex>
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <pNibbleInfo>
    5264:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <pNibbleInfo+0x1>
    5268:	84 91       	lpm	r24, Z
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	01 97       	sbiw	r24, 0x01	; 1
    526e:	28 17       	cp	r18, r24
    5270:	39 07       	cpc	r19, r25
    5272:	14 f4       	brge	.+4      	; 0x5278 <menuCursorSetDataNibble+0x38>
    5274:	68 da       	rcall	.-2864   	; 0x4746 <softkeyRight>
    5276:	03 c0       	rjmp	.+6      	; 0x527e <menuCursorSetDataNibble+0x3e>
    5278:	83 e0       	ldi	r24, 0x03	; 3
    527a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    527e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <nibbleIndex>
    5282:	88 23       	and	r24, r24
    5284:	11 f0       	breq	.+4      	; 0x528a <menuCursorSetDataNibble+0x4a>
    5286:	59 da       	rcall	.-2894   	; 0x473a <softkeyLeft>
    5288:	03 c0       	rjmp	.+6      	; 0x5290 <menuCursorSetDataNibble+0x50>
    528a:	82 e0       	ldi	r24, 0x02	; 2
    528c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    5290:	78 da       	rcall	.-2832   	; 0x4782 <softkeyPlus>
    5292:	89 da       	rcall	.-2798   	; 0x47a6 <softkeyMinus>
    5294:	0c 94 80 40 	jmp	0x8100	; 0x8100 <keylabel_toLCD>
    5298:	08 95       	ret

0000529a <menuCursorSetExtra>:
    529a:	84 e1       	ldi	r24, 0x14	; 20
    529c:	0c 94 87 14 	jmp	0x290e	; 0x290e <lcd_goto>
    52a0:	08 95       	ret

000052a2 <menuOnEnterStatusMidiIn>:
    52a2:	0f 93       	push	r16
    52a4:	1f 93       	push	r17
    52a6:	cf 93       	push	r28
    52a8:	f8 df       	rcall	.-16     	; 0x529a <menuCursorSetExtra>
    52aa:	80 e8       	ldi	r24, 0x80	; 128
    52ac:	94 e0       	ldi	r25, 0x04	; 4
    52ae:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    52b2:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <midiRxBytesCount>
    52b6:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <midiRxBytesCount+0x1>
    52ba:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <lcd_wordout>
    52be:	8d e2       	ldi	r24, 0x2D	; 45
    52c0:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    52c4:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <midiRxBytesCount>
    52c8:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <midiRxBytesCount+0x1>
    52cc:	04 97       	sbiw	r24, 0x04	; 4
    52ce:	30 f4       	brcc	.+12     	; 0x52dc <menuOnEnterStatusMidiIn+0x3a>
    52d0:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <midiRxBytesCount>
    52d4:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <midiRxBytesCount+0x1>
    52d8:	c8 2f       	mov	r28, r24
    52da:	01 c0       	rjmp	.+2      	; 0x52de <menuOnEnterStatusMidiIn+0x3c>
    52dc:	c4 e0       	ldi	r28, 0x04	; 4
    52de:	00 91 70 16 	lds	r16, 0x1670	; 0x801670 <midiRxInIndex>
    52e2:	10 e0       	ldi	r17, 0x00	; 0
    52e4:	04 59       	subi	r16, 0x94	; 148
    52e6:	1b 4e       	sbci	r17, 0xEB	; 235
    52e8:	13 c0       	rjmp	.+38     	; 0x5310 <menuOnEnterStatusMidiIn+0x6e>
    52ea:	84 e1       	ldi	r24, 0x14	; 20
    52ec:	0d 36       	cpi	r16, 0x6D	; 109
    52ee:	18 07       	cpc	r17, r24
    52f0:	10 f0       	brcs	.+4      	; 0x52f6 <menuOnEnterStatusMidiIn+0x54>
    52f2:	f8 01       	movw	r30, r16
    52f4:	02 c0       	rjmp	.+4      	; 0x52fa <menuOnEnterStatusMidiIn+0x58>
    52f6:	ec e6       	ldi	r30, 0x6C	; 108
    52f8:	f5 e1       	ldi	r31, 0x15	; 21
    52fa:	8f 01       	movw	r16, r30
    52fc:	01 50       	subi	r16, 0x01	; 1
    52fe:	11 09       	sbc	r17, r1
    5300:	80 81       	ld	r24, Z
    5302:	0e 94 5d 3e 	call	0x7cba	; 0x7cba <lcd_hexout>
    5306:	c1 50       	subi	r28, 0x01	; 1
    5308:	19 f0       	breq	.+6      	; 0x5310 <menuOnEnterStatusMidiIn+0x6e>
    530a:	80 e2       	ldi	r24, 0x20	; 32
    530c:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    5310:	c1 11       	cpse	r28, r1
    5312:	eb cf       	rjmp	.-42     	; 0x52ea <menuOnEnterStatusMidiIn+0x48>
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	cf 91       	pop	r28
    5318:	1f 91       	pop	r17
    531a:	0f 91       	pop	r16
    531c:	08 95       	ret

0000531e <menuOnEnterStatusMidiOut>:
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	cf 93       	push	r28
    5324:	ba df       	rcall	.-140    	; 0x529a <menuCursorSetExtra>
    5326:	8b e7       	ldi	r24, 0x7B	; 123
    5328:	94 e0       	ldi	r25, 0x04	; 4
    532a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    532e:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <midiTxBytesCount>
    5332:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiTxBytesCount+0x1>
    5336:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <lcd_wordout>
    533a:	8d e2       	ldi	r24, 0x2D	; 45
    533c:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    5340:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <midiTxBytesCount>
    5344:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiTxBytesCount+0x1>
    5348:	04 97       	sbiw	r24, 0x04	; 4
    534a:	30 f4       	brcc	.+12     	; 0x5358 <menuOnEnterStatusMidiOut+0x3a>
    534c:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <midiTxBytesCount>
    5350:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiTxBytesCount+0x1>
    5354:	c8 2f       	mov	r28, r24
    5356:	01 c0       	rjmp	.+2      	; 0x535a <menuOnEnterStatusMidiOut+0x3c>
    5358:	c4 e0       	ldi	r28, 0x04	; 4
    535a:	00 91 1b 14 	lds	r16, 0x141B	; 0x80141b <midiTxInIndex>
    535e:	10 e0       	ldi	r17, 0x00	; 0
    5360:	03 59       	subi	r16, 0x93	; 147
    5362:	1a 4e       	sbci	r17, 0xEA	; 234
    5364:	13 c0       	rjmp	.+38     	; 0x538c <menuOnEnterStatusMidiOut+0x6e>
    5366:	85 e1       	ldi	r24, 0x15	; 21
    5368:	0e 36       	cpi	r16, 0x6E	; 110
    536a:	18 07       	cpc	r17, r24
    536c:	10 f0       	brcs	.+4      	; 0x5372 <menuOnEnterStatusMidiOut+0x54>
    536e:	f8 01       	movw	r30, r16
    5370:	02 c0       	rjmp	.+4      	; 0x5376 <menuOnEnterStatusMidiOut+0x58>
    5372:	ed e6       	ldi	r30, 0x6D	; 109
    5374:	f6 e1       	ldi	r31, 0x16	; 22
    5376:	8f 01       	movw	r16, r30
    5378:	01 50       	subi	r16, 0x01	; 1
    537a:	11 09       	sbc	r17, r1
    537c:	80 81       	ld	r24, Z
    537e:	0e 94 5d 3e 	call	0x7cba	; 0x7cba <lcd_hexout>
    5382:	c1 50       	subi	r28, 0x01	; 1
    5384:	19 f0       	breq	.+6      	; 0x538c <menuOnEnterStatusMidiOut+0x6e>
    5386:	80 e2       	ldi	r24, 0x20	; 32
    5388:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    538c:	c1 11       	cpse	r28, r1
    538e:	eb cf       	rjmp	.-42     	; 0x5366 <menuOnEnterStatusMidiOut+0x48>
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	cf 91       	pop	r28
    5394:	1f 91       	pop	r17
    5396:	0f 91       	pop	r16
    5398:	08 95       	ret

0000539a <menuOnEnterLogDisp>:
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	8f 3f       	cpi	r24, 0xFF	; 255
    53a2:	a9 f4       	brne	.+42     	; 0x53ce <menuOnEnterLogDisp+0x34>
    53a4:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <log_count>
    53a8:	81 50       	subi	r24, 0x01	; 1
    53aa:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    53ae:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <showText.3116>
    53b2:	63 ed       	ldi	r22, 0xD3	; 211
    53b4:	74 e1       	ldi	r23, 0x14	; 20
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    53bc:	6d ec       	ldi	r22, 0xCD	; 205
    53be:	74 e1       	ldi	r23, 0x14	; 20
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    53c6:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    53ca:	cf ef       	ldi	r28, 0xFF	; 255
    53cc:	2f c0       	rjmp	.+94     	; 0x542c <menuOnEnterLogDisp+0x92>
    53ce:	84 30       	cpi	r24, 0x04	; 4
    53d0:	49 f4       	brne	.+18     	; 0x53e4 <menuOnEnterLogDisp+0x4a>
    53d2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    53d6:	88 23       	and	r24, r24
    53d8:	21 f1       	breq	.+72     	; 0x5422 <menuOnEnterLogDisp+0x88>
    53da:	81 50       	subi	r24, 0x01	; 1
    53dc:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    53e0:	cf ef       	ldi	r28, 0xFF	; 255
    53e2:	24 c0       	rjmp	.+72     	; 0x542c <menuOnEnterLogDisp+0x92>
    53e4:	81 30       	cpi	r24, 0x01	; 1
    53e6:	91 f4       	brne	.+36     	; 0x540c <menuOnEnterLogDisp+0x72>
    53e8:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3115>
    53ec:	10 e0       	ldi	r17, 0x00	; 0
    53ee:	0f 5f       	subi	r16, 0xFF	; 255
    53f0:	1f 4f       	sbci	r17, 0xFF	; 255
    53f2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <log_count>
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	08 17       	cp	r16, r24
    53fa:	19 07       	cpc	r17, r25
    53fc:	a4 f4       	brge	.+40     	; 0x5426 <menuOnEnterLogDisp+0x8c>
    53fe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5402:	8f 5f       	subi	r24, 0xFF	; 255
    5404:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    5408:	cf ef       	ldi	r28, 0xFF	; 255
    540a:	10 c0       	rjmp	.+32     	; 0x542c <menuOnEnterLogDisp+0x92>
    540c:	83 30       	cpi	r24, 0x03	; 3
    540e:	11 f0       	breq	.+4      	; 0x5414 <menuOnEnterLogDisp+0x7a>
    5410:	85 30       	cpi	r24, 0x05	; 5
    5412:	59 f4       	brne	.+22     	; 0x542a <menuOnEnterLogDisp+0x90>
    5414:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    5418:	80 95       	com	r24
    541a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <showText.3116>
    541e:	cf ef       	ldi	r28, 0xFF	; 255
    5420:	05 c0       	rjmp	.+10     	; 0x542c <menuOnEnterLogDisp+0x92>
    5422:	cf ef       	ldi	r28, 0xFF	; 255
    5424:	03 c0       	rjmp	.+6      	; 0x542c <menuOnEnterLogDisp+0x92>
    5426:	cf ef       	ldi	r28, 0xFF	; 255
    5428:	01 c0       	rjmp	.+2      	; 0x542c <menuOnEnterLogDisp+0x92>
    542a:	c0 e0       	ldi	r28, 0x00	; 0
    542c:	cf 3f       	cpi	r28, 0xFF	; 255
    542e:	09 f0       	breq	.+2      	; 0x5432 <menuOnEnterLogDisp+0x98>
    5430:	54 c0       	rjmp	.+168    	; 0x54da <menuOnEnterLogDisp+0x140>
    5432:	33 df       	rcall	.-410    	; 0x529a <menuCursorSetExtra>
    5434:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <log_count>
    5438:	81 11       	cpse	r24, r1
    543a:	06 c0       	rjmp	.+12     	; 0x5448 <menuOnEnterLogDisp+0xae>
    543c:	8e e3       	ldi	r24, 0x3E	; 62
    543e:	94 e0       	ldi	r25, 0x04	; 4
    5440:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    5444:	c0 e0       	ldi	r28, 0x00	; 0
    5446:	1d c0       	rjmp	.+58     	; 0x5482 <menuOnEnterLogDisp+0xe8>
    5448:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    544c:	8f 5f       	subi	r24, 0xFF	; 255
    544e:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <lcd_dec2out>
    5452:	8a e3       	ldi	r24, 0x3A	; 58
    5454:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    5458:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    545c:	81 11       	cpse	r24, r1
    545e:	08 c0       	rjmp	.+16     	; 0x5470 <menuOnEnterLogDisp+0xd6>
    5460:	60 e2       	ldi	r22, 0x20	; 32
    5462:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5466:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <log_getShortTextFromIndex>
    546a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <lcd_puts>
    546e:	06 c0       	rjmp	.+12     	; 0x547c <menuOnEnterLogDisp+0xe2>
    5470:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5474:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <log_getErrorText>
    5478:	0e 94 02 15 	call	0x2a04	; 0x2a04 <lcd_puts_P>
    547c:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <lcd_clrEol>
    5480:	0c df       	rcall	.-488    	; 0x529a <menuCursorSetExtra>
    5482:	61 e0       	ldi	r22, 0x01	; 1
    5484:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    5488:	8f 3f       	cpi	r24, 0xFF	; 255
    548a:	09 f0       	breq	.+2      	; 0x548e <menuOnEnterLogDisp+0xf4>
    548c:	60 e0       	ldi	r22, 0x00	; 0
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	0e 94 9f 40 	call	0x813e	; 0x813e <keylabel_statcheck>
    5494:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3115>
    5498:	10 e0       	ldi	r17, 0x00	; 0
    549a:	0f 5f       	subi	r16, 0xFF	; 255
    549c:	1f 4f       	sbci	r17, 0xFF	; 255
    549e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <log_count>
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	08 17       	cp	r16, r24
    54a6:	19 07       	cpc	r17, r25
    54a8:	34 f4       	brge	.+12     	; 0x54b6 <menuOnEnterLogDisp+0x11c>
    54aa:	6d ee       	ldi	r22, 0xED	; 237
    54ac:	74 e1       	ldi	r23, 0x14	; 20
    54ae:	83 e0       	ldi	r24, 0x03	; 3
    54b0:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    54b4:	03 c0       	rjmp	.+6      	; 0x54bc <menuOnEnterLogDisp+0x122>
    54b6:	83 e0       	ldi	r24, 0x03	; 3
    54b8:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    54bc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    54c0:	88 23       	and	r24, r24
    54c2:	31 f0       	breq	.+12     	; 0x54d0 <menuOnEnterLogDisp+0x136>
    54c4:	6b ee       	ldi	r22, 0xEB	; 235
    54c6:	74 e1       	ldi	r23, 0x14	; 20
    54c8:	82 e0       	ldi	r24, 0x02	; 2
    54ca:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
    54ce:	03 c0       	rjmp	.+6      	; 0x54d6 <menuOnEnterLogDisp+0x13c>
    54d0:	82 e0       	ldi	r24, 0x02	; 2
    54d2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    54d6:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    54da:	8c 2f       	mov	r24, r28
    54dc:	cf 91       	pop	r28
    54de:	1f 91       	pop	r17
    54e0:	0f 91       	pop	r16
    54e2:	08 95       	ret

000054e4 <menuCursorSetMenu>:
    54e4:	8a e4       	ldi	r24, 0x4A	; 74
    54e6:	0c 94 87 14 	jmp	0x290e	; 0x290e <lcd_goto>
    54ea:	08 95       	ret

000054ec <menu_OnEnterMidiPanic>:
    54ec:	8d e5       	ldi	r24, 0x5D	; 93
    54ee:	94 e0       	ldi	r25, 0x04	; 4
    54f0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <lcd_message_P>
    54f4:	0e 94 c3 39 	call	0x7386	; 0x7386 <midiSendAllNotesOff>
    54f8:	f5 df       	rcall	.-22     	; 0x54e4 <menuCursorSetMenu>
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	08 95       	ret

000054fe <menuClearExtraDisp>:
    54fe:	cd de       	rcall	.-614    	; 0x529a <menuCursorSetExtra>
    5500:	8a e0       	ldi	r24, 0x0A	; 10
    5502:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <lcd_blank>
    5506:	08 95       	ret

00005508 <menu_ClearDataDisp>:
    5508:	8e e1       	ldi	r24, 0x1E	; 30
    550a:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    550e:	8a e0       	ldi	r24, 0x0A	; 10
    5510:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <lcd_blank>
    5514:	08 95       	ret

00005516 <menu_ModuleTestExecute>:
    5516:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_TestModuleBitCounter>
    551a:	8f 3f       	cpi	r24, 0xFF	; 255
    551c:	11 f0       	breq	.+4      	; 0x5522 <menu_ModuleTestExecute+0xc>
    551e:	8d 3f       	cpi	r24, 0xFD	; 253
    5520:	79 f5       	brne	.+94     	; 0x5580 <menu_ModuleTestExecute+0x6a>
    5522:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <lcd_cursoroff>
    5526:	f0 df       	rcall	.-32     	; 0x5508 <menu_ClearDataDisp>
    5528:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <msgPipe_Handling>
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	ee e6       	ldi	r30, 0x6E	; 110
    5530:	f2 e0       	ldi	r31, 0x02	; 2
    5532:	07 c0       	rjmp	.+14     	; 0x5542 <menu_ModuleTestExecute+0x2c>
    5534:	21 81       	ldd	r18, Z+1	; 0x01
    5536:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <menu_TestModulePattern>
    553a:	82 2b       	or	r24, r18
    553c:	81 83       	std	Z+1, r24	; 0x01
    553e:	38 96       	adiw	r30, 0x08	; 8
    5540:	9f 5f       	subi	r25, 0xFF	; 255
    5542:	90 32       	cpi	r25, 0x20	; 32
    5544:	b8 f3       	brcs	.-18     	; 0x5534 <menu_ModuleTestExecute+0x1e>
    5546:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_TestModuleBitCounter>
    554a:	8f 3f       	cpi	r24, 0xFF	; 255
    554c:	19 f4       	brne	.+6      	; 0x5554 <menu_ModuleTestExecute+0x3e>
    554e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_TestModuleBitCounter>
    5552:	5c c0       	rjmp	.+184    	; 0x560c <menu_ModuleTestExecute+0xf6>
    5554:	87 e5       	ldi	r24, 0x57	; 87
    5556:	94 e0       	ldi	r25, 0x04	; 4
    5558:	0e 94 5d 15 	call	0x2aba	; 0x2aba <lcd_message_P>
    555c:	8e ef       	ldi	r24, 0xFE	; 254
    555e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_TestModuleBitCounter>
    5562:	9f b7       	in	r25, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	06 c0       	rjmp	.+12     	; 0x5576 <menu_ModuleTestExecute+0x60>
    556a:	e0 e5       	ldi	r30, 0x50	; 80
    556c:	f2 e0       	ldi	r31, 0x02	; 2
    556e:	82 e0       	ldi	r24, 0x02	; 2
    5570:	84 87       	std	Z+12, r24	; 0x0c
    5572:	85 87       	std	Z+13, r24	; 0x0d
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	81 11       	cpse	r24, r1
    5578:	f8 cf       	rjmp	.-16     	; 0x556a <menu_ModuleTestExecute+0x54>
    557a:	9f bf       	out	0x3f, r25	; 63
    557c:	b3 df       	rcall	.-154    	; 0x54e4 <menuCursorSetMenu>
    557e:	46 c0       	rjmp	.+140    	; 0x560c <menu_ModuleTestExecute+0xf6>
    5580:	8e 3f       	cpi	r24, 0xFE	; 254
    5582:	41 f4       	brne	.+16     	; 0x5594 <menu_ModuleTestExecute+0x7e>
    5584:	8f ef       	ldi	r24, 0xFF	; 255
    5586:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <msgPipe_Handling>
    558a:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <menu_TestModulePattern>
    558e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <lcd_cursosblink>
    5592:	3c c0       	rjmp	.+120    	; 0x560c <menu_ModuleTestExecute+0xf6>
    5594:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <menu_TestModuleErrorList>
    5598:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x1>
    559c:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <menu_TestModuleErrorList+0x2>
    55a0:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <menu_TestModuleErrorList+0x3>
    55a4:	76 95       	lsr	r23
    55a6:	67 95       	ror	r22
    55a8:	57 95       	ror	r21
    55aa:	47 95       	ror	r20
    55ac:	40 93 91 05 	sts	0x0591, r20	; 0x800591 <menu_TestModuleErrorList>
    55b0:	50 93 92 05 	sts	0x0592, r21	; 0x800592 <menu_TestModuleErrorList+0x1>
    55b4:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <menu_TestModuleErrorList+0x2>
    55b8:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <menu_TestModuleErrorList+0x3>
    55bc:	e8 2f       	mov	r30, r24
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	df 01       	movw	r26, r30
    55c2:	aa 0f       	add	r26, r26
    55c4:	bb 1f       	adc	r27, r27
    55c6:	aa 0f       	add	r26, r26
    55c8:	bb 1f       	adc	r27, r27
    55ca:	aa 0f       	add	r26, r26
    55cc:	bb 1f       	adc	r27, r27
    55ce:	a2 59       	subi	r26, 0x92	; 146
    55d0:	bd 4f       	sbci	r27, 0xFD	; 253
    55d2:	16 96       	adiw	r26, 0x06	; 6
    55d4:	2c 91       	ld	r18, X
    55d6:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <menu_TestModulePattern>
    55da:	29 23       	and	r18, r25
    55dc:	49 f4       	brne	.+18     	; 0x55f0 <menu_ModuleTestExecute+0xda>
    55de:	70 68       	ori	r23, 0x80	; 128
    55e0:	40 93 91 05 	sts	0x0591, r20	; 0x800591 <menu_TestModuleErrorList>
    55e4:	50 93 92 05 	sts	0x0592, r21	; 0x800592 <menu_TestModuleErrorList+0x1>
    55e8:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <menu_TestModuleErrorList+0x2>
    55ec:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <menu_TestModuleErrorList+0x3>
    55f0:	ee 0f       	add	r30, r30
    55f2:	ff 1f       	adc	r31, r31
    55f4:	ee 0f       	add	r30, r30
    55f6:	ff 1f       	adc	r31, r31
    55f8:	ee 0f       	add	r30, r30
    55fa:	ff 1f       	adc	r31, r31
    55fc:	e2 59       	subi	r30, 0x92	; 146
    55fe:	fd 4f       	sbci	r31, 0xFD	; 253
    5600:	21 81       	ldd	r18, Z+1	; 0x01
    5602:	92 2b       	or	r25, r18
    5604:	91 83       	std	Z+1, r25	; 0x01
    5606:	8f 5f       	subi	r24, 0xFF	; 255
    5608:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_TestModuleBitCounter>
    560c:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <menu_TestModuleBitCounter>
    5610:	e0 32       	cpi	r30, 0x20	; 32
    5612:	28 f5       	brcc	.+74     	; 0x565e <menu_ModuleTestExecute+0x148>
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	ee 0f       	add	r30, r30
    5618:	ff 1f       	adc	r31, r31
    561a:	ee 0f       	add	r30, r30
    561c:	ff 1f       	adc	r31, r31
    561e:	ee 0f       	add	r30, r30
    5620:	ff 1f       	adc	r31, r31
    5622:	e2 59       	subi	r30, 0x92	; 146
    5624:	fd 4f       	sbci	r31, 0xFD	; 253
    5626:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <menu_TestModulePattern>
    562a:	98 2f       	mov	r25, r24
    562c:	90 95       	com	r25
    562e:	81 81       	ldd	r24, Z+1	; 0x01
    5630:	89 23       	and	r24, r25
    5632:	81 83       	std	Z+1, r24	; 0x01
    5634:	8e e1       	ldi	r24, 0x1E	; 30
    5636:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    563a:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_TestModuleBitCounter>
    563e:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <lcd_dec2out>
    5642:	9f b7       	in	r25, 0x3f	; 63
    5644:	f8 94       	cli
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	06 c0       	rjmp	.+12     	; 0x5656 <menu_ModuleTestExecute+0x140>
    564a:	e0 e5       	ldi	r30, 0x50	; 80
    564c:	f2 e0       	ldi	r31, 0x02	; 2
    564e:	88 e0       	ldi	r24, 0x08	; 8
    5650:	84 87       	std	Z+12, r24	; 0x0c
    5652:	15 86       	std	Z+13, r1	; 0x0d
    5654:	80 e0       	ldi	r24, 0x00	; 0
    5656:	81 11       	cpse	r24, r1
    5658:	f8 cf       	rjmp	.-16     	; 0x564a <menu_ModuleTestExecute+0x134>
    565a:	9f bf       	out	0x3f, r25	; 63
    565c:	08 95       	ret
    565e:	e0 32       	cpi	r30, 0x20	; 32
    5660:	09 f0       	breq	.+2      	; 0x5664 <menu_ModuleTestExecute+0x14e>
    5662:	41 c0       	rjmp	.+130    	; 0x56e6 <menu_ModuleTestExecute+0x1d0>
    5664:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <menu_TestModuleErrorList>
    5668:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x1>
    566c:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <menu_TestModuleErrorList+0x2>
    5670:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <menu_TestModuleErrorList+0x3>
    5674:	00 97       	sbiw	r24, 0x00	; 0
    5676:	a1 05       	cpc	r26, r1
    5678:	b1 05       	cpc	r27, r1
    567a:	29 f4       	brne	.+10     	; 0x5686 <menu_ModuleTestExecute+0x170>
    567c:	83 e5       	ldi	r24, 0x53	; 83
    567e:	94 e0       	ldi	r25, 0x04	; 4
    5680:	0e 94 5d 15 	call	0x2aba	; 0x2aba <lcd_message_P>
    5684:	1f c0       	rjmp	.+62     	; 0x56c4 <menu_ModuleTestExecute+0x1ae>
    5686:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <editLong>
    568a:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <editLong+0x1>
    568e:	a0 93 0a 19 	sts	0x190A, r26	; 0x80190a <editLong+0x2>
    5692:	b0 93 0b 19 	sts	0x190B, r27	; 0x80190b <editLong+0x3>
    5696:	6c e0       	ldi	r22, 0x0C	; 12
    5698:	79 e1       	ldi	r23, 0x19	; 25
    569a:	80 e5       	ldi	r24, 0x50	; 80
    569c:	94 e0       	ldi	r25, 0x04	; 4
    569e:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <putString_P>
    56a2:	ac 01       	movw	r20, r24
    56a4:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <menu_TestModuleErrorList>
    56a8:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x1>
    56ac:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <menu_TestModuleErrorList+0x2>
    56b0:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <menu_TestModuleErrorList+0x3>
    56b4:	0e 94 56 3f 	call	0x7eac	; 0x7eac <putChar_long>
    56b8:	fc 01       	movw	r30, r24
    56ba:	10 82       	st	Z, r1
    56bc:	8c e0       	ldi	r24, 0x0C	; 12
    56be:	99 e1       	ldi	r25, 0x19	; 25
    56c0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <lcd_message>
    56c4:	8e ef       	ldi	r24, 0xFE	; 254
    56c6:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_TestModuleBitCounter>
    56ca:	9f b7       	in	r25, 0x3f	; 63
    56cc:	f8 94       	cli
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	06 c0       	rjmp	.+12     	; 0x56de <menu_ModuleTestExecute+0x1c8>
    56d2:	e0 e5       	ldi	r30, 0x50	; 80
    56d4:	f2 e0       	ldi	r31, 0x02	; 2
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	84 87       	std	Z+12, r24	; 0x0c
    56da:	85 87       	std	Z+13, r24	; 0x0d
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	81 11       	cpse	r24, r1
    56e0:	f8 cf       	rjmp	.-16     	; 0x56d2 <menu_ModuleTestExecute+0x1bc>
    56e2:	9f bf       	out	0x3f, r25	; 63
    56e4:	ff ce       	rjmp	.-514    	; 0x54e4 <menuCursorSetMenu>
    56e6:	08 95       	ret

000056e8 <menu_ModuleTestPattern>:
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	00 90 a0 05 	lds	r0, 0x05A0	; 0x8005a0 <menuVmodule>
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <menu_ModuleTestPattern+0xe>
    56f2:	88 0f       	add	r24, r24
    56f4:	99 1f       	adc	r25, r25
    56f6:	0a 94       	dec	r0
    56f8:	e2 f7       	brpl	.-8      	; 0x56f2 <menu_ModuleTestPattern+0xa>
    56fa:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <menu_TestModulePattern>
    56fe:	8f ef       	ldi	r24, 0xFF	; 255
    5700:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_TestModuleBitCounter>
    5704:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <menu_TestModuleErrorList>
    5708:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <menu_TestModuleErrorList+0x1>
    570c:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <menu_TestModuleErrorList+0x2>
    5710:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <menu_TestModuleErrorList+0x3>
    5714:	00 df       	rcall	.-512    	; 0x5516 <menu_ModuleTestExecute>
    5716:	80 e0       	ldi	r24, 0x00	; 0
    5718:	08 95       	ret

0000571a <menuClearMenuDisp>:
    571a:	80 e4       	ldi	r24, 0x40	; 64
    571c:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    5720:	8a e0       	ldi	r24, 0x0A	; 10
    5722:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <lcd_blank>
    5726:	de de       	rcall	.-580    	; 0x54e4 <menuCursorSetMenu>
    5728:	8a e0       	ldi	r24, 0x0A	; 10
    572a:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <lcd_blank>
    572e:	08 95       	ret

00005730 <menu_ClearAllDisp>:
    5730:	f4 df       	rcall	.-24     	; 0x571a <menuClearMenuDisp>
    5732:	ea de       	rcall	.-556    	; 0x5508 <menu_ClearDataDisp>
    5734:	e4 ce       	rjmp	.-568    	; 0x54fe <menuClearExtraDisp>
    5736:	08 95       	ret

00005738 <menuCheckArrowDown>:
    5738:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    573c:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5740:	84 91       	lpm	r24, Z
    5742:	8f 73       	andi	r24, 0x3F	; 63
    5744:	81 30       	cpi	r24, 0x01	; 1
    5746:	11 f4       	brne	.+4      	; 0x574c <menuCheckArrowDown+0x14>
    5748:	04 c8       	rjmp	.-4088   	; 0x4752 <softkeyDown>
    574a:	08 95       	ret
    574c:	3e 96       	adiw	r30, 0x0e	; 14
    574e:	05 90       	lpm	r0, Z+
    5750:	f4 91       	lpm	r31, Z
    5752:	e0 2d       	mov	r30, r0
    5754:	30 97       	sbiw	r30, 0x00	; 0
    5756:	69 f0       	breq	.+26     	; 0x5772 <menuCheckArrowDown+0x3a>
    5758:	89 30       	cpi	r24, 0x09	; 9
    575a:	41 f4       	brne	.+16     	; 0x576c <menuCheckArrowDown+0x34>
    575c:	80 81       	ld	r24, Z
    575e:	81 11       	cpse	r24, r1
    5760:	03 c0       	rjmp	.+6      	; 0x5768 <menuCheckArrowDown+0x30>
    5762:	0c 94 af 23 	jmp	0x475e	; 0x475e <softkeyOn>
    5766:	08 95       	ret
    5768:	00 c8       	rjmp	.-4096   	; 0x476a <softkeyOff>
    576a:	08 95       	ret
    576c:	0c 94 a9 23 	jmp	0x4752	; 0x4752 <softkeyDown>
    5770:	08 95       	ret
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	0c 94 6c 40 	jmp	0x80d8	; 0x80d8 <keylabel_clr>
    5778:	08 95       	ret

0000577a <menuCurrMenuToLCD>:
    577a:	cf 93       	push	r28
    577c:	89 e4       	ldi	r24, 0x49	; 73
    577e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    5782:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    5786:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    578a:	c4 91       	lpm	r28, Z
    578c:	c0 7c       	andi	r28, 0xC0	; 192
    578e:	c0 38       	cpi	r28, 0x80	; 128
    5790:	39 f4       	brne	.+14     	; 0x57a0 <menuCurrMenuToLCD+0x26>
    5792:	80 e2       	ldi	r24, 0x20	; 32
    5794:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    5798:	82 e0       	ldi	r24, 0x02	; 2
    579a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    579e:	05 c0       	rjmp	.+10     	; 0x57aa <menuCurrMenuToLCD+0x30>
    57a0:	8f e7       	ldi	r24, 0x7F	; 127
    57a2:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    57a6:	0e 94 9d 23 	call	0x473a	; 0x473a <softkeyLeft>
    57aa:	c0 3c       	cpi	r28, 0xC0	; 192
    57ac:	29 f4       	brne	.+10     	; 0x57b8 <menuCurrMenuToLCD+0x3e>
    57ae:	83 e0       	ldi	r24, 0x03	; 3
    57b0:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    57b4:	c0 e2       	ldi	r28, 0x20	; 32
    57b6:	03 c0       	rjmp	.+6      	; 0x57be <menuCurrMenuToLCD+0x44>
    57b8:	0e 94 a3 23 	call	0x4746	; 0x4746 <softkeyRight>
    57bc:	ce e7       	ldi	r28, 0x7E	; 126
    57be:	0e 94 bb 23 	call	0x4776	; 0x4776 <softkeyUp>
    57c2:	ba df       	rcall	.-140    	; 0x5738 <menuCheckArrowDown>
    57c4:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <currentMenu>
    57c8:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    57cc:	6c 2f       	mov	r22, r28
    57ce:	02 96       	adiw	r24, 0x02	; 2
    57d0:	f5 dc       	rcall	.-1558   	; 0x51bc <menuTextOut>
    57d2:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    57d6:	86 de       	rcall	.-756    	; 0x54e4 <menuCursorSetMenu>
    57d8:	cf 91       	pop	r28
    57da:	08 95       	ret

000057dc <menuItemChanged>:
    57dc:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <currentMenu>
    57e0:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    57e4:	fc 01       	movw	r30, r24
    57e6:	24 91       	lpm	r18, Z
    57e8:	62 2f       	mov	r22, r18
    57ea:	6f 73       	andi	r22, 0x3F	; 63
    57ec:	62 30       	cpi	r22, 0x02	; 2
    57ee:	08 f4       	brcc	.+2      	; 0x57f2 <menuItemChanged+0x16>
    57f0:	49 c0       	rjmp	.+146    	; 0x5884 <menuItemChanged+0xa8>
    57f2:	9c 01       	movw	r18, r24
    57f4:	22 5f       	subi	r18, 0xF2	; 242
    57f6:	3f 4f       	sbci	r19, 0xFF	; 255
    57f8:	f9 01       	movw	r30, r18
    57fa:	45 91       	lpm	r20, Z+
    57fc:	55 91       	lpm	r21, Z+
    57fe:	41 15       	cp	r20, r1
    5800:	51 05       	cpc	r21, r1
    5802:	09 f4       	brne	.+2      	; 0x5806 <menuItemChanged+0x2a>
    5804:	3f c0       	rjmp	.+126    	; 0x5884 <menuItemChanged+0xa8>
    5806:	e6 2f       	mov	r30, r22
    5808:	f0 e0       	ldi	r31, 0x00	; 0
    580a:	31 97       	sbiw	r30, 0x01	; 1
    580c:	9f 01       	movw	r18, r30
    580e:	22 0f       	add	r18, r18
    5810:	33 1f       	adc	r19, r19
    5812:	22 0f       	add	r18, r18
    5814:	33 1f       	adc	r19, r19
    5816:	22 0f       	add	r18, r18
    5818:	33 1f       	adc	r19, r19
    581a:	e2 0f       	add	r30, r18
    581c:	f3 1f       	adc	r31, r19
    581e:	e2 57       	subi	r30, 0x72	; 114
    5820:	fb 4f       	sbci	r31, 0xFB	; 251
    5822:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <pNibbleInfo+0x1>
    5826:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <pNibbleInfo>
    582a:	24 91       	lpm	r18, Z
    582c:	20 93 c8 05 	sts	0x05C8, r18	; 0x8005c8 <nibbleCount>
    5830:	fc 01       	movw	r30, r24
    5832:	25 91       	lpm	r18, Z+
    5834:	2f 73       	andi	r18, 0x3F	; 63
    5836:	20 93 9d 05 	sts	0x059D, r18	; 0x80059d <dataType>
    583a:	24 91       	lpm	r18, Z
    583c:	22 23       	and	r18, r18
    583e:	2c f4       	brge	.+10     	; 0x584a <menuItemChanged+0x6e>
    5840:	20 91 d9 05 	lds	r18, 0x05D9	; 0x8005d9 <DataAdressOffset>
    5844:	30 91 da 05 	lds	r19, 0x05DA	; 0x8005da <DataAdressOffset+0x1>
    5848:	02 c0       	rjmp	.+4      	; 0x584e <menuItemChanged+0x72>
    584a:	20 e0       	ldi	r18, 0x00	; 0
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	24 0f       	add	r18, r20
    5850:	35 1f       	adc	r19, r21
    5852:	fc 01       	movw	r30, r24
    5854:	84 91       	lpm	r24, Z
    5856:	8f 73       	andi	r24, 0x3F	; 63
    5858:	8b 30       	cpi	r24, 0x0B	; 11
    585a:	71 f4       	brne	.+28     	; 0x5878 <menuItemChanged+0x9c>
    585c:	f9 01       	movw	r30, r18
    585e:	80 81       	ld	r24, Z
    5860:	91 81       	ldd	r25, Z+1	; 0x01
    5862:	a2 81       	ldd	r26, Z+2	; 0x02
    5864:	b3 81       	ldd	r27, Z+3	; 0x03
    5866:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <dataEntry32>
    586a:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <dataEntry32+0x1>
    586e:	a0 93 cc 05 	sts	0x05CC, r26	; 0x8005cc <dataEntry32+0x2>
    5872:	b0 93 cd 05 	sts	0x05CD, r27	; 0x8005cd <dataEntry32+0x3>
    5876:	04 c0       	rjmp	.+8      	; 0x5880 <menuItemChanged+0xa4>
    5878:	f9 01       	movw	r30, r18
    587a:	80 81       	ld	r24, Z
    587c:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <dataEntry>
    5880:	d2 dc       	rcall	.-1628   	; 0x5226 <menuDisplayValue>
    5882:	07 c0       	rjmp	.+14     	; 0x5892 <menuItemChanged+0xb6>
    5884:	41 de       	rcall	.-894    	; 0x5508 <menu_ClearDataDisp>
    5886:	8e e8       	ldi	r24, 0x8E	; 142
    5888:	94 e0       	ldi	r25, 0x04	; 4
    588a:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <pNibbleInfo+0x1>
    588e:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <pNibbleInfo>
    5892:	52 df       	rcall	.-348    	; 0x5738 <menuCheckArrowDown>
    5894:	27 ce       	rjmp	.-946    	; 0x54e4 <menuCursorSetMenu>
    5896:	08 95       	ret

00005898 <menu_InitLCD>:
    5898:	32 de       	rcall	.-924    	; 0x54fe <menuClearExtraDisp>
    589a:	a0 df       	rcall	.-192    	; 0x57dc <menuItemChanged>
    589c:	aa dc       	rcall	.-1708   	; 0x51f2 <menuParentMenuToLCD>
    589e:	6d df       	rcall	.-294    	; 0x577a <menuCurrMenuToLCD>
    58a0:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <lcd_cursosblink>
    58a4:	08 95       	ret

000058a6 <menu_ProcessMessage>:
    58a6:	cf 93       	push	r28
    58a8:	c8 2f       	mov	r28, r24
    58aa:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <lcd_cursosblink>
    58ae:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    58b2:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    58b6:	84 91       	lpm	r24, Z
    58b8:	8f 73       	andi	r24, 0x3F	; 63
    58ba:	81 30       	cpi	r24, 0x01	; 1
    58bc:	29 f0       	breq	.+10     	; 0x58c8 <menu_ProcessMessage+0x22>
    58be:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <nibbleIndex>
    58c2:	8f 3f       	cpi	r24, 0xFF	; 255
    58c4:	09 f0       	breq	.+2      	; 0x58c8 <menu_ProcessMessage+0x22>
    58c6:	68 c1       	rjmp	.+720    	; 0x5b98 <menu_ProcessMessage+0x2f2>
    58c8:	31 96       	adiw	r30, 0x01	; 1
    58ca:	84 91       	lpm	r24, Z
    58cc:	86 ff       	sbrs	r24, 6
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <menu_ProcessMessage+0x2e>
    58d0:	16 de       	rcall	.-980    	; 0x54fe <menuClearExtraDisp>
    58d2:	08 de       	rcall	.-1008   	; 0x54e4 <menuCursorSetMenu>
    58d4:	60 91 d1 05 	lds	r22, 0x05D1	; 0x8005d1 <currentMenu>
    58d8:	70 91 d2 05 	lds	r23, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    58dc:	cb 01       	movw	r24, r22
    58de:	01 96       	adiw	r24, 0x01	; 1
    58e0:	fc 01       	movw	r30, r24
    58e2:	84 91       	lpm	r24, Z
    58e4:	98 2f       	mov	r25, r24
    58e6:	90 72       	andi	r25, 0x20	; 32
    58e8:	85 ff       	sbrs	r24, 5
    58ea:	1f c0       	rjmp	.+62     	; 0x592a <menu_ProcessMessage+0x84>
    58ec:	9b 01       	movw	r18, r22
    58ee:	20 5f       	subi	r18, 0xF0	; 240
    58f0:	3f 4f       	sbci	r19, 0xFF	; 255
    58f2:	f9 01       	movw	r30, r18
    58f4:	25 91       	lpm	r18, Z+
    58f6:	35 91       	lpm	r19, Z+
    58f8:	21 15       	cp	r18, r1
    58fa:	31 05       	cpc	r19, r1
    58fc:	b1 f0       	breq	.+44     	; 0x592a <menu_ProcessMessage+0x84>
    58fe:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <nibbleIndex>
    5902:	4f 3f       	cpi	r20, 0xFF	; 255
    5904:	91 f0       	breq	.+36     	; 0x592a <menu_ProcessMessage+0x84>
    5906:	8c 2f       	mov	r24, r28
    5908:	f9 01       	movw	r30, r18
    590a:	19 95       	eicall
    590c:	8f 3f       	cpi	r24, 0xFF	; 255
    590e:	21 f4       	brne	.+8      	; 0x5918 <menu_ProcessMessage+0x72>
    5910:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <nibbleIndex>
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	04 c2       	rjmp	.+1032   	; 0x5d20 <menu_ProcessMessage+0x47a>
    5918:	f2 dd       	rcall	.-1052   	; 0x54fe <menuClearExtraDisp>
    591a:	f6 dd       	rcall	.-1044   	; 0x5508 <menu_ClearDataDisp>
    591c:	e3 dd       	rcall	.-1082   	; 0x54e4 <menuCursorSetMenu>
    591e:	8f ef       	ldi	r24, 0xFF	; 255
    5920:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    5924:	2a df       	rcall	.-428    	; 0x577a <menuCurrMenuToLCD>
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	fb c1       	rjmp	.+1014   	; 0x5d20 <menu_ProcessMessage+0x47a>
    592a:	c3 30       	cpi	r28, 0x03	; 3
    592c:	09 f4       	brne	.+2      	; 0x5930 <menu_ProcessMessage+0x8a>
    592e:	64 c0       	rjmp	.+200    	; 0x59f8 <menu_ProcessMessage+0x152>
    5930:	28 f4       	brcc	.+10     	; 0x593c <menu_ProcessMessage+0x96>
    5932:	c1 30       	cpi	r28, 0x01	; 1
    5934:	51 f0       	breq	.+20     	; 0x594a <menu_ProcessMessage+0xa4>
    5936:	c2 30       	cpi	r28, 0x02	; 2
    5938:	31 f1       	breq	.+76     	; 0x5986 <menu_ProcessMessage+0xe0>
    593a:	db c1       	rjmp	.+950    	; 0x5cf2 <menu_ProcessMessage+0x44c>
    593c:	c5 30       	cpi	r28, 0x05	; 5
    593e:	09 f4       	brne	.+2      	; 0x5942 <menu_ProcessMessage+0x9c>
    5940:	5b c0       	rjmp	.+182    	; 0x59f8 <menu_ProcessMessage+0x152>
    5942:	90 f0       	brcs	.+36     	; 0x5968 <menu_ProcessMessage+0xc2>
    5944:	c6 30       	cpi	r28, 0x06	; 6
    5946:	f9 f0       	breq	.+62     	; 0x5986 <menu_ProcessMessage+0xe0>
    5948:	d4 c1       	rjmp	.+936    	; 0x5cf2 <menu_ProcessMessage+0x44c>
    594a:	fb 01       	movw	r30, r22
    594c:	84 91       	lpm	r24, Z
    594e:	80 7c       	andi	r24, 0xC0	; 192
    5950:	80 3c       	cpi	r24, 0xC0	; 192
    5952:	09 f4       	brne	.+2      	; 0x5956 <menu_ProcessMessage+0xb0>
    5954:	d0 c1       	rjmp	.+928    	; 0x5cf6 <menu_ProcessMessage+0x450>
    5956:	74 96       	adiw	r30, 0x14	; 20
    5958:	f0 93 d2 05 	sts	0x05D2, r31	; 0x8005d2 <currentMenu+0x1>
    595c:	e0 93 d1 05 	sts	0x05D1, r30	; 0x8005d1 <currentMenu>
    5960:	3d df       	rcall	.-390    	; 0x57dc <menuItemChanged>
    5962:	0b df       	rcall	.-490    	; 0x577a <menuCurrMenuToLCD>
    5964:	80 e0       	ldi	r24, 0x00	; 0
    5966:	dc c1       	rjmp	.+952    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5968:	fb 01       	movw	r30, r22
    596a:	84 91       	lpm	r24, Z
    596c:	80 7c       	andi	r24, 0xC0	; 192
    596e:	80 38       	cpi	r24, 0x80	; 128
    5970:	09 f4       	brne	.+2      	; 0x5974 <menu_ProcessMessage+0xce>
    5972:	c3 c1       	rjmp	.+902    	; 0x5cfa <menu_ProcessMessage+0x454>
    5974:	74 97       	sbiw	r30, 0x14	; 20
    5976:	f0 93 d2 05 	sts	0x05D2, r31	; 0x8005d2 <currentMenu+0x1>
    597a:	e0 93 d1 05 	sts	0x05D1, r30	; 0x8005d1 <currentMenu>
    597e:	2e df       	rcall	.-420    	; 0x57dc <menuItemChanged>
    5980:	fc de       	rcall	.-520    	; 0x577a <menuCurrMenuToLCD>
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	cd c1       	rjmp	.+922    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5986:	84 ff       	sbrs	r24, 4
    5988:	04 c0       	rjmp	.+8      	; 0x5992 <menu_ProcessMessage+0xec>
    598a:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <menuVMenuSoftKey+0x1>
    598e:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <menuVMenuSoftKey>
    5992:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <menuStackIndex>
    5996:	ee 23       	and	r30, r30
    5998:	e9 f0       	breq	.+58     	; 0x59d4 <menu_ProcessMessage+0x12e>
    599a:	e1 50       	subi	r30, 0x01	; 1
    599c:	e0 93 90 05 	sts	0x0590, r30	; 0x800590 <menuStackIndex>
    59a0:	f0 e0       	ldi	r31, 0x00	; 0
    59a2:	ee 0f       	add	r30, r30
    59a4:	ff 1f       	adc	r31, r31
    59a6:	ed 55       	subi	r30, 0x5D	; 93
    59a8:	fa 4f       	sbci	r31, 0xFA	; 250
    59aa:	01 90       	ld	r0, Z+
    59ac:	f0 81       	ld	r31, Z
    59ae:	e0 2d       	mov	r30, r0
    59b0:	f0 93 d2 05 	sts	0x05D2, r31	; 0x8005d2 <currentMenu+0x1>
    59b4:	e0 93 d1 05 	sts	0x05D1, r30	; 0x8005d1 <currentMenu>
    59b8:	72 96       	adiw	r30, 0x12	; 18
    59ba:	05 90       	lpm	r0, Z+
    59bc:	f4 91       	lpm	r31, Z
    59be:	e0 2d       	mov	r30, r0
    59c0:	30 97       	sbiw	r30, 0x00	; 0
    59c2:	11 f0       	breq	.+4      	; 0x59c8 <menu_ProcessMessage+0x122>
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	19 95       	eicall
    59c8:	9a dd       	rcall	.-1228   	; 0x54fe <menuClearExtraDisp>
    59ca:	13 dc       	rcall	.-2010   	; 0x51f2 <menuParentMenuToLCD>
    59cc:	d6 de       	rcall	.-596    	; 0x577a <menuCurrMenuToLCD>
    59ce:	06 df       	rcall	.-500    	; 0x57dc <menuItemChanged>
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	a6 c1       	rjmp	.+844    	; 0x5d20 <menu_ProcessMessage+0x47a>
    59d4:	80 e0       	ldi	r24, 0x00	; 0
    59d6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    59e0:	82 e0       	ldi	r24, 0x02	; 2
    59e2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    59e6:	83 e0       	ldi	r24, 0x03	; 3
    59e8:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    59ec:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    59f0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <lcd_cursoroff>
    59f4:	8f ef       	ldi	r24, 0xFF	; 255
    59f6:	94 c1       	rjmp	.+808    	; 0x5d20 <menu_ProcessMessage+0x47a>
    59f8:	fb 01       	movw	r30, r22
    59fa:	24 91       	lpm	r18, Z
    59fc:	2f 73       	andi	r18, 0x3F	; 63
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	22 30       	cpi	r18, 0x02	; 2
    5a02:	31 05       	cpc	r19, r1
    5a04:	0c f4       	brge	.+2      	; 0x5a08 <menu_ProcessMessage+0x162>
    5a06:	48 c0       	rjmp	.+144    	; 0x5a98 <menu_ProcessMessage+0x1f2>
    5a08:	70 96       	adiw	r30, 0x10	; 16
    5a0a:	05 90       	lpm	r0, Z+
    5a0c:	f4 91       	lpm	r31, Z
    5a0e:	e0 2d       	mov	r30, r0
    5a10:	30 97       	sbiw	r30, 0x00	; 0
    5a12:	19 f0       	breq	.+6      	; 0x5a1a <menu_ProcessMessage+0x174>
    5a14:	8c 2f       	mov	r24, r28
    5a16:	19 95       	eicall
    5a18:	e1 de       	rcall	.-574    	; 0x57dc <menuItemChanged>
    5a1a:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <currentMenu>
    5a1e:	30 91 d2 05 	lds	r19, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5a22:	c9 01       	movw	r24, r18
    5a24:	01 96       	adiw	r24, 0x01	; 1
    5a26:	fc 01       	movw	r30, r24
    5a28:	84 91       	lpm	r24, Z
    5a2a:	83 fd       	sbrc	r24, 3
    5a2c:	68 c1       	rjmp	.+720    	; 0x5cfe <menu_ProcessMessage+0x458>
    5a2e:	c9 01       	movw	r24, r18
    5a30:	0e 96       	adiw	r24, 0x0e	; 14
    5a32:	fc 01       	movw	r30, r24
    5a34:	85 91       	lpm	r24, Z+
    5a36:	95 91       	lpm	r25, Z+
    5a38:	89 2b       	or	r24, r25
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <menu_ProcessMessage+0x198>
    5a3c:	62 c1       	rjmp	.+708    	; 0x5d02 <menu_ProcessMessage+0x45c>
    5a3e:	f9 01       	movw	r30, r18
    5a40:	84 91       	lpm	r24, Z
    5a42:	8f 73       	andi	r24, 0x3F	; 63
    5a44:	89 30       	cpi	r24, 0x09	; 9
    5a46:	19 f5       	brne	.+70     	; 0x5a8e <menu_ProcessMessage+0x1e8>
    5a48:	61 e0       	ldi	r22, 0x01	; 1
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	23 d9       	rcall	.-3514   	; 0x4c94 <nibbleChange>
    5a4e:	d1 da       	rcall	.-2654   	; 0x4ff2 <nibbleToData>
    5a50:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    5a54:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5a58:	3e 96       	adiw	r30, 0x0e	; 14
    5a5a:	05 90       	lpm	r0, Z+
    5a5c:	f4 91       	lpm	r31, Z
    5a5e:	e0 2d       	mov	r30, r0
    5a60:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    5a64:	80 83       	st	Z, r24
    5a66:	df db       	rcall	.-2114   	; 0x5226 <menuDisplayValue>
    5a68:	67 de       	rcall	.-818    	; 0x5738 <menuCheckArrowDown>
    5a6a:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
    5a6e:	3a dd       	rcall	.-1420   	; 0x54e4 <menuCursorSetMenu>
    5a70:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    5a74:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5a78:	72 96       	adiw	r30, 0x12	; 18
    5a7a:	05 90       	lpm	r0, Z+
    5a7c:	f4 91       	lpm	r31, Z
    5a7e:	e0 2d       	mov	r30, r0
    5a80:	30 97       	sbiw	r30, 0x00	; 0
    5a82:	09 f4       	brne	.+2      	; 0x5a86 <menu_ProcessMessage+0x1e0>
    5a84:	40 c1       	rjmp	.+640    	; 0x5d06 <menu_ProcessMessage+0x460>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	19 95       	eicall
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	49 c1       	rjmp	.+658    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5a8e:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <nibbleIndex>
    5a92:	d6 db       	rcall	.-2132   	; 0x5240 <menuCursorSetDataNibble>
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	44 c1       	rjmp	.+648    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5a98:	2f ef       	ldi	r18, 0xFF	; 255
    5a9a:	20 93 9e 05 	sts	0x059E, r18	; 0x80059e <nibbleIndex>
    5a9e:	84 ff       	sbrs	r24, 4
    5aa0:	26 c0       	rjmp	.+76     	; 0x5aee <menu_ProcessMessage+0x248>
    5aa2:	70 93 f6 05 	sts	0x05F6, r23	; 0x8005f6 <menuVMenuSoftKey+0x1>
    5aa6:	60 93 f5 05 	sts	0x05F5, r22	; 0x8005f5 <menuVMenuSoftKey>
    5aaa:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <menuStackIndex>
    5aae:	ee 23       	and	r30, r30
    5ab0:	09 f4       	brne	.+2      	; 0x5ab4 <menu_ProcessMessage+0x20e>
    5ab2:	2b c1       	rjmp	.+598    	; 0x5d0a <menu_ProcessMessage+0x464>
    5ab4:	e1 50       	subi	r30, 0x01	; 1
    5ab6:	e0 93 90 05 	sts	0x0590, r30	; 0x800590 <menuStackIndex>
    5aba:	f0 e0       	ldi	r31, 0x00	; 0
    5abc:	ee 0f       	add	r30, r30
    5abe:	ff 1f       	adc	r31, r31
    5ac0:	ed 55       	subi	r30, 0x5D	; 93
    5ac2:	fa 4f       	sbci	r31, 0xFA	; 250
    5ac4:	01 90       	ld	r0, Z+
    5ac6:	f0 81       	ld	r31, Z
    5ac8:	e0 2d       	mov	r30, r0
    5aca:	f0 93 d2 05 	sts	0x05D2, r31	; 0x8005d2 <currentMenu+0x1>
    5ace:	e0 93 d1 05 	sts	0x05D1, r30	; 0x8005d1 <currentMenu>
    5ad2:	72 96       	adiw	r30, 0x12	; 18
    5ad4:	05 90       	lpm	r0, Z+
    5ad6:	f4 91       	lpm	r31, Z
    5ad8:	e0 2d       	mov	r30, r0
    5ada:	30 97       	sbiw	r30, 0x00	; 0
    5adc:	11 f0       	breq	.+4      	; 0x5ae2 <menu_ProcessMessage+0x23c>
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	19 95       	eicall
    5ae2:	0d dd       	rcall	.-1510   	; 0x54fe <menuClearExtraDisp>
    5ae4:	86 db       	rcall	.-2292   	; 0x51f2 <menuParentMenuToLCD>
    5ae6:	49 de       	rcall	.-878    	; 0x577a <menuCurrMenuToLCD>
    5ae8:	79 de       	rcall	.-782    	; 0x57dc <menuItemChanged>
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	19 c1       	rjmp	.+562    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5aee:	fb 01       	movw	r30, r22
    5af0:	70 96       	adiw	r30, 0x10	; 16
    5af2:	05 90       	lpm	r0, Z+
    5af4:	f4 91       	lpm	r31, Z
    5af6:	e0 2d       	mov	r30, r0
    5af8:	30 97       	sbiw	r30, 0x00	; 0
    5afa:	99 f0       	breq	.+38     	; 0x5b22 <menu_ProcessMessage+0x27c>
    5afc:	99 23       	and	r25, r25
    5afe:	71 f0       	breq	.+28     	; 0x5b1c <menu_ProcessMessage+0x276>
    5b00:	8f ef       	ldi	r24, 0xFF	; 255
    5b02:	19 95       	eicall
    5b04:	8f 3f       	cpi	r24, 0xFF	; 255
    5b06:	19 f4       	brne	.+6      	; 0x5b0e <menu_ProcessMessage+0x268>
    5b08:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <nibbleIndex>
    5b0c:	0a c0       	rjmp	.+20     	; 0x5b22 <menu_ProcessMessage+0x27c>
    5b0e:	f7 dc       	rcall	.-1554   	; 0x54fe <menuClearExtraDisp>
    5b10:	fb dc       	rcall	.-1546   	; 0x5508 <menu_ClearDataDisp>
    5b12:	e8 dc       	rcall	.-1584   	; 0x54e4 <menuCursorSetMenu>
    5b14:	8f ef       	ldi	r24, 0xFF	; 255
    5b16:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    5b1a:	03 c0       	rjmp	.+6      	; 0x5b22 <menu_ProcessMessage+0x27c>
    5b1c:	85 e0       	ldi	r24, 0x05	; 5
    5b1e:	19 95       	eicall
    5b20:	e1 dc       	rcall	.-1598   	; 0x54e4 <menuCursorSetMenu>
    5b22:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <currentMenu>
    5b26:	30 91 d2 05 	lds	r19, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5b2a:	c9 01       	movw	r24, r18
    5b2c:	0c 96       	adiw	r24, 0x0c	; 12
    5b2e:	fc 01       	movw	r30, r24
    5b30:	85 91       	lpm	r24, Z+
    5b32:	95 91       	lpm	r25, Z+
    5b34:	89 2b       	or	r24, r25
    5b36:	09 f4       	brne	.+2      	; 0x5b3a <menu_ProcessMessage+0x294>
    5b38:	ea c0       	rjmp	.+468    	; 0x5d0e <menu_ProcessMessage+0x468>
    5b3a:	a0 91 90 05 	lds	r26, 0x0590	; 0x800590 <menuStackIndex>
    5b3e:	a0 31       	cpi	r26, 0x10	; 16
    5b40:	08 f0       	brcs	.+2      	; 0x5b44 <menu_ProcessMessage+0x29e>
    5b42:	e7 c0       	rjmp	.+462    	; 0x5d12 <menu_ProcessMessage+0x46c>
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	8a 0f       	add	r24, r26
    5b48:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <menuStackIndex>
    5b4c:	b0 e0       	ldi	r27, 0x00	; 0
    5b4e:	aa 0f       	add	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	ad 55       	subi	r26, 0x5D	; 93
    5b54:	ba 4f       	sbci	r27, 0xFA	; 250
    5b56:	2d 93       	st	X+, r18
    5b58:	3c 93       	st	X, r19
    5b5a:	c9 01       	movw	r24, r18
    5b5c:	01 96       	adiw	r24, 0x01	; 1
    5b5e:	fc 01       	movw	r30, r24
    5b60:	84 91       	lpm	r24, Z
    5b62:	83 ff       	sbrs	r24, 3
    5b64:	0b c0       	rjmp	.+22     	; 0x5b7c <menu_ProcessMessage+0x2d6>
    5b66:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <menuVMenuSoftKey>
    5b6a:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <menuVMenuSoftKey+0x1>
    5b6e:	00 97       	sbiw	r24, 0x00	; 0
    5b70:	29 f0       	breq	.+10     	; 0x5b7c <menu_ProcessMessage+0x2d6>
    5b72:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <currentMenu+0x1>
    5b76:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <currentMenu>
    5b7a:	08 c0       	rjmp	.+16     	; 0x5b8c <menu_ProcessMessage+0x2e6>
    5b7c:	f9 01       	movw	r30, r18
    5b7e:	3c 96       	adiw	r30, 0x0c	; 12
    5b80:	85 91       	lpm	r24, Z+
    5b82:	95 91       	lpm	r25, Z+
    5b84:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <currentMenu+0x1>
    5b88:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <currentMenu>
    5b8c:	b8 dc       	rcall	.-1680   	; 0x54fe <menuClearExtraDisp>
    5b8e:	31 db       	rcall	.-2462   	; 0x51f2 <menuParentMenuToLCD>
    5b90:	f4 dd       	rcall	.-1048   	; 0x577a <menuCurrMenuToLCD>
    5b92:	24 de       	rcall	.-952    	; 0x57dc <menuItemChanged>
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	c4 c0       	rjmp	.+392    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5b98:	c3 30       	cpi	r28, 0x03	; 3
    5b9a:	09 f4       	brne	.+2      	; 0x5b9e <menu_ProcessMessage+0x2f8>
    5b9c:	49 c0       	rjmp	.+146    	; 0x5c30 <menu_ProcessMessage+0x38a>
    5b9e:	28 f4       	brcc	.+10     	; 0x5baa <menu_ProcessMessage+0x304>
    5ba0:	c1 30       	cpi	r28, 0x01	; 1
    5ba2:	59 f0       	breq	.+22     	; 0x5bba <menu_ProcessMessage+0x314>
    5ba4:	c2 30       	cpi	r28, 0x02	; 2
    5ba6:	31 f1       	breq	.+76     	; 0x5bf4 <menu_ProcessMessage+0x34e>
    5ba8:	b6 c0       	rjmp	.+364    	; 0x5d16 <menu_ProcessMessage+0x470>
    5baa:	c5 30       	cpi	r28, 0x05	; 5
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <menu_ProcessMessage+0x30a>
    5bae:	5e c0       	rjmp	.+188    	; 0x5c6c <menu_ProcessMessage+0x3c6>
    5bb0:	c0 f0       	brcs	.+48     	; 0x5be2 <menu_ProcessMessage+0x33c>
    5bb2:	c6 30       	cpi	r28, 0x06	; 6
    5bb4:	09 f4       	brne	.+2      	; 0x5bb8 <menu_ProcessMessage+0x312>
    5bb6:	8a c0       	rjmp	.+276    	; 0x5ccc <menu_ProcessMessage+0x426>
    5bb8:	ae c0       	rjmp	.+348    	; 0x5d16 <menu_ProcessMessage+0x470>
    5bba:	48 2f       	mov	r20, r24
    5bbc:	50 e0       	ldi	r21, 0x00	; 0
    5bbe:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <pNibbleInfo>
    5bc2:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <pNibbleInfo+0x1>
    5bc6:	24 91       	lpm	r18, Z
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	21 50       	subi	r18, 0x01	; 1
    5bcc:	31 09       	sbc	r19, r1
    5bce:	42 17       	cp	r20, r18
    5bd0:	53 07       	cpc	r21, r19
    5bd2:	0c f0       	brlt	.+2      	; 0x5bd6 <menu_ProcessMessage+0x330>
    5bd4:	a2 c0       	rjmp	.+324    	; 0x5d1a <menu_ProcessMessage+0x474>
    5bd6:	8f 5f       	subi	r24, 0xFF	; 255
    5bd8:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    5bdc:	31 db       	rcall	.-2462   	; 0x5240 <menuCursorSetDataNibble>
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	9f c0       	rjmp	.+318    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5be2:	88 23       	and	r24, r24
    5be4:	09 f4       	brne	.+2      	; 0x5be8 <menu_ProcessMessage+0x342>
    5be6:	9b c0       	rjmp	.+310    	; 0x5d1e <menu_ProcessMessage+0x478>
    5be8:	81 50       	subi	r24, 0x01	; 1
    5bea:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    5bee:	28 db       	rcall	.-2480   	; 0x5240 <menuCursorSetDataNibble>
    5bf0:	80 e0       	ldi	r24, 0x00	; 0
    5bf2:	96 c0       	rjmp	.+300    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5bf4:	61 e0       	ldi	r22, 0x01	; 1
    5bf6:	4e d8       	rcall	.-3940   	; 0x4c94 <nibbleChange>
    5bf8:	fc d9       	rcall	.-3080   	; 0x4ff2 <nibbleToData>
    5bfa:	15 db       	rcall	.-2518   	; 0x5226 <menuDisplayValue>
    5bfc:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <dataType>
    5c00:	8a 30       	cpi	r24, 0x0A	; 10
    5c02:	11 f0       	breq	.+4      	; 0x5c08 <menu_ProcessMessage+0x362>
    5c04:	8e 30       	cpi	r24, 0x0E	; 14
    5c06:	89 f4       	brne	.+34     	; 0x5c2a <menu_ProcessMessage+0x384>
    5c08:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <nibbleIndex>
    5c0c:	42 2f       	mov	r20, r18
    5c0e:	50 e0       	ldi	r21, 0x00	; 0
    5c10:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <pNibbleInfo>
    5c14:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <pNibbleInfo+0x1>
    5c18:	84 91       	lpm	r24, Z
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	48 17       	cp	r20, r24
    5c20:	59 07       	cpc	r21, r25
    5c22:	1c f4       	brge	.+6      	; 0x5c2a <menu_ProcessMessage+0x384>
    5c24:	2f 5f       	subi	r18, 0xFF	; 255
    5c26:	20 93 9e 05 	sts	0x059E, r18	; 0x80059e <nibbleIndex>
    5c2a:	0a db       	rcall	.-2540   	; 0x5240 <menuCursorSetDataNibble>
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	78 c0       	rjmp	.+240    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5c30:	6f ef       	ldi	r22, 0xFF	; 255
    5c32:	30 d8       	rcall	.-4000   	; 0x4c94 <nibbleChange>
    5c34:	de d9       	rcall	.-3140   	; 0x4ff2 <nibbleToData>
    5c36:	f7 da       	rcall	.-2578   	; 0x5226 <menuDisplayValue>
    5c38:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <dataType>
    5c3c:	8a 30       	cpi	r24, 0x0A	; 10
    5c3e:	11 f0       	breq	.+4      	; 0x5c44 <menu_ProcessMessage+0x39e>
    5c40:	8e 30       	cpi	r24, 0x0E	; 14
    5c42:	89 f4       	brne	.+34     	; 0x5c66 <menu_ProcessMessage+0x3c0>
    5c44:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <nibbleIndex>
    5c48:	42 2f       	mov	r20, r18
    5c4a:	50 e0       	ldi	r21, 0x00	; 0
    5c4c:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <pNibbleInfo>
    5c50:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <pNibbleInfo+0x1>
    5c54:	84 91       	lpm	r24, Z
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	01 97       	sbiw	r24, 0x01	; 1
    5c5a:	48 17       	cp	r20, r24
    5c5c:	59 07       	cpc	r21, r25
    5c5e:	1c f4       	brge	.+6      	; 0x5c66 <menu_ProcessMessage+0x3c0>
    5c60:	2f 5f       	subi	r18, 0xFF	; 255
    5c62:	20 93 9e 05 	sts	0x059E, r18	; 0x80059e <nibbleIndex>
    5c66:	ec da       	rcall	.-2600   	; 0x5240 <menuCursorSetDataNibble>
    5c68:	80 e0       	ldi	r24, 0x00	; 0
    5c6a:	5a c0       	rjmp	.+180    	; 0x5d20 <menu_ProcessMessage+0x47a>
    5c6c:	c2 d9       	rcall	.-3196   	; 0x4ff2 <nibbleToData>
    5c6e:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <currentMenu>
    5c72:	30 91 d2 05 	lds	r19, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5c76:	c9 01       	movw	r24, r18
    5c78:	0e 96       	adiw	r24, 0x0e	; 14
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	a5 91       	lpm	r26, Z+
    5c7e:	b5 91       	lpm	r27, Z+
    5c80:	10 97       	sbiw	r26, 0x00	; 0
    5c82:	21 f1       	breq	.+72     	; 0x5ccc <menu_ProcessMessage+0x426>
    5c84:	0d 97       	sbiw	r24, 0x0d	; 13
    5c86:	fc 01       	movw	r30, r24
    5c88:	84 91       	lpm	r24, Z
    5c8a:	88 23       	and	r24, r24
    5c8c:	2c f4       	brge	.+10     	; 0x5c98 <menu_ProcessMessage+0x3f2>
    5c8e:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <DataAdressOffset>
    5c92:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <DataAdressOffset+0x1>
    5c96:	02 c0       	rjmp	.+4      	; 0x5c9c <menu_ProcessMessage+0x3f6>
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	a8 0f       	add	r26, r24
    5c9e:	b9 1f       	adc	r27, r25
    5ca0:	f9 01       	movw	r30, r18
    5ca2:	84 91       	lpm	r24, Z
    5ca4:	8f 73       	andi	r24, 0x3F	; 63
    5ca6:	8b 30       	cpi	r24, 0x0B	; 11
    5ca8:	71 f4       	brne	.+28     	; 0x5cc6 <menu_ProcessMessage+0x420>
    5caa:	40 91 ca 05 	lds	r20, 0x05CA	; 0x8005ca <dataEntry32>
    5cae:	50 91 cb 05 	lds	r21, 0x05CB	; 0x8005cb <dataEntry32+0x1>
    5cb2:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <dataEntry32+0x2>
    5cb6:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <dataEntry32+0x3>
    5cba:	4d 93       	st	X+, r20
    5cbc:	5d 93       	st	X+, r21
    5cbe:	6d 93       	st	X+, r22
    5cc0:	7c 93       	st	X, r23
    5cc2:	13 97       	sbiw	r26, 0x03	; 3
    5cc4:	03 c0       	rjmp	.+6      	; 0x5ccc <menu_ProcessMessage+0x426>
    5cc6:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <dataEntry>
    5cca:	8c 93       	st	X, r24
    5ccc:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    5cd0:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5cd4:	72 96       	adiw	r30, 0x12	; 18
    5cd6:	05 90       	lpm	r0, Z+
    5cd8:	f4 91       	lpm	r31, Z
    5cda:	e0 2d       	mov	r30, r0
    5cdc:	30 97       	sbiw	r30, 0x00	; 0
    5cde:	11 f0       	breq	.+4      	; 0x5ce4 <menu_ProcessMessage+0x43e>
    5ce0:	8c 2f       	mov	r24, r28
    5ce2:	19 95       	eicall
    5ce4:	8f ef       	ldi	r24, 0xFF	; 255
    5ce6:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <nibbleIndex>
    5cea:	47 dd       	rcall	.-1394   	; 0x577a <menuCurrMenuToLCD>
    5cec:	77 dd       	rcall	.-1298   	; 0x57dc <menuItemChanged>
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	17 c0       	rjmp	.+46     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5cf2:	80 e0       	ldi	r24, 0x00	; 0
    5cf4:	15 c0       	rjmp	.+42     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5cf6:	80 e0       	ldi	r24, 0x00	; 0
    5cf8:	13 c0       	rjmp	.+38     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	11 c0       	rjmp	.+34     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	0f c0       	rjmp	.+30     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d02:	80 e0       	ldi	r24, 0x00	; 0
    5d04:	0d c0       	rjmp	.+26     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d06:	80 e0       	ldi	r24, 0x00	; 0
    5d08:	0b c0       	rjmp	.+22     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d0a:	80 e0       	ldi	r24, 0x00	; 0
    5d0c:	09 c0       	rjmp	.+18     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	07 c0       	rjmp	.+14     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	05 c0       	rjmp	.+10     	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	03 c0       	rjmp	.+6      	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d1a:	80 e0       	ldi	r24, 0x00	; 0
    5d1c:	01 c0       	rjmp	.+2      	; 0x5d20 <menu_ProcessMessage+0x47a>
    5d1e:	80 e0       	ldi	r24, 0x00	; 0
    5d20:	cf 91       	pop	r28
    5d22:	08 95       	ret

00005d24 <getSoftKeyIndex>:

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5d24:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5d26:	35 e0       	ldi	r19, 0x05	; 5
    5d28:	85 31       	cpi	r24, 0x15	; 21
    5d2a:	93 07       	cpc	r25, r19
    5d2c:	49 f0       	breq	.+18     	; 0x5d40 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5d2e:	35 e0       	ldi	r19, 0x05	; 5
    5d30:	85 31       	cpi	r24, 0x15	; 21
    5d32:	93 07       	cpc	r25, r19
    5d34:	38 f0       	brcs	.+14     	; 0x5d44 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5d36:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5d38:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5d3a:	a9 f7       	brne	.-22     	; 0x5d26 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
    5d3e:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5d40:	82 2f       	mov	r24, r18
    5d42:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5d44:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5d46:	08 95       	ret

00005d48 <init_SoftKeys>:

void init_SoftKeys(){
    5d48:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5d4a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <eeprom_ReadSoftkeys>
    5d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    5d50:	c9 f4       	brne	.+50     	; 0x5d84 <init_SoftKeys+0x3c>
    5d52:	0f c0       	rjmp	.+30     	; 0x5d72 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5d54:	82 2f       	mov	r24, r18
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	fc 01       	movw	r30, r24
    5d5a:	e5 52       	subi	r30, 0x25	; 37
    5d5c:	fa 4f       	sbci	r31, 0xFA	; 250
    5d5e:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5d60:	88 0f       	add	r24, r24
    5d62:	99 1f       	adc	r25, r25
    5d64:	fc 01       	movw	r30, r24
    5d66:	ee 51       	subi	r30, 0x1E	; 30
    5d68:	fa 4f       	sbci	r31, 0xFA	; 250
    5d6a:	11 82       	std	Z+1, r1	; 0x01
    5d6c:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5d6e:	2f 5f       	subi	r18, 0xFF	; 255
    5d70:	01 c0       	rjmp	.+2      	; 0x5d74 <init_SoftKeys+0x2c>
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	24 30       	cpi	r18, 0x04	; 4
    5d76:	70 f3       	brcs	.-36     	; 0x5d54 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5d78:	40 e0       	ldi	r20, 0x00	; 0
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	67 e0       	ldi	r22, 0x07	; 7
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
    5d84:	c0 e0       	ldi	r28, 0x00	; 0
    5d86:	25 c0       	rjmp	.+74     	; 0x5dd2 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5d88:	4c 2f       	mov	r20, r28
    5d8a:	50 e0       	ldi	r21, 0x00	; 0
    5d8c:	fa 01       	movw	r30, r20
    5d8e:	e5 52       	subi	r30, 0x25	; 37
    5d90:	fa 4f       	sbci	r31, 0xFA	; 250
    5d92:	80 81       	ld	r24, Z
    5d94:	8d 31       	cpi	r24, 0x1D	; 29
    5d96:	70 f4       	brcc	.+28     	; 0x5db4 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    5d98:	24 e1       	ldi	r18, 0x14	; 20
    5d9a:	82 9f       	mul	r24, r18
    5d9c:	c0 01       	movw	r24, r0
    5d9e:	11 24       	eor	r1, r1
    5da0:	8b 5e       	subi	r24, 0xEB	; 235
    5da2:	9a 4f       	sbci	r25, 0xFA	; 250
    5da4:	44 0f       	add	r20, r20
    5da6:	55 1f       	adc	r21, r21
    5da8:	fa 01       	movw	r30, r20
    5daa:	ee 51       	subi	r30, 0x1E	; 30
    5dac:	fa 4f       	sbci	r31, 0xFA	; 250
    5dae:	91 83       	std	Z+1, r25	; 0x01
    5db0:	80 83       	st	Z, r24
    5db2:	0e c0       	rjmp	.+28     	; 0x5dd0 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5db4:	fa 01       	movw	r30, r20
    5db6:	ee 0f       	add	r30, r30
    5db8:	ff 1f       	adc	r31, r31
    5dba:	ee 51       	subi	r30, 0x1E	; 30
    5dbc:	fa 4f       	sbci	r31, 0xFA	; 250
    5dbe:	11 82       	std	Z+1, r1	; 0x01
    5dc0:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5dc2:	4f 5f       	subi	r20, 0xFF	; 255
    5dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    5dc6:	40 61       	ori	r20, 0x10	; 16
    5dc8:	67 e0       	ldi	r22, 0x07	; 7
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5dd0:	cf 5f       	subi	r28, 0xFF	; 255
    5dd2:	c4 30       	cpi	r28, 0x04	; 4
    5dd4:	c8 f2       	brcs	.-78     	; 0x5d88 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5dd6:	cf 91       	pop	r28
    5dd8:	08 95       	ret

00005dda <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5dda:	cf 93       	push	r28
    5ddc:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5dde:	64 30       	cpi	r22, 0x04	; 4
    5de0:	28 f5       	brcc	.+74     	; 0x5e2c <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5de2:	00 97       	sbiw	r24, 0x00	; 0
    5de4:	b9 f0       	breq	.+46     	; 0x5e14 <softKey_Set+0x3a>
    5de6:	fc 01       	movw	r30, r24
    5de8:	24 91       	lpm	r18, Z
    5dea:	2f 73       	andi	r18, 0x3F	; 63
    5dec:	21 30       	cpi	r18, 0x01	; 1
    5dee:	91 f4       	brne	.+36     	; 0x5e14 <softKey_Set+0x3a>
    5df0:	31 96       	adiw	r30, 0x01	; 1
    5df2:	24 91       	lpm	r18, Z
    5df4:	24 ff       	sbrs	r18, 4
    5df6:	0e c0       	rjmp	.+28     	; 0x5e14 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5df8:	c6 2f       	mov	r28, r22
    5dfa:	d0 e0       	ldi	r29, 0x00	; 0
    5dfc:	fe 01       	movw	r30, r28
    5dfe:	ee 0f       	add	r30, r30
    5e00:	ff 1f       	adc	r31, r31
    5e02:	ee 51       	subi	r30, 0x1E	; 30
    5e04:	fa 4f       	sbci	r31, 0xFA	; 250
    5e06:	91 83       	std	Z+1, r25	; 0x01
    5e08:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5e0a:	8c df       	rcall	.-232    	; 0x5d24 <getSoftKeyIndex>
    5e0c:	c5 52       	subi	r28, 0x25	; 37
    5e0e:	da 4f       	sbci	r29, 0xFA	; 250
    5e10:	88 83       	st	Y, r24
    5e12:	0c c0       	rjmp	.+24     	; 0x5e2c <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	fb 01       	movw	r30, r22
    5e18:	ee 0f       	add	r30, r30
    5e1a:	ff 1f       	adc	r31, r31
    5e1c:	ee 51       	subi	r30, 0x1E	; 30
    5e1e:	fa 4f       	sbci	r31, 0xFA	; 250
    5e20:	11 82       	std	Z+1, r1	; 0x01
    5e22:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5e24:	fb 01       	movw	r30, r22
    5e26:	e5 52       	subi	r30, 0x25	; 37
    5e28:	fa 4f       	sbci	r31, 0xFA	; 250
    5e2a:	10 82       	st	Z, r1
		}
	}
}
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	08 95       	ret

00005e32 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5e32:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <currentMenu>
    5e36:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <currentMenu+0x1>
    5e3a:	3e 96       	adiw	r30, 0x0e	; 14
    5e3c:	65 91       	lpm	r22, Z+
    5e3e:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5e40:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <menuVMenuSoftKey>
    5e44:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <menuVMenuSoftKey+0x1>
    5e48:	c8 df       	rcall	.-112    	; 0x5dda <softKey_Set>
	eeprom_UpdateSoftkeys();
    5e4a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <eeprom_UpdateSoftkeys>
	return 0;
}
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	08 95       	ret

00005e52 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5e52:	0f 93       	push	r16
    5e54:	1f 93       	push	r17
    5e56:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5e58:	c0 e0       	ldi	r28, 0x00	; 0
    5e5a:	32 c0       	rjmp	.+100    	; 0x5ec0 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5e5c:	0c 2f       	mov	r16, r28
    5e5e:	10 e0       	ldi	r17, 0x00	; 0
    5e60:	f8 01       	movw	r30, r16
    5e62:	ee 0f       	add	r30, r30
    5e64:	ff 1f       	adc	r31, r31
    5e66:	ee 51       	subi	r30, 0x1E	; 30
    5e68:	fa 4f       	sbci	r31, 0xFA	; 250
    5e6a:	01 90       	ld	r0, Z+
    5e6c:	f0 81       	ld	r31, Z
    5e6e:	e0 2d       	mov	r30, r0
    5e70:	30 97       	sbiw	r30, 0x00	; 0
    5e72:	31 f0       	breq	.+12     	; 0x5e80 <softKeys_toLCD+0x2e>
    5e74:	3e 96       	adiw	r30, 0x0e	; 14
    5e76:	65 91       	lpm	r22, Z+
    5e78:	75 91       	lpm	r23, Z+
    5e7a:	61 15       	cp	r22, r1
    5e7c:	71 05       	cpc	r23, r1
    5e7e:	21 f4       	brne	.+8      	; 0x5e88 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5e80:	8c 2f       	mov	r24, r28
    5e82:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <keylabel_clr>
    5e86:	1b c0       	rjmp	.+54     	; 0x5ebe <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5e88:	8c 2f       	mov	r24, r28
    5e8a:	0e 94 31 40 	call	0x8062	; 0x8062 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5e8e:	00 0f       	add	r16, r16
    5e90:	11 1f       	adc	r17, r17
    5e92:	f8 01       	movw	r30, r16
    5e94:	ee 51       	subi	r30, 0x1E	; 30
    5e96:	fa 4f       	sbci	r31, 0xFA	; 250
    5e98:	01 90       	ld	r0, Z+
    5e9a:	f0 81       	ld	r31, Z
    5e9c:	e0 2d       	mov	r30, r0
    5e9e:	70 96       	adiw	r30, 0x10	; 16
    5ea0:	05 90       	lpm	r0, Z+
    5ea2:	f4 91       	lpm	r31, Z
    5ea4:	e0 2d       	mov	r30, r0
    5ea6:	30 97       	sbiw	r30, 0x00	; 0
    5ea8:	51 f0       	breq	.+20     	; 0x5ebe <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5eaa:	80 e0       	ldi	r24, 0x00	; 0
    5eac:	19 95       	eicall
    5eae:	81 38       	cpi	r24, 0x81	; 129
    5eb0:	11 f4       	brne	.+4      	; 0x5eb6 <softKeys_toLCD+0x64>
    5eb2:	6f ef       	ldi	r22, 0xFF	; 255
    5eb4:	01 c0       	rjmp	.+2      	; 0x5eb8 <softKeys_toLCD+0x66>
    5eb6:	60 e0       	ldi	r22, 0x00	; 0
    5eb8:	8c 2f       	mov	r24, r28
    5eba:	0e 94 9f 40 	call	0x813e	; 0x813e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5ebe:	cf 5f       	subi	r28, 0xFF	; 255
    5ec0:	c4 30       	cpi	r28, 0x04	; 4
    5ec2:	60 f2       	brcs	.-104    	; 0x5e5c <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5ec4:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
}
    5ec8:	cf 91       	pop	r28
    5eca:	1f 91       	pop	r17
    5ecc:	0f 91       	pop	r16
    5ece:	08 95       	ret

00005ed0 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5ed0:	82 30       	cpi	r24, 0x02	; 2
    5ed2:	49 f0       	breq	.+18     	; 0x5ee6 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5ed4:	18 f4       	brcc	.+6      	; 0x5edc <softKey_MessageKey_ToSoftKeyNr+0xc>
    5ed6:	81 30       	cpi	r24, 0x01	; 1
    5ed8:	51 f0       	breq	.+20     	; 0x5eee <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5eda:	0b c0       	rjmp	.+22     	; 0x5ef2 <softKey_MessageKey_ToSoftKeyNr+0x22>
    5edc:	83 30       	cpi	r24, 0x03	; 3
    5ede:	59 f0       	breq	.+22     	; 0x5ef6 <softKey_MessageKey_ToSoftKeyNr+0x26>
    5ee0:	84 30       	cpi	r24, 0x04	; 4
    5ee2:	19 f0       	breq	.+6      	; 0x5eea <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5ee4:	06 c0       	rjmp	.+12     	; 0x5ef2 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
    5ee8:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5eea:	82 e0       	ldi	r24, 0x02	; 2
    5eec:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5eee:	83 e0       	ldi	r24, 0x03	; 3
    5ef0:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5ef2:	8f ef       	ldi	r24, 0xFF	; 255
    5ef4:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5ef6:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5ef8:	08 95       	ret

00005efa <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5efa:	0f 93       	push	r16
    5efc:	1f 93       	push	r17
    5efe:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5f00:	84 30       	cpi	r24, 0x04	; 4
    5f02:	d0 f5       	brcc	.+116    	; 0x5f78 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5f04:	e8 2f       	mov	r30, r24
    5f06:	f0 e0       	ldi	r31, 0x00	; 0
    5f08:	ee 0f       	add	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	ee 51       	subi	r30, 0x1E	; 30
    5f0e:	fa 4f       	sbci	r31, 0xFA	; 250
    5f10:	00 81       	ld	r16, Z
    5f12:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5f14:	01 15       	cp	r16, r1
    5f16:	11 05       	cpc	r17, r1
    5f18:	89 f1       	breq	.+98     	; 0x5f7c <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5f1a:	f8 01       	movw	r30, r16
    5f1c:	94 91       	lpm	r25, Z
    5f1e:	9f 73       	andi	r25, 0x3F	; 63
    5f20:	91 30       	cpi	r25, 0x01	; 1
    5f22:	71 f5       	brne	.+92     	; 0x5f80 <softKey_Execute+0x86>
    5f24:	31 96       	adiw	r30, 0x01	; 1
    5f26:	94 91       	lpm	r25, Z
    5f28:	94 ff       	sbrs	r25, 4
    5f2a:	2c c0       	rjmp	.+88     	; 0x5f84 <softKey_Execute+0x8a>
    5f2c:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5f2e:	3f 96       	adiw	r30, 0x0f	; 15
    5f30:	05 90       	lpm	r0, Z+
    5f32:	f4 91       	lpm	r31, Z
    5f34:	e0 2d       	mov	r30, r0
    5f36:	30 97       	sbiw	r30, 0x00	; 0
    5f38:	89 f0       	breq	.+34     	; 0x5f5c <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5f3a:	86 2f       	mov	r24, r22
    5f3c:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5f3e:	82 38       	cpi	r24, 0x82	; 130
    5f40:	29 f4       	brne	.+10     	; 0x5f4c <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5f42:	60 e0       	ldi	r22, 0x00	; 0
    5f44:	8c 2f       	mov	r24, r28
    5f46:	0e 94 9f 40 	call	0x813e	; 0x813e <keylabel_statcheck>
    5f4a:	06 c0       	rjmp	.+12     	; 0x5f58 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5f4c:	81 38       	cpi	r24, 0x81	; 129
    5f4e:	21 f4       	brne	.+8      	; 0x5f58 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5f50:	6f ef       	ldi	r22, 0xFF	; 255
    5f52:	8c 2f       	mov	r24, r28
    5f54:	0e 94 9f 40 	call	0x813e	; 0x813e <keylabel_statcheck>
					}
					keylabel_toLCD();
    5f58:	0e 94 80 40 	call	0x8100	; 0x8100 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5f5c:	f8 01       	movw	r30, r16
    5f5e:	3c 96       	adiw	r30, 0x0c	; 12
    5f60:	85 91       	lpm	r24, Z+
    5f62:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5f64:	00 97       	sbiw	r24, 0x00	; 0
    5f66:	81 f0       	breq	.+32     	; 0x5f88 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5f68:	b8 01       	movw	r22, r16
    5f6a:	6e 5f       	subi	r22, 0xFE	; 254
    5f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f6e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <menu_Init>
					menu_InitLCD(); //display menu
    5f72:	92 dc       	rcall	.-1756   	; 0x5898 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5f74:	80 e0       	ldi	r24, 0x00	; 0
    5f76:	09 c0       	rjmp	.+18     	; 0x5f8a <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5f78:	8f ef       	ldi	r24, 0xFF	; 255
    5f7a:	07 c0       	rjmp	.+14     	; 0x5f8a <softKey_Execute+0x90>
    5f7c:	8f ef       	ldi	r24, 0xFF	; 255
    5f7e:	05 c0       	rjmp	.+10     	; 0x5f8a <softKey_Execute+0x90>
    5f80:	8f ef       	ldi	r24, 0xFF	; 255
    5f82:	03 c0       	rjmp	.+6      	; 0x5f8a <softKey_Execute+0x90>
    5f84:	8f ef       	ldi	r24, 0xFF	; 255
    5f86:	01 c0       	rjmp	.+2      	; 0x5f8a <softKey_Execute+0x90>
    5f88:	8f ef       	ldi	r24, 0xFF	; 255
}
    5f8a:	cf 91       	pop	r28
    5f8c:	1f 91       	pop	r17
    5f8e:	0f 91       	pop	r16
    5f90:	08 95       	ret

00005f92 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5f92:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5f94:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5f98:	8c e0       	ldi	r24, 0x0C	; 12
    5f9a:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5f9e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <pipe_PowerStatus>
    5fa2:	84 ff       	sbrs	r24, 4
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <menu_showPowerState+0x18>
    5fa6:	80 e2       	ldi	r24, 0x20	; 32
    5fa8:	01 c0       	rjmp	.+2      	; 0x5fac <menu_showPowerState+0x1a>
    5faa:	89 e0       	ldi	r24, 0x09	; 9
    5fac:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
	lcd_goto(saveCursor);
    5fb0:	8c 2f       	mov	r24, r28
    5fb2:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>

    5fb6:	cf 91       	pop	r28
    5fb8:	08 95       	ret

00005fba <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5fba:	85 b1       	in	r24, 0x05	; 5
    5fbc:	80 64       	ori	r24, 0x40	; 64
    5fbe:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5fc0:	83 e1       	ldi	r24, 0x13	; 19
    5fc2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
	menu_showPowerState();
    5fc6:	e5 df       	rcall	.-54     	; 0x5f92 <menu_showPowerState>
	return 0;
}
    5fc8:	80 e0       	ldi	r24, 0x00	; 0
    5fca:	08 95       	ret

00005fcc <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5fcc:	85 b1       	in	r24, 0x05	; 5
    5fce:	8f 7b       	andi	r24, 0xBF	; 191
    5fd0:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5fd2:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <pipe_PowerStatus>
	menu_showPowerState();
    5fd6:	dd df       	rcall	.-70     	; 0x5f92 <menu_showPowerState>
	return 0;
}
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	08 95       	ret

00005fdc <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5fdc:	85 b1       	in	r24, 0x05	; 5
    5fde:	8f 7b       	andi	r24, 0xBF	; 191
    5fe0:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5fe2:	81 e0       	ldi	r24, 0x01	; 1
    5fe4:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pipe_PowerStatus>
	menu_showPowerState();
    5fe8:	d4 df       	rcall	.-88     	; 0x5f92 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5fea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5fec:	f8 94       	cli
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	06 c0       	rjmp	.+12     	; 0x5ffe <menuOnEnterPwrRest+0x22>
    5ff2:	e0 e5       	ldi	r30, 0x50	; 80
    5ff4:	f2 e0       	ldi	r31, 0x02	; 2
    5ff6:	88 e2       	ldi	r24, 0x28	; 40
    5ff8:	82 83       	std	Z+2, r24	; 0x02
    5ffa:	13 82       	std	Z+3, r1	; 0x03
    5ffc:	80 e0       	ldi	r24, 0x00	; 0
    5ffe:	81 11       	cpse	r24, r1
    6000:	f8 cf       	rjmp	.-16     	; 0x5ff2 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6002:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    6004:	08 95       	ret

00006006 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    6006:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <msgInIndex>
    600a:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <msgOutIndex>
    600e:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <msgOverflow>
    6012:	08 95       	ret

00006014 <message_push>:
    6014:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <msgInIndex>
    6018:	e9 2f       	mov	r30, r25
    601a:	f0 e0       	ldi	r31, 0x00	; 0
    601c:	e5 50       	subi	r30, 0x05	; 5
    601e:	f8 4f       	sbci	r31, 0xF8	; 248
    6020:	80 83       	st	Z, r24
    6022:	9f 5f       	subi	r25, 0xFF	; 255
    6024:	9f 71       	andi	r25, 0x1F	; 31
    6026:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <msgOutIndex>
    602a:	98 13       	cpse	r25, r24
    602c:	04 c0       	rjmp	.+8      	; 0x6036 <message_push+0x22>
    602e:	8f ef       	ldi	r24, 0xFF	; 255
    6030:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <msgOverflow>
    6034:	08 95       	ret
    6036:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <msgInIndex>
    603a:	08 95       	ret

0000603c <message_get>:
    603c:	4f b7       	in	r20, 0x3f	; 63
    603e:	f8 94       	cli
    6040:	21 e0       	ldi	r18, 0x01	; 1
    6042:	11 c0       	rjmp	.+34     	; 0x6066 <message_get+0x2a>
    6044:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <msgOutIndex>
    6048:	30 91 fa 07 	lds	r19, 0x07FA	; 0x8007fa <msgInIndex>
    604c:	8f ef       	ldi	r24, 0xFF	; 255
    604e:	20 e0       	ldi	r18, 0x00	; 0
    6050:	93 17       	cp	r25, r19
    6052:	49 f0       	breq	.+18     	; 0x6066 <message_get+0x2a>
    6054:	e9 2f       	mov	r30, r25
    6056:	f0 e0       	ldi	r31, 0x00	; 0
    6058:	e5 50       	subi	r30, 0x05	; 5
    605a:	f8 4f       	sbci	r31, 0xF8	; 248
    605c:	80 81       	ld	r24, Z
    605e:	9f 5f       	subi	r25, 0xFF	; 255
    6060:	9f 71       	andi	r25, 0x1F	; 31
    6062:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <msgOutIndex>
    6066:	21 11       	cpse	r18, r1
    6068:	ed cf       	rjmp	.-38     	; 0x6044 <message_get+0x8>
    606a:	4f bf       	out	0x3f, r20	; 63
    606c:	08 95       	ret

0000606e <message_status>:
    606e:	4f b7       	in	r20, 0x3f	; 63
    6070:	f8 94       	cli
    6072:	91 e0       	ldi	r25, 0x01	; 1
    6074:	08 c0       	rjmp	.+16     	; 0x6086 <message_status+0x18>
    6076:	30 91 f7 05 	lds	r19, 0x05F7	; 0x8005f7 <msgOutIndex>
    607a:	20 91 fa 07 	lds	r18, 0x07FA	; 0x8007fa <msgInIndex>
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	32 17       	cp	r19, r18
    6084:	11 f0       	breq	.+4      	; 0x608a <message_status+0x1c>
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	01 c0       	rjmp	.+2      	; 0x608c <message_status+0x1e>
    608a:	90 e0       	ldi	r25, 0x00	; 0
    608c:	91 11       	cpse	r25, r1
    608e:	f3 cf       	rjmp	.-26     	; 0x6076 <message_status+0x8>
    6090:	4f bf       	out	0x3f, r20	; 63
    6092:	08 95       	ret

00006094 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    6094:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    6096:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <msgPipe_Handling>
    609a:	99 23       	and	r25, r25
    609c:	e1 f0       	breq	.+56     	; 0x60d6 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    609e:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <pipeMsgInIndex>
    60a2:	21 e0       	ldi	r18, 0x01	; 1
    60a4:	29 0f       	add	r18, r25
    60a6:	20 93 f8 07 	sts	0x07F8, r18	; 0x8007f8 <pipeMsgInIndex>
    60aa:	e9 2f       	mov	r30, r25
    60ac:	f0 e0       	ldi	r31, 0x00	; 0
    60ae:	ee 0f       	add	r30, r30
    60b0:	ff 1f       	adc	r31, r31
    60b2:	e8 50       	subi	r30, 0x08	; 8
    60b4:	fa 4f       	sbci	r31, 0xFA	; 250
    60b6:	51 83       	std	Z+1, r21	; 0x01
    60b8:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    60ba:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <pipeMsgOutIndex>
    60be:	28 13       	cpse	r18, r24
    60c0:	0a c0       	rjmp	.+20     	; 0x60d6 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    60c2:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    60c6:	9f 3f       	cpi	r25, 0xFF	; 255
    60c8:	19 f4       	brne	.+6      	; 0x60d0 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    60ca:	8f ef       	ldi	r24, 0xFF	; 255
    60cc:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    60d0:	8f ef       	ldi	r24, 0xFF	; 255
    60d2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <msgPipeOverflow>
    60d6:	08 95       	ret

000060d8 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    60d8:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <pipeMsgOutIndex>
    60dc:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pipeMsgInIndex>
    60e0:	e8 13       	cpse	r30, r24
    60e2:	03 c0       	rjmp	.+6      	; 0x60ea <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    60e4:	8f ef       	ldi	r24, 0xFF	; 255
    60e6:	9f ef       	ldi	r25, 0xFF	; 255
    60e8:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    60ea:	81 e0       	ldi	r24, 0x01	; 1
    60ec:	8e 0f       	add	r24, r30
    60ee:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <pipeMsgOutIndex>
    60f2:	f0 e0       	ldi	r31, 0x00	; 0
    60f4:	ee 0f       	add	r30, r30
    60f6:	ff 1f       	adc	r31, r31
    60f8:	e8 50       	subi	r30, 0x08	; 8
    60fa:	fa 4f       	sbci	r31, 0xFA	; 250
    60fc:	80 81       	ld	r24, Z
    60fe:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    6100:	08 95       	ret

00006102 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    6102:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <pipeMsgOutIndex>
    6106:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pipeMsgInIndex>
    610a:	98 13       	cpse	r25, r24
    610c:	02 c0       	rjmp	.+4      	; 0x6112 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    610e:	80 e0       	ldi	r24, 0x00	; 0
    6110:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    6112:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    6114:	08 95       	ret

00006116 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    6116:	80 e0       	ldi	r24, 0x00	; 0
    6118:	e9 e3       	ldi	r30, 0x39	; 57
    611a:	f8 e0       	ldi	r31, 0x08	; 8
    611c:	03 c0       	rjmp	.+6      	; 0x6124 <midi_CouplerReset+0xe>
    611e:	10 82       	st	Z, r1
    6120:	8f 5f       	subi	r24, 0xFF	; 255
    6122:	31 96       	adiw	r30, 0x01	; 1
    6124:	8c 30       	cpi	r24, 0x0C	; 12
    6126:	d8 f3       	brcs	.-10     	; 0x611e <midi_CouplerReset+0x8>
    6128:	08 95       	ret

0000612a <init_Midi>:
    612a:	f5 df       	rcall	.-22     	; 0x6116 <midi_CouplerReset>
    612c:	8f ef       	ldi	r24, 0xFF	; 255
    612e:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
    6132:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <prog_UpdDisplay>
    6136:	08 95       	ret

00006138 <set_Coupler>:
    6138:	8c 30       	cpi	r24, 0x0C	; 12
    613a:	e8 f4       	brcc	.+58     	; 0x6176 <set_Coupler+0x3e>
    613c:	e8 2f       	mov	r30, r24
    613e:	f0 e0       	ldi	r31, 0x00	; 0
    6140:	e7 5c       	subi	r30, 0xC7	; 199
    6142:	f7 4f       	sbci	r31, 0xF7	; 247
    6144:	9f ef       	ldi	r25, 0xFF	; 255
    6146:	90 83       	st	Z, r25
    6148:	86 30       	cpi	r24, 0x06	; 6
    614a:	10 f0       	brcs	.+4      	; 0x6150 <set_Coupler+0x18>
    614c:	86 50       	subi	r24, 0x06	; 6
    614e:	01 c0       	rjmp	.+2      	; 0x6152 <set_Coupler+0x1a>
    6150:	8a 5f       	subi	r24, 0xFA	; 250
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	fc 01       	movw	r30, r24
    6156:	e7 5c       	subi	r30, 0xC7	; 199
    6158:	f7 4f       	sbci	r31, 0xF7	; 247
    615a:	20 81       	ld	r18, Z
    615c:	22 23       	and	r18, r18
    615e:	69 f0       	breq	.+26     	; 0x617a <set_Coupler+0x42>
    6160:	fc 01       	movw	r30, r24
    6162:	e7 5c       	subi	r30, 0xC7	; 199
    6164:	f7 4f       	sbci	r31, 0xF7	; 247
    6166:	10 82       	st	Z, r1
    6168:	88 0f       	add	r24, r24
    616a:	99 1f       	adc	r25, r25
    616c:	fc 01       	movw	r30, r24
    616e:	ef 54       	subi	r30, 0x4F	; 79
    6170:	fb 4e       	sbci	r31, 0xEB	; 235
    6172:	84 91       	lpm	r24, Z
    6174:	08 95       	ret
    6176:	8f ef       	ldi	r24, 0xFF	; 255
    6178:	08 95       	ret
    617a:	8f ef       	ldi	r24, 0xFF	; 255
    617c:	08 95       	ret

0000617e <getAllCouplers>:
    617e:	80 e0       	ldi	r24, 0x00	; 0
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	4b e0       	ldi	r20, 0x0B	; 11
    6184:	01 c0       	rjmp	.+2      	; 0x6188 <getAllCouplers+0xa>
    6186:	42 2f       	mov	r20, r18
    6188:	28 2f       	mov	r18, r24
    618a:	39 2f       	mov	r19, r25
    618c:	22 0f       	add	r18, r18
    618e:	33 1f       	adc	r19, r19
    6190:	82 2f       	mov	r24, r18
    6192:	93 2f       	mov	r25, r19
    6194:	e4 2f       	mov	r30, r20
    6196:	f0 e0       	ldi	r31, 0x00	; 0
    6198:	e7 5c       	subi	r30, 0xC7	; 199
    619a:	f7 4f       	sbci	r31, 0xF7	; 247
    619c:	50 81       	ld	r21, Z
    619e:	5f 3f       	cpi	r21, 0xFF	; 255
    61a0:	09 f4       	brne	.+2      	; 0x61a4 <getAllCouplers+0x26>
    61a2:	81 60       	ori	r24, 0x01	; 1
    61a4:	2f ef       	ldi	r18, 0xFF	; 255
    61a6:	24 0f       	add	r18, r20
    61a8:	41 11       	cpse	r20, r1
    61aa:	ed cf       	rjmp	.-38     	; 0x6186 <getAllCouplers+0x8>
    61ac:	08 95       	ret

000061ae <setAllCouplers>:
    61ae:	40 e0       	ldi	r20, 0x00	; 0
    61b0:	80 ff       	sbrs	r24, 0
    61b2:	07 c0       	rjmp	.+14     	; 0x61c2 <setAllCouplers+0x14>
    61b4:	e4 2f       	mov	r30, r20
    61b6:	f0 e0       	ldi	r31, 0x00	; 0
    61b8:	e7 5c       	subi	r30, 0xC7	; 199
    61ba:	f7 4f       	sbci	r31, 0xF7	; 247
    61bc:	2f ef       	ldi	r18, 0xFF	; 255
    61be:	20 83       	st	Z, r18
    61c0:	05 c0       	rjmp	.+10     	; 0x61cc <setAllCouplers+0x1e>
    61c2:	e4 2f       	mov	r30, r20
    61c4:	f0 e0       	ldi	r31, 0x00	; 0
    61c6:	e7 5c       	subi	r30, 0xC7	; 199
    61c8:	f7 4f       	sbci	r31, 0xF7	; 247
    61ca:	10 82       	st	Z, r1
    61cc:	28 2f       	mov	r18, r24
    61ce:	39 2f       	mov	r19, r25
    61d0:	36 95       	lsr	r19
    61d2:	27 95       	ror	r18
    61d4:	82 2f       	mov	r24, r18
    61d6:	93 2f       	mov	r25, r19
    61d8:	4f 5f       	subi	r20, 0xFF	; 255
    61da:	4c 30       	cpi	r20, 0x0C	; 12
    61dc:	48 f3       	brcs	.-46     	; 0x61b0 <setAllCouplers+0x2>
    61de:	08 95       	ret

000061e0 <midiAllReset>:
    61e0:	80 e8       	ldi	r24, 0x80	; 128
    61e2:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipeProcessing>
    61e6:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <init_Pipe>
    61ea:	08 95       	ret

000061ec <registers_CalcCount>:
    61ec:	20 e0       	ldi	r18, 0x00	; 0
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	12 c0       	rjmp	.+36     	; 0x6216 <registers_CalcCount+0x2a>
    61f2:	82 2f       	mov	r24, r18
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	fc 01       	movw	r30, r24
    61f8:	ee 0f       	add	r30, r30
    61fa:	ff 1f       	adc	r31, r31
    61fc:	8e 0f       	add	r24, r30
    61fe:	9f 1f       	adc	r25, r31
    6200:	fc 01       	movw	r30, r24
    6202:	e1 5e       	subi	r30, 0xE1	; 225
    6204:	f7 4f       	sbci	r31, 0xF7	; 247
    6206:	81 81       	ldd	r24, Z+1	; 0x01
    6208:	8f 3f       	cpi	r24, 0xFF	; 255
    620a:	21 f0       	breq	.+8      	; 0x6214 <registers_CalcCount+0x28>
    620c:	83 17       	cp	r24, r19
    620e:	10 f0       	brcs	.+4      	; 0x6214 <registers_CalcCount+0x28>
    6210:	31 e0       	ldi	r19, 0x01	; 1
    6212:	38 0f       	add	r19, r24
    6214:	2f 5f       	subi	r18, 0xFF	; 255
    6216:	28 30       	cpi	r18, 0x08	; 8
    6218:	60 f3       	brcs	.-40     	; 0x61f2 <registers_CalcCount+0x6>
    621a:	30 93 38 08 	sts	0x0838, r19	; 0x800838 <registerCount>
    621e:	08 95       	ret

00006220 <init_Registers>:
    6220:	8f ef       	ldi	r24, 0xFF	; 255
    6222:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <midi_RegisterChanged>
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	0e c0       	rjmp	.+28     	; 0x6246 <init_Registers+0x26>
    622a:	82 2f       	mov	r24, r18
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	fc 01       	movw	r30, r24
    6230:	ee 0f       	add	r30, r30
    6232:	ff 1f       	adc	r31, r31
    6234:	e8 0f       	add	r30, r24
    6236:	f9 1f       	adc	r31, r25
    6238:	e1 5e       	subi	r30, 0xE1	; 225
    623a:	f7 4f       	sbci	r31, 0xF7	; 247
    623c:	8f ef       	ldi	r24, 0xFF	; 255
    623e:	80 83       	st	Z, r24
    6240:	81 83       	std	Z+1, r24	; 0x01
    6242:	12 82       	std	Z+2, r1	; 0x02
    6244:	2f 5f       	subi	r18, 0xFF	; 255
    6246:	28 30       	cpi	r18, 0x08	; 8
    6248:	80 f3       	brcs	.-32     	; 0x622a <init_Registers+0xa>
    624a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <eeprom_ReadReg>
    624e:	8f 3f       	cpi	r24, 0xFF	; 255
    6250:	49 f4       	brne	.+18     	; 0x6264 <init_Registers+0x44>
    6252:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <registerCount>
    6256:	40 e0       	ldi	r20, 0x00	; 0
    6258:	50 e0       	ldi	r21, 0x00	; 0
    625a:	65 e0       	ldi	r22, 0x05	; 5
    625c:	81 e0       	ldi	r24, 0x01	; 1
    625e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
    6262:	01 c0       	rjmp	.+2      	; 0x6266 <init_Registers+0x46>
    6264:	c3 df       	rcall	.-122    	; 0x61ec <registers_CalcCount>
    6266:	0e 94 84 0c 	call	0x1908	; 0x1908 <eeprom_ReadProg>
    626a:	8f 3f       	cpi	r24, 0xFF	; 255
    626c:	a1 f5       	brne	.+104    	; 0x62d6 <init_Registers+0xb6>
    626e:	2a c0       	rjmp	.+84     	; 0x62c4 <init_Registers+0xa4>
    6270:	83 2f       	mov	r24, r19
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	fc 01       	movw	r30, r24
    6276:	ee 0f       	add	r30, r30
    6278:	ff 1f       	adc	r31, r31
    627a:	88 0f       	add	r24, r24
    627c:	99 1f       	adc	r25, r25
    627e:	88 0f       	add	r24, r24
    6280:	99 1f       	adc	r25, r25
    6282:	88 0f       	add	r24, r24
    6284:	99 1f       	adc	r25, r25
    6286:	e8 0f       	add	r30, r24
    6288:	f9 1f       	adc	r31, r25
    628a:	e0 57       	subi	r30, 0x70	; 112
    628c:	f6 4f       	sbci	r31, 0xF6	; 246
    628e:	e2 0f       	add	r30, r18
    6290:	f1 1d       	adc	r31, r1
    6292:	10 82       	st	Z, r1
    6294:	2f 5f       	subi	r18, 0xFF	; 255
    6296:	01 c0       	rjmp	.+2      	; 0x629a <init_Registers+0x7a>
    6298:	20 e0       	ldi	r18, 0x00	; 0
    629a:	28 30       	cpi	r18, 0x08	; 8
    629c:	48 f3       	brcs	.-46     	; 0x6270 <init_Registers+0x50>
    629e:	83 2f       	mov	r24, r19
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	fc 01       	movw	r30, r24
    62a4:	ee 0f       	add	r30, r30
    62a6:	ff 1f       	adc	r31, r31
    62a8:	88 0f       	add	r24, r24
    62aa:	99 1f       	adc	r25, r25
    62ac:	88 0f       	add	r24, r24
    62ae:	99 1f       	adc	r25, r25
    62b0:	88 0f       	add	r24, r24
    62b2:	99 1f       	adc	r25, r25
    62b4:	e8 0f       	add	r30, r24
    62b6:	f9 1f       	adc	r31, r25
    62b8:	e0 57       	subi	r30, 0x70	; 112
    62ba:	f6 4f       	sbci	r31, 0xF6	; 246
    62bc:	11 86       	std	Z+9, r1	; 0x09
    62be:	10 86       	std	Z+8, r1	; 0x08
    62c0:	3f 5f       	subi	r19, 0xFF	; 255
    62c2:	01 c0       	rjmp	.+2      	; 0x62c6 <init_Registers+0xa6>
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	30 34       	cpi	r19, 0x40	; 64
    62c8:	38 f3       	brcs	.-50     	; 0x6298 <init_Registers+0x78>
    62ca:	40 e0       	ldi	r20, 0x00	; 0
    62cc:	50 e0       	ldi	r21, 0x00	; 0
    62ce:	66 e0       	ldi	r22, 0x06	; 6
    62d0:	81 e0       	ldi	r24, 0x01	; 1
    62d2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
    62d6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <eeprom_ReadCCreg>
    62da:	8f 3f       	cpi	r24, 0xFF	; 255
    62dc:	61 f4       	brne	.+24     	; 0x62f6 <init_Registers+0xd6>
    62de:	ec e5       	ldi	r30, 0x5C	; 92
    62e0:	f9 e0       	ldi	r31, 0x09	; 9
    62e2:	81 83       	std	Z+1, r24	; 0x01
    62e4:	80 83       	st	Z, r24
    62e6:	83 83       	std	Z+3, r24	; 0x03
    62e8:	82 83       	std	Z+2, r24	; 0x02
    62ea:	40 e0       	ldi	r20, 0x00	; 0
    62ec:	50 e0       	ldi	r21, 0x00	; 0
    62ee:	6a e0       	ldi	r22, 0x0A	; 10
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <log_putError>
    62f6:	08 95       	ret

000062f8 <regNr_to_moduleBit>:
    62f8:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <registerCount>
    62fc:	89 17       	cp	r24, r25
    62fe:	a0 f4       	brcc	.+40     	; 0x6328 <regNr_to_moduleBit+0x30>
    6300:	80 34       	cpi	r24, 0x40	; 64
    6302:	90 f4       	brcc	.+36     	; 0x6328 <regNr_to_moduleBit+0x30>
    6304:	28 e0       	ldi	r18, 0x08	; 8
    6306:	ef e1       	ldi	r30, 0x1F	; 31
    6308:	f8 e0       	ldi	r31, 0x08	; 8
    630a:	30 81       	ld	r19, Z
    630c:	83 17       	cp	r24, r19
    630e:	48 f0       	brcs	.+18     	; 0x6322 <regNr_to_moduleBit+0x2a>
    6310:	91 81       	ldd	r25, Z+1	; 0x01
    6312:	98 17       	cp	r25, r24
    6314:	30 f0       	brcs	.+12     	; 0x6322 <regNr_to_moduleBit+0x2a>
    6316:	22 81       	ldd	r18, Z+2	; 0x02
    6318:	98 2f       	mov	r25, r24
    631a:	93 1b       	sub	r25, r19
    631c:	80 e0       	ldi	r24, 0x00	; 0
    631e:	92 0f       	add	r25, r18
    6320:	08 95       	ret
    6322:	33 96       	adiw	r30, 0x03	; 3
    6324:	21 50       	subi	r18, 0x01	; 1
    6326:	89 f7       	brne	.-30     	; 0x630a <regNr_to_moduleBit+0x12>
    6328:	8f ef       	ldi	r24, 0xFF	; 255
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	08 95       	ret

0000632e <moduleBit_to_registerNr>:
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	16 c0       	rjmp	.+44     	; 0x635e <moduleBit_to_registerNr+0x30>
    6332:	40 91 21 08 	lds	r20, 0x0821	; 0x800821 <registerMap+0x2>
    6336:	84 17       	cp	r24, r20
    6338:	88 f0       	brcs	.+34     	; 0x635c <moduleBit_to_registerNr+0x2e>
    633a:	68 2f       	mov	r22, r24
    633c:	70 e0       	ldi	r23, 0x00	; 0
    633e:	ef e1       	ldi	r30, 0x1F	; 31
    6340:	f8 e0       	ldi	r31, 0x08	; 8
    6342:	21 81       	ldd	r18, Z+1	; 0x01
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	24 0f       	add	r18, r20
    6348:	31 1d       	adc	r19, r1
    634a:	50 81       	ld	r21, Z
    634c:	25 1b       	sub	r18, r21
    634e:	31 09       	sbc	r19, r1
    6350:	26 17       	cp	r18, r22
    6352:	37 07       	cpc	r19, r23
    6354:	1c f0       	brlt	.+6      	; 0x635c <moduleBit_to_registerNr+0x2e>
    6356:	84 1b       	sub	r24, r20
    6358:	85 0f       	add	r24, r21
    635a:	08 95       	ret
    635c:	9f 5f       	subi	r25, 0xFF	; 255
    635e:	98 30       	cpi	r25, 0x08	; 8
    6360:	40 f3       	brcs	.-48     	; 0x6332 <moduleBit_to_registerNr+0x4>
    6362:	8f ef       	ldi	r24, 0xFF	; 255
    6364:	08 95       	ret

00006366 <read_Register>:
    6366:	cf 93       	push	r28
    6368:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <registerCount>
    636c:	89 17       	cp	r24, r25
    636e:	08 f0       	brcs	.+2      	; 0x6372 <read_Register+0xc>
    6370:	3f c0       	rjmp	.+126    	; 0x63f0 <read_Register+0x8a>
    6372:	c6 2f       	mov	r28, r22
    6374:	c1 df       	rcall	.-126    	; 0x62f8 <regNr_to_moduleBit>
    6376:	81 11       	cpse	r24, r1
    6378:	33 c0       	rjmp	.+102    	; 0x63e0 <read_Register+0x7a>
    637a:	29 2f       	mov	r18, r25
    637c:	2f 71       	andi	r18, 0x1F	; 31
    637e:	92 95       	swap	r25
    6380:	96 95       	lsr	r25
    6382:	97 70       	andi	r25, 0x07	; 7
    6384:	41 e0       	ldi	r20, 0x01	; 1
    6386:	50 e0       	ldi	r21, 0x00	; 0
    6388:	02 c0       	rjmp	.+4      	; 0x638e <read_Register+0x28>
    638a:	44 0f       	add	r20, r20
    638c:	55 1f       	adc	r21, r21
    638e:	9a 95       	dec	r25
    6390:	e2 f7       	brpl	.-8      	; 0x638a <read_Register+0x24>
    6392:	30 e0       	ldi	r19, 0x00	; 0
    6394:	f9 01       	movw	r30, r18
    6396:	ee 0f       	add	r30, r30
    6398:	ff 1f       	adc	r31, r31
    639a:	ee 0f       	add	r30, r30
    639c:	ff 1f       	adc	r31, r31
    639e:	ee 0f       	add	r30, r30
    63a0:	ff 1f       	adc	r31, r31
    63a2:	e2 59       	subi	r30, 0x92	; 146
    63a4:	fd 4f       	sbci	r31, 0xFD	; 253
    63a6:	91 81       	ldd	r25, Z+1	; 0x01
    63a8:	94 23       	and	r25, r20
    63aa:	11 f4       	brne	.+4      	; 0x63b0 <read_Register+0x4a>
    63ac:	c1 fd       	sbrc	r28, 1
    63ae:	1a c0       	rjmp	.+52     	; 0x63e4 <read_Register+0x7e>
    63b0:	22 0f       	add	r18, r18
    63b2:	33 1f       	adc	r19, r19
    63b4:	22 0f       	add	r18, r18
    63b6:	33 1f       	adc	r19, r19
    63b8:	22 0f       	add	r18, r18
    63ba:	33 1f       	adc	r19, r19
    63bc:	f9 01       	movw	r30, r18
    63be:	e2 59       	subi	r30, 0x92	; 146
    63c0:	fd 4f       	sbci	r31, 0xFD	; 253
    63c2:	36 81       	ldd	r19, Z+6	; 0x06
    63c4:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <pipe_Module>
    63c8:	43 23       	and	r20, r19
    63ca:	42 23       	and	r20, r18
    63cc:	11 f0       	breq	.+4      	; 0x63d2 <read_Register+0x6c>
    63ce:	c0 fd       	sbrc	r28, 0
    63d0:	0b c0       	rjmp	.+22     	; 0x63e8 <read_Register+0x82>
    63d2:	99 23       	and	r25, r25
    63d4:	71 f0       	breq	.+28     	; 0x63f2 <read_Register+0x8c>
    63d6:	44 23       	and	r20, r20
    63d8:	61 f0       	breq	.+24     	; 0x63f2 <read_Register+0x8c>
    63da:	c4 30       	cpi	r28, 0x04	; 4
    63dc:	51 f4       	brne	.+20     	; 0x63f2 <read_Register+0x8c>
    63de:	06 c0       	rjmp	.+12     	; 0x63ec <read_Register+0x86>
    63e0:	80 e0       	ldi	r24, 0x00	; 0
    63e2:	07 c0       	rjmp	.+14     	; 0x63f2 <read_Register+0x8c>
    63e4:	81 e0       	ldi	r24, 0x01	; 1
    63e6:	05 c0       	rjmp	.+10     	; 0x63f2 <read_Register+0x8c>
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	03 c0       	rjmp	.+6      	; 0x63f2 <read_Register+0x8c>
    63ec:	81 e0       	ldi	r24, 0x01	; 1
    63ee:	01 c0       	rjmp	.+2      	; 0x63f2 <read_Register+0x8c>
    63f0:	80 e0       	ldi	r24, 0x00	; 0
    63f2:	cf 91       	pop	r28
    63f4:	08 95       	ret

000063f6 <get_RegisterStatus>:
    63f6:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <registerCount>
    63fa:	89 17       	cp	r24, r25
    63fc:	90 f5       	brcc	.+100    	; 0x6462 <get_RegisterStatus+0x6c>
    63fe:	7c df       	rcall	.-264    	; 0x62f8 <regNr_to_moduleBit>
    6400:	81 11       	cpse	r24, r1
    6402:	2d c0       	rjmp	.+90     	; 0x645e <get_RegisterStatus+0x68>
    6404:	29 2f       	mov	r18, r25
    6406:	2f 71       	andi	r18, 0x1F	; 31
    6408:	92 95       	swap	r25
    640a:	96 95       	lsr	r25
    640c:	97 70       	andi	r25, 0x07	; 7
    640e:	41 e0       	ldi	r20, 0x01	; 1
    6410:	50 e0       	ldi	r21, 0x00	; 0
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <get_RegisterStatus+0x22>
    6414:	44 0f       	add	r20, r20
    6416:	55 1f       	adc	r21, r21
    6418:	9a 95       	dec	r25
    641a:	e2 f7       	brpl	.-8      	; 0x6414 <get_RegisterStatus+0x1e>
    641c:	30 e0       	ldi	r19, 0x00	; 0
    641e:	f9 01       	movw	r30, r18
    6420:	ee 0f       	add	r30, r30
    6422:	ff 1f       	adc	r31, r31
    6424:	ee 0f       	add	r30, r30
    6426:	ff 1f       	adc	r31, r31
    6428:	ee 0f       	add	r30, r30
    642a:	ff 1f       	adc	r31, r31
    642c:	e2 59       	subi	r30, 0x92	; 146
    642e:	fd 4f       	sbci	r31, 0xFD	; 253
    6430:	81 81       	ldd	r24, Z+1	; 0x01
    6432:	84 23       	and	r24, r20
    6434:	11 f0       	breq	.+4      	; 0x643a <get_RegisterStatus+0x44>
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	01 c0       	rjmp	.+2      	; 0x643c <get_RegisterStatus+0x46>
    643a:	82 e0       	ldi	r24, 0x02	; 2
    643c:	22 0f       	add	r18, r18
    643e:	33 1f       	adc	r19, r19
    6440:	22 0f       	add	r18, r18
    6442:	33 1f       	adc	r19, r19
    6444:	22 0f       	add	r18, r18
    6446:	33 1f       	adc	r19, r19
    6448:	f9 01       	movw	r30, r18
    644a:	e2 59       	subi	r30, 0x92	; 146
    644c:	fd 4f       	sbci	r31, 0xFD	; 253
    644e:	26 81       	ldd	r18, Z+6	; 0x06
    6450:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <pipe_Module>
    6454:	42 23       	and	r20, r18
    6456:	49 23       	and	r20, r25
    6458:	29 f0       	breq	.+10     	; 0x6464 <get_RegisterStatus+0x6e>
    645a:	81 60       	ori	r24, 0x01	; 1
    645c:	08 95       	ret
    645e:	80 e0       	ldi	r24, 0x00	; 0
    6460:	08 95       	ret
    6462:	80 e0       	ldi	r24, 0x00	; 0
    6464:	08 95       	ret

00006466 <count_Registers>:
    6466:	1f 93       	push	r17
    6468:	cf 93       	push	r28
    646a:	df 93       	push	r29
    646c:	18 2f       	mov	r17, r24
    646e:	c0 e0       	ldi	r28, 0x00	; 0
    6470:	d0 e0       	ldi	r29, 0x00	; 0
    6472:	06 c0       	rjmp	.+12     	; 0x6480 <count_Registers+0x1a>
    6474:	61 2f       	mov	r22, r17
    6476:	8c 2f       	mov	r24, r28
    6478:	76 df       	rcall	.-276    	; 0x6366 <read_Register>
    647a:	81 11       	cpse	r24, r1
    647c:	df 5f       	subi	r29, 0xFF	; 255
    647e:	cf 5f       	subi	r28, 0xFF	; 255
    6480:	c0 34       	cpi	r28, 0x40	; 64
    6482:	c0 f3       	brcs	.-16     	; 0x6474 <count_Registers+0xe>
    6484:	8d 2f       	mov	r24, r29
    6486:	df 91       	pop	r29
    6488:	cf 91       	pop	r28
    648a:	1f 91       	pop	r17
    648c:	08 95       	ret

0000648e <read_allRegister>:
    648e:	ef 92       	push	r14
    6490:	ff 92       	push	r15
    6492:	0f 93       	push	r16
    6494:	1f 93       	push	r17
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	7c 01       	movw	r14, r24
    649c:	c0 e0       	ldi	r28, 0x00	; 0
    649e:	d0 e0       	ldi	r29, 0x00	; 0
    64a0:	00 e0       	ldi	r16, 0x00	; 0
    64a2:	17 c0       	rjmp	.+46     	; 0x64d2 <read_allRegister+0x44>
    64a4:	1c 2f       	mov	r17, r28
    64a6:	17 70       	andi	r17, 0x07	; 7
    64a8:	09 f4       	brne	.+2      	; 0x64ac <read_allRegister+0x1e>
    64aa:	d0 e0       	ldi	r29, 0x00	; 0
    64ac:	d6 95       	lsr	r29
    64ae:	63 e0       	ldi	r22, 0x03	; 3
    64b0:	8c 2f       	mov	r24, r28
    64b2:	59 df       	rcall	.-334    	; 0x6366 <read_Register>
    64b4:	88 23       	and	r24, r24
    64b6:	11 f0       	breq	.+4      	; 0x64bc <read_allRegister+0x2e>
    64b8:	d0 68       	ori	r29, 0x80	; 128
    64ba:	0f 5f       	subi	r16, 0xFF	; 255
    64bc:	17 30       	cpi	r17, 0x07	; 7
    64be:	41 f4       	brne	.+16     	; 0x64d0 <read_allRegister+0x42>
    64c0:	e1 14       	cp	r14, r1
    64c2:	f1 04       	cpc	r15, r1
    64c4:	29 f0       	breq	.+10     	; 0x64d0 <read_allRegister+0x42>
    64c6:	f7 01       	movw	r30, r14
    64c8:	d0 83       	st	Z, r29
    64ca:	c7 01       	movw	r24, r14
    64cc:	01 96       	adiw	r24, 0x01	; 1
    64ce:	7c 01       	movw	r14, r24
    64d0:	cf 5f       	subi	r28, 0xFF	; 255
    64d2:	c0 34       	cpi	r28, 0x40	; 64
    64d4:	38 f3       	brcs	.-50     	; 0x64a4 <read_allRegister+0x16>
    64d6:	80 2f       	mov	r24, r16
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	ff 90       	pop	r15
    64e2:	ef 90       	pop	r14
    64e4:	08 95       	ret

000064e6 <register_onOff>:
    64e6:	cf 93       	push	r28
    64e8:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <registerCount>
    64ec:	89 17       	cp	r24, r25
    64ee:	f0 f4       	brcc	.+60     	; 0x652c <register_onOff+0x46>
    64f0:	c6 2f       	mov	r28, r22
    64f2:	02 df       	rcall	.-508    	; 0x62f8 <regNr_to_moduleBit>
    64f4:	81 11       	cpse	r24, r1
    64f6:	1a c0       	rjmp	.+52     	; 0x652c <register_onOff+0x46>
    64f8:	89 2f       	mov	r24, r25
    64fa:	8f 71       	andi	r24, 0x1F	; 31
    64fc:	92 95       	swap	r25
    64fe:	96 95       	lsr	r25
    6500:	97 70       	andi	r25, 0x07	; 7
    6502:	c0 ff       	sbrs	r28, 0
    6504:	0a c0       	rjmp	.+20     	; 0x651a <register_onOff+0x34>
    6506:	61 e0       	ldi	r22, 0x01	; 1
    6508:	70 e0       	ldi	r23, 0x00	; 0
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <register_onOff+0x2a>
    650c:	66 0f       	add	r22, r22
    650e:	77 1f       	adc	r23, r23
    6510:	9a 95       	dec	r25
    6512:	e2 f7       	brpl	.-8      	; 0x650c <register_onOff+0x26>
    6514:	0e 94 84 13 	call	0x2708	; 0x2708 <pipe_on>
    6518:	09 c0       	rjmp	.+18     	; 0x652c <register_onOff+0x46>
    651a:	61 e0       	ldi	r22, 0x01	; 1
    651c:	70 e0       	ldi	r23, 0x00	; 0
    651e:	02 c0       	rjmp	.+4      	; 0x6524 <register_onOff+0x3e>
    6520:	66 0f       	add	r22, r22
    6522:	77 1f       	adc	r23, r23
    6524:	9a 95       	dec	r25
    6526:	e2 f7       	brpl	.-8      	; 0x6520 <register_onOff+0x3a>
    6528:	0e 94 93 13 	call	0x2726	; 0x2726 <pipe_off>
    652c:	cf 91       	pop	r28
    652e:	08 95       	ret

00006530 <midi_RegisterMatchProgram>:
		eeprom_UpdateProg();
	}
	return result;
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
    6530:	ff 92       	push	r15
    6532:	0f 93       	push	r16
    6534:	1f 93       	push	r17
    6536:	cf 93       	push	r28
    6538:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	8c 01       	movw	r16, r24
    653e:	00 0f       	add	r16, r16
    6540:	11 1f       	adc	r17, r17
    6542:	88 0f       	add	r24, r24
    6544:	99 1f       	adc	r25, r25
    6546:	88 0f       	add	r24, r24
    6548:	99 1f       	adc	r25, r25
    654a:	88 0f       	add	r24, r24
    654c:	99 1f       	adc	r25, r25
    654e:	08 0f       	add	r16, r24
    6550:	19 1f       	adc	r17, r25
    6552:	00 57       	subi	r16, 0x70	; 112
    6554:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    6556:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    6558:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    655a:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    655c:	14 c0       	rjmp	.+40     	; 0x6586 <midi_RegisterMatchProgram+0x56>
		if ((i & 0x07) == 0) {
    655e:	9c 2f       	mov	r25, r28
    6560:	97 70       	andi	r25, 0x07	; 7
    6562:	21 f4       	brne	.+8      	; 0x656c <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    6564:	f8 01       	movw	r30, r16
    6566:	d0 81       	ld	r29, Z
    6568:	0f 5f       	subi	r16, 0xFF	; 255
    656a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    656c:	8c 2f       	mov	r24, r28
    656e:	43 df       	rcall	.-378    	; 0x63f6 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    6570:	d0 ff       	sbrs	r29, 0
    6572:	03 c0       	rjmp	.+6      	; 0x657a <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
    6574:	81 fd       	sbrc	r24, 1
    6576:	05 c0       	rjmp	.+10     	; 0x6582 <midi_RegisterMatchProgram+0x52>
    6578:	0c c0       	rjmp	.+24     	; 0x6592 <midi_RegisterMatchProgram+0x62>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
    657a:	81 fd       	sbrc	r24, 1
    657c:	0c c0       	rjmp	.+24     	; 0x6596 <midi_RegisterMatchProgram+0x66>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg & REGISTER_READ_HWIN) {
    657e:	80 fd       	sbrc	r24, 0
				// is set by HW
				result++; // inc return val
    6580:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    6582:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    6584:	cf 5f       	subi	r28, 0xFF	; 255
    6586:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <registerCount>
    658a:	c9 17       	cp	r28, r25
    658c:	40 f3       	brcs	.-48     	; 0x655e <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    658e:	8f 2d       	mov	r24, r15
    6590:	03 c0       	rjmp	.+6      	; 0x6598 <midi_RegisterMatchProgram+0x68>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    6592:	8f ef       	ldi	r24, 0xFF	; 255
    6594:	01 c0       	rjmp	.+2      	; 0x6598 <midi_RegisterMatchProgram+0x68>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    6596:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	0f 91       	pop	r16
    65a0:	ff 90       	pop	r15
    65a2:	08 95       	ret

000065a4 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	fc 01       	movw	r30, r24
    65a8:	ee 0f       	add	r30, r30
    65aa:	ff 1f       	adc	r31, r31
    65ac:	88 0f       	add	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	88 0f       	add	r24, r24
    65b2:	99 1f       	adc	r25, r25
    65b4:	88 0f       	add	r24, r24
    65b6:	99 1f       	adc	r25, r25
    65b8:	e8 0f       	add	r30, r24
    65ba:	f9 1f       	adc	r31, r25
    65bc:	e0 57       	subi	r30, 0x70	; 112
    65be:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    65c0:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    65c2:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    65c4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    65c6:	09 c0       	rjmp	.+18     	; 0x65da <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    65c8:	39 2f       	mov	r19, r25
    65ca:	37 70       	andi	r19, 0x07	; 7
    65cc:	11 f4       	brne	.+4      	; 0x65d2 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    65ce:	20 81       	ld	r18, Z
    65d0:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    65d2:	20 fd       	sbrc	r18, 0
			result++;
    65d4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    65d6:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    65d8:	9f 5f       	subi	r25, 0xFF	; 255
    65da:	30 91 38 08 	lds	r19, 0x0838	; 0x800838 <registerCount>
    65de:	93 17       	cp	r25, r19
    65e0:	98 f3       	brcs	.-26     	; 0x65c8 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    65e2:	08 95       	ret

000065e4 <midiSendRegOn>:

void midiSendRegOn(uint8_t regNr){
    65e4:	cf 93       	push	r28
	if ((midi_ccReg.ccOutRegOn <= REGISTER_MAX_CC) && (midiThrough.OutChannel <= MIDI_CHANNEL_16)){
    65e6:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <midi_ccReg+0x2>
    65ea:	99 23       	and	r25, r25
    65ec:	7c f0       	brlt	.+30     	; 0x660c <midiSendRegOn+0x28>
    65ee:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    65f2:	60 31       	cpi	r22, 0x10	; 16
    65f4:	58 f4       	brcc	.+22     	; 0x660c <midiSendRegOn+0x28>
    65f6:	c8 2f       	mov	r28, r24
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    65f8:	80 eb       	ldi	r24, 0xB0	; 176
    65fa:	0e 94 67 3b 	call	0x76ce	; 0x76ce <serial1MIDISendCmd>
		serial1MIDISendData(midi_ccReg.ccOutRegOn);
    65fe:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <midi_ccReg+0x2>
    6602:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <serial1MIDISendData>
		serial1MIDISendData(regNr);
    6606:	8c 2f       	mov	r24, r28
    6608:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <serial1MIDISendData>
	}
}
    660c:	cf 91       	pop	r28
    660e:	08 95       	ret

00006610 <midiSendRegOff>:

void midiSendRegOff(uint8_t regNr){
    6610:	cf 93       	push	r28
	if ((midi_ccReg.ccOutRegOff <= REGISTER_MAX_CC) && (midiThrough.OutChannel <= MIDI_CHANNEL_16)){
    6612:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <midi_ccReg+0x3>
    6616:	99 23       	and	r25, r25
    6618:	7c f0       	brlt	.+30     	; 0x6638 <midiSendRegOff+0x28>
    661a:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    661e:	60 31       	cpi	r22, 0x10	; 16
    6620:	58 f4       	brcc	.+22     	; 0x6638 <midiSendRegOff+0x28>
    6622:	c8 2f       	mov	r28, r24
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    6624:	80 eb       	ldi	r24, 0xB0	; 176
    6626:	0e 94 67 3b 	call	0x76ce	; 0x76ce <serial1MIDISendCmd>
		serial1MIDISendData(midi_ccReg.ccOutRegOff);
    662a:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <midi_ccReg+0x3>
    662e:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <serial1MIDISendData>
		serial1MIDISendData(regNr);
    6632:	8c 2f       	mov	r24, r28
    6634:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <serial1MIDISendData>
	}
}
    6638:	cf 91       	pop	r28
    663a:	08 95       	ret

0000663c <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    663c:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <prog_Display>
    6640:	98 17       	cp	r25, r24
    6642:	29 f0       	breq	.+10     	; 0x664e <prog_set+0x12>
		prog_Display = prog;
    6644:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <prog_Display>
		prog_UpdDisplay = TRUE;
    6648:	8f ef       	ldi	r24, 0xFF	; 255
    664a:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <prog_UpdDisplay>
    664e:	08 95       	ret

00006650 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    6650:	bf 92       	push	r11
    6652:	cf 92       	push	r12
    6654:	df 92       	push	r13
    6656:	ef 92       	push	r14
    6658:	ff 92       	push	r15
    665a:	0f 93       	push	r16
    665c:	1f 93       	push	r17
    665e:	cf 93       	push	r28
    6660:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    6662:	80 34       	cpi	r24, 0x40	; 64
    6664:	08 f0       	brcs	.+2      	; 0x6668 <program_toRegister+0x18>
    6666:	41 c0       	rjmp	.+130    	; 0x66ea <program_toRegister+0x9a>
    6668:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    666a:	e8 df       	rcall	.-48     	; 0x663c <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    666c:	f1 2c       	mov	r15, r1
    666e:	f7 01       	movw	r30, r14
    6670:	ee 0f       	add	r30, r30
    6672:	ff 1f       	adc	r31, r31
    6674:	c7 01       	movw	r24, r14
    6676:	88 0f       	add	r24, r24
    6678:	99 1f       	adc	r25, r25
    667a:	88 0f       	add	r24, r24
    667c:	99 1f       	adc	r25, r25
    667e:	88 0f       	add	r24, r24
    6680:	99 1f       	adc	r25, r25
    6682:	e8 0f       	add	r30, r24
    6684:	f9 1f       	adc	r31, r25
    6686:	e0 57       	subi	r30, 0x70	; 112
    6688:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    668a:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    668c:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    668e:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6690:	18 c0       	rjmp	.+48     	; 0x66c2 <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    6692:	6f 01       	movw	r12, r30
    6694:	8f ef       	ldi	r24, 0xFF	; 255
    6696:	c8 1a       	sub	r12, r24
    6698:	d8 0a       	sbc	r13, r24
    669a:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    669c:	d0 e0       	ldi	r29, 0x00	; 0
    669e:	0d c0       	rjmp	.+26     	; 0x66ba <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    66a0:	8c 2f       	mov	r24, r28
    66a2:	81 70       	andi	r24, 0x01	; 1
    66a4:	c0 fd       	sbrc	r28, 0
					result++;
    66a6:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    66a8:	61 e0       	ldi	r22, 0x01	; 1
    66aa:	81 11       	cpse	r24, r1
    66ac:	01 c0       	rjmp	.+2      	; 0x66b0 <program_toRegister+0x60>
    66ae:	60 e0       	ldi	r22, 0x00	; 0
    66b0:	81 2f       	mov	r24, r17
    66b2:	19 df       	rcall	.-462    	; 0x64e6 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    66b4:	c6 95       	lsr	r28
				regNr++;
    66b6:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    66b8:	df 5f       	subi	r29, 0xFF	; 255
    66ba:	d8 30       	cpi	r29, 0x08	; 8
    66bc:	88 f3       	brcs	.-30     	; 0x66a0 <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    66be:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    66c0:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    66c2:	87 e0       	ldi	r24, 0x07	; 7
    66c4:	8b 15       	cp	r24, r11
    66c6:	28 f7       	brcc	.-54     	; 0x6692 <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    66c8:	f7 01       	movw	r30, r14
    66ca:	ee 0f       	add	r30, r30
    66cc:	ff 1f       	adc	r31, r31
    66ce:	ee 0c       	add	r14, r14
    66d0:	ff 1c       	adc	r15, r15
    66d2:	ee 0c       	add	r14, r14
    66d4:	ff 1c       	adc	r15, r15
    66d6:	ee 0c       	add	r14, r14
    66d8:	ff 1c       	adc	r15, r15
    66da:	ee 0d       	add	r30, r14
    66dc:	ff 1d       	adc	r31, r15
    66de:	e0 57       	subi	r30, 0x70	; 112
    66e0:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    66e2:	80 85       	ldd	r24, Z+8	; 0x08
    66e4:	91 85       	ldd	r25, Z+9	; 0x09
    66e6:	63 dd       	rcall	.-1338   	; 0x61ae <setAllCouplers>
    66e8:	01 c0       	rjmp	.+2      	; 0x66ec <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    66ea:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    66ec:	80 2f       	mov	r24, r16
    66ee:	df 91       	pop	r29
    66f0:	cf 91       	pop	r28
    66f2:	1f 91       	pop	r17
    66f4:	0f 91       	pop	r16
    66f6:	ff 90       	pop	r15
    66f8:	ef 90       	pop	r14
    66fa:	df 90       	pop	r13
    66fc:	cf 90       	pop	r12
    66fe:	bf 90       	pop	r11
    6700:	08 95       	ret

00006702 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    6702:	cf 93       	push	r28
    6704:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6706:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <midi_Setting+0x2>
    670a:	91 11       	cpse	r25, r1
    670c:	14 c0       	rjmp	.+40     	; 0x6736 <midi_ProgramChange+0x34>
    670e:	21 c0       	rjmp	.+66     	; 0x6752 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    6710:	e8 2f       	mov	r30, r24
    6712:	f0 e0       	ldi	r31, 0x00	; 0
    6714:	ee 0f       	add	r30, r30
    6716:	ff 1f       	adc	r31, r31
    6718:	ee 0f       	add	r30, r30
    671a:	ff 1f       	adc	r31, r31
    671c:	e9 0f       	add	r30, r25
    671e:	f1 1d       	adc	r31, r1
    6720:	ee 0f       	add	r30, r30
    6722:	ff 1f       	adc	r31, r31
    6724:	ee 0f       	add	r30, r30
    6726:	ff 1f       	adc	r31, r31
    6728:	e0 5b       	subi	r30, 0xB0	; 176
    672a:	f7 4f       	sbci	r31, 0xF7	; 247
    672c:	20 81       	ld	r18, Z
    672e:	2f 3f       	cpi	r18, 0xFF	; 255
    6730:	39 f4       	brne	.+14     	; 0x6740 <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    6732:	9f 5f       	subi	r25, 0xFF	; 255
    6734:	01 c0       	rjmp	.+2      	; 0x6738 <midi_ProgramChange+0x36>
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	94 30       	cpi	r25, 0x04	; 4
    673a:	50 f3       	brcs	.-44     	; 0x6710 <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    673c:	80 e0       	ldi	r24, 0x00	; 0
    673e:	01 c0       	rjmp	.+2      	; 0x6742 <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    6740:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    6742:	8f 3f       	cpi	r24, 0xFF	; 255
    6744:	31 f4       	brne	.+12     	; 0x6752 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6746:	8c 2f       	mov	r24, r28
    6748:	83 df       	rcall	.-250    	; 0x6650 <program_toRegister>
			prog_set(program);
    674a:	8c 2f       	mov	r24, r28
    674c:	77 df       	rcall	.-274    	; 0x663c <prog_set>
			midiLastProgram = program;
    674e:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <midiLastProgram>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6752:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    6756:	6f 3f       	cpi	r22, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISendCmd(MIDI_PRGCHG, midiThrough.OutChannel);
    6758:	21 f0       	breq	.+8      	; 0x6762 <midi_ProgramChange+0x60>
    675a:	80 ec       	ldi	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISendData(program);
    675c:	b8 d7       	rcall	.+3952   	; 0x76ce <serial1MIDISendCmd>
    675e:	8c 2f       	mov	r24, r28
    6760:	cc d7       	rcall	.+3992   	; 0x76fa <serial1MIDISendData>
		}
	//} V 0.73 send program change to "thru" out always
}
    6762:	cf 91       	pop	r28
    6764:	08 95       	ret

00006766 <midi_resetRegisters>:


void midi_resetRegisters(){
    6766:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    6768:	c0 e0       	ldi	r28, 0x00	; 0
    676a:	06 c0       	rjmp	.+12     	; 0x6778 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    676c:	8f ef       	ldi	r24, 0xFF	; 255
    676e:	66 df       	rcall	.-308    	; 0x663c <prog_set>
		register_onOff(i,REGISTER_OFF);
    6770:	60 e0       	ldi	r22, 0x00	; 0
    6772:	8c 2f       	mov	r24, r28
    6774:	b8 de       	rcall	.-656    	; 0x64e6 <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    6776:	cf 5f       	subi	r28, 0xFF	; 255
    6778:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <registerCount>
    677c:	c8 17       	cp	r28, r24
    677e:	b0 f3       	brcs	.-20     	; 0x676c <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    6780:	cf 91       	pop	r28
    6782:	08 95       	ret

00006784 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    6784:	0f 93       	push	r16
    6786:	1f 93       	push	r17
    6788:	cf 93       	push	r28
    678a:	df 93       	push	r29
    678c:	c8 2f       	mov	r28, r24
    678e:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	// V0.76 reset register ouptu first
	midi_resetRegisters();
    6790:	ea df       	rcall	.-44     	; 0x6766 <midi_resetRegisters>
	module_WaitOutputInput2Cycles(); // now register read input is HW register only
    6792:	0e 94 c1 10 	call	0x2182	; 0x2182 <module_WaitOutputInput2Cycles>
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    6796:	c0 34       	cpi	r28, 0x40	; 64
    6798:	90 f4       	brcc	.+36     	; 0x67be <register_toProgram+0x3a>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    679a:	2c 2f       	mov	r18, r28
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	c9 01       	movw	r24, r18
    67a0:	88 0f       	add	r24, r24
    67a2:	99 1f       	adc	r25, r25
    67a4:	22 0f       	add	r18, r18
    67a6:	33 1f       	adc	r19, r19
    67a8:	22 0f       	add	r18, r18
    67aa:	33 1f       	adc	r19, r19
    67ac:	22 0f       	add	r18, r18
    67ae:	33 1f       	adc	r19, r19
    67b0:	82 0f       	add	r24, r18
    67b2:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    67b4:	80 57       	subi	r24, 0x70	; 112
    67b6:	96 4f       	sbci	r25, 0xF6	; 246
    67b8:	6a de       	rcall	.-812    	; 0x648e <read_allRegister>
    67ba:	18 2f       	mov	r17, r24
    67bc:	01 c0       	rjmp	.+2      	; 0x67c0 <register_toProgram+0x3c>
	}
	programMap[program].couplers = getAllCouplers().wordval;
    67be:	10 e0       	ldi	r17, 0x00	; 0
    67c0:	d0 e0       	ldi	r29, 0x00	; 0
    67c2:	dd dc       	rcall	.-1606   	; 0x617e <getAllCouplers>
    67c4:	9e 01       	movw	r18, r28
    67c6:	22 0f       	add	r18, r18
    67c8:	33 1f       	adc	r19, r19
    67ca:	cc 0f       	add	r28, r28
    67cc:	dd 1f       	adc	r29, r29
    67ce:	cc 0f       	add	r28, r28
    67d0:	dd 1f       	adc	r29, r29
    67d2:	cc 0f       	add	r28, r28
    67d4:	dd 1f       	adc	r29, r29
    67d6:	c2 0f       	add	r28, r18
    67d8:	d3 1f       	adc	r29, r19
    67da:	c0 57       	subi	r28, 0x70	; 112
    67dc:	d6 4f       	sbci	r29, 0xF6	; 246
    67de:	99 87       	std	Y+9, r25	; 0x09
    67e0:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    67e2:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    67e4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <eeprom_UpdateProg>
	}
	return result;
}
    67e8:	81 2f       	mov	r24, r17
    67ea:	df 91       	pop	r29
    67ec:	cf 91       	pop	r28
    67ee:	1f 91       	pop	r17
    67f0:	0f 91       	pop	r16
    67f2:	08 95       	ret

000067f4 <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display <= PROGR_MAX) {
    67f4:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    67f8:	80 34       	cpi	r24, 0x40	; 64
    67fa:	c8 f4       	brcc	.+50     	; 0x682e <prog_toLcd+0x3a>
		lcd_putc('P');
    67fc:	80 e5       	ldi	r24, 0x50	; 80
    67fe:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		lcd_putc('-');
    6802:	8d e2       	ldi	r24, 0x2D	; 45
    6804:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    6808:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    680c:	86 95       	lsr	r24
    680e:	86 95       	lsr	r24
    6810:	86 95       	lsr	r24
    6812:	87 70       	andi	r24, 0x07	; 7
    6814:	8f 5b       	subi	r24, 0xBF	; 191
    6816:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    681a:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <prog_Display>
    681e:	87 70       	andi	r24, 0x07	; 7
    6820:	8f 5c       	subi	r24, 0xCF	; 207
    6822:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		lcd_putc(' ');
    6826:	80 e2       	ldi	r24, 0x20	; 32
    6828:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <lcd_putc>
    682c:	08 95       	ret
	} else {
		lcd_blank(5);
    682e:	85 e0       	ldi	r24, 0x05	; 5
    6830:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <lcd_blank>
    6834:	08 95       	ret

00006836 <init_RegOut>:
RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
	{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9},
	{0,' ',REGISTER_NONE,REGISTER_NONE},{0,' ',REGISTER_NONE,REGISTER_NONE}}; // default values, can be configured

void init_RegOut(){
	if (eeprom_ReadRegOut() == EE_LOAD_ERROR) {
    6836:	0e 94 ce 0c 	call	0x199c	; 0x199c <eeprom_ReadRegOut>
    683a:	8f 3f       	cpi	r24, 0xFF	; 255
    683c:	31 f4       	brne	.+12     	; 0x684a <init_RegOut+0x14>
		// load some default values for my organ -> alredy done in array declaration
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
    683e:	40 e0       	ldi	r20, 0x00	; 0
    6840:	50 e0       	ldi	r21, 0x00	; 0
    6842:	69 e0       	ldi	r22, 0x09	; 9
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <log_putError>
    684a:	08 95       	ret

0000684c <reg_toLCD>:
}

void reg_toLCD(uint8_t readHWonly){
    684c:	ef 92       	push	r14
    684e:	ff 92       	push	r15
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	f8 2e       	mov	r15, r24
	// lcd output all register as short or long lines grouped in manuals
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    685a:	e1 2c       	mov	r14, r1
    685c:	70 c0       	rjmp	.+224    	; 0x693e <reg_toLCD+0xf2>
		lcd_goto(reg_Out[i].cursor);
    685e:	0e 2d       	mov	r16, r14
    6860:	10 e0       	ldi	r17, 0x00	; 0
    6862:	e8 01       	movw	r28, r16
    6864:	cc 0f       	add	r28, r28
    6866:	dd 1f       	adc	r29, r29
    6868:	cc 0f       	add	r28, r28
    686a:	dd 1f       	adc	r29, r29
    686c:	c0 50       	subi	r28, 0x00	; 0
    686e:	de 4f       	sbci	r29, 0xFE	; 254
    6870:	88 81       	ld	r24, Y
    6872:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    6876:	89 81       	ldd	r24, Y+1	; 0x01
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    6878:	9f ed       	ldi	r25, 0xDF	; 223
    687a:	98 0f       	add	r25, r24
    687c:	9f 35       	cpi	r25, 0x5F	; 95
    687e:	28 f4       	brcc	.+10     	; 0x688a <reg_toLCD+0x3e>
			// only if valid char
			lcd_putc(myChar);
    6880:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
			lcd_putc(' ');
    6884:	80 e2       	ldi	r24, 0x20	; 32
    6886:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    688a:	f8 01       	movw	r30, r16
    688c:	ee 0f       	add	r30, r30
    688e:	ff 1f       	adc	r31, r31
    6890:	ee 0f       	add	r30, r30
    6892:	ff 1f       	adc	r31, r31
    6894:	e0 50       	subi	r30, 0x00	; 0
    6896:	fe 4f       	sbci	r31, 0xFE	; 254
    6898:	c2 81       	ldd	r28, Z+2	; 0x02
		if (reg == REGISTER_NONE) {
    689a:	cf 3f       	cpi	r28, 0xFF	; 255
    689c:	09 f0       	breq	.+2      	; 0x68a0 <reg_toLCD+0x54>
    689e:	40 c0       	rjmp	.+128    	; 0x6920 <reg_toLCD+0xd4>
    68a0:	52 c0       	rjmp	.+164    	; 0x6946 <reg_toLCD+0xfa>
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
			if (reg == reg_Out[i].regEnd) {
    68a2:	c8 13       	cpse	r28, r24
    68a4:	19 c0       	rjmp	.+50     	; 0x68d8 <reg_toLCD+0x8c>
				// only one register left for out
				if (readHWonly == TRUE) {
    68a6:	8f ef       	ldi	r24, 0xFF	; 255
    68a8:	f8 12       	cpse	r15, r24
    68aa:	0b c0       	rjmp	.+22     	; 0x68c2 <reg_toLCD+0x76>
					lcd_putc(LCD_CHAR_REG_OFF+ ((get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0));
    68ac:	8c 2f       	mov	r24, r28
    68ae:	a3 dd       	rcall	.-1210   	; 0x63f6 <get_RegisterStatus>
    68b0:	80 ff       	sbrs	r24, 0
    68b2:	02 c0       	rjmp	.+4      	; 0x68b8 <reg_toLCD+0x6c>
    68b4:	8b e0       	ldi	r24, 0x0B	; 11
    68b6:	01 c0       	rjmp	.+2      	; 0x68ba <reg_toLCD+0x6e>
    68b8:	8a e0       	ldi	r24, 0x0A	; 10
    68ba:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    68be:	dc 2f       	mov	r29, r28
    68c0:	2d c0       	rjmp	.+90     	; 0x691c <reg_toLCD+0xd0>
				} else {
					lcd_putc(LCD_CHAR_REG_OFF+  ((get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0));
    68c2:	8c 2f       	mov	r24, r28
    68c4:	98 dd       	rcall	.-1232   	; 0x63f6 <get_RegisterStatus>
    68c6:	81 ff       	sbrs	r24, 1
    68c8:	02 c0       	rjmp	.+4      	; 0x68ce <reg_toLCD+0x82>
    68ca:	8b e0       	ldi	r24, 0x0B	; 11
    68cc:	01 c0       	rjmp	.+2      	; 0x68d0 <reg_toLCD+0x84>
    68ce:	8a e0       	ldi	r24, 0x0A	; 10
    68d0:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    68d4:	dc 2f       	mov	r29, r28
    68d6:	22 c0       	rjmp	.+68     	; 0x691c <reg_toLCD+0xd0>
				}
			} else {
				// at least 2 register left
				if (readHWonly == TRUE) {
    68d8:	8f ef       	ldi	r24, 0xFF	; 255
    68da:	f8 12       	cpse	r15, r24
    68dc:	11 c0       	rjmp	.+34     	; 0x6900 <reg_toLCD+0xb4>
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_HWIN) ? 2 : 0;
    68de:	d1 e0       	ldi	r29, 0x01	; 1
    68e0:	dc 0f       	add	r29, r28
    68e2:	8c 2f       	mov	r24, r28
    68e4:	88 dd       	rcall	.-1264   	; 0x63f6 <get_RegisterStatus>
    68e6:	80 ff       	sbrs	r24, 0
    68e8:	02 c0       	rjmp	.+4      	; 0x68ee <reg_toLCD+0xa2>
    68ea:	c2 e0       	ldi	r28, 0x02	; 2
    68ec:	01 c0       	rjmp	.+2      	; 0x68f0 <reg_toLCD+0xa4>
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0;
    68ee:	c0 e0       	ldi	r28, 0x00	; 0
    68f0:	8d 2f       	mov	r24, r29
    68f2:	81 dd       	rcall	.-1278   	; 0x63f6 <get_RegisterStatus>
    68f4:	81 70       	andi	r24, 0x01	; 1
    68f6:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    68f8:	84 5f       	subi	r24, 0xF4	; 244
    68fa:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
				} else {
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_SWOUT) ? 2 : 0;
    68fe:	0e c0       	rjmp	.+28     	; 0x691c <reg_toLCD+0xd0>
    6900:	d1 e0       	ldi	r29, 0x01	; 1
    6902:	dc 0f       	add	r29, r28
    6904:	8c 2f       	mov	r24, r28
    6906:	77 dd       	rcall	.-1298   	; 0x63f6 <get_RegisterStatus>
    6908:	c8 2f       	mov	r28, r24
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0;
    690a:	c2 70       	andi	r28, 0x02	; 2
    690c:	8d 2f       	mov	r24, r29
    690e:	73 dd       	rcall	.-1306   	; 0x63f6 <get_RegisterStatus>
    6910:	86 95       	lsr	r24
    6912:	81 70       	andi	r24, 0x01	; 1
    6914:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6916:	84 5f       	subi	r24, 0xF4	; 244
    6918:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
				}
			}
			reg++;
    691c:	c1 e0       	ldi	r28, 0x01	; 1
    691e:	cd 0f       	add	r28, r29
		}
		uint8_t reg = reg_Out[i].regStart;
		if (reg == REGISTER_NONE) {
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
    6920:	f8 01       	movw	r30, r16
    6922:	ee 0f       	add	r30, r30
    6924:	ff 1f       	adc	r31, r31
    6926:	ee 0f       	add	r30, r30
    6928:	ff 1f       	adc	r31, r31
    692a:	e0 50       	subi	r30, 0x00	; 0
    692c:	fe 4f       	sbci	r31, 0xFE	; 254
    692e:	83 81       	ldd	r24, Z+3	; 0x03
    6930:	8c 17       	cp	r24, r28
    6932:	08 f0       	brcs	.+2      	; 0x6936 <reg_toLCD+0xea>
    6934:	b6 cf       	rjmp	.-148    	; 0x68a2 <reg_toLCD+0x56>
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
				}
			}
			reg++;
		}
		lcd_putc(' ');
    6936:	80 e2       	ldi	r24, 0x20	; 32
    6938:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
}

void reg_toLCD(uint8_t readHWonly){
	// lcd output all register as short or long lines grouped in manuals
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    693c:	e3 94       	inc	r14
    693e:	87 e0       	ldi	r24, 0x07	; 7
    6940:	8e 15       	cp	r24, r14
    6942:	08 f0       	brcs	.+2      	; 0x6946 <reg_toLCD+0xfa>
    6944:	8c cf       	rjmp	.-232    	; 0x685e <reg_toLCD+0x12>
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    6946:	df 91       	pop	r29
    6948:	cf 91       	pop	r28
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	ff 90       	pop	r15
    6950:	ef 90       	pop	r14
    6952:	08 95       	ret

00006954 <reg_ClearOnLCD>:

void reg_ClearOnLCD(){
    6954:	1f 93       	push	r17
    6956:	cf 93       	push	r28
    6958:	df 93       	push	r29
	// clear area that displays register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    695a:	10 e0       	ldi	r17, 0x00	; 0
    695c:	1e c0       	rjmp	.+60     	; 0x699a <reg_ClearOnLCD+0x46>
		lcd_goto(reg_Out[i].cursor);
    695e:	c1 2f       	mov	r28, r17
    6960:	d0 e0       	ldi	r29, 0x00	; 0
    6962:	cc 0f       	add	r28, r28
    6964:	dd 1f       	adc	r29, r29
    6966:	cc 0f       	add	r28, r28
    6968:	dd 1f       	adc	r29, r29
    696a:	c0 50       	subi	r28, 0x00	; 0
    696c:	de 4f       	sbci	r29, 0xFE	; 254
    696e:	88 81       	ld	r24, Y
    6970:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    6974:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    6976:	8b 81       	ldd	r24, Y+3	; 0x03
    6978:	9a 81       	ldd	r25, Y+2	; 0x02
    697a:	89 1b       	sub	r24, r25
    697c:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	01 96       	adiw	r24, 0x01	; 1
    6982:	95 95       	asr	r25
    6984:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    6986:	21 52       	subi	r18, 0x21	; 33
    6988:	2f 35       	cpi	r18, 0x5F	; 95
    698a:	10 f4       	brcc	.+4      	; 0x6990 <reg_ClearOnLCD+0x3c>
    698c:	22 e0       	ldi	r18, 0x02	; 2
    698e:	01 c0       	rjmp	.+2      	; 0x6992 <reg_ClearOnLCD+0x3e>
    6990:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    6992:	82 0f       	add	r24, r18
    6994:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <lcd_blank>
	}
}

void reg_ClearOnLCD(){
	// clear area that displays register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6998:	1f 5f       	subi	r17, 0xFF	; 255
    699a:	18 30       	cpi	r17, 0x08	; 8
    699c:	00 f3       	brcs	.-64     	; 0x695e <reg_ClearOnLCD+0xa>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    699e:	df 91       	pop	r29
    69a0:	cf 91       	pop	r28
    69a2:	1f 91       	pop	r17
    69a4:	08 95       	ret

000069a6 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    69a6:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    69a8:	e0 e5       	ldi	r30, 0x50	; 80
    69aa:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    69ac:	07 c0       	rjmp	.+14     	; 0x69bc <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    69ae:	8f ef       	ldi	r24, 0xFF	; 255
    69b0:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    69b2:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    69b4:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    69b6:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    69b8:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    69ba:	91 50       	subi	r25, 0x01	; 1
    69bc:	91 11       	cpse	r25, r1
    69be:	f7 cf       	rjmp	.-18     	; 0x69ae <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    69c0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_ReadMidiInMap>
    69c4:	8f 3f       	cpi	r24, 0xFF	; 255
    69c6:	01 f5       	brne	.+64     	; 0x6a08 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    69c8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    69cc:	e0 e5       	ldi	r30, 0x50	; 80
    69ce:	f8 e0       	ldi	r31, 0x08	; 8
    69d0:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    69d2:	84 e2       	ldi	r24, 0x24	; 36
    69d4:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    69d6:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    69d8:	98 e3       	ldi	r25, 0x38	; 56
    69da:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    69dc:	21 e0       	ldi	r18, 0x01	; 1
    69de:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    69e0:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    69e2:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    69e4:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    69e6:	22 e0       	ldi	r18, 0x02	; 2
    69e8:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    69ea:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    69ec:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    69ee:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    69f0:	93 e0       	ldi	r25, 0x03	; 3
    69f2:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    69f4:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    69f6:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    69f8:	8e e1       	ldi	r24, 0x1E	; 30
    69fa:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    69fc:	40 e0       	ldi	r20, 0x00	; 0
    69fe:	50 e0       	ldi	r21, 0x00	; 0
    6a00:	61 e0       	ldi	r22, 0x01	; 1
    6a02:	81 e0       	ldi	r24, 0x01	; 1
    6a04:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6a08:	0e 94 02 0c 	call	0x1804	; 0x1804 <eeprom_ReadMidiThrough>
    6a0c:	8f 3f       	cpi	r24, 0xFF	; 255
    6a0e:	51 f4       	brne	.+20     	; 0x6a24 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6a10:	ee e4       	ldi	r30, 0x4E	; 78
    6a12:	f8 e0       	ldi	r31, 0x08	; 8
    6a14:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    6a16:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6a18:	40 e0       	ldi	r20, 0x00	; 0
    6a1a:	50 e0       	ldi	r21, 0x00	; 0
    6a1c:	61 e0       	ldi	r22, 0x01	; 1
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
    6a20:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <log_putError>
    6a24:	08 95       	ret

00006a26 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all midi out
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6a26:	20 e0       	ldi	r18, 0x00	; 0
    6a28:	09 c0       	rjmp	.+18     	; 0x6a3c <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    6a2a:	88 0f       	add	r24, r24
    6a2c:	99 1f       	adc	r25, r25
    6a2e:	fc 01       	movw	r30, r24
    6a30:	e0 5b       	subi	r30, 0xB0	; 176
    6a32:	f6 4f       	sbci	r31, 0xF6	; 246
    6a34:	8f ef       	ldi	r24, 0xFF	; 255
    6a36:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    6a38:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all midi out
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6a3a:	2f 5f       	subi	r18, 0xFF	; 255
    6a3c:	82 2f       	mov	r24, r18
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	00 97       	sbiw	r24, 0x00	; 0
    6a42:	99 f7       	brne	.-26     	; 0x6a2a <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	// try to read from eeprom
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    6a44:	0e 94 a6 0b 	call	0x174c	; 0x174c <eeprom_ReadMidiOutMap>
    6a48:	8f 3f       	cpi	r24, 0xFF	; 255
    6a4a:	b1 f4       	brne	.+44     	; 0x6a78 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6a4c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    6a50:	e0 e5       	ldi	r30, 0x50	; 80
    6a52:	f9 e0       	ldi	r31, 0x09	; 9
    6a54:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    6a56:	91 e0       	ldi	r25, 0x01	; 1
    6a58:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    6a5a:	92 e0       	ldi	r25, 0x02	; 2
    6a5c:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    6a5e:	93 e0       	ldi	r25, 0x03	; 3
    6a60:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    6a62:	e8 e5       	ldi	r30, 0x58	; 88
    6a64:	f9 e0       	ldi	r31, 0x09	; 9
    6a66:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    6a68:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    6a6a:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    6a6c:	40 e0       	ldi	r20, 0x00	; 0
    6a6e:	50 e0       	ldi	r21, 0x00	; 0
    6a70:	62 e0       	ldi	r22, 0x02	; 2
    6a72:	81 e0       	ldi	r24, 0x01	; 1
    6a74:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <log_putError>
    6a78:	08 95       	ret

00006a7a <Manual_to_MidiNote>:
			serial1MIDISendData(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    6a7a:	e8 2f       	mov	r30, r24
	// converts manual and note to midi channel and midi note
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    6a7c:	8f ef       	ldi	r24, 0xFF	; 255
    6a7e:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    6a80:	e4 30       	cpi	r30, 0x04	; 4
    6a82:	50 f4       	brcc	.+20     	; 0x6a98 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    6a84:	f0 e0       	ldi	r31, 0x00	; 0
    6a86:	ee 0f       	add	r30, r30
    6a88:	ff 1f       	adc	r31, r31
    6a8a:	e0 5b       	subi	r30, 0xB0	; 176
    6a8c:	f6 4f       	sbci	r31, 0xF6	; 246
    6a8e:	20 81       	ld	r18, Z
    6a90:	2f 3f       	cpi	r18, 0xFF	; 255
    6a92:	11 f0       	breq	.+4      	; 0x6a98 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    6a94:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    6a96:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    6a98:	08 95       	ret

00006a9a <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6a9a:	70 e0       	ldi	r23, 0x00	; 0
    6a9c:	52 c0       	rjmp	.+164    	; 0x6b42 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    6a9e:	87 2f       	mov	r24, r23
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	24 2f       	mov	r18, r20
    6aa4:	30 e0       	ldi	r19, 0x00	; 0
    6aa6:	f9 01       	movw	r30, r18
    6aa8:	ee 0f       	add	r30, r30
    6aaa:	ff 1f       	adc	r31, r31
    6aac:	df 01       	movw	r26, r30
    6aae:	a2 0f       	add	r26, r18
    6ab0:	b3 1f       	adc	r27, r19
    6ab2:	fc 01       	movw	r30, r24
    6ab4:	ee 0f       	add	r30, r30
    6ab6:	ff 1f       	adc	r31, r31
    6ab8:	e8 0f       	add	r30, r24
    6aba:	f9 1f       	adc	r31, r25
    6abc:	ee 0f       	add	r30, r30
    6abe:	ff 1f       	adc	r31, r31
    6ac0:	ee 0f       	add	r30, r30
    6ac2:	ff 1f       	adc	r31, r31
    6ac4:	ea 0f       	add	r30, r26
    6ac6:	fb 1f       	adc	r31, r27
    6ac8:	e0 5a       	subi	r30, 0xA0	; 160
    6aca:	f6 4f       	sbci	r31, 0xF6	; 246
    6acc:	a0 81       	ld	r26, Z
    6ace:	af 3f       	cpi	r26, 0xFF	; 255
    6ad0:	d9 f0       	breq	.+54     	; 0x6b08 <Midi_updateManualRange+0x6e>
    6ad2:	f9 01       	movw	r30, r18
    6ad4:	ee 0f       	add	r30, r30
    6ad6:	ff 1f       	adc	r31, r31
    6ad8:	e2 0f       	add	r30, r18
    6ada:	f3 1f       	adc	r31, r19
    6adc:	9c 01       	movw	r18, r24
    6ade:	22 0f       	add	r18, r18
    6ae0:	33 1f       	adc	r19, r19
    6ae2:	28 0f       	add	r18, r24
    6ae4:	39 1f       	adc	r19, r25
    6ae6:	22 0f       	add	r18, r18
    6ae8:	33 1f       	adc	r19, r19
    6aea:	22 0f       	add	r18, r18
    6aec:	33 1f       	adc	r19, r19
    6aee:	e2 0f       	add	r30, r18
    6af0:	f3 1f       	adc	r31, r19
    6af2:	e0 5a       	subi	r30, 0xA0	; 160
    6af4:	f6 4f       	sbci	r31, 0xF6	; 246
    6af6:	21 81       	ldd	r18, Z+1	; 0x01
    6af8:	2f 3f       	cpi	r18, 0xFF	; 255
    6afa:	31 f0       	breq	.+12     	; 0x6b08 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6afc:	a6 17       	cp	r26, r22
    6afe:	08 f4       	brcc	.+2      	; 0x6b02 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6b00:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    6b02:	52 17       	cp	r21, r18
    6b04:	08 f4       	brcc	.+2      	; 0x6b08 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    6b06:	52 2f       	mov	r21, r18
				}
			}
			// rangeStart and rangeEnd should have values != 0xFF / 0x00
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6b08:	55 23       	and	r21, r21
    6b0a:	11 f0       	breq	.+4      	; 0x6b10 <Midi_updateManualRange+0x76>
    6b0c:	6f 3f       	cpi	r22, 0xFF	; 255
    6b0e:	49 f4       	brne	.+18     	; 0x6b22 <Midi_updateManualRange+0x88>
				// no, they are not really assigned, then cancel assignement for this range
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6b10:	88 0f       	add	r24, r24
    6b12:	99 1f       	adc	r25, r25
    6b14:	fc 01       	movw	r30, r24
    6b16:	ea 5b       	subi	r30, 0xBA	; 186
    6b18:	f7 4f       	sbci	r31, 0xF7	; 247
    6b1a:	8f ef       	ldi	r24, 0xFF	; 255
    6b1c:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6b1e:	81 83       	std	Z+1, r24	; 0x01
    6b20:	07 c0       	rjmp	.+14     	; 0x6b30 <Midi_updateManualRange+0x96>
			} else {
				// yes, they are assigend, store values
				ManualNoteRange[i].startNote = rangeStart;
    6b22:	88 0f       	add	r24, r24
    6b24:	99 1f       	adc	r25, r25
    6b26:	fc 01       	movw	r30, r24
    6b28:	ea 5b       	subi	r30, 0xBA	; 186
    6b2a:	f7 4f       	sbci	r31, 0xF7	; 247
    6b2c:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6b2e:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6b30:	4f 5f       	subi	r20, 0xFF	; 255
    6b32:	03 c0       	rjmp	.+6      	; 0x6b3a <Midi_updateManualRange+0xa0>
    6b34:	40 e0       	ldi	r20, 0x00	; 0
    6b36:	6f ef       	ldi	r22, 0xFF	; 255
    6b38:	50 e0       	ldi	r21, 0x00	; 0
    6b3a:	44 30       	cpi	r20, 0x04	; 4
    6b3c:	08 f4       	brcc	.+2      	; 0x6b40 <Midi_updateManualRange+0xa6>
    6b3e:	af cf       	rjmp	.-162    	; 0x6a9e <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6b40:	7f 5f       	subi	r23, 0xFF	; 255
    6b42:	74 30       	cpi	r23, 0x04	; 4
    6b44:	b8 f3       	brcs	.-18     	; 0x6b34 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    6b46:	08 95       	ret

00006b48 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6b48:	63 e0       	ldi	r22, 0x03	; 3
    6b4a:	28 c0       	rjmp	.+80     	; 0x6b9c <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6b4c:	86 2f       	mov	r24, r22
    6b4e:	06 2e       	mov	r0, r22
    6b50:	00 0c       	add	r0, r0
    6b52:	99 0b       	sbc	r25, r25
    6b54:	42 2f       	mov	r20, r18
    6b56:	02 2e       	mov	r0, r18
    6b58:	00 0c       	add	r0, r0
    6b5a:	55 0b       	sbc	r21, r21
    6b5c:	fa 01       	movw	r30, r20
    6b5e:	ee 0f       	add	r30, r30
    6b60:	ff 1f       	adc	r31, r31
    6b62:	e4 0f       	add	r30, r20
    6b64:	f5 1f       	adc	r31, r21
    6b66:	ac 01       	movw	r20, r24
    6b68:	44 0f       	add	r20, r20
    6b6a:	55 1f       	adc	r21, r21
    6b6c:	da 01       	movw	r26, r20
    6b6e:	a8 0f       	add	r26, r24
    6b70:	b9 1f       	adc	r27, r25
    6b72:	aa 0f       	add	r26, r26
    6b74:	bb 1f       	adc	r27, r27
    6b76:	aa 0f       	add	r26, r26
    6b78:	bb 1f       	adc	r27, r27
    6b7a:	ae 0f       	add	r26, r30
    6b7c:	bf 1f       	adc	r27, r31
    6b7e:	a0 5a       	subi	r26, 0xA0	; 160
    6b80:	b6 4f       	sbci	r27, 0xF6	; 246
    6b82:	3f ef       	ldi	r19, 0xFF	; 255
    6b84:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    6b86:	11 96       	adiw	r26, 0x01	; 1
    6b88:	3c 93       	st	X, r19
    6b8a:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    6b8c:	fd 01       	movw	r30, r26
    6b8e:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    6b90:	21 50       	subi	r18, 0x01	; 1
    6b92:	01 c0       	rjmp	.+2      	; 0x6b96 <init_Manual2Module+0x4e>
    6b94:	23 e0       	ldi	r18, 0x03	; 3
    6b96:	22 23       	and	r18, r18
    6b98:	cc f6       	brge	.-78     	; 0x6b4c <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6b9a:	61 50       	subi	r22, 0x01	; 1
    6b9c:	66 23       	and	r22, r22
    6b9e:	d4 f7       	brge	.-12     	; 0x6b94 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    6ba0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <eeprom_ReadManualMap>
    6ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    6ba6:	79 f5       	brne	.+94     	; 0x6c06 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    6ba8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    6bac:	40 e0       	ldi	r20, 0x00	; 0
    6bae:	50 e0       	ldi	r21, 0x00	; 0
    6bb0:	63 e0       	ldi	r22, 0x03	; 3
    6bb2:	81 e0       	ldi	r24, 0x01	; 1
    6bb4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    6bb8:	e0 e6       	ldi	r30, 0x60	; 96
    6bba:	f9 e0       	ldi	r31, 0x09	; 9
    6bbc:	84 e2       	ldi	r24, 0x24	; 36
    6bbe:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6bc0:	33 e4       	ldi	r19, 0x43	; 67
    6bc2:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    6bc4:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    6bc6:	24 e4       	ldi	r18, 0x44	; 68
    6bc8:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    6bca:	9b e5       	ldi	r25, 0x5B	; 91
    6bcc:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6bce:	40 e2       	ldi	r20, 0x20	; 32
    6bd0:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    6bd2:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    6bd4:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    6bd6:	40 e4       	ldi	r20, 0x40	; 64
    6bd8:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6bda:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6bdc:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6bde:	40 e6       	ldi	r20, 0x60	; 96
    6be0:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6be2:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    6be4:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    6be6:	30 e8       	ldi	r19, 0x80	; 128
    6be8:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6bea:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6bec:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6bee:	90 ea       	ldi	r25, 0xA0	; 160
    6bf0:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6bf2:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6bf4:	81 e4       	ldi	r24, 0x41	; 65
    6bf6:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6bf8:	80 ec       	ldi	r24, 0xC0	; 192
    6bfa:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6bfc:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6bfe:	8d e1       	ldi	r24, 0x1D	; 29
    6c00:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6c02:	80 ee       	ldi	r24, 0xE0	; 224
    6c04:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    6c06:	49 cf       	rjmp	.-366    	; 0x6a9a <Midi_updateManualRange>
    6c08:	08 95       	ret

00006c0a <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte 9x99 in high byte (MODULE_NOERROR) and or 0xFF (MODULE_ERROR) in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6c0a:	84 30       	cpi	r24, 0x04	; 4
    6c0c:	d8 f4       	brcc	.+54     	; 0x6c44 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	fc 01       	movw	r30, r24
    6c12:	ee 0f       	add	r30, r30
    6c14:	ff 1f       	adc	r31, r31
    6c16:	e8 0f       	add	r30, r24
    6c18:	f9 1f       	adc	r31, r25
    6c1a:	ee 0f       	add	r30, r30
    6c1c:	ff 1f       	adc	r31, r31
    6c1e:	ee 0f       	add	r30, r30
    6c20:	ff 1f       	adc	r31, r31
    6c22:	e0 5a       	subi	r30, 0xA0	; 160
    6c24:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    6c26:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6c28:	20 81       	ld	r18, Z
    6c2a:	62 17       	cp	r22, r18
    6c2c:	40 f0       	brcs	.+16     	; 0x6c3e <manualNote_to_moduleBit+0x34>
    6c2e:	91 81       	ldd	r25, Z+1	; 0x01
    6c30:	96 17       	cp	r25, r22
    6c32:	28 f0       	brcs	.+10     	; 0x6c3e <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6c34:	92 81       	ldd	r25, Z+2	; 0x02
    6c36:	62 1b       	sub	r22, r18
				return (result);
    6c38:	80 e0       	ldi	r24, 0x00	; 0
    6c3a:	96 0f       	add	r25, r22
    6c3c:	08 95       	ret
			}
			pRange++;
    6c3e:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6c40:	81 50       	subi	r24, 0x01	; 1
    6c42:	91 f7       	brne	.-28     	; 0x6c28 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    6c44:	8f ef       	ldi	r24, 0xFF	; 255
    6c46:	90 e0       	ldi	r25, 0x00	; 0
}
    6c48:	08 95       	ret

00006c4a <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT (0xFF00)
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6c4a:	70 e0       	ldi	r23, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT (0xFF00)
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6c4c:	e0 e6       	ldi	r30, 0x60	; 96
    6c4e:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6c50:	24 e0       	ldi	r18, 0x04	; 4
    6c52:	18 c0       	rjmp	.+48     	; 0x6c84 <moduleBit_to_manualNote+0x3a>
			if (pRange->startNote != MIDI_NOTE_NONE){
    6c54:	30 81       	ld	r19, Z
    6c56:	3f 3f       	cpi	r19, 0xFF	; 255
    6c58:	99 f0       	breq	.+38     	; 0x6c80 <moduleBit_to_manualNote+0x36>
				// only check if section is valid
				if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    6c5a:	62 81       	ldd	r22, Z+2	; 0x02
    6c5c:	86 17       	cp	r24, r22
    6c5e:	80 f0       	brcs	.+32     	; 0x6c80 <moduleBit_to_manualNote+0x36>
    6c60:	a8 2f       	mov	r26, r24
    6c62:	b0 e0       	ldi	r27, 0x00	; 0
    6c64:	41 81       	ldd	r20, Z+1	; 0x01
    6c66:	50 e0       	ldi	r21, 0x00	; 0
    6c68:	43 1b       	sub	r20, r19
    6c6a:	51 09       	sbc	r21, r1
    6c6c:	46 0f       	add	r20, r22
    6c6e:	51 1d       	adc	r21, r1
    6c70:	4a 17       	cp	r20, r26
    6c72:	5b 07       	cpc	r21, r27
    6c74:	2c f0       	brlt	.+10     	; 0x6c80 <moduleBit_to_manualNote+0x36>
					// found
					result.manual = manual;
					result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6c76:	98 2f       	mov	r25, r24
    6c78:	96 1b       	sub	r25, r22
					return(result);
    6c7a:	87 2f       	mov	r24, r23
    6c7c:	93 0f       	add	r25, r19
    6c7e:	08 95       	ret
				}
			}
			pRange++;
    6c80:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6c82:	21 50       	subi	r18, 0x01	; 1
    6c84:	21 11       	cpse	r18, r1
    6c86:	e6 cf       	rjmp	.-52     	; 0x6c54 <moduleBit_to_manualNote+0xa>
					return(result);
				}
			}
			pRange++;
		}
		manual++;
    6c88:	7f 5f       	subi	r23, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6c8a:	75 30       	cpi	r23, 0x05	; 5
    6c8c:	08 f3       	brcs	.-62     	; 0x6c50 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	return (result);
    6c8e:	8f ef       	ldi	r24, 0xFF	; 255
    6c90:	90 e0       	ldi	r25, 0x00	; 0
}
    6c92:	08 95       	ret

00006c94 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6c94:	ef 92       	push	r14
    6c96:	ff 92       	push	r15
    6c98:	0f 93       	push	r16
    6c9a:	1f 93       	push	r17
    6c9c:	cf 93       	push	r28
    6c9e:	df 93       	push	r29
    6ca0:	c8 2f       	mov	r28, r24
    6ca2:	06 2f       	mov	r16, r22
    6ca4:	d4 2f       	mov	r29, r20
	// turns on/off note (i.e. mosfet) an a certain manual
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    6ca6:	b1 df       	rcall	.-158    	; 0x6c0a <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    6ca8:	49 2f       	mov	r20, r25
    6caa:	42 95       	swap	r20
    6cac:	46 95       	lsr	r20
    6cae:	47 70       	andi	r20, 0x07	; 7
    6cb0:	21 e0       	ldi	r18, 0x01	; 1
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	79 01       	movw	r14, r18
    6cb6:	02 c0       	rjmp	.+4      	; 0x6cbc <manual_NoteOnOff+0x28>
    6cb8:	ee 0c       	add	r14, r14
    6cba:	ff 1c       	adc	r15, r15
    6cbc:	4a 95       	dec	r20
    6cbe:	e2 f7       	brpl	.-8      	; 0x6cb8 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6cc0:	19 2f       	mov	r17, r25
    6cc2:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6cc4:	81 11       	cpse	r24, r1
    6cc6:	1a c0       	rjmp	.+52     	; 0x6cfc <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    6cc8:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <pipe_Module+0x1>
    6ccc:	8e 21       	and	r24, r14
    6cce:	59 f4       	brne	.+22     	; 0x6ce6 <manual_NoteOnOff+0x52>
    6cd0:	dd 23       	and	r29, r29
    6cd2:	4c f0       	brlt	.+18     	; 0x6ce6 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6cd4:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    6cd6:	d1 30       	cpi	r29, 0x01	; 1
    6cd8:	11 f4       	brne	.+4      	; 0x6cde <manual_NoteOnOff+0x4a>
    6cda:	90 e2       	ldi	r25, 0x20	; 32
    6cdc:	01 c0       	rjmp	.+2      	; 0x6ce0 <manual_NoteOnOff+0x4c>
    6cde:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6ce0:	8e 2d       	mov	r24, r14
    6ce2:	91 2b       	or	r25, r17
    6ce4:	d7 d9       	rcall	.-3154   	; 0x6094 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6ce6:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    6ce8:	29 f4       	brne	.+10     	; 0x6cf4 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    6cea:	6e 2d       	mov	r22, r14
    6cec:	81 2f       	mov	r24, r17
    6cee:	0e 94 93 13 	call	0x2726	; 0x2726 <pipe_off>
    6cf2:	04 c0       	rjmp	.+8      	; 0x6cfc <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6cf4:	6e 2d       	mov	r22, r14
    6cf6:	81 2f       	mov	r24, r17
    6cf8:	0e 94 84 13 	call	0x2708	; 0x2708 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6cfc:	ec 2f       	mov	r30, r28
    6cfe:	f0 e0       	ldi	r31, 0x00	; 0
    6d00:	ee 0f       	add	r30, r30
    6d02:	ff 1f       	adc	r31, r31
    6d04:	e0 5b       	subi	r30, 0xB0	; 176
    6d06:	f6 4f       	sbci	r31, 0xF6	; 246
    6d08:	61 81       	ldd	r22, Z+1	; 0x01
    6d0a:	6f 3f       	cpi	r22, 0xFF	; 255
    6d0c:	a1 f0       	breq	.+40     	; 0x6d36 <manual_NoteOnOff+0xa2>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISendCmd(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF),midiOutMap[manual].sw_channel);
    6d0e:	d1 30       	cpi	r29, 0x01	; 1
    6d10:	31 f0       	breq	.+12     	; 0x6d1e <manual_NoteOnOff+0x8a>
    6d12:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_Setting+0x1>
    6d16:	88 23       	and	r24, r24
    6d18:	21 f0       	breq	.+8      	; 0x6d22 <manual_NoteOnOff+0x8e>
    6d1a:	80 e9       	ldi	r24, 0x90	; 144
    6d1c:	03 c0       	rjmp	.+6      	; 0x6d24 <manual_NoteOnOff+0x90>
    6d1e:	80 e9       	ldi	r24, 0x90	; 144
    6d20:	01 c0       	rjmp	.+2      	; 0x6d24 <manual_NoteOnOff+0x90>
    6d22:	80 e8       	ldi	r24, 0x80	; 128
		serial1MIDISendData(note);
    6d24:	d4 d4       	rcall	.+2472   	; 0x76ce <serial1MIDISendCmd>
    6d26:	80 2f       	mov	r24, r16
    6d28:	e8 d4       	rcall	.+2512   	; 0x76fa <serial1MIDISendData>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISendData(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6d2a:	d1 11       	cpse	r29, r1
    6d2c:	02 c0       	rjmp	.+4      	; 0x6d32 <manual_NoteOnOff+0x9e>
    6d2e:	80 e0       	ldi	r24, 0x00	; 0
    6d30:	01 c0       	rjmp	.+2      	; 0x6d34 <manual_NoteOnOff+0xa0>
    6d32:	80 e4       	ldi	r24, 0x40	; 64
    6d34:	e2 d4       	rcall	.+2500   	; 0x76fa <serial1MIDISendData>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    6d36:	df 91       	pop	r29
    6d38:	cf 91       	pop	r28
    6d3a:	1f 91       	pop	r17
    6d3c:	0f 91       	pop	r16
    6d3e:	ff 90       	pop	r15
    6d40:	ef 90       	pop	r14
    6d42:	08 95       	ret

00006d44 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6d44:	bf 92       	push	r11
    6d46:	cf 92       	push	r12
    6d48:	df 92       	push	r13
    6d4a:	ef 92       	push	r14
    6d4c:	ff 92       	push	r15
    6d4e:	0f 93       	push	r16
    6d50:	1f 93       	push	r17
    6d52:	cf 93       	push	r28
    6d54:	df 93       	push	r29
    6d56:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    6d58:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6d5a:	4c c0       	rjmp	.+152    	; 0x6df4 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6d5c:	0c 2d       	mov	r16, r12
    6d5e:	10 e0       	ldi	r17, 0x00	; 0
    6d60:	cd 2d       	mov	r28, r13
    6d62:	d0 e0       	ldi	r29, 0x00	; 0
    6d64:	f8 01       	movw	r30, r16
    6d66:	ee 0f       	add	r30, r30
    6d68:	ff 1f       	adc	r31, r31
    6d6a:	ee 0f       	add	r30, r30
    6d6c:	ff 1f       	adc	r31, r31
    6d6e:	ec 0f       	add	r30, r28
    6d70:	fd 1f       	adc	r31, r29
    6d72:	ee 0f       	add	r30, r30
    6d74:	ff 1f       	adc	r31, r31
    6d76:	ee 0f       	add	r30, r30
    6d78:	ff 1f       	adc	r31, r31
    6d7a:	e0 5b       	subi	r30, 0xB0	; 176
    6d7c:	f7 4f       	sbci	r31, 0xF7	; 247
    6d7e:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6d80:	83 e0       	ldi	r24, 0x03	; 3
    6d82:	8b 15       	cp	r24, r11
    6d84:	b0 f1       	brcs	.+108    	; 0x6df2 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6d86:	f8 01       	movw	r30, r16
    6d88:	ee 0f       	add	r30, r30
    6d8a:	ff 1f       	adc	r31, r31
    6d8c:	ee 0f       	add	r30, r30
    6d8e:	ff 1f       	adc	r31, r31
    6d90:	ec 0f       	add	r30, r28
    6d92:	fd 1f       	adc	r31, r29
    6d94:	ee 0f       	add	r30, r30
    6d96:	ff 1f       	adc	r31, r31
    6d98:	ee 0f       	add	r30, r30
    6d9a:	ff 1f       	adc	r31, r31
    6d9c:	e0 5b       	subi	r30, 0xB0	; 176
    6d9e:	f7 4f       	sbci	r31, 0xF7	; 247
    6da0:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6da2:	f2 80       	ldd	r15, Z+2	; 0x02
    6da4:	15 c0       	rjmp	.+42     	; 0x6dd0 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6da6:	ee 24       	eor	r14, r14
    6da8:	e3 94       	inc	r14
    6daa:	e6 0e       	add	r14, r22
    6dac:	f8 01       	movw	r30, r16
    6dae:	ee 0f       	add	r30, r30
    6db0:	ff 1f       	adc	r31, r31
    6db2:	ee 0f       	add	r30, r30
    6db4:	ff 1f       	adc	r31, r31
    6db6:	ec 0f       	add	r30, r28
    6db8:	fd 1f       	adc	r31, r29
    6dba:	ee 0f       	add	r30, r30
    6dbc:	ff 1f       	adc	r31, r31
    6dbe:	ee 0f       	add	r30, r30
    6dc0:	ff 1f       	adc	r31, r31
    6dc2:	e0 5b       	subi	r30, 0xB0	; 176
    6dc4:	f7 4f       	sbci	r31, 0xF7	; 247
    6dc6:	40 e8       	ldi	r20, 0x80	; 128
    6dc8:	80 81       	ld	r24, Z
    6dca:	64 df       	rcall	.-312    	; 0x6c94 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6dcc:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6dce:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6dd0:	f1 10       	cpse	r15, r1
    6dd2:	e9 cf       	rjmp	.-46     	; 0x6da6 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6dd4:	eb 2d       	mov	r30, r11
    6dd6:	f0 e0       	ldi	r31, 0x00	; 0
    6dd8:	ee 0f       	add	r30, r30
    6dda:	ff 1f       	adc	r31, r31
    6ddc:	e0 5b       	subi	r30, 0xB0	; 176
    6dde:	f6 4f       	sbci	r31, 0xF6	; 246
    6de0:	60 81       	ld	r22, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6de2:	60 31       	cpi	r22, 0x10	; 16
    6de4:	30 f4       	brcc	.+12     	; 0x6df2 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISendCmd(MIDI_CTRLCHG, midiChanel);
    6de6:	80 eb       	ldi	r24, 0xB0	; 176
    6de8:	72 d4       	rcall	.+2276   	; 0x76ce <serial1MIDISendCmd>
				serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    6dea:	8b e7       	ldi	r24, 0x7B	; 123
    6dec:	86 d4       	rcall	.+2316   	; 0x76fa <serial1MIDISendData>
				serial1MIDISendData(0);
    6dee:	80 e0       	ldi	r24, 0x00	; 0
    6df0:	84 d4       	rcall	.+2312   	; 0x76fa <serial1MIDISendData>
    6df2:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6df4:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6df6:	8d 15       	cp	r24, r13
    6df8:	08 f0       	brcs	.+2      	; 0x6dfc <midiAllNotesOff+0xb8>
    6dfa:	b0 cf       	rjmp	.-160    	; 0x6d5c <midiAllNotesOff+0x18>
    6dfc:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6dfe:	cf 91       	pop	r28
    6e00:	1f 91       	pop	r17
    6e02:	0f 91       	pop	r16
    6e04:	ff 90       	pop	r15
    6e06:	ef 90       	pop	r14
    6e08:	df 90       	pop	r13
    6e0a:	cf 90       	pop	r12
    6e0c:	bf 90       	pop	r11
    6e0e:	08 95       	ret

00006e10 <midi_ManualOff>:
    6e10:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6e12:	1f 93       	push	r17
    6e14:	cf 93       	push	r28
    6e16:	df 93       	push	r29
    6e18:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    6e1a:	84 30       	cpi	r24, 0x04	; 4
    6e1c:	00 f5       	brcc	.+64     	; 0x6e5e <midi_ManualOff+0x4e>
    6e1e:	08 2f       	mov	r16, r24
    6e20:	10 e0       	ldi	r17, 0x00	; 0
    6e22:	f8 01       	movw	r30, r16
    6e24:	ee 0f       	add	r30, r30
    6e26:	ff 1f       	adc	r31, r31
    6e28:	ea 5b       	subi	r30, 0xBA	; 186
    6e2a:	f7 4f       	sbci	r31, 0xF7	; 247
    6e2c:	d0 81       	ld	r29, Z
    6e2e:	df 3f       	cpi	r29, 0xFF	; 255
    6e30:	b1 f0       	breq	.+44     	; 0x6e5e <midi_ManualOff+0x4e>
    6e32:	f8 01       	movw	r30, r16
    6e34:	ee 0f       	add	r30, r30
    6e36:	ff 1f       	adc	r31, r31
    6e38:	ea 5b       	subi	r30, 0xBA	; 186
    6e3a:	f7 4f       	sbci	r31, 0xF7	; 247
    6e3c:	81 81       	ldd	r24, Z+1	; 0x01
    6e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    6e40:	31 f4       	brne	.+12     	; 0x6e4e <midi_ManualOff+0x3e>
    6e42:	0d c0       	rjmp	.+26     	; 0x6e5e <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6e44:	40 e8       	ldi	r20, 0x80	; 128
    6e46:	6d 2f       	mov	r22, r29
    6e48:	8c 2f       	mov	r24, r28
    6e4a:	24 df       	rcall	.-440    	; 0x6c94 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6e4c:	df 5f       	subi	r29, 0xFF	; 255
    6e4e:	f8 01       	movw	r30, r16
    6e50:	ee 0f       	add	r30, r30
    6e52:	ff 1f       	adc	r31, r31
    6e54:	ea 5b       	subi	r30, 0xBA	; 186
    6e56:	f7 4f       	sbci	r31, 0xF7	; 247
    6e58:	81 81       	ldd	r24, Z+1	; 0x01
    6e5a:	8d 17       	cp	r24, r29
    6e5c:	98 f7       	brcc	.-26     	; 0x6e44 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6e5e:	ec 2f       	mov	r30, r28
    6e60:	f0 e0       	ldi	r31, 0x00	; 0
    6e62:	ee 0f       	add	r30, r30
    6e64:	ff 1f       	adc	r31, r31
    6e66:	e0 5b       	subi	r30, 0xB0	; 176
    6e68:	f6 4f       	sbci	r31, 0xF6	; 246
    6e6a:	60 81       	ld	r22, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6e6c:	60 31       	cpi	r22, 0x10	; 16
    6e6e:	30 f4       	brcc	.+12     	; 0x6e7c <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISendCmd(MIDI_CTRLCHG,midiChanel);
    6e70:	80 eb       	ldi	r24, 0xB0	; 176
    6e72:	2d d4       	rcall	.+2138   	; 0x76ce <serial1MIDISendCmd>
		serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    6e74:	8b e7       	ldi	r24, 0x7B	; 123
    6e76:	41 d4       	rcall	.+2178   	; 0x76fa <serial1MIDISendData>
		serial1MIDISendData(0);
    6e78:	80 e0       	ldi	r24, 0x00	; 0
    6e7a:	3f d4       	rcall	.+2174   	; 0x76fa <serial1MIDISendData>
    6e7c:	df 91       	pop	r29
	}
}
    6e7e:	cf 91       	pop	r28
    6e80:	1f 91       	pop	r17
    6e82:	0f 91       	pop	r16
    6e84:	08 95       	ret

00006e86 <midi_AllManualsOff>:
    6e86:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6e88:	c0 e0       	ldi	r28, 0x00	; 0
    6e8a:	03 c0       	rjmp	.+6      	; 0x6e92 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6e8c:	8c 2f       	mov	r24, r28
    6e8e:	c0 df       	rcall	.-128    	; 0x6e10 <midi_ManualOff>
		serial1MIDISendData(0);
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6e90:	cf 5f       	subi	r28, 0xFF	; 255
    6e92:	c4 30       	cpi	r28, 0x04	; 4
    6e94:	d8 f3       	brcs	.-10     	; 0x6e8c <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}
}
    6e96:	cf 91       	pop	r28
    6e98:	08 95       	ret

00006e9a <midi_CheckRxActiveSense>:

//----------------------------- A C T I V E   S E N S E ----------------------------------

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6e9a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <midiRxActivceSensing>
    6e9e:	88 23       	and	r24, r24
    6ea0:	39 f0       	breq	.+14     	; 0x6eb0 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6ea2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <swTimer+0x6>
    6ea6:	81 11       	cpse	r24, r1
    6ea8:	03 c0       	rjmp	.+6      	; 0x6eb0 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6eaa:	ed df       	rcall	.-38     	; 0x6e86 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6eac:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <midiRxActivceSensing>
    6eb0:	08 95       	ret

00006eb2 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	cf 93       	push	r28
    6eb8:	df 93       	push	r29
    6eba:	06 2f       	mov	r16, r22
    6ebc:	14 2f       	mov	r17, r20
	// note event in some midi channel has been received
	// check map for assigned manuals and activate/decativate output to mosfets
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6ebe:	d8 2f       	mov	r29, r24
    6ec0:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6ec2:	c0 e0       	ldi	r28, 0x00	; 0

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	// note event in some midi channel has been received
	// check map for assigned manuals and activate/decativate output to mosfets
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6ec6:	3c c0       	rjmp	.+120    	; 0x6f40 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6ec8:	4d 2f       	mov	r20, r29
    6eca:	50 e0       	ldi	r21, 0x00	; 0
    6ecc:	2c 2f       	mov	r18, r28
    6ece:	30 e0       	ldi	r19, 0x00	; 0
    6ed0:	fa 01       	movw	r30, r20
    6ed2:	ee 0f       	add	r30, r30
    6ed4:	ff 1f       	adc	r31, r31
    6ed6:	ee 0f       	add	r30, r30
    6ed8:	ff 1f       	adc	r31, r31
    6eda:	e2 0f       	add	r30, r18
    6edc:	f3 1f       	adc	r31, r19
    6ede:	ee 0f       	add	r30, r30
    6ee0:	ff 1f       	adc	r31, r31
    6ee2:	ee 0f       	add	r30, r30
    6ee4:	ff 1f       	adc	r31, r31
    6ee6:	e0 5b       	subi	r30, 0xB0	; 176
    6ee8:	f7 4f       	sbci	r31, 0xF7	; 247
    6eea:	80 81       	ld	r24, Z
    6eec:	84 30       	cpi	r24, 0x04	; 4
    6eee:	38 f5       	brcc	.+78     	; 0x6f3e <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6ef0:	df 01       	movw	r26, r30
    6ef2:	61 81       	ldd	r22, Z+1	; 0x01
    6ef4:	70 2f       	mov	r23, r16
    6ef6:	76 1b       	sub	r23, r22
    6ef8:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6efa:	0a f1       	brmi	.+66     	; 0x6f3e <midiNote_to_Manual+0x8c>
    6efc:	fd 01       	movw	r30, r26
    6efe:	e2 81       	ldd	r30, Z+2	; 0x02
    6f00:	f0 e0       	ldi	r31, 0x00	; 0
    6f02:	a7 2f       	mov	r26, r23
    6f04:	77 0f       	add	r23, r23
    6f06:	bb 0b       	sbc	r27, r27
    6f08:	ae 17       	cp	r26, r30
    6f0a:	bf 07       	cpc	r27, r31
    6f0c:	c4 f4       	brge	.+48     	; 0x6f3e <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6f0e:	fa 01       	movw	r30, r20
    6f10:	ee 0f       	add	r30, r30
    6f12:	ff 1f       	adc	r31, r31
    6f14:	ee 0f       	add	r30, r30
    6f16:	ff 1f       	adc	r31, r31
    6f18:	e2 0f       	add	r30, r18
    6f1a:	f3 1f       	adc	r31, r19
    6f1c:	ee 0f       	add	r30, r30
    6f1e:	ff 1f       	adc	r31, r31
    6f20:	ee 0f       	add	r30, r30
    6f22:	ff 1f       	adc	r31, r31
    6f24:	e0 5b       	subi	r30, 0xB0	; 176
    6f26:	f7 4f       	sbci	r31, 0xF7	; 247
    6f28:	93 81       	ldd	r25, Z+3	; 0x03
    6f2a:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6f2c:	11 30       	cpi	r17, 0x01	; 1
    6f2e:	21 f4       	brne	.+8      	; 0x6f38 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6f30:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6f34:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    6f38:	41 2f       	mov	r20, r17
    6f3a:	ac de       	rcall	.-680    	; 0x6c94 <manual_NoteOnOff>
				found |= 0xFF;
    6f3c:	9f ef       	ldi	r25, 0xFF	; 255
void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	// note event in some midi channel has been received
	// check map for assigned manuals and activate/decativate output to mosfets
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6f3e:	cf 5f       	subi	r28, 0xFF	; 255
    6f40:	c4 30       	cpi	r28, 0x04	; 4
    6f42:	08 f4       	brcc	.+2      	; 0x6f46 <midiNote_to_Manual+0x94>
    6f44:	c1 cf       	rjmp	.-126    	; 0x6ec8 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6f46:	11 30       	cpi	r17, 0x01	; 1
    6f48:	49 f4       	brne	.+18     	; 0x6f5c <midiNote_to_Manual+0xaa>
    6f4a:	91 11       	cpse	r25, r1
    6f4c:	07 c0       	rjmp	.+14     	; 0x6f5c <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6f4e:	00 93 23 02 	sts	0x0223, r16	; 0x800223 <midiLastInNote>
		midiLastInChannel = channel;
    6f52:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6f56:	8f ef       	ldi	r24, 0xFF	; 255
    6f58:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6f5c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <midiThrough>
    6f60:	d8 13       	cpse	r29, r24
    6f62:	1e c0       	rjmp	.+60     	; 0x6fa0 <midiNote_to_Manual+0xee>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6f64:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    6f68:	6f 3f       	cpi	r22, 0xFF	; 255
    6f6a:	d1 f0       	breq	.+52     	; 0x6fa0 <midiNote_to_Manual+0xee>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISendCmd(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF),midiThrough.OutChannel);
    6f6c:	11 30       	cpi	r17, 0x01	; 1
    6f6e:	31 f0       	breq	.+12     	; 0x6f7c <midiNote_to_Manual+0xca>
    6f70:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_Setting+0x1>
    6f74:	88 23       	and	r24, r24
    6f76:	21 f0       	breq	.+8      	; 0x6f80 <midiNote_to_Manual+0xce>
    6f78:	80 e9       	ldi	r24, 0x90	; 144
    6f7a:	03 c0       	rjmp	.+6      	; 0x6f82 <midiNote_to_Manual+0xd0>
    6f7c:	80 e9       	ldi	r24, 0x90	; 144
    6f7e:	01 c0       	rjmp	.+2      	; 0x6f82 <midiNote_to_Manual+0xd0>
    6f80:	80 e8       	ldi	r24, 0x80	; 128
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISendData(note);
    6f82:	a5 d3       	rcall	.+1866   	; 0x76ce <serial1MIDISendCmd>
    6f84:	80 2f       	mov	r24, r16
    6f86:	b9 d3       	rcall	.+1906   	; 0x76fa <serial1MIDISendData>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISendData(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6f88:	11 11       	cpse	r17, r1
    6f8a:	06 c0       	rjmp	.+12     	; 0x6f98 <midiNote_to_Manual+0xe6>
    6f8c:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_Setting+0x1>
    6f90:	81 11       	cpse	r24, r1
    6f92:	04 c0       	rjmp	.+8      	; 0x6f9c <midiNote_to_Manual+0xea>
    6f94:	80 e4       	ldi	r24, 0x40	; 64
    6f96:	03 c0       	rjmp	.+6      	; 0x6f9e <midiNote_to_Manual+0xec>
    6f98:	80 e4       	ldi	r24, 0x40	; 64
    6f9a:	01 c0       	rjmp	.+2      	; 0x6f9e <midiNote_to_Manual+0xec>
    6f9c:	80 e0       	ldi	r24, 0x00	; 0
    6f9e:	ad d3       	rcall	.+1882   	; 0x76fa <serial1MIDISendData>
		}
	}
}
    6fa0:	df 91       	pop	r29
    6fa2:	cf 91       	pop	r28
    6fa4:	1f 91       	pop	r17
    6fa6:	0f 91       	pop	r16
    6fa8:	08 95       	ret

00006faa <midiIn_Process>:
}

void midiIn_Process(uint8_t midiByte){
	// commands are stored in midiLastCommand and set number of expected data bytes in midiDataByteExpected
	// processing is usually done after number of data bytes has been received
	if (midiByte > 0x7f) {
    6faa:	88 23       	and	r24, r24
    6fac:	0c f0       	brlt	.+2      	; 0x6fb0 <midiIn_Process+0x6>
    6fae:	4f c0       	rjmp	.+158    	; 0x704e <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6fb0:	88 3f       	cpi	r24, 0xF8	; 248
    6fb2:	b8 f0       	brcs	.+46     	; 0x6fe2 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6fb4:	8e 3f       	cpi	r24, 0xFE	; 254
    6fb6:	81 f4       	brne	.+32     	; 0x6fd8 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6fb8:	81 e0       	ldi	r24, 0x01	; 1
    6fba:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6fbe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6fc0:	f8 94       	cli
    6fc2:	06 c0       	rjmp	.+12     	; 0x6fd0 <midiIn_Process+0x26>
    6fc4:	e0 e5       	ldi	r30, 0x50	; 80
    6fc6:	f2 e0       	ldi	r31, 0x02	; 2
    6fc8:	89 e1       	ldi	r24, 0x19	; 25
    6fca:	86 83       	std	Z+6, r24	; 0x06
    6fcc:	17 82       	std	Z+7, r1	; 0x07
    6fce:	80 e0       	ldi	r24, 0x00	; 0
    6fd0:	81 11       	cpse	r24, r1
    6fd2:	f8 cf       	rjmp	.-16     	; 0x6fc4 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6fd4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6fd6:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6fd8:	8f 3f       	cpi	r24, 0xFF	; 255
    6fda:	09 f0       	breq	.+2      	; 0x6fde <midiIn_Process+0x34>
    6fdc:	92 c0       	rjmp	.+292    	; 0x7102 <midiIn_Process+0x158>
				midiAllReset();
    6fde:	00 c9       	rjmp	.-3584   	; 0x61e0 <midiAllReset>
    6fe0:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6fe2:	80 93 18 0c 	sts	0x0C18, r24	; 0x800c18 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6fe6:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6fea:	90 e8       	ldi	r25, 0x80	; 128
    6fec:	98 0f       	add	r25, r24
    6fee:	90 34       	cpi	r25, 0x40	; 64
    6ff0:	20 f4       	brcc	.+8      	; 0x6ffa <midiIn_Process+0x50>
				// 80 - BF -> Note On, Note Off, Aftertouch, ControlerChange
				midiDataByteExpected = 2;
    6ff2:	82 e0       	ldi	r24, 0x02	; 2
    6ff4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6ff8:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6ffa:	90 e2       	ldi	r25, 0x20	; 32
    6ffc:	98 0f       	add	r25, r24
    6ffe:	90 31       	cpi	r25, 0x10	; 16
    7000:	20 f4       	brcc	.+8      	; 0x700a <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    7002:	82 e0       	ldi	r24, 0x02	; 2
    7004:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    7008:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    700a:	82 3f       	cpi	r24, 0xF2	; 242
    700c:	21 f4       	brne	.+8      	; 0x7016 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    700e:	82 e0       	ldi	r24, 0x02	; 2
    7010:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    7014:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    7016:	80 3f       	cpi	r24, 0xF0	; 240
    7018:	21 f4       	brne	.+8      	; 0x7022 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    701a:	8f ef       	ldi	r24, 0xFF	; 255
    701c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    7020:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    7022:	90 e4       	ldi	r25, 0x40	; 64
    7024:	98 0f       	add	r25, r24
    7026:	90 32       	cpi	r25, 0x20	; 32
    7028:	20 f4       	brcc	.+8      	; 0x7032 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    7030:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    7032:	81 3f       	cpi	r24, 0xF1	; 241
    7034:	11 f0       	breq	.+4      	; 0x703a <midiIn_Process+0x90>
    7036:	83 3f       	cpi	r24, 0xF3	; 243
    7038:	21 f4       	brne	.+8      	; 0x7042 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    703a:	81 e0       	ldi	r24, 0x01	; 1
    703c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    7040:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    7042:	87 3f       	cpi	r24, 0xF7	; 247
    7044:	09 f4       	brne	.+2      	; 0x7048 <midiIn_Process+0x9e>
    7046:	5d c0       	rjmp	.+186    	; 0x7102 <midiIn_Process+0x158>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    7048:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <midiDataByteExpected>
    704c:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    704e:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <midiDataByteCount>
    7052:	e8 30       	cpi	r30, 0x08	; 8
    7054:	40 f4       	brcc	.+16     	; 0x7066 <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    7056:	91 e0       	ldi	r25, 0x01	; 1
    7058:	9e 0f       	add	r25, r30
    705a:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <midiDataByteCount>
    705e:	f0 e0       	ldi	r31, 0x00	; 0
    7060:	e0 5f       	subi	r30, 0xF0	; 240
    7062:	f3 4f       	sbci	r31, 0xF3	; 243
    7064:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    7066:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <midiDataByteExpected>
    706a:	8f 3f       	cpi	r24, 0xFF	; 255
    706c:	09 f4       	brne	.+2      	; 0x7070 <midiIn_Process+0xc6>
    706e:	49 c0       	rjmp	.+146    	; 0x7102 <midiIn_Process+0x158>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    7070:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <midiDataByteCount>
    7074:	98 17       	cp	r25, r24
    7076:	08 f4       	brcc	.+2      	; 0x707a <midiIn_Process+0xd0>
    7078:	44 c0       	rjmp	.+136    	; 0x7102 <midiIn_Process+0x158>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    707a:	90 91 18 0c 	lds	r25, 0x0C18	; 0x800c18 <midiLastCommand>
    707e:	90 3f       	cpi	r25, 0xF0	; 240
    7080:	08 f0       	brcs	.+2      	; 0x7084 <midiIn_Process+0xda>
    7082:	3d c0       	rjmp	.+122    	; 0x70fe <midiIn_Process+0x154>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    7084:	89 2f       	mov	r24, r25
    7086:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    7088:	90 7f       	andi	r25, 0xF0	; 240
    708a:	90 39       	cpi	r25, 0x90	; 144
    708c:	71 f0       	breq	.+28     	; 0x70aa <midiIn_Process+0x100>
    708e:	18 f4       	brcc	.+6      	; 0x7096 <midiIn_Process+0xec>
    7090:	90 38       	cpi	r25, 0x80	; 128
    7092:	31 f0       	breq	.+12     	; 0x70a0 <midiIn_Process+0xf6>
    7094:	34 c0       	rjmp	.+104    	; 0x70fe <midiIn_Process+0x154>
    7096:	90 3b       	cpi	r25, 0xB0	; 176
    7098:	99 f0       	breq	.+38     	; 0x70c0 <midiIn_Process+0x116>
    709a:	90 3c       	cpi	r25, 0xC0	; 192
    709c:	69 f1       	breq	.+90     	; 0x70f8 <midiIn_Process+0x14e>
    709e:	2f c0       	rjmp	.+94     	; 0x70fe <midiIn_Process+0x154>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    70a0:	40 e0       	ldi	r20, 0x00	; 0
    70a2:	60 91 10 0c 	lds	r22, 0x0C10	; 0x800c10 <midiDataByte>
    70a6:	05 df       	rcall	.-502    	; 0x6eb2 <midiNote_to_Manual>
						break;
    70a8:	2a c0       	rjmp	.+84     	; 0x70fe <midiIn_Process+0x154>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    70aa:	90 91 11 0c 	lds	r25, 0x0C11	; 0x800c11 <midiDataByte+0x1>
    70ae:	91 11       	cpse	r25, r1
    70b0:	02 c0       	rjmp	.+4      	; 0x70b6 <midiIn_Process+0x10c>
							// midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    70b2:	40 e0       	ldi	r20, 0x00	; 0
    70b4:	01 c0       	rjmp	.+2      	; 0x70b8 <midiIn_Process+0x10e>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    70b6:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    70b8:	60 91 10 0c 	lds	r22, 0x0C10	; 0x800c10 <midiDataByte>
    70bc:	fa de       	rcall	.-524    	; 0x6eb2 <midiNote_to_Manual>
						break;
    70be:	1f c0       	rjmp	.+62     	; 0x70fe <midiIn_Process+0x154>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    70c0:	90 91 10 0c 	lds	r25, 0x0C10	; 0x800c10 <midiDataByte>
    70c4:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    70c6:	11 f4       	brne	.+4      	; 0x70cc <midiIn_Process+0x122>
    70c8:	3d de       	rcall	.-902    	; 0x6d44 <midiAllNotesOff>
    70ca:	19 c0       	rjmp	.+50     	; 0x70fe <midiIn_Process+0x154>
						} else if (midiDataByte[0] == midi_ccReg.ccInRegOn) {
    70cc:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <midi_ccReg>
    70d0:	98 13       	cpse	r25, r24
							// V 0.83: register on/off by CC
							register_onOff(midiDataByte[1], REGISTER_ON);
    70d2:	05 c0       	rjmp	.+10     	; 0x70de <midiIn_Process+0x134>
    70d4:	61 e0       	ldi	r22, 0x01	; 1
    70d6:	80 91 11 0c 	lds	r24, 0x0C11	; 0x800c11 <midiDataByte+0x1>
    70da:	05 da       	rcall	.-3062   	; 0x64e6 <register_onOff>
    70dc:	10 c0       	rjmp	.+32     	; 0x70fe <midiIn_Process+0x154>
						} else if (midiDataByte[0] == midi_ccReg.ccInRegOff) {
    70de:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <midi_ccReg+0x1>
    70e2:	98 13       	cpse	r25, r24
							register_onOff(midiDataByte[1], REGISTER_OFF);
    70e4:	05 c0       	rjmp	.+10     	; 0x70f0 <midiIn_Process+0x146>
    70e6:	60 e0       	ldi	r22, 0x00	; 0
    70e8:	80 91 11 0c 	lds	r24, 0x0C11	; 0x800c11 <midiDataByte+0x1>
    70ec:	fc d9       	rcall	.-3080   	; 0x64e6 <register_onOff>
						} else if (midiDataByte[0] == MIDI_CTRL_ALLCTRLOFF){
    70ee:	07 c0       	rjmp	.+14     	; 0x70fe <midiIn_Process+0x154>
    70f0:	99 37       	cpi	r25, 0x79	; 121
							midi_resetRegisters();
    70f2:	29 f4       	brne	.+10     	; 0x70fe <midiIn_Process+0x154>
    70f4:	38 db       	rcall	.-2448   	; 0x6766 <midi_resetRegisters>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <midiIn_Process+0x154>
    70f8:	60 91 10 0c 	lds	r22, 0x0C10	; 0x800c10 <midiDataByte>
    70fc:	02 db       	rcall	.-2556   	; 0x6702 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    70fe:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <midiDataByteCount>
    7102:	08 95       	ret

00007104 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    7104:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <serESPMidiTmp+0x2>
    7108:	89 2f       	mov	r24, r25
    710a:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    710c:	90 7f       	andi	r25, 0xF0	; 240
    710e:	90 38       	cpi	r25, 0x80	; 128
    7110:	49 f0       	breq	.+18     	; 0x7124 <proc_ESPmidi+0x20>
    7112:	18 f4       	brcc	.+6      	; 0x711a <proc_ESPmidi+0x16>
    7114:	99 23       	and	r25, r25
    7116:	e1 f0       	breq	.+56     	; 0x7150 <proc_ESPmidi+0x4c>
    7118:	08 95       	ret
    711a:	90 39       	cpi	r25, 0x90	; 144
    711c:	41 f0       	breq	.+16     	; 0x712e <proc_ESPmidi+0x2a>
    711e:	90 3b       	cpi	r25, 0xB0	; 176
    7120:	89 f0       	breq	.+34     	; 0x7144 <proc_ESPmidi+0x40>
    7122:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    7124:	40 e0       	ldi	r20, 0x00	; 0
    7126:	60 91 78 16 	lds	r22, 0x1678	; 0x801678 <serESPMidiTmp+0x1>
    712a:	c3 ce       	rjmp	.-634    	; 0x6eb2 <midiNote_to_Manual>
		break;
    712c:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    712e:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <serESPMidiTmp>
    7132:	91 11       	cpse	r25, r1
    7134:	02 c0       	rjmp	.+4      	; 0x713a <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    7136:	40 e0       	ldi	r20, 0x00	; 0
    7138:	01 c0       	rjmp	.+2      	; 0x713c <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    713a:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    713c:	60 91 78 16 	lds	r22, 0x1678	; 0x801678 <serESPMidiTmp+0x1>
    7140:	b8 ce       	rjmp	.-656    	; 0x6eb2 <midiNote_to_Manual>
		break;
    7142:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    7144:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <serESPMidiTmp+0x1>
    7148:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    714a:	61 f4       	brne	.+24     	; 0x7164 <proc_ESPmidi+0x60>
    714c:	fb cd       	rjmp	.-1034   	; 0x6d44 <midiAllNotesOff>
    714e:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    7150:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <serESPMidiTmp+0x1>
    7154:	89 2f       	mov	r24, r25
    7156:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    7158:	90 7f       	andi	r25, 0xF0	; 240
    715a:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    715c:	19 f4       	brne	.+6      	; 0x7164 <proc_ESPmidi+0x60>
    715e:	60 91 77 16 	lds	r22, 0x1677	; 0x801677 <serESPMidiTmp>
    7162:	cf ca       	rjmp	.-2658   	; 0x6702 <midi_ProgramChange>
    7164:	08 95       	ret

00007166 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    7166:	9f 92       	push	r9
    7168:	af 92       	push	r10
    716a:	bf 92       	push	r11
    716c:	cf 92       	push	r12
    716e:	df 92       	push	r13
    7170:	ef 92       	push	r14
    7172:	ff 92       	push	r15
    7174:	0f 93       	push	r16
    7176:	1f 93       	push	r17
    7178:	cf 93       	push	r28
    717a:	df 93       	push	r29
    717c:	d8 2f       	mov	r29, r24
    717e:	c9 2f       	mov	r28, r25
	// pipe message are generated by polling key/pipe magnet lines in timer interrupt
	// one message contains bit nr and all bits of modules that share rhe same message on the same bit
	// format cccb bbbb mmmm mmmm c = command bit = bit number m = module mask
	// example: 0b0010 1001 0010 0000 = line acitvated (001) in bit 9  (0 1001) of module 5 (0010 0000)
	serial0USB_logPipeIn(pipeMessage);
    7180:	bf d2       	rcall	.+1406   	; 0x7700 <serial0USB_logPipeIn>
	uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    7182:	8c 2f       	mov	r24, r28
    7184:	80 7e       	andi	r24, 0xE0	; 224
    7186:	a8 2e       	mov	r10, r24
	uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    7188:	cf 71       	andi	r28, 0x1F	; 31
    718a:	dc 2e       	mov	r13, r28
	uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	uint8_t messageProcessed = FALSE;
	ManualNote_t manualNote;
	ChannelNote_t chanNote;
	if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    718c:	90 e2       	ldi	r25, 0x20	; 32
    718e:	89 17       	cp	r24, r25
    7190:	09 f4       	brne	.+2      	; 0x7194 <midiKeyPress_Process+0x2e>
    7192:	e5 c0       	rjmp	.+458    	; 0x735e <midiKeyPress_Process+0x1f8>
    7194:	88 23       	and	r24, r24
    7196:	09 f4       	brne	.+2      	; 0x719a <midiKeyPress_Process+0x34>
    7198:	e5 c0       	rjmp	.+458    	; 0x7364 <midiKeyPress_Process+0x1fe>
    719a:	e9 c0       	rjmp	.+466    	; 0x736e <midiKeyPress_Process+0x208>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    719c:	d0 ff       	sbrs	r29, 0
    719e:	dc c0       	rjmp	.+440    	; 0x7358 <midiKeyPress_Process+0x1f2>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    71a0:	ec 2e       	mov	r14, r28
    71a2:	f1 2c       	mov	r15, r1
    71a4:	c7 01       	movw	r24, r14
    71a6:	88 0f       	add	r24, r24
    71a8:	99 1f       	adc	r25, r25
    71aa:	82 95       	swap	r24
    71ac:	92 95       	swap	r25
    71ae:	90 7f       	andi	r25, 0xF0	; 240
    71b0:	98 27       	eor	r25, r24
    71b2:	80 7f       	andi	r24, 0xF0	; 240
    71b4:	98 27       	eor	r25, r24
    71b6:	1d 2d       	mov	r17, r13
    71b8:	18 2b       	or	r17, r24
    71ba:	81 2f       	mov	r24, r17
    71bc:	46 dd       	rcall	.-1396   	; 0x6c4a <moduleBit_to_manualNote>
    71be:	c8 2e       	mov	r12, r24
    71c0:	99 2e       	mov	r9, r25
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
    71c2:	08 2f       	mov	r16, r24
    71c4:	8f 3f       	cpi	r24, 0xFF	; 255
    71c6:	09 f4       	brne	.+2      	; 0x71ca <midiKeyPress_Process+0x64>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    71c8:	9f c0       	rjmp	.+318    	; 0x7308 <midiKeyPress_Process+0x1a2>
    71ca:	69 2f       	mov	r22, r25
    71cc:	56 dc       	rcall	.-1876   	; 0x6a7a <Manual_to_MidiNote>
    71ce:	19 2f       	mov	r17, r25
					if (chanNote.hw_channel <= MIDI_CHANNEL_16){
    71d0:	80 31       	cpi	r24, 0x10	; 16
    71d2:	10 f5       	brcc	.+68     	; 0x7218 <midiKeyPress_Process+0xb2>
						// midi chan assigned note on/off can be sent
						if (command == MESSAGE_PIPE_ON_HI) {
    71d4:	90 e2       	ldi	r25, 0x20	; 32
    71d6:	a9 12       	cpse	r10, r25
							// note on
							serial1MIDISendCmd(MIDI_NOTEON,chanNote.hw_channel);
    71d8:	0c c0       	rjmp	.+24     	; 0x71f2 <midiKeyPress_Process+0x8c>
    71da:	68 2f       	mov	r22, r24
    71dc:	80 e9       	ldi	r24, 0x90	; 144
							serial1MIDISendData(chanNote.note);
    71de:	77 d2       	rcall	.+1262   	; 0x76ce <serial1MIDISendCmd>
    71e0:	81 2f       	mov	r24, r17
    71e2:	8b d2       	rcall	.+1302   	; 0x76fa <serial1MIDISendData>
							serial1MIDISendData(MIDI_DEFAULT_VELOCITY);
    71e4:	80 e4       	ldi	r24, 0x40	; 64
    71e6:	89 d2       	rcall	.+1298   	; 0x76fa <serial1MIDISendData>
    71e8:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <midiLastOutManual>
							midiLastOutManual = manualNote.manual;
    71ec:	90 92 25 02 	sts	0x0225, r9	; 0x800225 <midiLastOutNote>
							midiLastOutNote = manualNote.note;
    71f0:	13 c0       	rjmp	.+38     	; 0x7218 <midiKeyPress_Process+0xb2>
    71f2:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <midi_Setting+0x1>
						} else if (midi_Setting.VelZero4Off) {
    71f6:	99 23       	and	r25, r25
							// note off
							serial1MIDISendCmd(MIDI_NOTEON,chanNote.hw_channel);
    71f8:	41 f0       	breq	.+16     	; 0x720a <midiKeyPress_Process+0xa4>
    71fa:	68 2f       	mov	r22, r24
    71fc:	80 e9       	ldi	r24, 0x90	; 144
							serial1MIDISendData(chanNote.note);
    71fe:	67 d2       	rcall	.+1230   	; 0x76ce <serial1MIDISendCmd>
    7200:	81 2f       	mov	r24, r17
							serial1MIDISendData(0);
    7202:	7b d2       	rcall	.+1270   	; 0x76fa <serial1MIDISendData>
    7204:	80 e0       	ldi	r24, 0x00	; 0
    7206:	79 d2       	rcall	.+1266   	; 0x76fa <serial1MIDISendData>
						} else {
							serial1MIDISendCmd(MIDI_NOTEOFF,chanNote.hw_channel);
    7208:	07 c0       	rjmp	.+14     	; 0x7218 <midiKeyPress_Process+0xb2>
    720a:	68 2f       	mov	r22, r24
    720c:	80 e8       	ldi	r24, 0x80	; 128
    720e:	5f d2       	rcall	.+1214   	; 0x76ce <serial1MIDISendCmd>
							serial1MIDISendData(chanNote.note);
    7210:	81 2f       	mov	r24, r17
    7212:	73 d2       	rcall	.+1254   	; 0x76fa <serial1MIDISendData>
    7214:	80 e0       	ldi	r24, 0x00	; 0
							serial1MIDISendData(0);
    7216:	71 d2       	rcall	.+1250   	; 0x76fa <serial1MIDISendData>
    7218:	41 e0       	ldi	r20, 0x01	; 1
    721a:	80 e2       	ldi	r24, 0x20	; 32
						}
					}
					// now check couplers for that manual
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    721c:	a8 12       	cpse	r10, r24
    721e:	40 e0       	ldi	r20, 0x00	; 0
    7220:	14 2f       	mov	r17, r20
    7222:	01 11       	cpse	r16, r1
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    7224:	1b c0       	rjmp	.+54     	; 0x725c <midiKeyPress_Process+0xf6>
    7226:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <midi_Couplers>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    722a:	8f 3f       	cpi	r24, 0xFF	; 255
    722c:	19 f4       	brne	.+6      	; 0x7234 <midiKeyPress_Process+0xce>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    722e:	69 2d       	mov	r22, r9
    7230:	81 e0       	ldi	r24, 0x01	; 1
    7232:	30 dd       	rcall	.-1440   	; 0x6c94 <manual_NoteOnOff>
    7234:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <midi_Couplers+0x1>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    7238:	8f 3f       	cpi	r24, 0xFF	; 255
    723a:	21 f4       	brne	.+8      	; 0x7244 <midiKeyPress_Process+0xde>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    723c:	41 2f       	mov	r20, r17
    723e:	69 2d       	mov	r22, r9
    7240:	82 e0       	ldi	r24, 0x02	; 2
    7242:	28 dd       	rcall	.-1456   	; 0x6c94 <manual_NoteOnOff>
    7244:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <midi_Couplers+0x3>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    7248:	8f 3f       	cpi	r24, 0xFF	; 255
    724a:	09 f0       	breq	.+2      	; 0x724e <midiKeyPress_Process+0xe8>
    724c:	6e c0       	rjmp	.+220    	; 0x732a <midiKeyPress_Process+0x1c4>
    724e:	41 2f       	mov	r20, r17
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    7250:	69 2d       	mov	r22, r9
    7252:	83 e0       	ldi	r24, 0x03	; 3
    7254:	1f dd       	rcall	.-1474   	; 0x6c94 <manual_NoteOnOff>
    7256:	bb 24       	eor	r11, r11
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
    7258:	ba 94       	dec	r11
    725a:	75 c0       	rjmp	.+234    	; 0x7346 <midiKeyPress_Process+0x1e0>
    725c:	01 30       	cpi	r16, 0x01	; 1
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    725e:	d9 f4       	brne	.+54     	; 0x7296 <midiKeyPress_Process+0x130>
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    7260:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <midi_Couplers+0x2>
    7264:	8f 3f       	cpi	r24, 0xFF	; 255
    7266:	19 f4       	brne	.+6      	; 0x726e <midiKeyPress_Process+0x108>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    7268:	69 2d       	mov	r22, r9
    726a:	82 e0       	ldi	r24, 0x02	; 2
    726c:	13 dd       	rcall	.-1498   	; 0x6c94 <manual_NoteOnOff>
    726e:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <midi_Couplers+0x4>
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    7272:	8f 3f       	cpi	r24, 0xFF	; 255
    7274:	21 f4       	brne	.+8      	; 0x727e <midiKeyPress_Process+0x118>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    7276:	41 2f       	mov	r20, r17
    7278:	69 2d       	mov	r22, r9
    727a:	83 e0       	ldi	r24, 0x03	; 3
    727c:	0b dd       	rcall	.-1514   	; 0x6c94 <manual_NoteOnOff>
    727e:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <midi_Couplers+0x6>
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    7282:	8f 3f       	cpi	r24, 0xFF	; 255
    7284:	09 f0       	breq	.+2      	; 0x7288 <midiKeyPress_Process+0x122>
    7286:	54 c0       	rjmp	.+168    	; 0x7330 <midiKeyPress_Process+0x1ca>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    7288:	41 2f       	mov	r20, r17
    728a:	69 2d       	mov	r22, r9
    728c:	80 e0       	ldi	r24, 0x00	; 0
    728e:	02 dd       	rcall	.-1532   	; 0x6c94 <manual_NoteOnOff>
    7290:	bb 24       	eor	r11, r11
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
    7292:	ba 94       	dec	r11
    7294:	58 c0       	rjmp	.+176    	; 0x7346 <midiKeyPress_Process+0x1e0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    7296:	02 30       	cpi	r16, 0x02	; 2
    7298:	d9 f4       	brne	.+54     	; 0x72d0 <midiKeyPress_Process+0x16a>
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    729a:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <midi_Couplers+0x5>
    729e:	8f 3f       	cpi	r24, 0xFF	; 255
    72a0:	19 f4       	brne	.+6      	; 0x72a8 <midiKeyPress_Process+0x142>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    72a2:	69 2d       	mov	r22, r9
    72a4:	83 e0       	ldi	r24, 0x03	; 3
    72a6:	f6 dc       	rcall	.-1556   	; 0x6c94 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    72a8:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <midi_Couplers+0x7>
    72ac:	8f 3f       	cpi	r24, 0xFF	; 255
    72ae:	21 f4       	brne	.+8      	; 0x72b8 <midiKeyPress_Process+0x152>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    72b0:	41 2f       	mov	r20, r17
    72b2:	69 2d       	mov	r22, r9
    72b4:	80 e0       	ldi	r24, 0x00	; 0
    72b6:	ee dc       	rcall	.-1572   	; 0x6c94 <manual_NoteOnOff>
    72b8:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <midi_Couplers+0x8>
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    72bc:	8f 3f       	cpi	r24, 0xFF	; 255
    72be:	09 f0       	breq	.+2      	; 0x72c2 <midiKeyPress_Process+0x15c>
    72c0:	3a c0       	rjmp	.+116    	; 0x7336 <midiKeyPress_Process+0x1d0>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    72c2:	41 2f       	mov	r20, r17
    72c4:	69 2d       	mov	r22, r9
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	e5 dc       	rcall	.-1590   	; 0x6c94 <manual_NoteOnOff>
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
    72ca:	bb 24       	eor	r11, r11
    72cc:	ba 94       	dec	r11
    72ce:	3b c0       	rjmp	.+118    	; 0x7346 <midiKeyPress_Process+0x1e0>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
						}
					} else if (manualNote.manual == MANUAL_P) {
    72d0:	03 30       	cpi	r16, 0x03	; 3
    72d2:	a1 f5       	brne	.+104    	; 0x733c <midiKeyPress_Process+0x1d6>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    72d4:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <midi_Couplers+0x9>
    72d8:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    72da:	19 f4       	brne	.+6      	; 0x72e2 <midiKeyPress_Process+0x17c>
    72dc:	69 2d       	mov	r22, r9
    72de:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    72e0:	d9 dc       	rcall	.-1614   	; 0x6c94 <manual_NoteOnOff>
    72e2:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <midi_Couplers+0xa>
    72e6:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    72e8:	21 f4       	brne	.+8      	; 0x72f2 <midiKeyPress_Process+0x18c>
    72ea:	41 2f       	mov	r20, r17
    72ec:	69 2d       	mov	r22, r9
    72ee:	81 e0       	ldi	r24, 0x01	; 1
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    72f0:	d1 dc       	rcall	.-1630   	; 0x6c94 <manual_NoteOnOff>
    72f2:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <midi_Couplers+0xb>
    72f6:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    72f8:	21 f5       	brne	.+72     	; 0x7342 <midiKeyPress_Process+0x1dc>
    72fa:	41 2f       	mov	r20, r17
    72fc:	69 2d       	mov	r22, r9
    72fe:	82 e0       	ldi	r24, 0x02	; 2
    7300:	c9 dc       	rcall	.-1646   	; 0x6c94 <manual_NoteOnOff>
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
    7302:	bb 24       	eor	r11, r11
    7304:	ba 94       	dec	r11
    7306:	1f c0       	rjmp	.+62     	; 0x7346 <midiKeyPress_Process+0x1e0>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
					}
				} else {
					// now check if modbit is assigned to register
					uint8_t regNr = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit));
    7308:	81 2f       	mov	r24, r17
    730a:	11 d8       	rcall	.-4062   	; 0x632e <moduleBit_to_registerNr>
    730c:	18 2f       	mov	r17, r24
    730e:	80 34       	cpi	r24, 0x40	; 64
					if (regNr < REGISTER_COUNT) {
    7310:	d0 f4       	brcc	.+52     	; 0x7346 <midiKeyPress_Process+0x1e0>
    7312:	90 e2       	ldi	r25, 0x20	; 32
						// modulebit is assigned to a register
						messageProcessed = TRUE;
						// V 0.83: send RegOn/Off to MIDI out
						if (command == MESSAGE_PIPE_ON_HI){
    7314:	a9 12       	cpse	r10, r25
    7316:	03 c0       	rjmp	.+6      	; 0x731e <midiKeyPress_Process+0x1b8>
    7318:	65 d9       	rcall	.-3382   	; 0x65e4 <midiSendRegOn>
							midiSendRegOn(regNr);
    731a:	10 68       	ori	r17, 0x80	; 128
    731c:	01 c0       	rjmp	.+2      	; 0x7320 <midiKeyPress_Process+0x1ba>
							regNr |= REGISTER_WAS_SET;
    731e:	78 d9       	rcall	.-3344   	; 0x6610 <midiSendRegOff>
    7320:	10 93 5b 09 	sts	0x095B, r17	; 0x80095b <midi_RegisterChanged>
						} else {
							midiSendRegOff(regNr);
    7324:	bb 24       	eor	r11, r11
						}
						midi_RegisterChanged = regNr; // for LCD out in main()
    7326:	ba 94       	dec	r11
    7328:	0e c0       	rjmp	.+28     	; 0x7346 <midiKeyPress_Process+0x1e0>
				} else {
					// now check if modbit is assigned to register
					uint8_t regNr = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit));
					if (regNr < REGISTER_COUNT) {
						// modulebit is assigned to a register
						messageProcessed = TRUE;
    732a:	bb 24       	eor	r11, r11
    732c:	ba 94       	dec	r11
    732e:	0b c0       	rjmp	.+22     	; 0x7346 <midiKeyPress_Process+0x1e0>
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
				// check if manual and note is assigned that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					// check midi assigneemnt for this manual/note
					messageProcessed = TRUE;
    7330:	bb 24       	eor	r11, r11
    7332:	ba 94       	dec	r11
    7334:	08 c0       	rjmp	.+16     	; 0x7346 <midiKeyPress_Process+0x1e0>
    7336:	bb 24       	eor	r11, r11
    7338:	ba 94       	dec	r11
    733a:	05 c0       	rjmp	.+10     	; 0x7346 <midiKeyPress_Process+0x1e0>
    733c:	bb 24       	eor	r11, r11
    733e:	ba 94       	dec	r11
    7340:	02 c0       	rjmp	.+4      	; 0x7346 <midiKeyPress_Process+0x1e0>
    7342:	bb 24       	eor	r11, r11
    7344:	ba 94       	dec	r11
    7346:	b1 10       	cpse	r11, r1
    7348:	07 c0       	rjmp	.+14     	; 0x7358 <midiKeyPress_Process+0x1f2>
    734a:	5e 2d       	mov	r21, r14
							midiSendRegOff(regNr);
						}
						midi_RegisterChanged = regNr; // for LCD out in main()
					}
				} // process future key events here (none definded yet)
				if (messageProcessed == FALSE) {
    734c:	44 27       	eor	r20, r20
    734e:	4d 29       	or	r20, r13
					// ModBit Message was not assigned to a manual or register
					log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,(i << 8) | shiftBit);
    7350:	61 e0       	ldi	r22, 0x01	; 1
    7352:	82 e0       	ldi	r24, 0x02	; 2
    7354:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <log_putWarning>
    7358:	d6 95       	lsr	r29
    735a:	cf 5f       	subi	r28, 0xFF	; 255
    735c:	05 c0       	rjmp	.+10     	; 0x7368 <midiKeyPress_Process+0x202>
				}
			}
			moduleBits >>= 1; // next module
    735e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t messageProcessed = FALSE;
	ManualNote_t manualNote;
	ChannelNote_t chanNote;
	if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    7360:	b1 2c       	mov	r11, r1
    7362:	02 c0       	rjmp	.+4      	; 0x7368 <midiKeyPress_Process+0x202>
    7364:	c0 e0       	ldi	r28, 0x00	; 0
    7366:	b1 2c       	mov	r11, r1
    7368:	c8 30       	cpi	r28, 0x08	; 8
    736a:	08 f4       	brcc	.+2      	; 0x736e <midiKeyPress_Process+0x208>
    736c:	17 cf       	rjmp	.-466    	; 0x719c <midiKeyPress_Process+0x36>
    736e:	df 91       	pop	r29
    7370:	cf 91       	pop	r28
    7372:	1f 91       	pop	r17
				}
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    7374:	0f 91       	pop	r16
    7376:	ff 90       	pop	r15
    7378:	ef 90       	pop	r14
    737a:	df 90       	pop	r13
    737c:	cf 90       	pop	r12
    737e:	bf 90       	pop	r11
    7380:	af 90       	pop	r10
    7382:	9f 90       	pop	r9
    7384:	08 95       	ret

00007386 <midiSendAllNotesOff>:
    7386:	60 91 4f 08 	lds	r22, 0x084F	; 0x80084f <midiThrough+0x1>
    738a:	60 31       	cpi	r22, 0x10	; 16

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    738c:	30 f4       	brcc	.+12     	; 0x739a <midiSendAllNotesOff+0x14>
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    738e:	80 eb       	ldi	r24, 0xB0	; 176
    7390:	9e d1       	rcall	.+828    	; 0x76ce <serial1MIDISendCmd>
		serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    7392:	8b e7       	ldi	r24, 0x7B	; 123
    7394:	b2 d1       	rcall	.+868    	; 0x76fa <serial1MIDISendData>
		serial1MIDISendData(0);
    7396:	80 e0       	ldi	r24, 0x00	; 0
    7398:	b0 c1       	rjmp	.+864    	; 0x76fa <serial1MIDISendData>
    739a:	08 95       	ret

0000739c <midi_SendActiveSense>:
    739c:	60 e0       	ldi	r22, 0x00	; 0
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISendCmd(MIDI_ACTIVESENSING,0);
    739e:	8e ef       	ldi	r24, 0xFE	; 254
    73a0:	96 c1       	rjmp	.+812    	; 0x76ce <serial1MIDISendCmd>
    73a2:	08 95       	ret

000073a4 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    73a4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    73a8:	88 23       	and	r24, r24
    73aa:	21 f0       	breq	.+8      	; 0x73b4 <midi_CheckTxActiveSense+0x10>
    73ac:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    73b0:	8f 3f       	cpi	r24, 0xFF	; 255
    73b2:	99 f4       	brne	.+38     	; 0x73da <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    73b4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    73b6:	f8 94       	cli
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	06 c0       	rjmp	.+12     	; 0x73c8 <midi_CheckTxActiveSense+0x24>
    73bc:	e0 e5       	ldi	r30, 0x50	; 80
    73be:	f2 e0       	ldi	r31, 0x02	; 2
    73c0:	8a e0       	ldi	r24, 0x0A	; 10
    73c2:	80 8b       	std	Z+16, r24	; 0x10
    73c4:	11 8a       	std	Z+17, r1	; 0x11
    73c6:	80 e0       	ldi	r24, 0x00	; 0
    73c8:	81 11       	cpse	r24, r1
    73ca:	f8 cf       	rjmp	.-16     	; 0x73bc <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    73cc:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    73ce:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <midi_Setting>
    73d2:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    73d4:	e3 df       	rcall	.-58     	; 0x739c <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TX_RESET_LASTCMD
    73d6:	10 92 29 14 	sts	0x1429, r1	; 0x801429 <midiTxLastCmd>
    73da:	08 95       	ret

000073dc <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    73dc:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    73e0:	8f e1       	ldi	r24, 0x1F	; 31
    73e2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    73e6:	e9 ec       	ldi	r30, 0xC9	; 201
    73e8:	f0 e0       	ldi	r31, 0x00	; 0
    73ea:	80 81       	ld	r24, Z
    73ec:	88 69       	ori	r24, 0x98	; 152
    73ee:	80 83       	st	Z, r24
    73f0:	ea ec       	ldi	r30, 0xCA	; 202
    73f2:	f0 e0       	ldi	r31, 0x00	; 0
    73f4:	80 81       	ld	r24, Z
    73f6:	86 60       	ori	r24, 0x06	; 6
    73f8:	80 83       	st	Z, r24
    73fa:	10 92 70 16 	sts	0x1670, r1	; 0x801670 <midiRxInIndex>
    73fe:	10 92 7f 16 	sts	0x167F, r1	; 0x80167f <midiRxOutIndex>
    7402:	10 92 1b 14 	sts	0x141B, r1	; 0x80141b <midiTxInIndex>
    7406:	10 92 28 14 	sts	0x1428, r1	; 0x801428 <midiTxOutIndex>
    740a:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiRxOvfl>
    740e:	10 92 2c 14 	sts	0x142C, r1	; 0x80142c <midiTxOvfl>
    7412:	10 92 7b 16 	sts	0x167B, r1	; 0x80167b <midiRxOvflCount>
    7416:	10 92 82 16 	sts	0x1682, r1	; 0x801682 <midiTxOvflCount>
    741a:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <midiRxBuffUsage>
    741e:	10 92 76 16 	sts	0x1676, r1	; 0x801676 <midiTxBuffUsage>
    7422:	10 92 29 14 	sts	0x1429, r1	; 0x801429 <midiTxLastCmd>
    7426:	08 95       	ret

00007428 <__vector_36>:
    7428:	1f 92       	push	r1
    742a:	0f 92       	push	r0
    742c:	0f b6       	in	r0, 0x3f	; 63
    742e:	0f 92       	push	r0
    7430:	11 24       	eor	r1, r1
    7432:	0b b6       	in	r0, 0x3b	; 59
    7434:	0f 92       	push	r0
    7436:	8f 93       	push	r24
    7438:	9f 93       	push	r25
    743a:	ef 93       	push	r30
    743c:	ff 93       	push	r31
    743e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    7442:	e0 91 70 16 	lds	r30, 0x1670	; 0x801670 <midiRxInIndex>
    7446:	f0 e0       	ldi	r31, 0x00	; 0
    7448:	e3 59       	subi	r30, 0x93	; 147
    744a:	fb 4e       	sbci	r31, 0xEB	; 235
    744c:	80 83       	st	Z, r24
    744e:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <midiRxInIndex>
    7452:	8f 5f       	subi	r24, 0xFF	; 255
    7454:	90 91 7f 16 	lds	r25, 0x167F	; 0x80167f <midiRxOutIndex>
    7458:	89 13       	cpse	r24, r25
    745a:	0e c0       	rjmp	.+28     	; 0x7478 <__vector_36+0x50>
    745c:	80 91 7b 16 	lds	r24, 0x167B	; 0x80167b <midiRxOvflCount>
    7460:	88 23       	and	r24, r24
    7462:	31 f0       	breq	.+12     	; 0x7470 <__vector_36+0x48>
    7464:	8f 3f       	cpi	r24, 0xFF	; 255
    7466:	51 f0       	breq	.+20     	; 0x747c <__vector_36+0x54>
    7468:	8f 5f       	subi	r24, 0xFF	; 255
    746a:	80 93 7b 16 	sts	0x167B, r24	; 0x80167b <midiRxOvflCount>
    746e:	06 c0       	rjmp	.+12     	; 0x747c <__vector_36+0x54>
    7470:	81 e0       	ldi	r24, 0x01	; 1
    7472:	80 93 7b 16 	sts	0x167B, r24	; 0x80167b <midiRxOvflCount>
    7476:	02 c0       	rjmp	.+4      	; 0x747c <__vector_36+0x54>
    7478:	80 93 70 16 	sts	0x1670, r24	; 0x801670 <midiRxInIndex>
    747c:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <midiRxInIndex>
    7480:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <midiRxOutIndex>
    7484:	89 17       	cp	r24, r25
    7486:	30 f4       	brcc	.+12     	; 0x7494 <__vector_36+0x6c>
    7488:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <midiRxInIndex>
    748c:	90 91 7f 16 	lds	r25, 0x167F	; 0x80167f <midiRxOutIndex>
    7490:	89 1b       	sub	r24, r25
    7492:	05 c0       	rjmp	.+10     	; 0x749e <__vector_36+0x76>
    7494:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <midiRxInIndex>
    7498:	90 91 7f 16 	lds	r25, 0x167F	; 0x80167f <midiRxOutIndex>
    749c:	89 1b       	sub	r24, r25
    749e:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <midiRxBuffUsage>
    74a2:	98 17       	cp	r25, r24
    74a4:	10 f4       	brcc	.+4      	; 0x74aa <__vector_36+0x82>
    74a6:	80 93 6d 15 	sts	0x156D, r24	; 0x80156d <midiRxBuffUsage>
    74aa:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <midiRxBytesCount>
    74ae:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <midiRxBytesCount+0x1>
    74b2:	01 96       	adiw	r24, 0x01	; 1
    74b4:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <midiRxBytesCount+0x1>
    74b8:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <midiRxBytesCount>
    74bc:	ff 91       	pop	r31
    74be:	ef 91       	pop	r30
    74c0:	9f 91       	pop	r25
    74c2:	8f 91       	pop	r24
    74c4:	0f 90       	pop	r0
    74c6:	0b be       	out	0x3b, r0	; 59
    74c8:	0f 90       	pop	r0
    74ca:	0f be       	out	0x3f, r0	; 63
    74cc:	0f 90       	pop	r0
    74ce:	1f 90       	pop	r1
    74d0:	18 95       	reti

000074d2 <__vector_37>:
    74d2:	1f 92       	push	r1
    74d4:	0f 92       	push	r0
    74d6:	0f b6       	in	r0, 0x3f	; 63
    74d8:	0f 92       	push	r0
    74da:	11 24       	eor	r1, r1
    74dc:	0b b6       	in	r0, 0x3b	; 59
    74de:	0f 92       	push	r0
    74e0:	8f 93       	push	r24
    74e2:	9f 93       	push	r25
    74e4:	ef 93       	push	r30
    74e6:	ff 93       	push	r31
    74e8:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <midiTxOutIndex>
    74ec:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <midiTxInIndex>
    74f0:	98 17       	cp	r25, r24
    74f2:	b9 f0       	breq	.+46     	; 0x7522 <__vector_37+0x50>
    74f4:	e0 91 28 14 	lds	r30, 0x1428	; 0x801428 <midiTxOutIndex>
    74f8:	f0 e0       	ldi	r31, 0x00	; 0
    74fa:	e2 59       	subi	r30, 0x92	; 146
    74fc:	fa 4e       	sbci	r31, 0xEA	; 234
    74fe:	80 81       	ld	r24, Z
    7500:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    7504:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <midiTxOutIndex>
    7508:	8f 5f       	subi	r24, 0xFF	; 255
    750a:	80 93 28 14 	sts	0x1428, r24	; 0x801428 <midiTxOutIndex>
    750e:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <midiTxBytesCount>
    7512:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiTxBytesCount+0x1>
    7516:	01 96       	adiw	r24, 0x01	; 1
    7518:	90 93 7d 16 	sts	0x167D, r25	; 0x80167d <midiTxBytesCount+0x1>
    751c:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <midiTxBytesCount>
    7520:	05 c0       	rjmp	.+10     	; 0x752c <__vector_37+0x5a>
    7522:	e9 ec       	ldi	r30, 0xC9	; 201
    7524:	f0 e0       	ldi	r31, 0x00	; 0
    7526:	80 81       	ld	r24, Z
    7528:	8f 7d       	andi	r24, 0xDF	; 223
    752a:	80 83       	st	Z, r24
    752c:	ff 91       	pop	r31
    752e:	ef 91       	pop	r30
    7530:	9f 91       	pop	r25
    7532:	8f 91       	pop	r24
    7534:	0f 90       	pop	r0
    7536:	0b be       	out	0x3b, r0	; 59
    7538:	0f 90       	pop	r0
    753a:	0f be       	out	0x3f, r0	; 63
    753c:	0f 90       	pop	r0
    753e:	1f 90       	pop	r1
    7540:	18 95       	reti

00007542 <serial0SER_USBSend>:
    7542:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <serUSBTxInIndex>
    7546:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <serUSBTxInIndex+0x1>
    754a:	a1 ec       	ldi	r26, 0xC1	; 193
    754c:	b0 e0       	ldi	r27, 0x00	; 0
    754e:	9c 91       	ld	r25, X
    7550:	9f 7d       	andi	r25, 0xDF	; 223
    7552:	9c 93       	st	X, r25
    7554:	af 01       	movw	r20, r30
    7556:	4f 5f       	subi	r20, 0xFF	; 255
    7558:	5f 4f       	sbci	r21, 0xFF	; 255
    755a:	80 83       	st	Z, r24
    755c:	84 e1       	ldi	r24, 0x14	; 20
    755e:	48 31       	cpi	r20, 0x18	; 24
    7560:	58 07       	cpc	r21, r24
    7562:	19 f0       	breq	.+6      	; 0x756a <serial0SER_USBSend+0x28>
    7564:	10 f0       	brcs	.+4      	; 0x756a <serial0SER_USBSend+0x28>
    7566:	49 e1       	ldi	r20, 0x19	; 25
    7568:	5c e0       	ldi	r21, 0x0C	; 12
    756a:	9f b7       	in	r25, 0x3f	; 63
    756c:	f8 94       	cli
    756e:	81 e0       	ldi	r24, 0x01	; 1
    7570:	05 c0       	rjmp	.+10     	; 0x757c <serial0SER_USBSend+0x3a>
    7572:	20 91 19 14 	lds	r18, 0x1419	; 0x801419 <serUSBTxOutIndex>
    7576:	30 91 1a 14 	lds	r19, 0x141A	; 0x80141a <serUSBTxOutIndex+0x1>
    757a:	80 e0       	ldi	r24, 0x00	; 0
    757c:	81 11       	cpse	r24, r1
    757e:	f9 cf       	rjmp	.-14     	; 0x7572 <serial0SER_USBSend+0x30>
    7580:	9f bf       	out	0x3f, r25	; 63
    7582:	42 17       	cp	r20, r18
    7584:	53 07       	cpc	r21, r19
    7586:	49 f4       	brne	.+18     	; 0x759a <serial0SER_USBSend+0x58>
    7588:	8f ef       	ldi	r24, 0xFF	; 255
    758a:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <serUSBOvflFlag>
    758e:	e1 ec       	ldi	r30, 0xC1	; 193
    7590:	f0 e0       	ldi	r31, 0x00	; 0
    7592:	80 81       	ld	r24, Z
    7594:	80 62       	ori	r24, 0x20	; 32
    7596:	80 83       	st	Z, r24
    7598:	08 95       	ret
    759a:	50 93 04 19 	sts	0x1904, r21	; 0x801904 <serUSBTxInIndex+0x1>
    759e:	40 93 03 19 	sts	0x1903, r20	; 0x801903 <serUSBTxInIndex>
    75a2:	e1 ec       	ldi	r30, 0xC1	; 193
    75a4:	f0 e0       	ldi	r31, 0x00	; 0
    75a6:	80 81       	ld	r24, Z
    75a8:	80 62       	ori	r24, 0x20	; 32
    75aa:	80 83       	st	Z, r24
    75ac:	08 95       	ret

000075ae <serial0USB_logMIDIin>:
    75ae:	cf 93       	push	r28
    75b0:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <serUSB_Active>
    75b4:	99 23       	and	r25, r25
    75b6:	61 f0       	breq	.+24     	; 0x75d0 <serial0USB_logMIDIin+0x22>
    75b8:	c8 2f       	mov	r28, r24
    75ba:	89 e6       	ldi	r24, 0x69	; 105
    75bc:	c2 df       	rcall	.-124    	; 0x7542 <serial0SER_USBSend>
    75be:	8c 2f       	mov	r24, r28
    75c0:	82 95       	swap	r24
    75c2:	8f 70       	andi	r24, 0x0F	; 15
    75c4:	dd d2       	rcall	.+1466   	; 0x7b80 <nibbleToChr>
    75c6:	bd df       	rcall	.-134    	; 0x7542 <serial0SER_USBSend>
    75c8:	8c 2f       	mov	r24, r28
    75ca:	8f 70       	andi	r24, 0x0F	; 15
    75cc:	d9 d2       	rcall	.+1458   	; 0x7b80 <nibbleToChr>
    75ce:	b9 df       	rcall	.-142    	; 0x7542 <serial0SER_USBSend>
    75d0:	cf 91       	pop	r28
    75d2:	08 95       	ret

000075d4 <serial1MIDIReadRx>:
    75d4:	cf 93       	push	r28
    75d6:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <midiRxInIndex>
    75da:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <midiRxOutIndex>
    75de:	98 17       	cp	r25, r24
    75e0:	71 f0       	breq	.+28     	; 0x75fe <serial1MIDIReadRx+0x2a>
    75e2:	e0 91 7f 16 	lds	r30, 0x167F	; 0x80167f <midiRxOutIndex>
    75e6:	f0 e0       	ldi	r31, 0x00	; 0
    75e8:	e3 59       	subi	r30, 0x93	; 147
    75ea:	fb 4e       	sbci	r31, 0xEB	; 235
    75ec:	c0 81       	ld	r28, Z
    75ee:	8c 2f       	mov	r24, r28
    75f0:	de df       	rcall	.-68     	; 0x75ae <serial0USB_logMIDIin>
    75f2:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <midiRxOutIndex>
    75f6:	8f 5f       	subi	r24, 0xFF	; 255
    75f8:	80 93 7f 16 	sts	0x167F, r24	; 0x80167f <midiRxOutIndex>
    75fc:	01 c0       	rjmp	.+2      	; 0x7600 <serial1MIDIReadRx+0x2c>
    75fe:	cd ef       	ldi	r28, 0xFD	; 253
    7600:	8c 2f       	mov	r24, r28
    7602:	cf 91       	pop	r28
    7604:	08 95       	ret

00007606 <serial0USB_logMIDIout>:
    7606:	cf 93       	push	r28
    7608:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <serUSB_Active>
    760c:	99 23       	and	r25, r25
    760e:	61 f0       	breq	.+24     	; 0x7628 <serial0USB_logMIDIout+0x22>
    7610:	c8 2f       	mov	r28, r24
    7612:	8f e6       	ldi	r24, 0x6F	; 111
    7614:	96 df       	rcall	.-212    	; 0x7542 <serial0SER_USBSend>
    7616:	8c 2f       	mov	r24, r28
    7618:	82 95       	swap	r24
    761a:	8f 70       	andi	r24, 0x0F	; 15
    761c:	b1 d2       	rcall	.+1378   	; 0x7b80 <nibbleToChr>
    761e:	91 df       	rcall	.-222    	; 0x7542 <serial0SER_USBSend>
    7620:	8c 2f       	mov	r24, r28
    7622:	8f 70       	andi	r24, 0x0F	; 15
    7624:	ad d2       	rcall	.+1370   	; 0x7b80 <nibbleToChr>
    7626:	8d df       	rcall	.-230    	; 0x7542 <serial0SER_USBSend>
    7628:	cf 91       	pop	r28
    762a:	08 95       	ret

0000762c <serial1MIDISend>:
    762c:	cf 93       	push	r28
    762e:	c8 2f       	mov	r28, r24
    7630:	9f b7       	in	r25, 0x3f	; 63
    7632:	f8 94       	cli
    7634:	81 e0       	ldi	r24, 0x01	; 1
    7636:	06 c0       	rjmp	.+12     	; 0x7644 <serial1MIDISend+0x18>
    7638:	e0 e5       	ldi	r30, 0x50	; 80
    763a:	f2 e0       	ldi	r31, 0x02	; 2
    763c:	8a e0       	ldi	r24, 0x0A	; 10
    763e:	80 8b       	std	Z+16, r24	; 0x10
    7640:	11 8a       	std	Z+17, r1	; 0x11
    7642:	80 e0       	ldi	r24, 0x00	; 0
    7644:	81 11       	cpse	r24, r1
    7646:	f8 cf       	rjmp	.-16     	; 0x7638 <serial1MIDISend+0xc>
    7648:	9f bf       	out	0x3f, r25	; 63
    764a:	e9 ec       	ldi	r30, 0xC9	; 201
    764c:	f0 e0       	ldi	r31, 0x00	; 0
    764e:	80 81       	ld	r24, Z
    7650:	8f 7d       	andi	r24, 0xDF	; 223
    7652:	80 83       	st	Z, r24
    7654:	8c 2f       	mov	r24, r28
    7656:	d7 df       	rcall	.-82     	; 0x7606 <serial0USB_logMIDIout>
    7658:	e0 91 1b 14 	lds	r30, 0x141B	; 0x80141b <midiTxInIndex>
    765c:	f0 e0       	ldi	r31, 0x00	; 0
    765e:	e2 59       	subi	r30, 0x92	; 146
    7660:	fa 4e       	sbci	r31, 0xEA	; 234
    7662:	c0 83       	st	Z, r28
    7664:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <midiTxInIndex>
    7668:	8f 5f       	subi	r24, 0xFF	; 255
    766a:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <midiTxOutIndex>
    766e:	89 13       	cpse	r24, r25
    7670:	0e c0       	rjmp	.+28     	; 0x768e <serial1MIDISend+0x62>
    7672:	80 91 82 16 	lds	r24, 0x1682	; 0x801682 <midiTxOvflCount>
    7676:	88 23       	and	r24, r24
    7678:	31 f0       	breq	.+12     	; 0x7686 <serial1MIDISend+0x5a>
    767a:	8f 3f       	cpi	r24, 0xFF	; 255
    767c:	51 f0       	breq	.+20     	; 0x7692 <serial1MIDISend+0x66>
    767e:	8f 5f       	subi	r24, 0xFF	; 255
    7680:	80 93 82 16 	sts	0x1682, r24	; 0x801682 <midiTxOvflCount>
    7684:	06 c0       	rjmp	.+12     	; 0x7692 <serial1MIDISend+0x66>
    7686:	81 e0       	ldi	r24, 0x01	; 1
    7688:	80 93 82 16 	sts	0x1682, r24	; 0x801682 <midiTxOvflCount>
    768c:	02 c0       	rjmp	.+4      	; 0x7692 <serial1MIDISend+0x66>
    768e:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <midiTxInIndex>
    7692:	90 91 1b 14 	lds	r25, 0x141B	; 0x80141b <midiTxInIndex>
    7696:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <midiTxOutIndex>
    769a:	89 17       	cp	r24, r25
    769c:	30 f4       	brcc	.+12     	; 0x76aa <serial1MIDISend+0x7e>
    769e:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <midiTxInIndex>
    76a2:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <midiTxOutIndex>
    76a6:	89 1b       	sub	r24, r25
    76a8:	05 c0       	rjmp	.+10     	; 0x76b4 <serial1MIDISend+0x88>
    76aa:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <midiTxInIndex>
    76ae:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <midiTxOutIndex>
    76b2:	89 1b       	sub	r24, r25
    76b4:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <midiTxBuffUsage>
    76b8:	98 17       	cp	r25, r24
    76ba:	10 f4       	brcc	.+4      	; 0x76c0 <serial1MIDISend+0x94>
    76bc:	80 93 76 16 	sts	0x1676, r24	; 0x801676 <midiTxBuffUsage>
    76c0:	e9 ec       	ldi	r30, 0xC9	; 201
    76c2:	f0 e0       	ldi	r31, 0x00	; 0
    76c4:	80 81       	ld	r24, Z
    76c6:	80 62       	ori	r24, 0x20	; 32
    76c8:	80 83       	st	Z, r24
    76ca:	cf 91       	pop	r28
    76cc:	08 95       	ret

000076ce <serial1MIDISendCmd>:
    76ce:	88 23       	and	r24, r24
    76d0:	9c f4       	brge	.+38     	; 0x76f8 <serial1MIDISendCmd+0x2a>
    76d2:	60 31       	cpi	r22, 0x10	; 16
    76d4:	08 f4       	brcc	.+2      	; 0x76d8 <serial1MIDISendCmd+0xa>
    76d6:	86 2b       	or	r24, r22
    76d8:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <midi_Setting+0x1>
    76dc:	99 23       	and	r25, r25
    76de:	59 f0       	breq	.+22     	; 0x76f6 <serial1MIDISendCmd+0x28>
    76e0:	80 3c       	cpi	r24, 0xC0	; 192
    76e2:	38 f4       	brcc	.+14     	; 0x76f2 <serial1MIDISendCmd+0x24>
    76e4:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <midiTxLastCmd>
    76e8:	89 17       	cp	r24, r25
    76ea:	31 f0       	breq	.+12     	; 0x76f8 <serial1MIDISendCmd+0x2a>
    76ec:	80 93 29 14 	sts	0x1429, r24	; 0x801429 <midiTxLastCmd>
    76f0:	02 c0       	rjmp	.+4      	; 0x76f6 <serial1MIDISendCmd+0x28>
    76f2:	10 92 29 14 	sts	0x1429, r1	; 0x801429 <midiTxLastCmd>
    76f6:	9a cf       	rjmp	.-204    	; 0x762c <serial1MIDISend>
    76f8:	08 95       	ret

000076fa <serial1MIDISendData>:
    76fa:	8f 77       	andi	r24, 0x7F	; 127
    76fc:	97 cf       	rjmp	.-210    	; 0x762c <serial1MIDISend>
    76fe:	08 95       	ret

00007700 <serial0USB_logPipeIn>:
    7700:	cf 93       	push	r28
    7702:	df 93       	push	r29
    7704:	20 91 7e 16 	lds	r18, 0x167E	; 0x80167e <serUSB_Active>
    7708:	22 23       	and	r18, r18
    770a:	a9 f0       	breq	.+42     	; 0x7736 <serial0USB_logPipeIn+0x36>
    770c:	c9 2f       	mov	r28, r25
    770e:	d8 2f       	mov	r29, r24
    7710:	8b e6       	ldi	r24, 0x6B	; 107
    7712:	17 df       	rcall	.-466    	; 0x7542 <serial0SER_USBSend>
    7714:	8c 2f       	mov	r24, r28
    7716:	82 95       	swap	r24
    7718:	8f 70       	andi	r24, 0x0F	; 15
    771a:	32 d2       	rcall	.+1124   	; 0x7b80 <nibbleToChr>
    771c:	12 df       	rcall	.-476    	; 0x7542 <serial0SER_USBSend>
    771e:	cf 70       	andi	r28, 0x0F	; 15
    7720:	8c 2f       	mov	r24, r28
    7722:	2e d2       	rcall	.+1116   	; 0x7b80 <nibbleToChr>
    7724:	0e df       	rcall	.-484    	; 0x7542 <serial0SER_USBSend>
    7726:	8d 2f       	mov	r24, r29
    7728:	82 95       	swap	r24
    772a:	8f 70       	andi	r24, 0x0F	; 15
    772c:	29 d2       	rcall	.+1106   	; 0x7b80 <nibbleToChr>
    772e:	09 df       	rcall	.-494    	; 0x7542 <serial0SER_USBSend>
    7730:	8c 2f       	mov	r24, r28
    7732:	26 d2       	rcall	.+1100   	; 0x7b80 <nibbleToChr>
    7734:	06 df       	rcall	.-500    	; 0x7542 <serial0SER_USBSend>
    7736:	df 91       	pop	r29
    7738:	cf 91       	pop	r28
    773a:	08 95       	ret

0000773c <serial0SER_USB_sendStringP>:
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	fc 01       	movw	r30, r24
    7742:	02 c0       	rjmp	.+4      	; 0x7748 <serial0SER_USB_sendStringP+0xc>
    7744:	fe de       	rcall	.-516    	; 0x7542 <serial0SER_USBSend>
    7746:	fe 01       	movw	r30, r28
    7748:	ef 01       	movw	r28, r30
    774a:	21 96       	adiw	r28, 0x01	; 1
    774c:	84 91       	lpm	r24, Z
    774e:	88 23       	and	r24, r24
    7750:	21 f0       	breq	.+8      	; 0x775a <serial0SER_USB_sendStringP+0x1e>
    7752:	90 91 75 16 	lds	r25, 0x1675	; 0x801675 <serUSBOvflFlag>
    7756:	9f 3f       	cpi	r25, 0xFF	; 255
    7758:	a9 f7       	brne	.-22     	; 0x7744 <serial0SER_USB_sendStringP+0x8>
    775a:	df 91       	pop	r29
    775c:	cf 91       	pop	r28
    775e:	08 95       	ret

00007760 <init_Serial0SerUSB>:
    7760:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    7764:	88 e0       	ldi	r24, 0x08	; 8
    7766:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    776a:	e1 ec       	ldi	r30, 0xC1	; 193
    776c:	f0 e0       	ldi	r31, 0x00	; 0
    776e:	80 81       	ld	r24, Z
    7770:	88 69       	ori	r24, 0x98	; 152
    7772:	80 83       	st	Z, r24
    7774:	e2 ec       	ldi	r30, 0xC2	; 194
    7776:	f0 e0       	ldi	r31, 0x00	; 0
    7778:	80 81       	ld	r24, Z
    777a:	86 60       	ori	r24, 0x06	; 6
    777c:	80 83       	st	Z, r24
    777e:	8d e2       	ldi	r24, 0x2D	; 45
    7780:	94 e1       	ldi	r25, 0x14	; 20
    7782:	90 93 81 16 	sts	0x1681, r25	; 0x801681 <serUSBRxInIndex+0x1>
    7786:	80 93 80 16 	sts	0x1680, r24	; 0x801680 <serUSBRxInIndex>
    778a:	90 93 74 16 	sts	0x1674, r25	; 0x801674 <serUSBRxOutIndex+0x1>
    778e:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSBRxOutIndex>
    7792:	89 e1       	ldi	r24, 0x19	; 25
    7794:	9c e0       	ldi	r25, 0x0C	; 12
    7796:	90 93 1a 14 	sts	0x141A, r25	; 0x80141a <serUSBTxOutIndex+0x1>
    779a:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <serUSBTxOutIndex>
    779e:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <serUSBTxInIndex+0x1>
    77a2:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <serUSBTxInIndex>
    77a6:	10 92 75 16 	sts	0x1675, r1	; 0x801675 <serUSBOvflFlag>
    77aa:	0e 94 2a 0c 	call	0x1854	; 0x1854 <eeprom_ReadUSB>
    77ae:	8f 3f       	cpi	r24, 0xFF	; 255
    77b0:	41 f4       	brne	.+16     	; 0x77c2 <init_Serial0SerUSB+0x62>
    77b2:	10 92 7e 16 	sts	0x167E, r1	; 0x80167e <serUSB_Active>
    77b6:	40 e0       	ldi	r20, 0x00	; 0
    77b8:	50 e0       	ldi	r21, 0x00	; 0
    77ba:	64 e0       	ldi	r22, 0x04	; 4
    77bc:	81 e0       	ldi	r24, 0x01	; 1
    77be:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <log_putError>
    77c2:	80 91 7e 16 	lds	r24, 0x167E	; 0x80167e <serUSB_Active>
    77c6:	8f 3f       	cpi	r24, 0xFF	; 255
    77c8:	49 f4       	brne	.+18     	; 0x77dc <init_Serial0SerUSB+0x7c>
    77ca:	87 e0       	ldi	r24, 0x07	; 7
    77cc:	94 e0       	ldi	r25, 0x04	; 4
    77ce:	b6 df       	rcall	.-148    	; 0x773c <serial0SER_USB_sendStringP>
    77d0:	8b ea       	ldi	r24, 0xAB	; 171
    77d2:	94 e1       	ldi	r25, 0x14	; 20
    77d4:	b3 df       	rcall	.-154    	; 0x773c <serial0SER_USB_sendStringP>
    77d6:	83 ef       	ldi	r24, 0xF3	; 243
    77d8:	94 e1       	ldi	r25, 0x14	; 20
    77da:	b0 cf       	rjmp	.-160    	; 0x773c <serial0SER_USB_sendStringP>
    77dc:	08 95       	ret

000077de <serial0SER_USB_sendCRLF>:
    77de:	83 ef       	ldi	r24, 0xF3	; 243
    77e0:	94 e1       	ldi	r25, 0x14	; 20
    77e2:	ac df       	rcall	.-168    	; 0x773c <serial0SER_USB_sendStringP>
    77e4:	9f b7       	in	r25, 0x3f	; 63
    77e6:	f8 94       	cli
    77e8:	81 e0       	ldi	r24, 0x01	; 1
    77ea:	06 c0       	rjmp	.+12     	; 0x77f8 <serial0SER_USB_sendCRLF+0x1a>
    77ec:	e0 e5       	ldi	r30, 0x50	; 80
    77ee:	f2 e0       	ldi	r31, 0x02	; 2
    77f0:	81 e0       	ldi	r24, 0x01	; 1
    77f2:	84 8b       	std	Z+20, r24	; 0x14
    77f4:	15 8a       	std	Z+21, r1	; 0x15
    77f6:	80 e0       	ldi	r24, 0x00	; 0
    77f8:	81 11       	cpse	r24, r1
    77fa:	f8 cf       	rjmp	.-16     	; 0x77ec <serial0SER_USB_sendCRLF+0xe>
    77fc:	9f bf       	out	0x3f, r25	; 63
    77fe:	20 91 03 19 	lds	r18, 0x1903	; 0x801903 <serUSBTxInIndex>
    7802:	30 91 04 19 	lds	r19, 0x1904	; 0x801904 <serUSBTxInIndex+0x1>
    7806:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <serUSBTxOutIndex>
    780a:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <serUSBTxOutIndex+0x1>
    780e:	28 17       	cp	r18, r24
    7810:	39 07       	cpc	r19, r25
    7812:	41 f0       	breq	.+16     	; 0x7824 <serial0SER_USB_sendCRLF+0x46>
    7814:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <swTimer+0x14>
    7818:	88 23       	and	r24, r24
    781a:	21 f0       	breq	.+8      	; 0x7824 <serial0SER_USB_sendCRLF+0x46>
    781c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <swTimer+0x14>
    7820:	8f 3f       	cpi	r24, 0xFF	; 255
    7822:	69 f7       	brne	.-38     	; 0x77fe <serial0SER_USB_sendCRLF+0x20>
    7824:	08 95       	ret

00007826 <serial0SER_USB_sendString>:
    7826:	1f 93       	push	r17
    7828:	cf 93       	push	r28
    782a:	df 93       	push	r29
    782c:	ec 01       	movw	r28, r24
    782e:	10 e5       	ldi	r17, 0x50	; 80
    7830:	03 c0       	rjmp	.+6      	; 0x7838 <serial0SER_USB_sendString+0x12>
    7832:	21 96       	adiw	r28, 0x01	; 1
    7834:	86 de       	rcall	.-756    	; 0x7542 <serial0SER_USBSend>
    7836:	11 50       	subi	r17, 0x01	; 1
    7838:	88 81       	ld	r24, Y
    783a:	88 23       	and	r24, r24
    783c:	31 f0       	breq	.+12     	; 0x784a <serial0SER_USB_sendString+0x24>
    783e:	90 91 75 16 	lds	r25, 0x1675	; 0x801675 <serUSBOvflFlag>
    7842:	9f 3f       	cpi	r25, 0xFF	; 255
    7844:	11 f0       	breq	.+4      	; 0x784a <serial0SER_USB_sendString+0x24>
    7846:	11 11       	cpse	r17, r1
    7848:	f4 cf       	rjmp	.-24     	; 0x7832 <serial0SER_USB_sendString+0xc>
    784a:	df 91       	pop	r29
    784c:	cf 91       	pop	r28
    784e:	1f 91       	pop	r17
    7850:	08 95       	ret

00007852 <__vector_25>:
    7852:	1f 92       	push	r1
    7854:	0f 92       	push	r0
    7856:	0f b6       	in	r0, 0x3f	; 63
    7858:	0f 92       	push	r0
    785a:	11 24       	eor	r1, r1
    785c:	0b b6       	in	r0, 0x3b	; 59
    785e:	0f 92       	push	r0
    7860:	2f 93       	push	r18
    7862:	3f 93       	push	r19
    7864:	4f 93       	push	r20
    7866:	5f 93       	push	r21
    7868:	8f 93       	push	r24
    786a:	9f 93       	push	r25
    786c:	ef 93       	push	r30
    786e:	ff 93       	push	r31
    7870:	e0 91 80 16 	lds	r30, 0x1680	; 0x801680 <serUSBRxInIndex>
    7874:	f0 91 81 16 	lds	r31, 0x1681	; 0x801681 <serUSBRxInIndex+0x1>
    7878:	af 01       	movw	r20, r30
    787a:	4f 5f       	subi	r20, 0xFF	; 255
    787c:	5f 4f       	sbci	r21, 0xFF	; 255
    787e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7882:	80 83       	st	Z, r24
    7884:	84 e1       	ldi	r24, 0x14	; 20
    7886:	4c 36       	cpi	r20, 0x6C	; 108
    7888:	58 07       	cpc	r21, r24
    788a:	19 f0       	breq	.+6      	; 0x7892 <__vector_25+0x40>
    788c:	10 f0       	brcs	.+4      	; 0x7892 <__vector_25+0x40>
    788e:	4d e2       	ldi	r20, 0x2D	; 45
    7890:	54 e1       	ldi	r21, 0x14	; 20
    7892:	9f b7       	in	r25, 0x3f	; 63
    7894:	f8 94       	cli
    7896:	81 e0       	ldi	r24, 0x01	; 1
    7898:	05 c0       	rjmp	.+10     	; 0x78a4 <__vector_25+0x52>
    789a:	20 91 73 16 	lds	r18, 0x1673	; 0x801673 <serUSBRxOutIndex>
    789e:	30 91 74 16 	lds	r19, 0x1674	; 0x801674 <serUSBRxOutIndex+0x1>
    78a2:	80 e0       	ldi	r24, 0x00	; 0
    78a4:	81 11       	cpse	r24, r1
    78a6:	f9 cf       	rjmp	.-14     	; 0x789a <__vector_25+0x48>
    78a8:	9f bf       	out	0x3f, r25	; 63
    78aa:	42 17       	cp	r20, r18
    78ac:	53 07       	cpc	r21, r19
    78ae:	21 f4       	brne	.+8      	; 0x78b8 <__vector_25+0x66>
    78b0:	8f ef       	ldi	r24, 0xFF	; 255
    78b2:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <serUSBOvflFlag>
    78b6:	04 c0       	rjmp	.+8      	; 0x78c0 <__vector_25+0x6e>
    78b8:	50 93 81 16 	sts	0x1681, r21	; 0x801681 <serUSBRxInIndex+0x1>
    78bc:	40 93 80 16 	sts	0x1680, r20	; 0x801680 <serUSBRxInIndex>
    78c0:	ff 91       	pop	r31
    78c2:	ef 91       	pop	r30
    78c4:	9f 91       	pop	r25
    78c6:	8f 91       	pop	r24
    78c8:	5f 91       	pop	r21
    78ca:	4f 91       	pop	r20
    78cc:	3f 91       	pop	r19
    78ce:	2f 91       	pop	r18
    78d0:	0f 90       	pop	r0
    78d2:	0b be       	out	0x3b, r0	; 59
    78d4:	0f 90       	pop	r0
    78d6:	0f be       	out	0x3f, r0	; 63
    78d8:	0f 90       	pop	r0
    78da:	1f 90       	pop	r1
    78dc:	18 95       	reti

000078de <__vector_26>:
    78de:	1f 92       	push	r1
    78e0:	0f 92       	push	r0
    78e2:	0f b6       	in	r0, 0x3f	; 63
    78e4:	0f 92       	push	r0
    78e6:	11 24       	eor	r1, r1
    78e8:	0b b6       	in	r0, 0x3b	; 59
    78ea:	0f 92       	push	r0
    78ec:	2f 93       	push	r18
    78ee:	8f 93       	push	r24
    78f0:	9f 93       	push	r25
    78f2:	ef 93       	push	r30
    78f4:	ff 93       	push	r31
    78f6:	e0 91 19 14 	lds	r30, 0x1419	; 0x801419 <serUSBTxOutIndex>
    78fa:	f0 91 1a 14 	lds	r31, 0x141A	; 0x80141a <serUSBTxOutIndex+0x1>
    78fe:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <serUSBTxInIndex>
    7902:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <serUSBTxInIndex+0x1>
    7906:	e8 17       	cp	r30, r24
    7908:	f9 07       	cpc	r31, r25
    790a:	89 f0       	breq	.+34     	; 0x792e <__vector_26+0x50>
    790c:	cf 01       	movw	r24, r30
    790e:	01 96       	adiw	r24, 0x01	; 1
    7910:	20 81       	ld	r18, Z
    7912:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7916:	24 e1       	ldi	r18, 0x14	; 20
    7918:	88 31       	cpi	r24, 0x18	; 24
    791a:	92 07       	cpc	r25, r18
    791c:	19 f0       	breq	.+6      	; 0x7924 <__vector_26+0x46>
    791e:	10 f0       	brcs	.+4      	; 0x7924 <__vector_26+0x46>
    7920:	89 e1       	ldi	r24, 0x19	; 25
    7922:	9c e0       	ldi	r25, 0x0C	; 12
    7924:	90 93 1a 14 	sts	0x141A, r25	; 0x80141a <serUSBTxOutIndex+0x1>
    7928:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <serUSBTxOutIndex>
    792c:	05 c0       	rjmp	.+10     	; 0x7938 <__vector_26+0x5a>
    792e:	e1 ec       	ldi	r30, 0xC1	; 193
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	80 81       	ld	r24, Z
    7934:	8f 7d       	andi	r24, 0xDF	; 223
    7936:	80 83       	st	Z, r24
    7938:	ff 91       	pop	r31
    793a:	ef 91       	pop	r30
    793c:	9f 91       	pop	r25
    793e:	8f 91       	pop	r24
    7940:	2f 91       	pop	r18
    7942:	0f 90       	pop	r0
    7944:	0b be       	out	0x3b, r0	; 59
    7946:	0f 90       	pop	r0
    7948:	0f be       	out	0x3f, r0	; 63
    794a:	0f 90       	pop	r0
    794c:	1f 90       	pop	r1
    794e:	18 95       	reti

00007950 <init_Serial3SerESP>:
    7950:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    7954:	88 e0       	ldi	r24, 0x08	; 8
    7956:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    795a:	e1 e3       	ldi	r30, 0x31	; 49
    795c:	f1 e0       	ldi	r31, 0x01	; 1
    795e:	80 81       	ld	r24, Z
    7960:	88 69       	ori	r24, 0x98	; 152
    7962:	80 83       	st	Z, r24
    7964:	e2 e3       	ldi	r30, 0x32	; 50
    7966:	f1 e0       	ldi	r31, 0x01	; 1
    7968:	80 81       	ld	r24, Z
    796a:	86 60       	ori	r24, 0x06	; 6
    796c:	80 83       	st	Z, r24
    796e:	83 e8       	ldi	r24, 0x83	; 131
    7970:	96 e1       	ldi	r25, 0x16	; 22
    7972:	90 93 2b 14 	sts	0x142B, r25	; 0x80142b <serESPRxInIndex+0x1>
    7976:	80 93 2a 14 	sts	0x142A, r24	; 0x80142a <serESPRxInIndex>
    797a:	90 93 26 14 	sts	0x1426, r25	; 0x801426 <serESPRxOutIndex+0x1>
    797e:	80 93 25 14 	sts	0x1425, r24	; 0x801425 <serESPRxOutIndex>
    7982:	83 e0       	ldi	r24, 0x03	; 3
    7984:	97 e1       	ldi	r25, 0x17	; 23
    7986:	90 93 6f 16 	sts	0x166F, r25	; 0x80166f <serESPTxOutIndex+0x1>
    798a:	80 93 6e 16 	sts	0x166E, r24	; 0x80166e <serESPTxOutIndex>
    798e:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <serESPTxInIndex+0x1>
    7992:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <serESPTxInIndex>
    7996:	10 92 1c 14 	sts	0x141C, r1	; 0x80141c <serESPOvflFlag>
    799a:	8f ef       	ldi	r24, 0xFF	; 255
    799c:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <serESP_Active>
    79a0:	80 e0       	ldi	r24, 0x00	; 0
    79a2:	07 c0       	rjmp	.+14     	; 0x79b2 <init_Serial3SerESP+0x62>
    79a4:	e8 2f       	mov	r30, r24
    79a6:	f0 e0       	ldi	r31, 0x00	; 0
    79a8:	e3 5e       	subi	r30, 0xE3	; 227
    79aa:	fb 4e       	sbci	r31, 0xEB	; 235
    79ac:	9f ef       	ldi	r25, 0xFF	; 255
    79ae:	90 83       	st	Z, r25
    79b0:	8f 5f       	subi	r24, 0xFF	; 255
    79b2:	88 30       	cpi	r24, 0x08	; 8
    79b4:	b8 f3       	brcs	.-18     	; 0x79a4 <init_Serial3SerESP+0x54>
    79b6:	08 95       	ret

000079b8 <serial3SER_ESPSend>:
    79b8:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <serESPTxInIndex>
    79bc:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <serESPTxInIndex+0x1>
    79c0:	a1 e3       	ldi	r26, 0x31	; 49
    79c2:	b1 e0       	ldi	r27, 0x01	; 1
    79c4:	9c 91       	ld	r25, X
    79c6:	9f 7d       	andi	r25, 0xDF	; 223
    79c8:	9c 93       	st	X, r25
    79ca:	af 01       	movw	r20, r30
    79cc:	4f 5f       	subi	r20, 0xFF	; 255
    79ce:	5f 4f       	sbci	r21, 0xFF	; 255
    79d0:	80 83       	st	Z, r24
    79d2:	89 e1       	ldi	r24, 0x19	; 25
    79d4:	42 30       	cpi	r20, 0x02	; 2
    79d6:	58 07       	cpc	r21, r24
    79d8:	19 f0       	breq	.+6      	; 0x79e0 <serial3SER_ESPSend+0x28>
    79da:	10 f0       	brcs	.+4      	; 0x79e0 <serial3SER_ESPSend+0x28>
    79dc:	43 e0       	ldi	r20, 0x03	; 3
    79de:	57 e1       	ldi	r21, 0x17	; 23
    79e0:	9f b7       	in	r25, 0x3f	; 63
    79e2:	f8 94       	cli
    79e4:	81 e0       	ldi	r24, 0x01	; 1
    79e6:	05 c0       	rjmp	.+10     	; 0x79f2 <serial3SER_ESPSend+0x3a>
    79e8:	20 91 6e 16 	lds	r18, 0x166E	; 0x80166e <serESPTxOutIndex>
    79ec:	30 91 6f 16 	lds	r19, 0x166F	; 0x80166f <serESPTxOutIndex+0x1>
    79f0:	80 e0       	ldi	r24, 0x00	; 0
    79f2:	81 11       	cpse	r24, r1
    79f4:	f9 cf       	rjmp	.-14     	; 0x79e8 <serial3SER_ESPSend+0x30>
    79f6:	9f bf       	out	0x3f, r25	; 63
    79f8:	42 17       	cp	r20, r18
    79fa:	53 07       	cpc	r21, r19
    79fc:	49 f4       	brne	.+18     	; 0x7a10 <serial3SER_ESPSend+0x58>
    79fe:	8f ef       	ldi	r24, 0xFF	; 255
    7a00:	80 93 1c 14 	sts	0x141C, r24	; 0x80141c <serESPOvflFlag>
    7a04:	e1 e3       	ldi	r30, 0x31	; 49
    7a06:	f1 e0       	ldi	r31, 0x01	; 1
    7a08:	80 81       	ld	r24, Z
    7a0a:	80 62       	ori	r24, 0x20	; 32
    7a0c:	80 83       	st	Z, r24
    7a0e:	08 95       	ret
    7a10:	50 93 72 16 	sts	0x1672, r21	; 0x801672 <serESPTxInIndex+0x1>
    7a14:	40 93 71 16 	sts	0x1671, r20	; 0x801671 <serESPTxInIndex>
    7a18:	e1 e3       	ldi	r30, 0x31	; 49
    7a1a:	f1 e0       	ldi	r31, 0x01	; 1
    7a1c:	80 81       	ld	r24, Z
    7a1e:	80 62       	ori	r24, 0x20	; 32
    7a20:	80 83       	st	Z, r24
    7a22:	08 95       	ret

00007a24 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    7a24:	e0 91 25 14 	lds	r30, 0x1425	; 0x801425 <serESPRxOutIndex>
    7a28:	f0 91 26 14 	lds	r31, 0x1426	; 0x801426 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    7a2c:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <serESPRxInIndex>
    7a30:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <serESPRxInIndex+0x1>
    7a34:	e8 17       	cp	r30, r24
    7a36:	f9 07       	cpc	r31, r25
    7a38:	81 f0       	breq	.+32     	; 0x7a5a <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    7a3a:	9f 01       	movw	r18, r30
    7a3c:	2f 5f       	subi	r18, 0xFF	; 255
    7a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7a40:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    7a42:	97 e1       	ldi	r25, 0x17	; 23
    7a44:	22 30       	cpi	r18, 0x02	; 2
    7a46:	39 07       	cpc	r19, r25
    7a48:	19 f0       	breq	.+6      	; 0x7a50 <serial3SER_ESPReadRx+0x2c>
    7a4a:	10 f0       	brcs	.+4      	; 0x7a50 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    7a4c:	23 e8       	ldi	r18, 0x83	; 131
    7a4e:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    7a50:	30 93 26 14 	sts	0x1426, r19	; 0x801426 <serESPRxOutIndex+0x1>
    7a54:	20 93 25 14 	sts	0x1425, r18	; 0x801425 <serESPRxOutIndex>
    7a58:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    7a5c:	08 95       	ret

00007a5e <__vector_54>:

ISR(USART3_RX_vect) {
    7a5e:	1f 92       	push	r1
    7a60:	0f 92       	push	r0
    7a62:	0f b6       	in	r0, 0x3f	; 63
    7a64:	0f 92       	push	r0
    7a66:	11 24       	eor	r1, r1
    7a68:	0b b6       	in	r0, 0x3b	; 59
    7a6a:	0f 92       	push	r0
    7a6c:	2f 93       	push	r18
    7a6e:	3f 93       	push	r19
    7a70:	4f 93       	push	r20
    7a72:	5f 93       	push	r21
    7a74:	6f 93       	push	r22
    7a76:	8f 93       	push	r24
    7a78:	9f 93       	push	r25
    7a7a:	af 93       	push	r26
    7a7c:	bf 93       	push	r27
    7a7e:	ef 93       	push	r30
    7a80:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    7a82:	e0 91 2a 14 	lds	r30, 0x142A	; 0x80142a <serESPRxInIndex>
    7a86:	f0 91 2b 14 	lds	r31, 0x142B	; 0x80142b <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    7a8a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    7a8e:	af 01       	movw	r20, r30
    7a90:	4f 5f       	subi	r20, 0xFF	; 255
    7a92:	5f 4f       	sbci	r21, 0xFF	; 255
    7a94:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    7a96:	87 e1       	ldi	r24, 0x17	; 23
    7a98:	42 30       	cpi	r20, 0x02	; 2
    7a9a:	58 07       	cpc	r21, r24
    7a9c:	19 f0       	breq	.+6      	; 0x7aa4 <__vector_54+0x46>
    7a9e:	10 f0       	brcs	.+4      	; 0x7aa4 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    7aa0:	43 e8       	ldi	r20, 0x83	; 131
    7aa2:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7aa4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7aa6:	f8 94       	cli
    7aa8:	81 e0       	ldi	r24, 0x01	; 1
    7aaa:	05 c0       	rjmp	.+10     	; 0x7ab6 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    7aac:	20 91 25 14 	lds	r18, 0x1425	; 0x801425 <serESPRxOutIndex>
    7ab0:	30 91 26 14 	lds	r19, 0x1426	; 0x801426 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7ab4:	80 e0       	ldi	r24, 0x00	; 0
    7ab6:	81 11       	cpse	r24, r1
    7ab8:	f9 cf       	rjmp	.-14     	; 0x7aac <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7aba:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7abc:	42 17       	cp	r20, r18
    7abe:	53 07       	cpc	r21, r19
    7ac0:	39 f4       	brne	.+14     	; 0x7ad0 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    7ac2:	8f ef       	ldi	r24, 0xFF	; 255
    7ac4:	80 93 1c 14 	sts	0x141C, r24	; 0x80141c <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7ac8:	80 e0       	ldi	r24, 0x00	; 0
    7aca:	a4 e2       	ldi	r26, 0x24	; 36
    7acc:	b4 e1       	ldi	r27, 0x14	; 20
    7ace:	0a c0       	rjmp	.+20     	; 0x7ae4 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    7ad0:	50 93 2b 14 	sts	0x142B, r21	; 0x80142b <serESPRxInIndex+0x1>
    7ad4:	40 93 2a 14 	sts	0x142A, r20	; 0x80142a <serESPRxInIndex>
    7ad8:	f7 cf       	rjmp	.-18     	; 0x7ac8 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7ada:	fd 01       	movw	r30, r26
    7adc:	92 91       	ld	r25, -Z
    7ade:	9c 93       	st	X, r25
		inpBufferPtr--;
    7ae0:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    7ae2:	8f 5f       	subi	r24, 0xFF	; 255
    7ae4:	87 30       	cpi	r24, 0x07	; 7
    7ae6:	c8 f3       	brcs	.-14     	; 0x7ada <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7ae8:	6c 93       	st	X, r22
}
    7aea:	ff 91       	pop	r31
    7aec:	ef 91       	pop	r30
    7aee:	bf 91       	pop	r27
    7af0:	af 91       	pop	r26
    7af2:	9f 91       	pop	r25
    7af4:	8f 91       	pop	r24
    7af6:	6f 91       	pop	r22
    7af8:	5f 91       	pop	r21
    7afa:	4f 91       	pop	r20
    7afc:	3f 91       	pop	r19
    7afe:	2f 91       	pop	r18
    7b00:	0f 90       	pop	r0
    7b02:	0b be       	out	0x3b, r0	; 59
    7b04:	0f 90       	pop	r0
    7b06:	0f be       	out	0x3f, r0	; 63
    7b08:	0f 90       	pop	r0
    7b0a:	1f 90       	pop	r1
    7b0c:	18 95       	reti

00007b0e <__vector_55>:

ISR(USART3_UDRE_vect) {
    7b0e:	1f 92       	push	r1
    7b10:	0f 92       	push	r0
    7b12:	0f b6       	in	r0, 0x3f	; 63
    7b14:	0f 92       	push	r0
    7b16:	11 24       	eor	r1, r1
    7b18:	0b b6       	in	r0, 0x3b	; 59
    7b1a:	0f 92       	push	r0
    7b1c:	2f 93       	push	r18
    7b1e:	8f 93       	push	r24
    7b20:	9f 93       	push	r25
    7b22:	ef 93       	push	r30
    7b24:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    7b26:	e0 91 6e 16 	lds	r30, 0x166E	; 0x80166e <serESPTxOutIndex>
    7b2a:	f0 91 6f 16 	lds	r31, 0x166F	; 0x80166f <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    7b2e:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <serESPTxInIndex>
    7b32:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <serESPTxInIndex+0x1>
    7b36:	e8 17       	cp	r30, r24
    7b38:	f9 07       	cpc	r31, r25
    7b3a:	89 f0       	breq	.+34     	; 0x7b5e <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    7b3c:	cf 01       	movw	r24, r30
    7b3e:	01 96       	adiw	r24, 0x01	; 1
    7b40:	20 81       	ld	r18, Z
    7b42:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    7b46:	29 e1       	ldi	r18, 0x19	; 25
    7b48:	82 30       	cpi	r24, 0x02	; 2
    7b4a:	92 07       	cpc	r25, r18
    7b4c:	19 f0       	breq	.+6      	; 0x7b54 <__vector_55+0x46>
    7b4e:	10 f0       	brcs	.+4      	; 0x7b54 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    7b50:	83 e0       	ldi	r24, 0x03	; 3
    7b52:	97 e1       	ldi	r25, 0x17	; 23
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    7b54:	90 93 6f 16 	sts	0x166F, r25	; 0x80166f <serESPTxOutIndex+0x1>
    7b58:	80 93 6e 16 	sts	0x166E, r24	; 0x80166e <serESPTxOutIndex>
    7b5c:	05 c0       	rjmp	.+10     	; 0x7b68 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    7b5e:	e1 e3       	ldi	r30, 0x31	; 49
    7b60:	f1 e0       	ldi	r31, 0x01	; 1
    7b62:	80 81       	ld	r24, Z
    7b64:	8f 7d       	andi	r24, 0xDF	; 223
    7b66:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    7b68:	ff 91       	pop	r31
    7b6a:	ef 91       	pop	r30
    7b6c:	9f 91       	pop	r25
    7b6e:	8f 91       	pop	r24
    7b70:	2f 91       	pop	r18
    7b72:	0f 90       	pop	r0
    7b74:	0b be       	out	0x3b, r0	; 59
    7b76:	0f 90       	pop	r0
    7b78:	0f be       	out	0x3f, r0	; 63
    7b7a:	0f 90       	pop	r0
    7b7c:	1f 90       	pop	r1
    7b7e:	18 95       	reti

00007b80 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    7b80:	8a 30       	cpi	r24, 0x0A	; 10
    7b82:	10 f0       	brcs	.+4      	; 0x7b88 <nibbleToChr+0x8>
    7b84:	89 5c       	subi	r24, 0xC9	; 201
    7b86:	08 95       	ret
    7b88:	80 5d       	subi	r24, 0xD0	; 208
    7b8a:	08 95       	ret

00007b8c <lcd_noteOut>:
    7b8c:	cf 93       	push	r28
    7b8e:	df 93       	push	r29
    7b90:	88 23       	and	r24, r24
    7b92:	e4 f1       	brlt	.+120    	; 0x7c0c <lcd_noteOut+0x80>
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	02 c0       	rjmp	.+4      	; 0x7b9c <lcd_noteOut+0x10>
    7b98:	9f 5f       	subi	r25, 0xFF	; 255
    7b9a:	8c 50       	subi	r24, 0x0C	; 12
    7b9c:	8c 30       	cpi	r24, 0x0C	; 12
    7b9e:	e0 f7       	brcc	.-8      	; 0x7b98 <lcd_noteOut+0xc>
    7ba0:	48 2f       	mov	r20, r24
    7ba2:	50 e0       	ldi	r21, 0x00	; 0
    7ba4:	4c 30       	cpi	r20, 0x0C	; 12
    7ba6:	51 05       	cpc	r21, r1
    7ba8:	30 f4       	brcc	.+12     	; 0x7bb6 <lcd_noteOut+0x2a>
    7baa:	fa 01       	movw	r30, r20
    7bac:	88 27       	eor	r24, r24
    7bae:	ea 55       	subi	r30, 0x5A	; 90
    7bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    7bb4:	08 c3       	rjmp	.+1552   	; 0x81c6 <__tablejump2__>
    7bb6:	d3 e2       	ldi	r29, 0x23	; 35
    7bb8:	80 e2       	ldi	r24, 0x20	; 32
    7bba:	23 c0       	rjmp	.+70     	; 0x7c02 <lcd_noteOut+0x76>
    7bbc:	d3 e2       	ldi	r29, 0x23	; 35
    7bbe:	84 e4       	ldi	r24, 0x44	; 68
    7bc0:	20 c0       	rjmp	.+64     	; 0x7c02 <lcd_noteOut+0x76>
    7bc2:	d3 e2       	ldi	r29, 0x23	; 35
    7bc4:	86 e4       	ldi	r24, 0x46	; 70
    7bc6:	1d c0       	rjmp	.+58     	; 0x7c02 <lcd_noteOut+0x76>
    7bc8:	d3 e2       	ldi	r29, 0x23	; 35
    7bca:	87 e4       	ldi	r24, 0x47	; 71
    7bcc:	1a c0       	rjmp	.+52     	; 0x7c02 <lcd_noteOut+0x76>
    7bce:	d3 e2       	ldi	r29, 0x23	; 35
    7bd0:	81 e4       	ldi	r24, 0x41	; 65
    7bd2:	17 c0       	rjmp	.+46     	; 0x7c02 <lcd_noteOut+0x76>
    7bd4:	d5 ea       	ldi	r29, 0xA5	; 165
    7bd6:	83 e4       	ldi	r24, 0x43	; 67
    7bd8:	14 c0       	rjmp	.+40     	; 0x7c02 <lcd_noteOut+0x76>
    7bda:	d5 ea       	ldi	r29, 0xA5	; 165
    7bdc:	84 e4       	ldi	r24, 0x44	; 68
    7bde:	11 c0       	rjmp	.+34     	; 0x7c02 <lcd_noteOut+0x76>
    7be0:	d5 ea       	ldi	r29, 0xA5	; 165
    7be2:	85 e4       	ldi	r24, 0x45	; 69
    7be4:	0e c0       	rjmp	.+28     	; 0x7c02 <lcd_noteOut+0x76>
    7be6:	d5 ea       	ldi	r29, 0xA5	; 165
    7be8:	86 e4       	ldi	r24, 0x46	; 70
    7bea:	0b c0       	rjmp	.+22     	; 0x7c02 <lcd_noteOut+0x76>
    7bec:	d5 ea       	ldi	r29, 0xA5	; 165
    7bee:	87 e4       	ldi	r24, 0x47	; 71
    7bf0:	08 c0       	rjmp	.+16     	; 0x7c02 <lcd_noteOut+0x76>
    7bf2:	d5 ea       	ldi	r29, 0xA5	; 165
    7bf4:	81 e4       	ldi	r24, 0x41	; 65
    7bf6:	05 c0       	rjmp	.+10     	; 0x7c02 <lcd_noteOut+0x76>
    7bf8:	d5 ea       	ldi	r29, 0xA5	; 165
    7bfa:	88 e4       	ldi	r24, 0x48	; 72
    7bfc:	02 c0       	rjmp	.+4      	; 0x7c02 <lcd_noteOut+0x76>
    7bfe:	d3 e2       	ldi	r29, 0x23	; 35
    7c00:	83 e4       	ldi	r24, 0x43	; 67
    7c02:	99 23       	and	r25, r25
    7c04:	39 f0       	breq	.+14     	; 0x7c14 <lcd_noteOut+0x88>
    7c06:	cf e2       	ldi	r28, 0x2F	; 47
    7c08:	c9 0f       	add	r28, r25
    7c0a:	05 c0       	rjmp	.+10     	; 0x7c16 <lcd_noteOut+0x8a>
    7c0c:	cd e2       	ldi	r28, 0x2D	; 45
    7c0e:	dd e2       	ldi	r29, 0x2D	; 45
    7c10:	8d e2       	ldi	r24, 0x2D	; 45
    7c12:	01 c0       	rjmp	.+2      	; 0x7c16 <lcd_noteOut+0x8a>
    7c14:	cd e2       	ldi	r28, 0x2D	; 45
    7c16:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c1a:	8d 2f       	mov	r24, r29
    7c1c:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c20:	8c 2f       	mov	r24, r28
    7c22:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c26:	83 e0       	ldi	r24, 0x03	; 3
    7c28:	df 91       	pop	r29
    7c2a:	cf 91       	pop	r28
    7c2c:	08 95       	ret

00007c2e <lcd_ChannelOut>:
    7c2e:	cf 93       	push	r28
    7c30:	c8 2f       	mov	r28, r24
    7c32:	cf 70       	andi	r28, 0x0F	; 15
    7c34:	81 e0       	ldi	r24, 0x01	; 1
    7c36:	8c 0f       	add	r24, r28
    7c38:	8a 30       	cpi	r24, 0x0A	; 10
    7c3a:	28 f0       	brcs	.+10     	; 0x7c46 <lcd_ChannelOut+0x18>
    7c3c:	81 e3       	ldi	r24, 0x31	; 49
    7c3e:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c42:	87 ef       	ldi	r24, 0xF7	; 247
    7c44:	8c 0f       	add	r24, r28
    7c46:	80 5d       	subi	r24, 0xD0	; 208
    7c48:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c4c:	cf 91       	pop	r28
    7c4e:	08 95       	ret

00007c50 <lcd_ManualOutDec>:
    7c50:	84 30       	cpi	r24, 0x04	; 4
    7c52:	20 f0       	brcs	.+8      	; 0x7c5c <lcd_ManualOutDec+0xc>
    7c54:	8d e2       	ldi	r24, 0x2D	; 45
    7c56:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <lcd_putc>
    7c5a:	08 95       	ret
    7c5c:	83 30       	cpi	r24, 0x03	; 3
    7c5e:	21 f4       	brne	.+8      	; 0x7c68 <lcd_ManualOutDec+0x18>
    7c60:	80 e5       	ldi	r24, 0x50	; 80
    7c62:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <lcd_putc>
    7c66:	08 95       	ret
    7c68:	93 e3       	ldi	r25, 0x33	; 51
    7c6a:	98 1b       	sub	r25, r24
    7c6c:	89 2f       	mov	r24, r25
    7c6e:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <lcd_putc>
    7c72:	08 95       	ret

00007c74 <lcd_blank>:
    7c74:	cf 93       	push	r28
    7c76:	04 c0       	rjmp	.+8      	; 0x7c80 <lcd_blank+0xc>
    7c78:	80 e2       	ldi	r24, 0x20	; 32
    7c7a:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c7e:	8c 2f       	mov	r24, r28
    7c80:	cf ef       	ldi	r28, 0xFF	; 255
    7c82:	c8 0f       	add	r28, r24
    7c84:	81 11       	cpse	r24, r1
    7c86:	f8 cf       	rjmp	.-16     	; 0x7c78 <lcd_blank+0x4>
    7c88:	cf 91       	pop	r28
    7c8a:	08 95       	ret

00007c8c <lcd_clrEol>:
    7c8c:	cf 93       	push	r28
    7c8e:	90 e0       	ldi	r25, 0x00	; 0
    7c90:	04 c0       	rjmp	.+8      	; 0x7c9a <lcd_clrEol+0xe>
    7c92:	80 e2       	ldi	r24, 0x20	; 32
    7c94:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7c98:	9c 2f       	mov	r25, r28
    7c9a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <lcd_cursorPos>
    7c9e:	84 31       	cpi	r24, 0x14	; 20
    7ca0:	51 f0       	breq	.+20     	; 0x7cb6 <lcd_clrEol+0x2a>
    7ca2:	84 35       	cpi	r24, 0x54	; 84
    7ca4:	41 f0       	breq	.+16     	; 0x7cb6 <lcd_clrEol+0x2a>
    7ca6:	88 32       	cpi	r24, 0x28	; 40
    7ca8:	31 f0       	breq	.+12     	; 0x7cb6 <lcd_clrEol+0x2a>
    7caa:	88 36       	cpi	r24, 0x68	; 104
    7cac:	21 f0       	breq	.+8      	; 0x7cb6 <lcd_clrEol+0x2a>
    7cae:	c1 e0       	ldi	r28, 0x01	; 1
    7cb0:	c9 0f       	add	r28, r25
    7cb2:	94 31       	cpi	r25, 0x14	; 20
    7cb4:	70 f3       	brcs	.-36     	; 0x7c92 <lcd_clrEol+0x6>
    7cb6:	cf 91       	pop	r28
    7cb8:	08 95       	ret

00007cba <lcd_hexout>:
    7cba:	cf 93       	push	r28
    7cbc:	c8 2f       	mov	r28, r24
    7cbe:	82 95       	swap	r24
    7cc0:	8f 70       	andi	r24, 0x0F	; 15
    7cc2:	8a 30       	cpi	r24, 0x0A	; 10
    7cc4:	10 f0       	brcs	.+4      	; 0x7cca <lcd_hexout+0x10>
    7cc6:	89 5c       	subi	r24, 0xC9	; 201
    7cc8:	01 c0       	rjmp	.+2      	; 0x7ccc <lcd_hexout+0x12>
    7cca:	80 5d       	subi	r24, 0xD0	; 208
    7ccc:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7cd0:	cf 70       	andi	r28, 0x0F	; 15
    7cd2:	ca 30       	cpi	r28, 0x0A	; 10
    7cd4:	18 f0       	brcs	.+6      	; 0x7cdc <lcd_hexout+0x22>
    7cd6:	87 e3       	ldi	r24, 0x37	; 55
    7cd8:	8c 0f       	add	r24, r28
    7cda:	02 c0       	rjmp	.+4      	; 0x7ce0 <lcd_hexout+0x26>
    7cdc:	80 e3       	ldi	r24, 0x30	; 48
    7cde:	8c 0f       	add	r24, r28
    7ce0:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7ce4:	cf 91       	pop	r28
    7ce6:	08 95       	ret

00007ce8 <lcd_wordout>:
    7ce8:	cf 93       	push	r28
    7cea:	c8 2f       	mov	r28, r24
    7cec:	89 2f       	mov	r24, r25
    7cee:	e5 df       	rcall	.-54     	; 0x7cba <lcd_hexout>
    7cf0:	8c 2f       	mov	r24, r28
    7cf2:	e3 df       	rcall	.-58     	; 0x7cba <lcd_hexout>
    7cf4:	cf 91       	pop	r28
    7cf6:	08 95       	ret

00007cf8 <lcd_longout>:
    7cf8:	cf 93       	push	r28
    7cfa:	df 93       	push	r29
    7cfc:	d3 e0       	ldi	r29, 0x03	; 3
    7cfe:	1c c0       	rjmp	.+56     	; 0x7d38 <lcd_longout+0x40>
    7d00:	ed 2f       	mov	r30, r29
    7d02:	0d 2e       	mov	r0, r29
    7d04:	00 0c       	add	r0, r0
    7d06:	ff 0b       	sbc	r31, r31
    7d08:	e8 5f       	subi	r30, 0xF8	; 248
    7d0a:	f6 4e       	sbci	r31, 0xE6	; 230
    7d0c:	c0 81       	ld	r28, Z
    7d0e:	8c 2f       	mov	r24, r28
    7d10:	82 95       	swap	r24
    7d12:	8f 70       	andi	r24, 0x0F	; 15
    7d14:	8a 30       	cpi	r24, 0x0A	; 10
    7d16:	10 f0       	brcs	.+4      	; 0x7d1c <lcd_longout+0x24>
    7d18:	89 5c       	subi	r24, 0xC9	; 201
    7d1a:	01 c0       	rjmp	.+2      	; 0x7d1e <lcd_longout+0x26>
    7d1c:	80 5d       	subi	r24, 0xD0	; 208
    7d1e:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d22:	cf 70       	andi	r28, 0x0F	; 15
    7d24:	ca 30       	cpi	r28, 0x0A	; 10
    7d26:	18 f0       	brcs	.+6      	; 0x7d2e <lcd_longout+0x36>
    7d28:	87 e3       	ldi	r24, 0x37	; 55
    7d2a:	8c 0f       	add	r24, r28
    7d2c:	02 c0       	rjmp	.+4      	; 0x7d32 <lcd_longout+0x3a>
    7d2e:	80 e3       	ldi	r24, 0x30	; 48
    7d30:	8c 0f       	add	r24, r28
    7d32:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d36:	d1 50       	subi	r29, 0x01	; 1
    7d38:	dd 23       	and	r29, r29
    7d3a:	14 f7       	brge	.-60     	; 0x7d00 <lcd_longout+0x8>
    7d3c:	df 91       	pop	r29
    7d3e:	cf 91       	pop	r28
    7d40:	08 95       	ret

00007d42 <lcd_dec2out>:
    7d42:	cf 93       	push	r28
    7d44:	c8 2f       	mov	r28, r24
    7d46:	84 36       	cpi	r24, 0x64	; 100
    7d48:	50 f0       	brcs	.+20     	; 0x7d5e <lcd_dec2out+0x1c>
    7d4a:	8d e2       	ldi	r24, 0x2D	; 45
    7d4c:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d50:	8d e2       	ldi	r24, 0x2D	; 45
    7d52:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d56:	0d c0       	rjmp	.+26     	; 0x7d72 <lcd_dec2out+0x30>
    7d58:	ca 50       	subi	r28, 0x0A	; 10
    7d5a:	8f 5f       	subi	r24, 0xFF	; 255
    7d5c:	01 c0       	rjmp	.+2      	; 0x7d60 <lcd_dec2out+0x1e>
    7d5e:	80 e0       	ldi	r24, 0x00	; 0
    7d60:	ca 30       	cpi	r28, 0x0A	; 10
    7d62:	d0 f7       	brcc	.-12     	; 0x7d58 <lcd_dec2out+0x16>
    7d64:	80 5d       	subi	r24, 0xD0	; 208
    7d66:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d6a:	80 e3       	ldi	r24, 0x30	; 48
    7d6c:	8c 0f       	add	r24, r28
    7d6e:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    7d72:	cf 91       	pop	r28
    7d74:	08 95       	ret

00007d76 <putChar_Dec2>:
    7d76:	84 36       	cpi	r24, 0x64	; 100
    7d78:	58 f0       	brcs	.+22     	; 0x7d90 <putChar_Dec2+0x1a>
    7d7a:	8d e2       	ldi	r24, 0x2D	; 45
    7d7c:	db 01       	movw	r26, r22
    7d7e:	8c 93       	st	X, r24
    7d80:	fb 01       	movw	r30, r22
    7d82:	32 96       	adiw	r30, 0x02	; 2
    7d84:	11 96       	adiw	r26, 0x01	; 1
    7d86:	8c 93       	st	X, r24
    7d88:	0f c0       	rjmp	.+30     	; 0x7da8 <putChar_Dec2+0x32>
    7d8a:	8a 50       	subi	r24, 0x0A	; 10
    7d8c:	9f 5f       	subi	r25, 0xFF	; 255
    7d8e:	01 c0       	rjmp	.+2      	; 0x7d92 <putChar_Dec2+0x1c>
    7d90:	90 e0       	ldi	r25, 0x00	; 0
    7d92:	8a 30       	cpi	r24, 0x0A	; 10
    7d94:	d0 f7       	brcc	.-12     	; 0x7d8a <putChar_Dec2+0x14>
    7d96:	90 5d       	subi	r25, 0xD0	; 208
    7d98:	fb 01       	movw	r30, r22
    7d9a:	90 83       	st	Z, r25
    7d9c:	32 96       	adiw	r30, 0x02	; 2
    7d9e:	90 e3       	ldi	r25, 0x30	; 48
    7da0:	98 0f       	add	r25, r24
    7da2:	db 01       	movw	r26, r22
    7da4:	11 96       	adiw	r26, 0x01	; 1
    7da6:	9c 93       	st	X, r25
    7da8:	10 82       	st	Z, r1
    7daa:	cf 01       	movw	r24, r30
    7dac:	08 95       	ret

00007dae <putChar_Dec>:
    7dae:	90 e0       	ldi	r25, 0x00	; 0
    7db0:	02 c0       	rjmp	.+4      	; 0x7db6 <putChar_Dec+0x8>
    7db2:	84 56       	subi	r24, 0x64	; 100
    7db4:	9f 5f       	subi	r25, 0xFF	; 255
    7db6:	84 36       	cpi	r24, 0x64	; 100
    7db8:	e0 f7       	brcc	.-8      	; 0x7db2 <putChar_Dec+0x4>
    7dba:	99 23       	and	r25, r25
    7dbc:	39 f0       	breq	.+14     	; 0x7dcc <putChar_Dec+0x1e>
    7dbe:	90 5d       	subi	r25, 0xD0	; 208
    7dc0:	db 01       	movw	r26, r22
    7dc2:	9c 93       	st	X, r25
    7dc4:	6f 5f       	subi	r22, 0xFF	; 255
    7dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7dc8:	2f ef       	ldi	r18, 0xFF	; 255
    7dca:	01 c0       	rjmp	.+2      	; 0x7dce <putChar_Dec+0x20>
    7dcc:	20 e0       	ldi	r18, 0x00	; 0
    7dce:	90 e0       	ldi	r25, 0x00	; 0
    7dd0:	02 c0       	rjmp	.+4      	; 0x7dd6 <putChar_Dec+0x28>
    7dd2:	8a 50       	subi	r24, 0x0A	; 10
    7dd4:	9f 5f       	subi	r25, 0xFF	; 255
    7dd6:	8a 30       	cpi	r24, 0x0A	; 10
    7dd8:	e0 f7       	brcc	.-8      	; 0x7dd2 <putChar_Dec+0x24>
    7dda:	91 11       	cpse	r25, r1
    7ddc:	02 c0       	rjmp	.+4      	; 0x7de2 <putChar_Dec+0x34>
    7dde:	2f 3f       	cpi	r18, 0xFF	; 255
    7de0:	31 f4       	brne	.+12     	; 0x7dee <putChar_Dec+0x40>
    7de2:	fb 01       	movw	r30, r22
    7de4:	31 96       	adiw	r30, 0x01	; 1
    7de6:	90 5d       	subi	r25, 0xD0	; 208
    7de8:	db 01       	movw	r26, r22
    7dea:	9c 93       	st	X, r25
    7dec:	01 c0       	rjmp	.+2      	; 0x7df0 <putChar_Dec+0x42>
    7dee:	fb 01       	movw	r30, r22
    7df0:	80 5d       	subi	r24, 0xD0	; 208
    7df2:	80 83       	st	Z, r24
    7df4:	11 82       	std	Z+1, r1	; 0x01
    7df6:	cf 01       	movw	r24, r30
    7df8:	01 96       	adiw	r24, 0x01	; 1
    7dfa:	08 95       	ret

00007dfc <putChar_hex>:
    7dfc:	fb 01       	movw	r30, r22
    7dfe:	98 2f       	mov	r25, r24
    7e00:	92 95       	swap	r25
    7e02:	9f 70       	andi	r25, 0x0F	; 15
    7e04:	9a 30       	cpi	r25, 0x0A	; 10
    7e06:	10 f0       	brcs	.+4      	; 0x7e0c <putChar_hex+0x10>
    7e08:	99 5c       	subi	r25, 0xC9	; 201
    7e0a:	01 c0       	rjmp	.+2      	; 0x7e0e <putChar_hex+0x12>
    7e0c:	90 5d       	subi	r25, 0xD0	; 208
    7e0e:	90 83       	st	Z, r25
    7e10:	98 2f       	mov	r25, r24
    7e12:	9f 70       	andi	r25, 0x0F	; 15
    7e14:	9f 01       	movw	r18, r30
    7e16:	2e 5f       	subi	r18, 0xFE	; 254
    7e18:	3f 4f       	sbci	r19, 0xFF	; 255
    7e1a:	9a 30       	cpi	r25, 0x0A	; 10
    7e1c:	10 f0       	brcs	.+4      	; 0x7e22 <putChar_hex+0x26>
    7e1e:	99 5c       	subi	r25, 0xC9	; 201
    7e20:	01 c0       	rjmp	.+2      	; 0x7e24 <putChar_hex+0x28>
    7e22:	90 5d       	subi	r25, 0xD0	; 208
    7e24:	91 83       	std	Z+1, r25	; 0x01
    7e26:	12 82       	std	Z+2, r1	; 0x02
    7e28:	c9 01       	movw	r24, r18
    7e2a:	08 95       	ret

00007e2c <putChar_MidiChan>:
    7e2c:	80 31       	cpi	r24, 0x10	; 16
    7e2e:	48 f0       	brcs	.+18     	; 0x7e42 <putChar_MidiChan+0x16>
    7e30:	8e e6       	ldi	r24, 0x6E	; 110
    7e32:	db 01       	movw	r26, r22
    7e34:	8c 93       	st	X, r24
    7e36:	fb 01       	movw	r30, r22
    7e38:	32 96       	adiw	r30, 0x02	; 2
    7e3a:	8f e6       	ldi	r24, 0x6F	; 111
    7e3c:	11 96       	adiw	r26, 0x01	; 1
    7e3e:	8c 93       	st	X, r24
    7e40:	15 c0       	rjmp	.+42     	; 0x7e6c <putChar_MidiChan+0x40>
    7e42:	91 e0       	ldi	r25, 0x01	; 1
    7e44:	98 0f       	add	r25, r24
    7e46:	9a 30       	cpi	r25, 0x0A	; 10
    7e48:	40 f0       	brcs	.+16     	; 0x7e5a <putChar_MidiChan+0x2e>
    7e4a:	db 01       	movw	r26, r22
    7e4c:	11 96       	adiw	r26, 0x01	; 1
    7e4e:	91 e3       	ldi	r25, 0x31	; 49
    7e50:	fb 01       	movw	r30, r22
    7e52:	90 83       	st	Z, r25
    7e54:	97 ef       	ldi	r25, 0xF7	; 247
    7e56:	98 0f       	add	r25, r24
    7e58:	05 c0       	rjmp	.+10     	; 0x7e64 <putChar_MidiChan+0x38>
    7e5a:	db 01       	movw	r26, r22
    7e5c:	11 96       	adiw	r26, 0x01	; 1
    7e5e:	80 e2       	ldi	r24, 0x20	; 32
    7e60:	fb 01       	movw	r30, r22
    7e62:	80 83       	st	Z, r24
    7e64:	fd 01       	movw	r30, r26
    7e66:	31 96       	adiw	r30, 0x01	; 1
    7e68:	90 5d       	subi	r25, 0xD0	; 208
    7e6a:	9c 93       	st	X, r25
    7e6c:	10 82       	st	Z, r1
    7e6e:	cf 01       	movw	r24, r30
    7e70:	08 95       	ret

00007e72 <putChar_word>:
    7e72:	ac 01       	movw	r20, r24
    7e74:	fb 01       	movw	r30, r22
    7e76:	34 96       	adiw	r30, 0x04	; 4
    7e78:	db 01       	movw	r26, r22
    7e7a:	14 96       	adiw	r26, 0x04	; 4
    7e7c:	1c 92       	st	X, r1
    7e7e:	20 e0       	ldi	r18, 0x00	; 0
    7e80:	10 c0       	rjmp	.+32     	; 0x7ea2 <putChar_word+0x30>
    7e82:	94 2f       	mov	r25, r20
    7e84:	9f 70       	andi	r25, 0x0F	; 15
    7e86:	31 97       	sbiw	r30, 0x01	; 1
    7e88:	9a 30       	cpi	r25, 0x0A	; 10
    7e8a:	10 f0       	brcs	.+4      	; 0x7e90 <putChar_word+0x1e>
    7e8c:	99 5c       	subi	r25, 0xC9	; 201
    7e8e:	01 c0       	rjmp	.+2      	; 0x7e92 <putChar_word+0x20>
    7e90:	90 5d       	subi	r25, 0xD0	; 208
    7e92:	90 83       	st	Z, r25
    7e94:	52 95       	swap	r21
    7e96:	42 95       	swap	r20
    7e98:	4f 70       	andi	r20, 0x0F	; 15
    7e9a:	45 27       	eor	r20, r21
    7e9c:	5f 70       	andi	r21, 0x0F	; 15
    7e9e:	45 27       	eor	r20, r21
    7ea0:	2f 5f       	subi	r18, 0xFF	; 255
    7ea2:	24 30       	cpi	r18, 0x04	; 4
    7ea4:	70 f3       	brcs	.-36     	; 0x7e82 <putChar_word+0x10>
    7ea6:	cf 01       	movw	r24, r30
    7ea8:	04 96       	adiw	r24, 0x04	; 4
    7eaa:	08 95       	ret

00007eac <putChar_long>:
    7eac:	0f 93       	push	r16
    7eae:	1f 93       	push	r17
    7eb0:	8b 01       	movw	r16, r22
    7eb2:	9c 01       	movw	r18, r24
    7eb4:	fa 01       	movw	r30, r20
    7eb6:	38 96       	adiw	r30, 0x08	; 8
    7eb8:	da 01       	movw	r26, r20
    7eba:	18 96       	adiw	r26, 0x08	; 8
    7ebc:	1c 92       	st	X, r1
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	12 c0       	rjmp	.+36     	; 0x7ee6 <putChar_long+0x3a>
    7ec2:	90 2f       	mov	r25, r16
    7ec4:	9f 70       	andi	r25, 0x0F	; 15
    7ec6:	31 97       	sbiw	r30, 0x01	; 1
    7ec8:	9a 30       	cpi	r25, 0x0A	; 10
    7eca:	10 f0       	brcs	.+4      	; 0x7ed0 <putChar_long+0x24>
    7ecc:	99 5c       	subi	r25, 0xC9	; 201
    7ece:	01 c0       	rjmp	.+2      	; 0x7ed2 <putChar_long+0x26>
    7ed0:	90 5d       	subi	r25, 0xD0	; 208
    7ed2:	90 83       	st	Z, r25
    7ed4:	68 94       	set
    7ed6:	13 f8       	bld	r1, 3
    7ed8:	36 95       	lsr	r19
    7eda:	27 95       	ror	r18
    7edc:	17 95       	ror	r17
    7ede:	07 95       	ror	r16
    7ee0:	16 94       	lsr	r1
    7ee2:	d1 f7       	brne	.-12     	; 0x7ed8 <putChar_long+0x2c>
    7ee4:	8f 5f       	subi	r24, 0xFF	; 255
    7ee6:	84 30       	cpi	r24, 0x04	; 4
    7ee8:	60 f3       	brcs	.-40     	; 0x7ec2 <putChar_long+0x16>
    7eea:	cf 01       	movw	r24, r30
    7eec:	04 96       	adiw	r24, 0x04	; 4
    7eee:	1f 91       	pop	r17
    7ef0:	0f 91       	pop	r16
    7ef2:	08 95       	ret

00007ef4 <putChar_Note>:
    7ef4:	88 23       	and	r24, r24
    7ef6:	8c f4       	brge	.+34     	; 0x7f1a <putChar_Note+0x26>
    7ef8:	8d e2       	ldi	r24, 0x2D	; 45
    7efa:	db 01       	movw	r26, r22
    7efc:	8c 93       	st	X, r24
    7efe:	9e e6       	ldi	r25, 0x6E	; 110
    7f00:	11 96       	adiw	r26, 0x01	; 1
    7f02:	9c 93       	st	X, r25
    7f04:	11 97       	sbiw	r26, 0x01	; 1
    7f06:	12 96       	adiw	r26, 0x02	; 2
    7f08:	8c 93       	st	X, r24
    7f0a:	12 97       	sbiw	r26, 0x02	; 2
    7f0c:	14 96       	adiw	r26, 0x04	; 4
    7f0e:	fb 01       	movw	r30, r22
    7f10:	13 82       	std	Z+3, r1	; 0x03
    7f12:	49 c0       	rjmp	.+146    	; 0x7fa6 <putChar_Note+0xb2>
    7f14:	8c 50       	subi	r24, 0x0C	; 12
    7f16:	9f 5f       	subi	r25, 0xFF	; 255
    7f18:	01 c0       	rjmp	.+2      	; 0x7f1c <putChar_Note+0x28>
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	8c 30       	cpi	r24, 0x0C	; 12
    7f1e:	d0 f7       	brcc	.-12     	; 0x7f14 <putChar_Note+0x20>
    7f20:	8b 30       	cpi	r24, 0x0B	; 11
    7f22:	39 f4       	brne	.+14     	; 0x7f32 <putChar_Note+0x3e>
    7f24:	fb 01       	movw	r30, r22
    7f26:	31 96       	adiw	r30, 0x01	; 1
    7f28:	88 e4       	ldi	r24, 0x48	; 72
    7f2a:	db 01       	movw	r26, r22
    7f2c:	8c 93       	st	X, r24
    7f2e:	8f e5       	ldi	r24, 0x5F	; 95
    7f30:	27 c0       	rjmp	.+78     	; 0x7f80 <putChar_Note+0x8c>
    7f32:	85 30       	cpi	r24, 0x05	; 5
    7f34:	58 f4       	brcc	.+22     	; 0x7f4c <putChar_Note+0x58>
    7f36:	fb 01       	movw	r30, r22
    7f38:	31 96       	adiw	r30, 0x01	; 1
    7f3a:	28 2f       	mov	r18, r24
    7f3c:	26 95       	lsr	r18
    7f3e:	2d 5b       	subi	r18, 0xBD	; 189
    7f40:	db 01       	movw	r26, r22
    7f42:	2c 93       	st	X, r18
    7f44:	80 fd       	sbrc	r24, 0
    7f46:	19 c0       	rjmp	.+50     	; 0x7f7a <putChar_Note+0x86>
    7f48:	8f e5       	ldi	r24, 0x5F	; 95
    7f4a:	1a c0       	rjmp	.+52     	; 0x7f80 <putChar_Note+0x8c>
    7f4c:	89 30       	cpi	r24, 0x09	; 9
    7f4e:	30 f0       	brcs	.+12     	; 0x7f5c <putChar_Note+0x68>
    7f50:	fb 01       	movw	r30, r22
    7f52:	31 96       	adiw	r30, 0x01	; 1
    7f54:	21 e4       	ldi	r18, 0x41	; 65
    7f56:	db 01       	movw	r26, r22
    7f58:	2c 93       	st	X, r18
    7f5a:	0b c0       	rjmp	.+22     	; 0x7f72 <putChar_Note+0x7e>
    7f5c:	fb 01       	movw	r30, r22
    7f5e:	31 96       	adiw	r30, 0x01	; 1
    7f60:	28 2f       	mov	r18, r24
    7f62:	30 e0       	ldi	r19, 0x00	; 0
    7f64:	25 50       	subi	r18, 0x05	; 5
    7f66:	31 09       	sbc	r19, r1
    7f68:	35 95       	asr	r19
    7f6a:	27 95       	ror	r18
    7f6c:	2a 5b       	subi	r18, 0xBA	; 186
    7f6e:	db 01       	movw	r26, r22
    7f70:	2c 93       	st	X, r18
    7f72:	80 ff       	sbrs	r24, 0
    7f74:	04 c0       	rjmp	.+8      	; 0x7f7e <putChar_Note+0x8a>
    7f76:	8f e5       	ldi	r24, 0x5F	; 95
    7f78:	03 c0       	rjmp	.+6      	; 0x7f80 <putChar_Note+0x8c>
    7f7a:	83 e2       	ldi	r24, 0x23	; 35
    7f7c:	01 c0       	rjmp	.+2      	; 0x7f80 <putChar_Note+0x8c>
    7f7e:	83 e2       	ldi	r24, 0x23	; 35
    7f80:	80 83       	st	Z, r24
    7f82:	91 11       	cpse	r25, r1
    7f84:	05 c0       	rjmp	.+10     	; 0x7f90 <putChar_Note+0x9c>
    7f86:	df 01       	movw	r26, r30
    7f88:	12 96       	adiw	r26, 0x02	; 2
    7f8a:	8d e6       	ldi	r24, 0x6D	; 109
    7f8c:	81 83       	std	Z+1, r24	; 0x01
    7f8e:	0b c0       	rjmp	.+22     	; 0x7fa6 <putChar_Note+0xb2>
    7f90:	9c 30       	cpi	r25, 0x0C	; 12
    7f92:	28 f4       	brcc	.+10     	; 0x7f9e <putChar_Note+0xaa>
    7f94:	df 01       	movw	r26, r30
    7f96:	12 96       	adiw	r26, 0x02	; 2
    7f98:	91 5d       	subi	r25, 0xD1	; 209
    7f9a:	91 83       	std	Z+1, r25	; 0x01
    7f9c:	04 c0       	rjmp	.+8      	; 0x7fa6 <putChar_Note+0xb2>
    7f9e:	df 01       	movw	r26, r30
    7fa0:	12 96       	adiw	r26, 0x02	; 2
    7fa2:	8d e2       	ldi	r24, 0x2D	; 45
    7fa4:	81 83       	std	Z+1, r24	; 0x01
    7fa6:	1c 92       	st	X, r1
    7fa8:	cd 01       	movw	r24, r26
    7faa:	08 95       	ret

00007fac <putChar_Manual>:
    7fac:	83 30       	cpi	r24, 0x03	; 3
    7fae:	38 f4       	brcc	.+14     	; 0x7fbe <putChar_Manual+0x12>
    7fb0:	fb 01       	movw	r30, r22
    7fb2:	31 96       	adiw	r30, 0x01	; 1
    7fb4:	93 e3       	ldi	r25, 0x33	; 51
    7fb6:	98 1b       	sub	r25, r24
    7fb8:	db 01       	movw	r26, r22
    7fba:	9c 93       	st	X, r25
    7fbc:	0d c0       	rjmp	.+26     	; 0x7fd8 <putChar_Manual+0x2c>
    7fbe:	83 30       	cpi	r24, 0x03	; 3
    7fc0:	31 f4       	brne	.+12     	; 0x7fce <putChar_Manual+0x22>
    7fc2:	fb 01       	movw	r30, r22
    7fc4:	31 96       	adiw	r30, 0x01	; 1
    7fc6:	80 e5       	ldi	r24, 0x50	; 80
    7fc8:	db 01       	movw	r26, r22
    7fca:	8c 93       	st	X, r24
    7fcc:	05 c0       	rjmp	.+10     	; 0x7fd8 <putChar_Manual+0x2c>
    7fce:	fb 01       	movw	r30, r22
    7fd0:	31 96       	adiw	r30, 0x01	; 1
    7fd2:	8d e2       	ldi	r24, 0x2D	; 45
    7fd4:	db 01       	movw	r26, r22
    7fd6:	8c 93       	st	X, r24
    7fd8:	10 82       	st	Z, r1
    7fda:	cf 01       	movw	r24, r30
    7fdc:	08 95       	ret

00007fde <putString_P>:
    7fde:	fc 01       	movw	r30, r24
    7fe0:	db 01       	movw	r26, r22
    7fe2:	20 e0       	ldi	r18, 0x00	; 0
    7fe4:	02 c0       	rjmp	.+4      	; 0x7fea <putString_P+0xc>
    7fe6:	28 2f       	mov	r18, r24
    7fe8:	da 01       	movw	r26, r20
    7fea:	94 91       	lpm	r25, Z
    7fec:	99 23       	and	r25, r25
    7fee:	51 f0       	breq	.+20     	; 0x8004 <putString_P+0x26>
    7ff0:	ad 01       	movw	r20, r26
    7ff2:	4f 5f       	subi	r20, 0xFF	; 255
    7ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ff6:	31 96       	adiw	r30, 0x01	; 1
    7ff8:	9c 93       	st	X, r25
    7ffa:	81 e0       	ldi	r24, 0x01	; 1
    7ffc:	82 0f       	add	r24, r18
    7ffe:	24 31       	cpi	r18, 0x14	; 20
    8000:	90 f3       	brcs	.-28     	; 0x7fe6 <putString_P+0x8>
    8002:	01 c0       	rjmp	.+2      	; 0x8006 <putString_P+0x28>
    8004:	ad 01       	movw	r20, r26
    8006:	ca 01       	movw	r24, r20
    8008:	08 95       	ret

0000800a <putString_Prog>:
    800a:	fc 01       	movw	r30, r24
    800c:	80 e5       	ldi	r24, 0x50	; 80
    800e:	80 83       	st	Z, r24
    8010:	96 2f       	mov	r25, r22
    8012:	96 95       	lsr	r25
    8014:	96 95       	lsr	r25
    8016:	96 95       	lsr	r25
    8018:	97 70       	andi	r25, 0x07	; 7
    801a:	9f 5b       	subi	r25, 0xBF	; 191
    801c:	91 83       	std	Z+1, r25	; 0x01
    801e:	67 70       	andi	r22, 0x07	; 7
    8020:	6f 5c       	subi	r22, 0xCF	; 207
    8022:	62 83       	std	Z+2, r22	; 0x02
    8024:	cf 01       	movw	r24, r30
    8026:	03 96       	adiw	r24, 0x03	; 3
    8028:	08 95       	ret

0000802a <lcd_waitSymbolOn>:
    802a:	cf 93       	push	r28
    802c:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>
    8030:	8c e0       	ldi	r24, 0x0C	; 12
    8032:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    8036:	81 ea       	ldi	r24, 0xA1	; 161
    8038:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    803c:	8c 2f       	mov	r24, r28
    803e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    8042:	cf 91       	pop	r28
    8044:	08 95       	ret

00008046 <lcd_waitSymbolOff>:
    8046:	cf 93       	push	r28
    8048:	c0 91 cf 03 	lds	r28, 0x03CF	; 0x8003cf <lcd_cursorPos>
    804c:	8c e0       	ldi	r24, 0x0C	; 12
    804e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    8052:	80 e2       	ldi	r24, 0x20	; 32
    8054:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>
    8058:	8c 2f       	mov	r24, r28
    805a:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
    805e:	cf 91       	pop	r28
    8060:	08 95       	ret

00008062 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    8062:	84 30       	cpi	r24, 0x04	; 4
    8064:	28 f0       	brcs	.+10     	; 0x8070 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    8066:	20 e0       	ldi	r18, 0x00	; 0
    8068:	0d c0       	rjmp	.+26     	; 0x8084 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    806a:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    806c:	fa 01       	movw	r30, r20
    806e:	02 c0       	rjmp	.+4      	; 0x8074 <keylabel_set+0x12>
    8070:	fb 01       	movw	r30, r22
    8072:	20 e0       	ldi	r18, 0x00	; 0
    8074:	af 01       	movw	r20, r30
    8076:	4f 5f       	subi	r20, 0xFF	; 255
    8078:	5f 4f       	sbci	r21, 0xFF	; 255
    807a:	94 91       	lpm	r25, Z
    807c:	99 23       	and	r25, r25
    807e:	11 f0       	breq	.+4      	; 0x8084 <keylabel_set+0x22>
    8080:	25 30       	cpi	r18, 0x05	; 5
    8082:	98 f3       	brcs	.-26     	; 0x806a <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    8084:	90 e0       	ldi	r25, 0x00	; 0
    8086:	dc 01       	movw	r26, r24
    8088:	aa 0f       	add	r26, r26
    808a:	bb 1f       	adc	r27, r27
    808c:	aa 0f       	add	r26, r26
    808e:	bb 1f       	adc	r27, r27
    8090:	8a 0f       	add	r24, r26
    8092:	9b 1f       	adc	r25, r27
    8094:	dc 01       	movw	r26, r24
    8096:	ae 5c       	subi	r26, 0xCE	; 206
    8098:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    809a:	45 e0       	ldi	r20, 0x05	; 5
    809c:	50 e0       	ldi	r21, 0x00	; 0
    809e:	42 1b       	sub	r20, r18
    80a0:	51 09       	sbc	r21, r1
    80a2:	ca 01       	movw	r24, r20
    80a4:	99 23       	and	r25, r25
    80a6:	0c f4       	brge	.+2      	; 0x80aa <keylabel_set+0x48>
    80a8:	01 96       	adiw	r24, 0x01	; 1
    80aa:	95 95       	asr	r25
    80ac:	87 95       	ror	r24
    80ae:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    80b0:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    80b2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    80b4:	0e c0       	rjmp	.+28     	; 0x80d2 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    80b6:	93 17       	cp	r25, r19
    80b8:	10 f0       	brcs	.+4      	; 0x80be <keylabel_set+0x5c>
    80ba:	98 17       	cp	r25, r24
    80bc:	18 f0       	brcs	.+6      	; 0x80c4 <keylabel_set+0x62>
			*charBufPtr = ' ';
    80be:	20 e2       	ldi	r18, 0x20	; 32
    80c0:	2c 93       	st	X, r18
    80c2:	05 c0       	rjmp	.+10     	; 0x80ce <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    80c4:	fb 01       	movw	r30, r22
    80c6:	24 91       	lpm	r18, Z
    80c8:	2c 93       	st	X, r18
    80ca:	6f 5f       	subi	r22, 0xFF	; 255
    80cc:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    80ce:	11 96       	adiw	r26, 0x01	; 1
		i++;
    80d0:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    80d2:	95 30       	cpi	r25, 0x05	; 5
    80d4:	80 f3       	brcs	.-32     	; 0x80b6 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    80d6:	08 95       	ret

000080d8 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	fc 01       	movw	r30, r24
    80dc:	ee 0f       	add	r30, r30
    80de:	ff 1f       	adc	r31, r31
    80e0:	ee 0f       	add	r30, r30
    80e2:	ff 1f       	adc	r31, r31
    80e4:	8e 0f       	add	r24, r30
    80e6:	9f 1f       	adc	r25, r31
    80e8:	fc 01       	movw	r30, r24
    80ea:	ee 5c       	subi	r30, 0xCE	; 206
    80ec:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    80ee:	80 e0       	ldi	r24, 0x00	; 0
    80f0:	04 c0       	rjmp	.+8      	; 0x80fa <keylabel_clr+0x22>
		*charPtr++ = ' ';
    80f2:	90 e2       	ldi	r25, 0x20	; 32
    80f4:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    80f6:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    80f8:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    80fa:	85 30       	cpi	r24, 0x05	; 5
    80fc:	d0 f3       	brcs	.-12     	; 0x80f2 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    80fe:	08 95       	ret

00008100 <keylabel_toLCD>:

void keylabel_toLCD(){
    8100:	0f 93       	push	r16
    8102:	1f 93       	push	r17
    8104:	cf 93       	push	r28
    8106:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    8108:	d0 91 cf 03 	lds	r29, 0x03CF	; 0x8003cf <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    810c:	84 e5       	ldi	r24, 0x54	; 84
    810e:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    8112:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    8114:	e2 e3       	ldi	r30, 0x32	; 50
    8116:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    8118:	08 c0       	rjmp	.+16     	; 0x812a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    811a:	8f 01       	movw	r16, r30
    811c:	0f 5f       	subi	r16, 0xFF	; 255
    811e:	1f 4f       	sbci	r17, 0xFF	; 255
    8120:	80 81       	ld	r24, Z
    8122:	0e 94 b1 14 	call	0x2962	; 0x2962 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    8126:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    8128:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    812a:	c4 31       	cpi	r28, 0x14	; 20
    812c:	b0 f3       	brcs	.-20     	; 0x811a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    812e:	8d 2f       	mov	r24, r29
    8130:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_goto>
}
    8134:	df 91       	pop	r29
    8136:	cf 91       	pop	r28
    8138:	1f 91       	pop	r17
    813a:	0f 91       	pop	r16
    813c:	08 95       	ret

0000813e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    813e:	90 e0       	ldi	r25, 0x00	; 0
    8140:	fc 01       	movw	r30, r24
    8142:	ee 0f       	add	r30, r30
    8144:	ff 1f       	adc	r31, r31
    8146:	ee 0f       	add	r30, r30
    8148:	ff 1f       	adc	r31, r31
    814a:	8e 0f       	add	r24, r30
    814c:	9f 1f       	adc	r25, r31
    814e:	fc 01       	movw	r30, r24
    8150:	ee 5c       	subi	r30, 0xCE	; 206
    8152:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    8154:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    8156:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    8158:	12 c0       	rjmp	.+36     	; 0x817e <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    815a:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    815c:	61 11       	cpse	r22, r1
    815e:	06 c0       	rjmp	.+12     	; 0x816c <keylabel_statcheck+0x2e>
    8160:	2a 32       	cpi	r18, 0x2A	; 42
    8162:	21 f4       	brne	.+8      	; 0x816c <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    8164:	80 e8       	ldi	r24, 0x80	; 128
    8166:	80 83       	st	Z, r24
			result = 0xFF;
    8168:	8f ef       	ldi	r24, 0xFF	; 255
    816a:	07 c0       	rjmp	.+14     	; 0x817a <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    816c:	66 23       	and	r22, r22
    816e:	29 f0       	breq	.+10     	; 0x817a <keylabel_statcheck+0x3c>
    8170:	20 38       	cpi	r18, 0x80	; 128
    8172:	19 f4       	brne	.+6      	; 0x817a <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    8174:	8a e2       	ldi	r24, 0x2A	; 42
    8176:	80 83       	st	Z, r24
			result = 0xFF;
    8178:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    817a:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    817c:	9f 5f       	subi	r25, 0xFF	; 255
    817e:	95 30       	cpi	r25, 0x05	; 5
    8180:	60 f3       	brcs	.-40     	; 0x815a <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    8182:	08 95       	ret

00008184 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    8184:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    8186:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    8188:	94 91       	lpm	r25, Z
    818a:	99 23       	and	r25, r25
    818c:	21 f0       	breq	.+8      	; 0x8196 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    818e:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    8190:	8f 5f       	subi	r24, 0xFF	; 255
    8192:	80 32       	cpi	r24, 0x20	; 32
    8194:	c8 f3       	brcs	.-14     	; 0x8188 <get_StrLenP+0x4>
	return result;
}
    8196:	08 95       	ret

00008198 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    8198:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    819a:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    819c:	90 81       	ld	r25, Z
    819e:	99 23       	and	r25, r25
    81a0:	21 f0       	breq	.+8      	; 0x81aa <get_StrLen+0x12>
			return result;
		}
		pString++;
    81a2:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    81a4:	8f 5f       	subi	r24, 0xFF	; 255
    81a6:	80 32       	cpi	r24, 0x20	; 32
    81a8:	c8 f3       	brcs	.-14     	; 0x819c <get_StrLen+0x4>
	return result;
}
    81aa:	08 95       	ret

000081ac <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    81ac:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    81ae:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    81b0:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    81b2:	06 c0       	rjmp	.+12     	; 0x81c0 <reverse_Bits+0x14>
		result = result << 1;
    81b4:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    81b6:	32 2f       	mov	r19, r18
    81b8:	31 70       	andi	r19, 0x01	; 1
    81ba:	83 2b       	or	r24, r19
		val = val >> 1;
    81bc:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    81be:	9f 5f       	subi	r25, 0xFF	; 255
    81c0:	98 30       	cpi	r25, 0x08	; 8
    81c2:	c0 f3       	brcs	.-16     	; 0x81b4 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    81c4:	08 95       	ret

000081c6 <__tablejump2__>:
    81c6:	ee 0f       	add	r30, r30
    81c8:	ff 1f       	adc	r31, r31
    81ca:	88 1f       	adc	r24, r24
    81cc:	8b bf       	out	0x3b, r24	; 59
    81ce:	07 90       	elpm	r0, Z+
    81d0:	f6 91       	elpm	r31, Z
    81d2:	e0 2d       	mov	r30, r0
    81d4:	19 94       	eijmp

000081d6 <eeprom_read_block>:
    81d6:	dc 01       	movw	r26, r24
    81d8:	cb 01       	movw	r24, r22

000081da <eeprom_read_blraw>:
    81da:	fc 01       	movw	r30, r24
    81dc:	f9 99       	sbic	0x1f, 1	; 31
    81de:	fe cf       	rjmp	.-4      	; 0x81dc <eeprom_read_blraw+0x2>
    81e0:	06 c0       	rjmp	.+12     	; 0x81ee <eeprom_read_blraw+0x14>
    81e2:	f2 bd       	out	0x22, r31	; 34
    81e4:	e1 bd       	out	0x21, r30	; 33
    81e6:	f8 9a       	sbi	0x1f, 0	; 31
    81e8:	31 96       	adiw	r30, 0x01	; 1
    81ea:	00 b4       	in	r0, 0x20	; 32
    81ec:	0d 92       	st	X+, r0
    81ee:	41 50       	subi	r20, 0x01	; 1
    81f0:	50 40       	sbci	r21, 0x00	; 0
    81f2:	b8 f7       	brcc	.-18     	; 0x81e2 <eeprom_read_blraw+0x8>
    81f4:	08 95       	ret

000081f6 <eeprom_read_byte>:
    81f6:	f9 99       	sbic	0x1f, 1	; 31
    81f8:	fe cf       	rjmp	.-4      	; 0x81f6 <eeprom_read_byte>
    81fa:	92 bd       	out	0x22, r25	; 34
    81fc:	81 bd       	out	0x21, r24	; 33
    81fe:	f8 9a       	sbi	0x1f, 0	; 31
    8200:	99 27       	eor	r25, r25
    8202:	80 b5       	in	r24, 0x20	; 32
    8204:	08 95       	ret

00008206 <eeprom_read_word>:
    8206:	a8 e1       	ldi	r26, 0x18	; 24
    8208:	b0 e0       	ldi	r27, 0x00	; 0
    820a:	42 e0       	ldi	r20, 0x02	; 2
    820c:	50 e0       	ldi	r21, 0x00	; 0
    820e:	e5 cf       	rjmp	.-54     	; 0x81da <eeprom_read_blraw>

00008210 <eeprom_update_block>:
    8210:	dc 01       	movw	r26, r24
    8212:	a4 0f       	add	r26, r20
    8214:	b5 1f       	adc	r27, r21
    8216:	41 50       	subi	r20, 0x01	; 1
    8218:	50 40       	sbci	r21, 0x00	; 0
    821a:	40 f0       	brcs	.+16     	; 0x822c <eeprom_update_block+0x1c>
    821c:	cb 01       	movw	r24, r22
    821e:	84 0f       	add	r24, r20
    8220:	95 1f       	adc	r25, r21
    8222:	2e 91       	ld	r18, -X
    8224:	05 d0       	rcall	.+10     	; 0x8230 <eeprom_update_r18>
    8226:	41 50       	subi	r20, 0x01	; 1
    8228:	50 40       	sbci	r21, 0x00	; 0
    822a:	d8 f7       	brcc	.-10     	; 0x8222 <eeprom_update_block+0x12>
    822c:	08 95       	ret

0000822e <eeprom_update_byte>:
    822e:	26 2f       	mov	r18, r22

00008230 <eeprom_update_r18>:
    8230:	f9 99       	sbic	0x1f, 1	; 31
    8232:	fe cf       	rjmp	.-4      	; 0x8230 <eeprom_update_r18>
    8234:	92 bd       	out	0x22, r25	; 34
    8236:	81 bd       	out	0x21, r24	; 33
    8238:	f8 9a       	sbi	0x1f, 0	; 31
    823a:	01 97       	sbiw	r24, 0x01	; 1
    823c:	00 b4       	in	r0, 0x20	; 32
    823e:	02 16       	cp	r0, r18
    8240:	39 f0       	breq	.+14     	; 0x8250 <eeprom_update_r18+0x20>
    8242:	1f ba       	out	0x1f, r1	; 31
    8244:	20 bd       	out	0x20, r18	; 32
    8246:	0f b6       	in	r0, 0x3f	; 63
    8248:	f8 94       	cli
    824a:	fa 9a       	sbi	0x1f, 2	; 31
    824c:	f9 9a       	sbi	0x1f, 1	; 31
    824e:	0f be       	out	0x3f, r0	; 63
    8250:	08 95       	ret

00008252 <eeprom_update_word>:
    8252:	01 96       	adiw	r24, 0x01	; 1
    8254:	27 2f       	mov	r18, r23
    8256:	ec df       	rcall	.-40     	; 0x8230 <eeprom_update_r18>
    8258:	ea cf       	rjmp	.-44     	; 0x822e <eeprom_update_byte>

0000825a <_exit>:
    825a:	f8 94       	cli

0000825c <__stop_program>:
    825c:	ff cf       	rjmp	.-2      	; 0x825c <__stop_program>
