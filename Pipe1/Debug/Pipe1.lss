
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000079de  00007a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000079de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001719  00800208  00800208  00007a9a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008a9a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008acc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b28  00000000  00000000  00008b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ee35  00000000  00000000  00009638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000263a  00000000  00000000  0001846d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008cd7  00000000  00000000  0001aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001bb0  00000000  00000000  00023780  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000343f  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009886  00000000  00000000  0002876f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00031ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__ctors_end>
       4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
       8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
       c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      10:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      14:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      18:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      1c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      20:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      24:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      28:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      2c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      30:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      34:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      38:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      3c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      40:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      44:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      48:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      4c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      50:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      54:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_21>
      58:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      5c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      60:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      64:	0c 94 cf 37 	jmp	0x6f9e	; 0x6f9e <__vector_25>
      68:	0c 94 15 38 	jmp	0x702a	; 0x702a <__vector_26>
      6c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      70:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      74:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      78:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      7c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      80:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      84:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      88:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      8c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      90:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <__vector_36>
      94:	0c 94 37 36 	jmp	0x6c6e	; 0x6c6e <__vector_37>
      98:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      9c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      ac:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      bc:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      cc:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d8:	0c 94 d5 38 	jmp	0x71aa	; 0x71aa <__vector_54>
      dc:	0c 94 2d 39 	jmp	0x725a	; 0x725a <__vector_55>
      e0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      e4:	81 1f       	adc	r24, r17
      e6:	8c 1f       	adc	r24, r28
      e8:	98 1f       	adc	r25, r24
      ea:	b4 1f       	adc	r27, r20
      ec:	d1 1f       	adc	r29, r17
      ee:	f2 1f       	adc	r31, r18
      f0:	fd 1f       	adc	r31, r29
      f2:	08 20       	and	r0, r8
      f4:	1d 20       	and	r1, r13
      f6:	33 20       	and	r3, r3
      f8:	3b 20       	and	r3, r11
      fa:	49 20       	and	r4, r9
      fc:	1d 20       	and	r1, r13
      fe:	76 20       	and	r7, r6
     100:	86 20       	and	r8, r6
     102:	aa 20       	and	r10, r10
     104:	fc 20       	and	r15, r12
     106:	15 21       	and	r17, r5
     108:	2a 21       	and	r18, r10
     10a:	43 21       	and	r20, r3
     10c:	4b 21       	and	r20, r11
     10e:	70 21       	and	r23, r0
     110:	70 21       	and	r23, r0
     112:	89 21       	and	r24, r9
     114:	96 21       	and	r25, r6
     116:	85 21       	and	r24, r5
     118:	f1 21       	and	r31, r1
     11a:	f9 21       	and	r31, r9
     11c:	44 22       	and	r4, r20
     11e:	a6 22       	and	r10, r22
     120:	d0 22       	and	r13, r16
     122:	fc 22       	and	r15, r28
     124:	2b 23       	and	r18, r27
     126:	33 23       	and	r19, r19
     128:	39 23       	and	r19, r25
     12a:	f1 21       	and	r31, r1
     12c:	41 23       	and	r20, r17
     12e:	55 23       	and	r21, r21
     130:	39 23       	and	r19, r25
     132:	93 23       	and	r25, r19
     134:	a0 23       	and	r26, r16
     136:	ac 23       	and	r26, r28
     138:	c1 23       	and	r28, r17
     13a:	da 23       	and	r29, r26
     13c:	fd 23       	and	r31, r29
     13e:	08 24       	eor	r0, r8
     140:	0e 24       	eor	r0, r14
     142:	13 24       	eor	r1, r3
     144:	26 24       	eor	r2, r6
     146:	47 24       	eor	r4, r7
     148:	5a 24       	eor	r5, r10
     14a:	13 24       	eor	r1, r3
     14c:	55 3b       	cpi	r21, 0xB5	; 181
     14e:	6a 3b       	cpi	r22, 0xBA	; 186
     150:	58 3b       	cpi	r21, 0xB8	; 184
     152:	49 3b       	cpi	r20, 0xB9	; 185
     154:	5b 3b       	cpi	r21, 0xBB	; 187
     156:	5e 3b       	cpi	r21, 0xBE	; 190
     158:	4c 3b       	cpi	r20, 0xBC	; 188
     15a:	61 3b       	cpi	r22, 0xB1	; 177
     15c:	4f 3b       	cpi	r20, 0xBF	; 191
     15e:	64 3b       	cpi	r22, 0xB4	; 180
     160:	52 3b       	cpi	r21, 0xB2	; 178
     162:	67 3b       	cpi	r22, 0xB7	; 183

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 00                                       Reg.

000003ce <messageSaved>:
     3ce:	20 52 65 67 20 7e 20 00                              Reg ~ .

000003d6 <MenuMIDIOutText>:
     3d6:	4f 75 74 3a 00                                      Out:.

000003db <MenuMIDIInText>:
     3db:	49 6e 3a 00                                         In:.

000003df <initMenuText>:
     3df:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003e9 <nibbleInfo>:
	...
     3f1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     401:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     411:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     421:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     431:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     441:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     451:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     461:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000470 <menu_selFunc>:
     470:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 cc 07     ..<none>........
     480:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     490:	d6 07 c2 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4a0:	6e 00 00 00 3a 0d b8 07 00 00 00 00 01 10 4b 6f     n...:.........Ko
     4b0:	70 70 65 6c 32 3c 33 00 00 00 9a 07 50 1e 00 00     ppel2<3.....P...
     4c0:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 90 07     ..Koppel1<3.....
     4d0:	53 1e 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     S.....KoppelP<3.
     4e0:	00 00 86 07 56 1e 00 00 01 10 4b 6f 70 70 65 6c     ....V.....Koppel
     4f0:	31 3c 32 00 00 00 7c 07 59 1e 00 00 01 10 4b 6f     1<2...|.Y.....Ko
     500:	70 70 65 6c 50 3c 32 00 00 00 72 07 5c 1e 00 00     ppelP<2...r.\...
     510:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 68 07     ..KoppelP<1...h.
     520:	5f 1e 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     _.....Koppel3<2.
     530:	00 00 5e 07 62 1e 00 00 01 10 4b 6f 70 70 65 6c     ..^.b.....Koppel
     540:	33 3c 31 00 00 00 54 07 65 1e 00 00 01 10 4b 6f     3<1...T.e.....Ko
     550:	70 70 65 6c 33 3c 50 00 00 00 4a 07 68 1e 00 00     ppel3<P...J.h...
     560:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 40 07     ..Koppel2<1...@.
     570:	6b 1e 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     k.....Koppel2<P.
     580:	00 00 36 07 6e 1e 00 00 01 10 4b 6f 70 70 65 6c     ..6.n.....Koppel
     590:	31 3c 50 00 00 00 2c 07 71 1e 00 00 01 10 50 72     1<P...,.q.....Pr
     5a0:	2e 2b 2f 73 65 74 00 00 00 00 fa 06 0d 2b 00 00     .+/set.......+..
     5b0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 f0 06     ..Pr.-/clr......
     5c0:	85 1e 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     ......Prog. 1A..
     5d0:	00 00 22 07 91 2b 00 00 01 10 50 72 6f 67 2e 20     .."..+....Prog. 
     5e0:	32 41 00 00 00 00 18 07 94 2b 00 00 01 10 50 72     2A.......+....Pr
     5f0:	6f 67 2e 20 33 41 00 00 00 00 0e 07 97 2b 00 00     og. 3A.......+..
     600:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 04 07     ..Prog. 4A......
     610:	9a 2b 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     .+....Prog.clr..
     620:	00 00 b4 06 8e 19 00 00 01 10 50 72 6f 67 2e 73     ..........Prog.s
     630:	65 74 00 00 00 00 be 06 31 2b 00 00 01 10 50 72     et......1+....Pr
     640:	6f 67 2e 2b 00 00 00 00 00 00 e6 06 a2 1e 00 00     og.+............
     650:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 dc 06     ..Prog.-........
     660:	c3 1e 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     ......PrBank+...
     670:	00 00 d2 06 e4 1e 00 00 01 10 50 72 42 61 6e 6b     ..........PrBank
     680:	2e 2d 00 00 00 00 c8 06 f4 1e 00 00 01 10 4d 49     .-............MI
     690:	44 49 20 4f 66 66 00 00 00 00 a4 07 50 29 00 00     DI Off......P)..
     6a0:	c1 10 53 65 74 75 70 00 00 00 00 00 2a 0e ae 07     ..Setup.....*...
     6b0:	00 00 00 00                                         ....

000006b4 <shortKeyTextRegOff>:
     6b4:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

000006be <shortKeyTextPRS>:
     6be:	50 73 65 74 00 00 00 00 00 00                       Pset......

000006c8 <shortKeyTextPBD>:
     6c8:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

000006d2 <shortKeyTextPBI>:
     6d2:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

000006dc <shortKeyTextPRD>:
     6dc:	50 2d 00 00 00 00 00 00 00 00                       P-........

000006e6 <shortKeyTextPRI>:
     6e6:	50 2b 00 00 00 00 00 00 00 00                       P+........

000006f0 <shortKeyTextPRM>:
     6f0:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

000006fa <shortKeyTextPRP>:
     6fa:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000704 <shortKeyTextK4A>:
     704:	50 41 34 00 00 00 00 00 00 00                       PA4.......

0000070e <shortKeyTextK3A>:
     70e:	50 41 33 00 00 00 00 00 00 00                       PA3.......

00000718 <shortKeyTextK2A>:
     718:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000722 <shortKeyTextK1A>:
     722:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000072c <shortKeyTextCpl1P>:
     72c:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000736 <shortKeyTextCpl2P>:
     736:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000740 <shortKeyTextCpl21>:
     740:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000074a <shortKeyTextCpl3P>:
     74a:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000754 <shortKeyTextCpl31>:
     754:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000075e <shortKeyTextCpl32>:
     75e:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000768 <shortKeyTextCplP1>:
     768:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000772 <shortKeyTextCplP2>:
     772:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

0000077c <shortKeyTextCpl12>:
     77c:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000786 <shortKeyTextCplP3>:
     786:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000790 <shortKeyTextCpl13>:
     790:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000079a <shortKeyTextCpl23>:
     79a:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007a4 <shortKeyTextMIDIoff>:
     7a4:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000007ae <shortKeyTextSetup>:
     7ae:	53 65 74 75 00 00 00 00 00 00                       Setu......

000007b8 <shortKeyTextStim>:
     7b8:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000007c2 <shortKeyTextMenu>:
     7c2:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000007cc <shortKeyTextNone>:
	...

000007d6 <menu_main>:
     7d6:	81 00 4d 61 6e 75 61 6c 00 00 00 00 4e 08 00 00     ..Manual....N...
     7e6:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     7f6:	76 08 00 00 0c 1e 00 00 01 00 4d 49 44 49 00 00     v.........MIDI..
     806:	00 00 00 00 42 0a 00 00 00 00 00 00 01 00 54 61     ....B.........Ta
     816:	73 74 65 6e 00 00 00 00 ea 0c 00 00 00 00 b1 19     sten............
     826:	01 00 53 74 61 74 75 73 00 00 00 00 12 12 00 00     ..Status........
     836:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     846:	2a 0e 00 00 00 00 00 00                             *.......

0000084e <menu_manual>:
     84e:	81 00 4b 6f 70 70 65 6c 00 00 00 00 52 09 00 00     ..Koppel....R...
     85e:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     86e:	3a 0d 00 00 00 00 00 00                             :.......

00000876 <menu_register>:
     876:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 a8 05     ..Prog.lad......
     886:	00 00 19 1e 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ......Prog.sp...
     896:	00 00 a8 05 00 00 a6 19 01 00 61 75 73 00 00 00     ..........aus...
	...
     8ae:	13 1e 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     8be:	00 00 6d 05 00 00 66 19 0e 00 52 65 67 2e 39 2d     ..m...f...Reg.9-
     8ce:	31 36 00 00 00 00 6e 05 00 00 66 19 0e 00 52 65     16....n...f...Re
     8de:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 66 19     g.17-24...o...f.
     8ee:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     8fe:	00 00 66 19 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..f...Reg.33-40.
     90e:	00 00 71 05 00 00 66 19 0e 00 52 65 67 2e 34 31     ..q...f...Reg.41
     91e:	2d 34 38 00 00 00 72 05 00 00 66 19 0e 00 52 65     -48...r...f...Re
     92e:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 66 19     g.49-54...s...f.
     93e:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     94e:	00 00 66 19                                         ..f.

00000952 <menu_coupler>:
     952:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 11 08     ..2<3...........
     962:	00 00 93 19 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     972:	00 00 12 08 00 00 93 19 09 00 31 3c 32 00 00 00     ..........1<2...
     982:	00 00 00 00 00 00 13 08 00 00 93 19 09 00 50 3c     ..............P<
     992:	33 00 00 00 00 00 00 00 00 00 14 08 00 00 93 19     3...............
     9a2:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 15 08     ..P<2...........
     9b2:	00 00 93 19 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     9c2:	00 00 16 08 00 00 93 19 09 00 33 3c 32 00 00 00     ..........3<2...
     9d2:	00 00 00 00 00 00 17 08 00 00 93 19 09 00 33 3c     ..............3<
     9e2:	31 00 00 00 00 00 00 00 00 00 18 08 00 00 93 19     1...............
     9f2:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 19 08     ..3<P...........
     a02:	00 00 93 19 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     a12:	00 00 1a 08 00 00 93 19 09 00 32 3c 50 00 00 00     ..........2<P...
     a22:	00 00 00 00 00 00 1b 08 00 00 93 19 c9 00 31 3c     ..............1<
     a32:	50 00 00 00 00 00 00 00 00 00 1c 08 00 00 93 19     P...............

00000a42 <menu_midi>:
     a42:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a52:	50 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     P)....MIDIin....
     a62:	0a 0b 00 00 00 00 1f 1b 01 00 4d 49 44 49 6f 75     ..........MIDIou
     a72:	74 00 00 00 8a 0d 00 00 00 00 1b 1b 03 10 54 68     t.............Th
     a82:	72 75 2d 49 6e 00 00 00 00 00 26 08 00 00 62 19     ru-In.....&...b.
     a92:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 27 08     ..Thru-Out....'.
     aa2:	00 00 62 19 09 00 41 63 63 65 70 74 20 50 43 00     ..b...Accept PC.
     ab2:	00 00 32 09 00 00 17 1b 09 00 41 63 74 2e 53 65     ..2.......Act.Se
     ac2:	6e 73 65 00 00 00 30 09 00 00 17 1b 09 00 56 65     nse...0.......Ve
     ad2:	6c 5a 34 4f 66 66 00 00 00 00 31 09 00 00 17 1b     lZ4Off....1.....
     ae2:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 41 15     ..RxBufUse....A.
     af2:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     b02:	00 00 4a 16 00 00 00 00                             ..J.....

00000b0a <menu_midiIn>:
     b0a:	81 00 43 68 2e 31 00 00 00 00 00 00 4a 0c 00 00     ..Ch.1......J...
     b1a:	dc 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     b2a:	4a 0c 01 00 dc 18 00 00 01 00 43 68 2e 33 00 00     J.........Ch.3..
     b3a:	00 00 00 00 4a 0c 02 00 dc 18 00 00 01 00 43 68     ....J.........Ch
     b4a:	2e 34 00 00 00 00 00 00 4a 0c 03 00 dc 18 00 00     .4......J.......
     b5a:	01 00 43 68 2e 35 00 00 00 00 00 00 4a 0c 04 00     ..Ch.5......J...
     b6a:	dc 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     b7a:	4a 0c 05 00 dc 18 00 00 01 00 43 68 2e 37 00 00     J.........Ch.7..
     b8a:	00 00 00 00 4a 0c 06 00 dc 18 00 00 01 00 43 68     ....J.........Ch
     b9a:	2e 38 00 00 00 00 00 00 4a 0c 07 00 dc 18 00 00     .8......J.......
     baa:	01 00 43 68 2e 39 00 00 00 00 00 00 4a 0c 08 00     ..Ch.9......J...
     bba:	dc 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     bca:	4a 0c 09 00 dc 18 00 00 01 00 43 68 2e 31 31 00     J.........Ch.11.
     bda:	00 00 00 00 4a 0c 0a 00 dc 18 00 00 01 00 43 68     ....J.........Ch
     bea:	2e 31 32 00 00 00 00 00 4a 0c 0b 00 dc 18 00 00     .12.....J.......
     bfa:	01 00 43 68 2e 31 33 00 00 00 00 00 4a 0c 0c 00     ..Ch.13.....J...
     c0a:	dc 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c1a:	4a 0c 0d 00 dc 18 00 00 01 00 43 68 2e 31 35 00     J.........Ch.15.
     c2a:	00 00 00 00 4a 0c 0e 00 dc 18 00 00 c1 00 43 68     ....J.........Ch
     c3a:	2e 31 36 00 00 00 00 00 4a 0c 0f 00 dc 18 00 00     .16.....J.......

00000c4a <menu_midiInSec>:
     c4a:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 0c 00 00     ..Sect.1........
     c5a:	e7 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     c6a:	9a 0c 01 00 e7 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     c7a:	00 00 00 00 9a 0c 02 00 e7 18 00 00 c1 00 53 65     ..............Se
     c8a:	63 74 2e 34 00 00 00 00 9a 0c 03 00 e7 18 00 00     ct.4............

00000c9a <menu_midiInVar>:
     c9a:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 28 08     ..Manual......(.
     caa:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     cba:	00 00 29 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..).......Range.
     cca:	00 00 00 00 00 00 2a 08 00 00 00 00 c4 90 4d 61     ......*.......Ma
     cda:	6e 4e 6f 74 65 00 00 00 00 00 2b 08 00 00 00 00     nNote.....+.....

00000cea <menu_key>:
     cea:	81 08 54 61 73 74 65 31 00 00 00 00 70 04 00 00     ..Taste1....p...
     cfa:	4b 19 24 2c 01 08 54 61 73 74 65 32 00 00 00 00     K.$,..Taste2....
     d0a:	70 04 01 00 4b 19 24 2c 01 08 54 61 73 74 65 33     p...K.$,..Taste3
     d1a:	00 00 00 00 70 04 02 00 4b 19 24 2c c1 08 54 61     ....p...K.$,..Ta
     d2a:	73 74 65 34 00 00 00 00 70 04 03 00 4b 19 24 2c     ste4....p...K.$,

00000d3a <menu_tune>:
     d3a:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d4a:	fb 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     d5a:	00 00 01 00 fb 19 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     d6a:	00 00 00 00 00 00 02 00 fb 19 00 00 c1 20 50 65     ............. Pe
     d7a:	64 61 6c 00 00 00 00 00 00 00 03 00 fb 19 00 00     dal.............

00000d8a <menu_midiOut>:
     d8a:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 28 09     ..III.........(.
     d9a:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     daa:	00 00 2a 09 00 00 00 00 03 10 49 00 00 00 00 00     ..*.......I.....
     dba:	00 00 00 00 00 00 2c 09 00 00 00 00 03 10 50 00     ......,.......P.
	...
     dd2:	00 00 2e 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..........III(in
     de2:	74 29 00 00 00 00 29 09 00 00 00 00 03 10 49 49     t)....).......II
     df2:	28 69 6e 74 29 00 00 00 00 00 2b 09 00 00 00 00     (int).....+.....
     e02:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2d 09     ..I(int)......-.
     e12:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     e22:	00 00 2f 09 00 00 00 00                             ../.....

00000e2a <menu_setup>:
     e2a:	81 00 4d 6f 64 75 6c 65 00 00 00 00 f2 0e 00 00     ..Module........
     e3a:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     e4a:	62 12 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     b.........Power.
     e5a:	00 00 00 00 b6 0e 00 00 00 00 00 00 c1 00 45 45     ..............EE
     e6a:	70 72 6f 6d 00 00 00 00 7a 0e 00 00 00 00 00 00     prom....z.......

00000e7a <menu_eeprom>:
     e7a:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     e8a:	63 2a 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     c*....EEBackup..
     e9a:	00 00 00 00 4b 2a 00 00 c1 00 45 45 52 65 73 74     ....K*....EERest
     eaa:	6f 72 65 00 00 00 00 00 57 2a 00 00                 ore.....W*..

00000eb6 <menu_Power>:
     eb6:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     ec6:	e8 2c 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .,....PowerOff..
     ed6:	00 00 00 00 f1 2c 00 00 c1 00 50 2e 52 65 73 74     .....,....P.Rest
     ee6:	61 72 74 00 00 00 00 00 f9 2c 00 00                 art......,..

00000ef2 <menu_module>:
     ef2:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     f02:	00 00 2d 1b 0a 00 4d 6f 64 57 72 69 74 65 00 00     ..-...ModWrite..
     f12:	00 00 56 03 00 00 2d 1b 0a 08 4d 6f 64 4f 4b 00     ..V...-...ModOK.
     f22:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     f32:	64 54 65 73 74 00 00 00 56 0f 00 00 00 00 00 00     dTest...V.......
     f42:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 46 10 00 00     ..ModAssign.F...
     f52:	00 00 23 1b                                         ..#.

00000f56 <menu_ModeSel>:
     f56:	81 00 4d 6f 64 2e 30 00 00 00 00 00 f6 0f 00 00     ..Mod.0.........
     f66:	d1 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     f76:	f6 0f 01 00 d1 18 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     f86:	00 00 00 00 f6 0f 02 00 d1 18 00 00 01 00 4d 6f     ..............Mo
     f96:	64 2e 33 00 00 00 00 00 f6 0f 03 00 d1 18 00 00     d.3.............
     fa6:	01 00 4d 6f 64 2e 34 00 00 00 00 00 f6 0f 04 00     ..Mod.4.........
     fb6:	d1 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     fc6:	f6 0f 05 00 d1 18 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     fd6:	00 00 00 00 f6 0f 06 00 d1 18 00 00 c1 00 4d 6f     ..............Mo
     fe6:	64 2e 37 00 00 00 00 00 f6 0f 07 00 d1 18 00 00     d.7.............

00000ff6 <menu_ModTestSelcted>:
     ff6:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    1006:	b5 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    1016:	00 00 ad 05 68 18 a4 18 01 00 54 65 73 74 50 74     ....h.....TestPt
    1026:	72 6e 00 00 00 00 00 00 2e 2a 00 00 c1 00 4c 6f     rn.......*....Lo
    1036:	6f 70 54 73 74 00 00 00 00 00 00 00 e9 19 00 00     opTst...........

00001046 <menu_modAssign>:
    1046:	81 00 4d 61 6e 2e 33 00 00 00 00 00 4a 11 00 00     ..Man.3.....J...
    1056:	05 19 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    1066:	4a 11 01 00 05 19 00 00 01 00 4d 61 6e 2e 31 00     J.........Man.1.
    1076:	00 00 00 00 4a 11 02 00 05 19 00 00 01 00 50 65     ....J.........Pe
    1086:	64 61 6c 00 00 00 00 00 4a 11 03 00 05 19 00 00     dal.....J.......
    1096:	c1 00 52 65 67 69 73 74 65 72 00 00 aa 10 04 00     ..Register......
    10a6:	00 00 00 00                                         ....

000010aa <menu_modSection8>:
    10aa:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 11 00 00     ..Sect.1........
    10ba:	35 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     5.....Sect.2....
    10ca:	9a 11 01 00 35 19 00 00 01 00 53 65 63 74 2e 33     ....5.....Sect.3
    10da:	00 00 00 00 9a 11 02 00 35 19 00 00 01 00 53 65     ........5.....Se
    10ea:	63 74 2e 34 00 00 00 00 9a 11 03 00 35 19 00 00     ct.4........5...
    10fa:	01 00 53 65 63 74 2e 35 00 00 00 00 9a 11 04 00     ..Sect.5........
    110a:	35 19 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     5.....Sect.6....
    111a:	9a 11 05 00 35 19 00 00 01 00 53 65 63 74 2e 37     ....5.....Sect.7
    112a:	00 00 00 00 9a 11 06 00 35 19 00 00 c1 00 53 65     ........5.....Se
    113a:	63 74 2e 38 00 00 00 00 9a 11 07 00 35 19 00 00     ct.8........5...

0000114a <menu_modSection>:
    114a:	81 00 53 65 63 74 2e 31 00 00 00 00 d6 11 00 00     ..Sect.1........
    115a:	10 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    116a:	d6 11 01 00 10 19 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    117a:	00 00 00 00 d6 11 02 00 10 19 00 00 c1 00 53 65     ..............Se
    118a:	63 74 2e 34 00 00 00 00 d6 11 03 00 10 19 00 00     ct.4............

0000119a <menu_modDefineReg>:
    119a:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f7 07     ..RegBeg........
    11aa:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    11ba:	00 00 f8 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    11ca:	2f 42 69 74 00 00 f9 07 00 00 00 00                 /Bit........

000011d6 <menu_modDefine>:
    11d6:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 34 09     ..NoteBeg.....4.
    11e6:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    11f6:	00 00 35 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..5.......Module
    1206:	2f 42 69 74 00 00 36 09 00 00 00 00                 /Bit..6.....

00001212 <menu_status>:
    1212:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1222:	57 25 00 00 01 00 55 53 42 00 00 00 00 00 00 00     W%....USB.......
    1232:	62 12 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     b........@MIDI-I
    1242:	6e 00 00 00 00 00 00 00 db 24 00 00 c2 40 4d 49     n........$...@MI
    1252:	44 49 2d 4f 75 74 00 00 00 00 00 00 19 25 00 00     DI-Out.......%..

00001262 <menu_USBser>:
    1262:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 52 16     ..EventLog....R.
    1272:	00 00 57 1b 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..W...SendLog...
    1282:	00 00 00 00 31 1b 00 00 c1 00 53 6e 64 48 57 43     ....1.....SndHWC
    1292:	66 67 00 00 00 00 00 00 6b 1b 00 00                 fg......k...

0000129e <sw_version>:
    129e:	56 30 2e 37 32 00                                   V0.72.

000012a4 <cplInfo>:
    12a4:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    12b4:	01 02 00 03 01 03 02 03                             ........

000012bc <keylabel_1>:
    12bc:	31 00                                               1.

000012be <keylabel_0>:
    12be:	30 00                                               0.

000012c0 <keylabel_text>:
    12c0:	54 65 78 74 80 00                                   Text..

000012c6 <keylabel_exit>:
    12c6:	45 78 69 74 00                                      Exit.

000012cb <keylabel_off>:
    12cb:	7e 61 75 73 00                                      ~aus.

000012d0 <keylabel_on>:
    12d0:	7e 65 69 6e 00                                      ~ein.

000012d5 <keylabel_onoff>:
    12d5:	45 69 6e 80 00                                      Ein..

000012da <keylabel_minus>:
    12da:	2d 00                                               -.

000012dc <keylabel_plus>:
    12dc:	2b 00                                               +.

000012de <keylabel_left>:
    12de:	7f 00                                               ..

000012e0 <keylabel_right>:
    12e0:	7e 00                                               ~.

000012e2 <keylabel_down>:
    12e2:	09 00                                               ..

000012e4 <keylabel_up>:
    12e4:	08 00                                               ..

000012e6 <cgPattern_Block>:
    12e6:	00 00 0e 0e 0e 0e 00 00                             ........

000012ee <cgPattern_Down>:
    12ee:	04 04 04 04 15 0e 04 00                             ........

000012f6 <cgPattern_Up>:
    12f6:	04 0e 15 04 04 04 04 00                             ........

000012fe <cr_lf>:
    12fe:	0d 0a 00 00                                         ....

00001302 <__ctors_end>:
    1302:	11 24       	eor	r1, r1
    1304:	1f be       	out	0x3f, r1	; 63
    1306:	cf ef       	ldi	r28, 0xFF	; 255
    1308:	d1 e2       	ldi	r29, 0x21	; 33
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	0c bf       	out	0x3c, r16	; 60

00001312 <__do_copy_data>:
    1312:	12 e0       	ldi	r17, 0x02	; 2
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b2 e0       	ldi	r27, 0x02	; 2
    1318:	ee ed       	ldi	r30, 0xDE	; 222
    131a:	f9 e7       	ldi	r31, 0x79	; 121
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	0b bf       	out	0x3b, r16	; 59
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <__do_copy_data+0x14>
    1322:	07 90       	elpm	r0, Z+
    1324:	0d 92       	st	X+, r0
    1326:	a8 30       	cpi	r26, 0x08	; 8
    1328:	b1 07       	cpc	r27, r17
    132a:	d9 f7       	brne	.-10     	; 0x1322 <__do_copy_data+0x10>

0000132c <__do_clear_bss>:
    132c:	29 e1       	ldi	r18, 0x19	; 25
    132e:	a8 e0       	ldi	r26, 0x08	; 8
    1330:	b2 e0       	ldi	r27, 0x02	; 2
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <.do_clear_bss_start>

00001334 <.do_clear_bss_loop>:
    1334:	1d 92       	st	X+, r1

00001336 <.do_clear_bss_start>:
    1336:	a1 32       	cpi	r26, 0x21	; 33
    1338:	b2 07       	cpc	r27, r18
    133a:	e1 f7       	brne	.-8      	; 0x1334 <.do_clear_bss_loop>
    133c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <main>
    1340:	0c 94 ed 3c 	jmp	0x79da	; 0x79da <_exit>

00001344 <__bad_interrupt>:
    1344:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001348 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1348:	fc 01       	movw	r30, r24
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	1c c0       	rjmp	.+56     	; 0x1388 <crc16_ram+0x40>
    1350:	df 01       	movw	r26, r30
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	20 81       	ld	r18, Z
    1356:	82 27       	eor	r24, r18
    1358:	28 2f       	mov	r18, r24
    135a:	22 95       	swap	r18
    135c:	28 27       	eor	r18, r24
    135e:	02 2e       	mov	r0, r18
    1360:	26 95       	lsr	r18
    1362:	26 95       	lsr	r18
    1364:	20 25       	eor	r18, r0
    1366:	02 2e       	mov	r0, r18
    1368:	26 95       	lsr	r18
    136a:	20 25       	eor	r18, r0
    136c:	27 70       	andi	r18, 0x07	; 7
    136e:	08 2e       	mov	r0, r24
    1370:	89 2f       	mov	r24, r25
    1372:	26 95       	lsr	r18
    1374:	07 94       	ror	r0
    1376:	27 95       	ror	r18
    1378:	90 2d       	mov	r25, r0
    137a:	82 27       	eor	r24, r18
    137c:	06 94       	lsr	r0
    137e:	27 95       	ror	r18
    1380:	90 25       	eor	r25, r0
    1382:	82 27       	eor	r24, r18
    1384:	ba 01       	movw	r22, r20
    1386:	fd 01       	movw	r30, r26
    1388:	ab 01       	movw	r20, r22
    138a:	41 50       	subi	r20, 0x01	; 1
    138c:	51 09       	sbc	r21, r1
    138e:	67 2b       	or	r22, r23
    1390:	f9 f6       	brne	.-66     	; 0x1350 <crc16_ram+0x8>
    1392:	08 95       	ret

00001394 <crc16_eeprom>:
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	cf ef       	ldi	r28, 0xFF	; 255
    13a2:	df ef       	ldi	r29, 0xFF	; 255
    13a4:	21 c0       	rjmp	.+66     	; 0x13e8 <crc16_eeprom+0x54>
    13a6:	7c 01       	movw	r14, r24
    13a8:	2f ef       	ldi	r18, 0xFF	; 255
    13aa:	e2 1a       	sub	r14, r18
    13ac:	f2 0a       	sbc	r15, r18
    13ae:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    13b2:	9e 01       	movw	r18, r28
    13b4:	28 27       	eor	r18, r24
    13b6:	82 2f       	mov	r24, r18
    13b8:	82 95       	swap	r24
    13ba:	82 27       	eor	r24, r18
    13bc:	08 2e       	mov	r0, r24
    13be:	86 95       	lsr	r24
    13c0:	86 95       	lsr	r24
    13c2:	80 25       	eor	r24, r0
    13c4:	08 2e       	mov	r0, r24
    13c6:	86 95       	lsr	r24
    13c8:	80 25       	eor	r24, r0
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	02 2e       	mov	r0, r18
    13ce:	23 2f       	mov	r18, r19
    13d0:	86 95       	lsr	r24
    13d2:	07 94       	ror	r0
    13d4:	87 95       	ror	r24
    13d6:	30 2d       	mov	r19, r0
    13d8:	28 27       	eor	r18, r24
    13da:	06 94       	lsr	r0
    13dc:	87 95       	ror	r24
    13de:	30 25       	eor	r19, r0
    13e0:	28 27       	eor	r18, r24
    13e2:	e9 01       	movw	r28, r18
    13e4:	b8 01       	movw	r22, r16
    13e6:	c7 01       	movw	r24, r14
    13e8:	8b 01       	movw	r16, r22
    13ea:	01 50       	subi	r16, 0x01	; 1
    13ec:	11 09       	sbc	r17, r1
    13ee:	67 2b       	or	r22, r23
    13f0:	d1 f6       	brne	.-76     	; 0x13a6 <crc16_eeprom+0x12>
    13f2:	ce 01       	movw	r24, r28
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <crc16_ram_startVal>:
    1402:	fc 01       	movw	r30, r24
    1404:	ca 01       	movw	r24, r20
    1406:	1c c0       	rjmp	.+56     	; 0x1440 <crc16_ram_startVal+0x3e>
    1408:	df 01       	movw	r26, r30
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	20 81       	ld	r18, Z
    140e:	82 27       	eor	r24, r18
    1410:	28 2f       	mov	r18, r24
    1412:	22 95       	swap	r18
    1414:	28 27       	eor	r18, r24
    1416:	02 2e       	mov	r0, r18
    1418:	26 95       	lsr	r18
    141a:	26 95       	lsr	r18
    141c:	20 25       	eor	r18, r0
    141e:	02 2e       	mov	r0, r18
    1420:	26 95       	lsr	r18
    1422:	20 25       	eor	r18, r0
    1424:	27 70       	andi	r18, 0x07	; 7
    1426:	08 2e       	mov	r0, r24
    1428:	89 2f       	mov	r24, r25
    142a:	26 95       	lsr	r18
    142c:	07 94       	ror	r0
    142e:	27 95       	ror	r18
    1430:	90 2d       	mov	r25, r0
    1432:	82 27       	eor	r24, r18
    1434:	06 94       	lsr	r0
    1436:	27 95       	ror	r18
    1438:	90 25       	eor	r25, r0
    143a:	82 27       	eor	r24, r18
    143c:	ba 01       	movw	r22, r20
    143e:	fd 01       	movw	r30, r26
    1440:	ab 01       	movw	r20, r22
    1442:	41 50       	subi	r20, 0x01	; 1
    1444:	51 09       	sbc	r21, r1
    1446:	67 2b       	or	r22, r23
    1448:	f9 f6       	brne	.-66     	; 0x1408 <crc16_ram_startVal+0x6>
    144a:	08 95       	ret

0000144c <crc16_eeprom_startVal>:
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ea 01       	movw	r28, r20
    145a:	21 c0       	rjmp	.+66     	; 0x149e <crc16_eeprom_startVal+0x52>
    145c:	7c 01       	movw	r14, r24
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	e2 1a       	sub	r14, r18
    1462:	f2 0a       	sbc	r15, r18
    1464:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    1468:	ae 01       	movw	r20, r28
    146a:	48 27       	eor	r20, r24
    146c:	84 2f       	mov	r24, r20
    146e:	82 95       	swap	r24
    1470:	84 27       	eor	r24, r20
    1472:	08 2e       	mov	r0, r24
    1474:	86 95       	lsr	r24
    1476:	86 95       	lsr	r24
    1478:	80 25       	eor	r24, r0
    147a:	08 2e       	mov	r0, r24
    147c:	86 95       	lsr	r24
    147e:	80 25       	eor	r24, r0
    1480:	87 70       	andi	r24, 0x07	; 7
    1482:	04 2e       	mov	r0, r20
    1484:	45 2f       	mov	r20, r21
    1486:	86 95       	lsr	r24
    1488:	07 94       	ror	r0
    148a:	87 95       	ror	r24
    148c:	50 2d       	mov	r21, r0
    148e:	48 27       	eor	r20, r24
    1490:	06 94       	lsr	r0
    1492:	87 95       	ror	r24
    1494:	50 25       	eor	r21, r0
    1496:	48 27       	eor	r20, r24
    1498:	ea 01       	movw	r28, r20
    149a:	b8 01       	movw	r22, r16
    149c:	c7 01       	movw	r24, r14
    149e:	8b 01       	movw	r16, r22
    14a0:	01 50       	subi	r16, 0x01	; 1
    14a2:	11 09       	sbc	r17, r1
    14a4:	67 2b       	or	r22, r23
    14a6:	d1 f6       	brne	.-76     	; 0x145c <crc16_eeprom_startVal+0x10>
    14a8:	ce 01       	movw	r24, r28
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	08 95       	ret

000014b8 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    14bc:	82 e3       	ldi	r24, 0x32	; 50
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    14c4:	ec 01       	movw	r28, r24
    14c6:	60 e3       	ldi	r22, 0x30	; 48
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	62 df       	rcall	.-316    	; 0x1394 <crc16_eeprom>
    14d0:	c8 17       	cp	r28, r24
    14d2:	d9 07       	cpc	r29, r25
    14d4:	81 f4       	brne	.+32     	; 0x14f6 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    14de:	8d 34       	cpi	r24, 0x4D	; 77
    14e0:	51 f4       	brne	.+20     	; 0x14f6 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    14e2:	40 e3       	ldi	r20, 0x30	; 48
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	84 e3       	ldi	r24, 0x34	; 52
    14ec:	99 e0       	ldi	r25, 0x09	; 9
    14ee:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return (EE_LOAD_OK);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    14f6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1500:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    150c:	85 e3       	ldi	r24, 0x35	; 53
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    1514:	ec 01       	movw	r28, r24
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	71 e0       	ldi	r23, 0x01	; 1
    151a:	85 e3       	ldi	r24, 0x35	; 53
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	3a df       	rcall	.-396    	; 0x1394 <crc16_eeprom>
    1520:	c8 17       	cp	r28, r24
    1522:	d9 07       	cpc	r29, r25
    1524:	81 f4       	brne	.+32     	; 0x1546 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1526:	84 e3       	ldi	r24, 0x34	; 52
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    152e:	89 34       	cpi	r24, 0x49	; 73
    1530:	51 f4       	brne	.+20     	; 0x1546 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	65 e3       	ldi	r22, 0x35	; 53
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	88 e2       	ldi	r24, 0x28	; 40
    153c:	98 e0       	ldi	r25, 0x08	; 8
    153e:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return (EE_LOAD_OK);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1546:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    154a:	82 60       	ori	r24, 0x02	; 2
    154c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1550:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    155c:	83 e4       	ldi	r24, 0x43	; 67
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    1564:	ec 01       	movw	r28, r24
    1566:	6b e0       	ldi	r22, 0x0B	; 11
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	88 e3       	ldi	r24, 0x38	; 56
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	12 df       	rcall	.-476    	; 0x1394 <crc16_eeprom>
    1570:	c8 17       	cp	r28, r24
    1572:	d9 07       	cpc	r29, r25
    1574:	c1 f4       	brne	.+48     	; 0x15a6 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    1576:	87 e3       	ldi	r24, 0x37	; 55
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    157e:	8f 34       	cpi	r24, 0x4F	; 79
    1580:	91 f4       	brne	.+36     	; 0x15a6 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1582:	48 e0       	ldi	r20, 0x08	; 8
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	68 e3       	ldi	r22, 0x38	; 56
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	88 e2       	ldi	r24, 0x28	; 40
    158c:	99 e0       	ldi	r25, 0x09	; 9
    158e:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1592:	43 e0       	ldi	r20, 0x03	; 3
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	60 e4       	ldi	r22, 0x40	; 64
    1598:	71 e0       	ldi	r23, 0x01	; 1
    159a:	80 e3       	ldi	r24, 0x30	; 48
    159c:	99 e0       	ldi	r25, 0x09	; 9
    159e:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return (EE_LOAD_OK);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    15a6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    15bc:	88 e4       	ldi	r24, 0x48	; 72
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    15c4:	ec 01       	movw	r28, r24
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	86 e4       	ldi	r24, 0x46	; 70
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	e2 de       	rcall	.-572    	; 0x1394 <crc16_eeprom>
    15d0:	c8 17       	cp	r28, r24
    15d2:	d9 07       	cpc	r29, r25
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    15d6:	85 e4       	ldi	r24, 0x45	; 69
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    15de:	89 36       	cpi	r24, 0x69	; 105
    15e0:	71 f4       	brne	.+28     	; 0x15fe <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    15e2:	86 e4       	ldi	r24, 0x46	; 70
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    15ea:	c5 e5       	ldi	r28, 0x55	; 85
    15ec:	d3 e0       	ldi	r29, 0x03	; 3
    15ee:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    15f0:	87 e4       	ldi	r24, 0x47	; 71
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    15f8:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    15fe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1608:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1614:	87 ef       	ldi	r24, 0xF7	; 247
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    161c:	ec 01       	movw	r28, r24
    161e:	62 e0       	ldi	r22, 0x02	; 2
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	85 ef       	ldi	r24, 0xF5	; 245
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	b6 de       	rcall	.-660    	; 0x1394 <crc16_eeprom>
    1628:	c8 17       	cp	r28, r24
    162a:	d9 07       	cpc	r29, r25
    162c:	81 f4       	brne	.+32     	; 0x164e <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    162e:	84 ef       	ldi	r24, 0xF4	; 244
    1630:	93 e0       	ldi	r25, 0x03	; 3
    1632:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    1636:	84 35       	cpi	r24, 0x54	; 84
    1638:	51 f4       	brne	.+20     	; 0x164e <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    163a:	42 e0       	ldi	r20, 0x02	; 2
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	65 ef       	ldi	r22, 0xF5	; 245
    1640:	73 e0       	ldi	r23, 0x03	; 3
    1642:	86 e2       	ldi	r24, 0x26	; 38
    1644:	98 e0       	ldi	r25, 0x08	; 8
    1646:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return (EE_LOAD_OK);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	06 c0       	rjmp	.+12     	; 0x165a <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    164e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1658:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1664:	8c e4       	ldi	r24, 0x4C	; 76
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    166c:	ec 01       	movw	r28, r24
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	8b e4       	ldi	r24, 0x4B	; 75
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	8e de       	rcall	.-740    	; 0x1394 <crc16_eeprom>
    1678:	c8 17       	cp	r28, r24
    167a:	d9 07       	cpc	r29, r25
    167c:	71 f4       	brne	.+28     	; 0x169a <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    167e:	8a e4       	ldi	r24, 0x4A	; 74
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    1686:	85 35       	cpi	r24, 0x55	; 85
    1688:	41 f4       	brne	.+16     	; 0x169a <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    168a:	8b e4       	ldi	r24, 0x4B	; 75
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    1692:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <serUSB_Active>
		return (EE_LOAD_OK);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    169a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    169e:	88 60       	ori	r24, 0x08	; 8
    16a0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8f e4       	ldi	r24, 0x4F	; 79
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	6d de       	rcall	.-806    	; 0x1394 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    16ba:	ac 01       	movw	r20, r24
    16bc:	68 e1       	ldi	r22, 0x18	; 24
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 e5       	ldi	r24, 0x50	; 80
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	c3 de       	rcall	.-634    	; 0x144c <crc16_eeprom_startVal>
    16c6:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    16c8:	88 e6       	ldi	r24, 0x68	; 104
    16ca:	91 e0       	ldi	r25, 0x01	; 1
    16cc:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    16d0:	c8 17       	cp	r28, r24
    16d2:	d9 07       	cpc	r29, r25
    16d4:	b1 f4       	brne	.+44     	; 0x1702 <eeprom_ReadReg+0x56>
    16d6:	8e e4       	ldi	r24, 0x4E	; 78
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    16de:	82 35       	cpi	r24, 0x52	; 82
    16e0:	81 f4       	brne	.+32     	; 0x1702 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    16e2:	8f e4       	ldi	r24, 0x4F	; 79
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    16ea:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    16ee:	48 e1       	ldi	r20, 0x18	; 24
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e5       	ldi	r22, 0x50	; 80
    16f4:	71 e0       	ldi	r23, 0x01	; 1
    16f6:	87 ef       	ldi	r24, 0xF7	; 247
    16f8:	97 e0       	ldi	r25, 0x07	; 7
    16fa:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return(EE_LOAD_OK);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	06 c0       	rjmp	.+12     	; 0x170e <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    1702:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    170c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1718:	8b ee       	ldi	r24, 0xEB	; 235
    171a:	93 e0       	ldi	r25, 0x03	; 3
    171c:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    1720:	ec 01       	movw	r28, r24
    1722:	60 e8       	ldi	r22, 0x80	; 128
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	8b e6       	ldi	r24, 0x6B	; 107
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	34 de       	rcall	.-920    	; 0x1394 <crc16_eeprom>
    172c:	c8 17       	cp	r28, r24
    172e:	d9 07       	cpc	r29, r25
    1730:	81 f4       	brne	.+32     	; 0x1752 <eeprom_ReadProg+0x3e>
    1732:	8a e6       	ldi	r24, 0x6A	; 106
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    173a:	80 35       	cpi	r24, 0x50	; 80
    173c:	51 f4       	brne	.+20     	; 0x1752 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	52 e0       	ldi	r21, 0x02	; 2
    1742:	6b e6       	ldi	r22, 0x6B	; 107
    1744:	71 e0       	ldi	r23, 0x01	; 1
    1746:	84 e6       	ldi	r24, 0x64	; 100
    1748:	99 e0       	ldi	r25, 0x09	; 9
    174a:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return(EE_LOAD_OK);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	06 c0       	rjmp	.+12     	; 0x175e <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1752:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1756:	80 64       	ori	r24, 0x40	; 64
    1758:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    175c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1768:	82 ef       	ldi	r24, 0xF2	; 242
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	0e 94 c3 3c 	call	0x7986	; 0x7986 <eeprom_read_word>
    1770:	ec 01       	movw	r28, r24
    1772:	64 e0       	ldi	r22, 0x04	; 4
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	8e ee       	ldi	r24, 0xEE	; 238
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0c de       	rcall	.-1000   	; 0x1394 <crc16_eeprom>
    177c:	c8 17       	cp	r28, r24
    177e:	d9 07       	cpc	r29, r25
    1780:	51 f4       	brne	.+20     	; 0x1796 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1782:	44 e0       	ldi	r20, 0x04	; 4
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	6e ee       	ldi	r22, 0xEE	; 238
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	83 eb       	ldi	r24, 0xB3	; 179
    178c:	95 e0       	ldi	r25, 0x05	; 5
    178e:	0e 94 ab 3c 	call	0x7956	; 0x7956 <eeprom_read_block>
		return(EE_LOAD_OK);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1796:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    17b2:	65 e6       	ldi	r22, 0x65	; 101
    17b4:	89 ef       	ldi	r24, 0xF9	; 249
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	0c 94 d7 3c 	jmp	0x79ae	; 0x79ae <eeprom_update_byte>
    17bc:	08 95       	ret

000017be <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    17c2:	60 e3       	ldi	r22, 0x30	; 48
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	84 e3       	ldi	r24, 0x34	; 52
    17c8:	99 e0       	ldi	r25, 0x09	; 9
    17ca:	be dd       	rcall	.-1156   	; 0x1348 <crc16_ram>
    17cc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17ce:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    17d2:	6d e4       	ldi	r22, 0x4D	; 77
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    17dc:	40 e3       	ldi	r20, 0x30	; 48
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	84 e3       	ldi	r24, 0x34	; 52
    17e6:	99 e0       	ldi	r25, 0x09	; 9
    17e8:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    17ec:	be 01       	movw	r22, r28
    17ee:	82 e3       	ldi	r24, 0x32	; 50
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    17f6:	d8 df       	rcall	.-80     	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17f8:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	88 e2       	ldi	r24, 0x28	; 40
    180c:	98 e0       	ldi	r25, 0x08	; 8
    180e:	9c dd       	rcall	.-1224   	; 0x1348 <crc16_ram>
    1810:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1812:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1816:	69 e4       	ldi	r22, 0x49	; 73
    1818:	84 e3       	ldi	r24, 0x34	; 52
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	51 e0       	ldi	r21, 0x01	; 1
    1824:	65 e3       	ldi	r22, 0x35	; 53
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	88 e2       	ldi	r24, 0x28	; 40
    182a:	98 e0       	ldi	r25, 0x08	; 8
    182c:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1830:	be 01       	movw	r22, r28
    1832:	85 e3       	ldi	r24, 0x35	; 53
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    183a:	b6 df       	rcall	.-148    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    183c:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    184a:	68 e0       	ldi	r22, 0x08	; 8
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	88 e2       	ldi	r24, 0x28	; 40
    1850:	99 e0       	ldi	r25, 0x09	; 9
    1852:	7a dd       	rcall	.-1292   	; 0x1348 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1854:	ac 01       	movw	r20, r24
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	99 e0       	ldi	r25, 0x09	; 9
    185e:	d1 dd       	rcall	.-1118   	; 0x1402 <crc16_ram_startVal>
    1860:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1862:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1866:	6f e4       	ldi	r22, 0x4F	; 79
    1868:	87 e3       	ldi	r24, 0x37	; 55
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1870:	48 e0       	ldi	r20, 0x08	; 8
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	68 e3       	ldi	r22, 0x38	; 56
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	88 e2       	ldi	r24, 0x28	; 40
    187a:	99 e0       	ldi	r25, 0x09	; 9
    187c:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1880:	43 e0       	ldi	r20, 0x03	; 3
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	60 e4       	ldi	r22, 0x40	; 64
    1886:	71 e0       	ldi	r23, 0x01	; 1
    1888:	80 e3       	ldi	r24, 0x30	; 48
    188a:	99 e0       	ldi	r25, 0x09	; 9
    188c:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1890:	be 01       	movw	r22, r28
    1892:	83 e4       	ldi	r24, 0x43	; 67
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    189a:	86 df       	rcall	.-244    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    189c:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	85 e5       	ldi	r24, 0x55	; 85
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	48 dd       	rcall	.-1392   	; 0x1348 <crc16_ram>
    18b8:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    18ba:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    18be:	69 e6       	ldi	r22, 0x69	; 105
    18c0:	85 e4       	ldi	r24, 0x45	; 69
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    18c8:	c5 e5       	ldi	r28, 0x55	; 85
    18ca:	d3 e0       	ldi	r29, 0x03	; 3
    18cc:	68 81       	ld	r22, Y
    18ce:	86 e4       	ldi	r24, 0x46	; 70
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    18d6:	69 81       	ldd	r22, Y+1	; 0x01
    18d8:	87 e4       	ldi	r24, 0x47	; 71
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    18e0:	b8 01       	movw	r22, r16
    18e2:	88 e4       	ldi	r24, 0x48	; 72
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    18ea:	5e df       	rcall	.-324    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18ec:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	08 95       	ret

000018fa <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	82 e5       	ldi	r24, 0x52	; 82
    1904:	96 e1       	ldi	r25, 0x16	; 22
    1906:	20 dd       	rcall	.-1472   	; 0x1348 <crc16_ram>
    1908:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    190a:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    190e:	65 e5       	ldi	r22, 0x55	; 85
    1910:	8a e4       	ldi	r24, 0x4A	; 74
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1918:	60 91 52 16 	lds	r22, 0x1652	; 0x801652 <serUSB_Active>
    191c:	8b e4       	ldi	r24, 0x4B	; 75
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1924:	be 01       	movw	r22, r28
    1926:	8c e4       	ldi	r24, 0x4C	; 76
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    192e:	3c df       	rcall	.-392    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1930:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	86 e2       	ldi	r24, 0x26	; 38
    1944:	98 e0       	ldi	r25, 0x08	; 8
    1946:	00 dd       	rcall	.-1536   	; 0x1348 <crc16_ram>
    1948:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    194a:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    194e:	64 e5       	ldi	r22, 0x54	; 84
    1950:	84 ef       	ldi	r24, 0xF4	; 244
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1958:	42 e0       	ldi	r20, 0x02	; 2
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	65 ef       	ldi	r22, 0xF5	; 245
    195e:	73 e0       	ldi	r23, 0x03	; 3
    1960:	86 e2       	ldi	r24, 0x26	; 38
    1962:	98 e0       	ldi	r25, 0x08	; 8
    1964:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1968:	be 01       	movw	r22, r28
    196a:	87 ef       	ldi	r24, 0xF7	; 247
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    1972:	1a df       	rcall	.-460    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1974:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	98 e0       	ldi	r25, 0x08	; 8
    198a:	de dc       	rcall	.-1604   	; 0x1348 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    198c:	ac 01       	movw	r20, r24
    198e:	68 e1       	ldi	r22, 0x18	; 24
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	87 ef       	ldi	r24, 0xF7	; 247
    1994:	97 e0       	ldi	r25, 0x07	; 7
    1996:	35 dd       	rcall	.-1430   	; 0x1402 <crc16_ram_startVal>
    1998:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    199a:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    199e:	62 e5       	ldi	r22, 0x52	; 82
    19a0:	8e e4       	ldi	r24, 0x4E	; 78
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    19a8:	60 91 10 08 	lds	r22, 0x0810	; 0x800810 <registerCount>
    19ac:	8f e4       	ldi	r24, 0x4F	; 79
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    19b4:	48 e1       	ldi	r20, 0x18	; 24
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	60 e5       	ldi	r22, 0x50	; 80
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	87 ef       	ldi	r24, 0xF7	; 247
    19be:	97 e0       	ldi	r25, 0x07	; 7
    19c0:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    19c4:	be 01       	movw	r22, r28
    19c6:	88 e6       	ldi	r24, 0x68	; 104
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    19ce:	ec de       	rcall	.-552    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19d0:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    19de:	60 e8       	ldi	r22, 0x80	; 128
    19e0:	72 e0       	ldi	r23, 0x02	; 2
    19e2:	84 e6       	ldi	r24, 0x64	; 100
    19e4:	99 e0       	ldi	r25, 0x09	; 9
    19e6:	b0 dc       	rcall	.-1696   	; 0x1348 <crc16_ram>
    19e8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19ea:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    19ee:	60 e5       	ldi	r22, 0x50	; 80
    19f0:	8a e6       	ldi	r24, 0x6A	; 106
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	52 e0       	ldi	r21, 0x02	; 2
    19fc:	6b e6       	ldi	r22, 0x6B	; 107
    19fe:	71 e0       	ldi	r23, 0x01	; 1
    1a00:	84 e6       	ldi	r24, 0x64	; 100
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1a08:	be 01       	movw	r22, r28
    1a0a:	8b ee       	ldi	r24, 0xEB	; 235
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    1a12:	ca de       	rcall	.-620    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a14:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	83 eb       	ldi	r24, 0xB3	; 179
    1a28:	95 e0       	ldi	r25, 0x05	; 5
    1a2a:	8e dc       	rcall	.-1764   	; 0x1348 <crc16_ram>
    1a2c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a2e:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1a32:	6b e4       	ldi	r22, 0x4B	; 75
    1a34:	8d ee       	ldi	r24, 0xED	; 237
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a3c:	44 e0       	ldi	r20, 0x04	; 4
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	6e ee       	ldi	r22, 0xEE	; 238
    1a42:	73 e0       	ldi	r23, 0x03	; 3
    1a44:	83 eb       	ldi	r24, 0xB3	; 179
    1a46:	95 e0       	ldi	r25, 0x05	; 5
    1a48:	0e 94 c8 3c 	call	0x7990	; 0x7990 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1a4c:	be 01       	movw	r22, r28
    1a4e:	82 ef       	ldi	r24, 0xF2	; 242
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <eeprom_update_word>
	eepromWriteSignature();
    1a56:	a8 de       	rcall	.-688    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a58:	0e 94 e3 3b 	call	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1a62:	ad de       	rcall	.-678    	; 0x17be <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1a64:	ce de       	rcall	.-612    	; 0x1802 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1a66:	ef de       	rcall	.-546    	; 0x1846 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1a68:	1e df       	rcall	.-452    	; 0x18a6 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1a6a:	47 df       	rcall	.-370    	; 0x18fa <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1a6c:	88 df       	rcall	.-240    	; 0x197e <eeprom_UpdateReg>
    1a6e:	b5 df       	rcall	.-150    	; 0x19da <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1a70:	d6 df       	rcall	.-84     	; 0x1a1e <eeprom_UpdateSoftkeys>
    1a72:	63 cf       	rjmp	.-314    	; 0x193a <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1a74:	08 95       	ret

00001a76 <eepromCopy>:
    1a76:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	2f ef       	ldi	r18, 0xFF	; 255
    1a8e:	e2 1a       	sub	r14, r18
    1a90:	f2 0a       	sbc	r15, r18
    1a92:	0e 94 bb 3c 	call	0x7976	; 0x7976 <eeprom_read_byte>
    1a96:	6e 01       	movw	r12, r28
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
    1a9a:	c9 1a       	sub	r12, r25
    1a9c:	d9 0a       	sbc	r13, r25
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1aa6:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1aa8:	e6 01       	movw	r28, r12
    1aaa:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1aac:	8a 01       	movw	r16, r20
    1aae:	01 50       	subi	r16, 0x01	; 1
    1ab0:	11 09       	sbc	r17, r1
    1ab2:	45 2b       	or	r20, r21
    1ab4:	51 f7       	brne	.-44     	; 0x1a8a <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	08 95       	ret

00001ac8 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1ac8:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	58 e0       	ldi	r21, 0x08	; 8
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	78 e0       	ldi	r23, 0x08	; 8
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	ce df       	rcall	.-100    	; 0x1a76 <eepromCopy>
	lcd_waitSymbolOff();
    1ada:	0c 94 e3 3b 	jmp	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
    1ade:	08 95       	ret

00001ae0 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1ae0:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	58 e0       	ldi	r21, 0x08	; 8
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	98 e0       	ldi	r25, 0x08	; 8
    1af0:	c2 df       	rcall	.-124    	; 0x1a76 <eepromCopy>
	lcd_waitSymbolOff();
    1af2:	0c 94 e3 3b 	jmp	0x77c6	; 0x77c6 <lcd_waitSymbolOff>
    1af6:	08 95       	ret

00001af8 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <init_Timers+0x18>
    1afc:	e8 2f       	mov	r30, r24
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	e1 5d       	subi	r30, 0xD1	; 209
    1b06:	fd 4f       	sbci	r31, 0xFD	; 253
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	90 83       	st	Z, r25
    1b0c:	11 82       	std	Z+1, r1	; 0x01
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	89 30       	cpi	r24, 0x09	; 9
    1b12:	a0 f3       	brcs	.-24     	; 0x1afc <init_Timers+0x4>
    1b14:	e1 e4       	ldi	r30, 0x41	; 65
    1b16:	f2 e0       	ldi	r31, 0x02	; 2
    1b18:	10 82       	st	Z, r1
    1b1a:	11 82       	std	Z+1, r1	; 0x01
    1b1c:	12 82       	std	Z+2, r1	; 0x02
    1b1e:	13 82       	std	Z+3, r1	; 0x03
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1b26:	08 95       	ret

00001b28 <init_HwTimer>:
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	84 bd       	out	0x24, r24	; 36
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	95 bd       	out	0x25, r25	; 37
    1b30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1b34:	89 ef       	ldi	r24, 0xF9	; 249
    1b36:	87 bd       	out	0x27, r24	; 39
    1b38:	85 b1       	in	r24, 0x05	; 5
    1b3a:	8f 77       	andi	r24, 0x7F	; 127
    1b3c:	85 b9       	out	0x05, r24	; 5
    1b3e:	84 b1       	in	r24, 0x04	; 4
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	84 b9       	out	0x04, r24	; 4
    1b44:	08 95       	ret

00001b46 <init_ADC>:
    1b46:	87 e8       	ldi	r24, 0x87	; 135
    1b48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1b4c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1b50:	8f e7       	ldi	r24, 0x7F	; 127
    1b52:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1b5c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1b60:	e9 e4       	ldi	r30, 0x49	; 73
    1b62:	f3 e0       	ldi	r31, 0x03	; 3
    1b64:	10 82       	st	Z, r1
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	81 83       	std	Z+1, r24	; 0x01
    1b6a:	82 83       	std	Z+2, r24	; 0x02
    1b6c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	10 c0       	rjmp	.+32     	; 0x1b94 <init_ADC+0x4e>
    1b74:	85 30       	cpi	r24, 0x05	; 5
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <init_ADC+0x40>
    1b78:	e8 2f       	mov	r30, r24
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	e1 5b       	subi	r30, 0xB1	; 177
    1b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b80:	96 e0       	ldi	r25, 0x06	; 6
    1b82:	90 83       	st	Z, r25
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <init_ADC+0x4c>
    1b86:	e8 2f       	mov	r30, r24
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	e1 5b       	subi	r30, 0xB1	; 177
    1b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8e:	9a e0       	ldi	r25, 0x0A	; 10
    1b90:	90 83       	st	Z, r25
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	86 30       	cpi	r24, 0x06	; 6
    1b96:	70 f3       	brcs	.-36     	; 0x1b74 <init_ADC+0x2e>
    1b98:	08 95       	ret

00001b9a <init_Pipe>:
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	88 b9       	out	0x08, r24	; 8
    1b9e:	87 b9       	out	0x07, r24	; 7
    1ba0:	82 b9       	out	0x02, r24	; 2
    1ba2:	11 b8       	out	0x01, r1	; 1
    1ba4:	84 b3       	in	r24, 0x14	; 20
    1ba6:	87 60       	ori	r24, 0x07	; 7
    1ba8:	84 bb       	out	0x14, r24	; 20
    1baa:	83 b3       	in	r24, 0x13	; 19
    1bac:	87 60       	ori	r24, 0x07	; 7
    1bae:	83 bb       	out	0x13, r24	; 19
    1bb0:	8b b1       	in	r24, 0x0b	; 11
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8b b9       	out	0x0b, r24	; 11
    1bb6:	8a b1       	in	r24, 0x0a	; 10
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8a b9       	out	0x0a, r24	; 10
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <init_Pipe+0x42>
    1bc0:	e8 2f       	mov	r30, r24
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	e7 5b       	subi	r30, 0xB7	; 183
    1bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	90 83       	st	Z, r25
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 32       	cpi	r24, 0x20	; 32
    1bde:	80 f3       	brcs	.-32     	; 0x1bc0 <init_Pipe+0x26>
    1be0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1be4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1be8:	08 95       	ret

00001bea <init_PipeModules>:
    1bea:	e6 dc       	rcall	.-1588   	; 0x15b8 <eeprom_ReadModules>
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	51 f4       	brne	.+20     	; 0x1c04 <init_PipeModules+0x1a>
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	42 d7       	rcall	.+3716   	; 0x2a7e <log_putError>
    1bfa:	e5 e5       	ldi	r30, 0x55	; 85
    1bfc:	f3 e0       	ldi	r31, 0x03	; 3
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
    1c02:	81 83       	std	Z+1, r24	; 0x01
    1c04:	8b b1       	in	r24, 0x0b	; 11
    1c06:	8f 77       	andi	r24, 0x7F	; 127
    1c08:	8b b9       	out	0x0b, r24	; 11
    1c0a:	84 b3       	in	r24, 0x14	; 20
    1c0c:	87 60       	ori	r24, 0x07	; 7
    1c0e:	84 bb       	out	0x14, r24	; 20
    1c10:	84 b3       	in	r24, 0x14	; 20
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	84 bb       	out	0x14, r24	; 20
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	8a 95       	dec	r24
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <init_PipeModules+0x2e>
    1c1c:	00 00       	nop
    1c1e:	84 b3       	in	r24, 0x14	; 20
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	84 bb       	out	0x14, r24	; 20
    1c24:	90 e2       	ldi	r25, 0x20	; 32
    1c26:	84 b3       	in	r24, 0x14	; 20
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	84 bb       	out	0x14, r24	; 20
    1c2c:	90 fd       	sbrc	r25, 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <init_PipeModules+0x4a>
    1c30:	85 e5       	ldi	r24, 0x55	; 85
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <init_PipeModules+0x4c>
    1c34:	8a ea       	ldi	r24, 0xAA	; 170
    1c36:	88 b9       	out	0x08, r24	; 8
    1c38:	80 b1       	in	r24, 0x00	; 0
    1c3a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1c3e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1c42:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1c46:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1c4a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1c4e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1c52:	84 b3       	in	r24, 0x14	; 20
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	84 bb       	out	0x14, r24	; 20
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	8a 95       	dec	r24
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <init_PipeModules+0x70>
    1c5e:	00 00       	nop
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	09 f7       	brne	.-62     	; 0x1c26 <init_PipeModules+0x3c>
    1c64:	90 e2       	ldi	r25, 0x20	; 32
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <init_PipeModules+0x9c>
    1c68:	84 b3       	in	r24, 0x14	; 20
    1c6a:	81 60       	ori	r24, 0x01	; 1
    1c6c:	84 bb       	out	0x14, r24	; 20
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	8a 95       	dec	r24
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <init_PipeModules+0x86>
    1c74:	00 c0       	rjmp	.+0      	; 0x1c76 <init_PipeModules+0x8c>
    1c76:	84 b3       	in	r24, 0x14	; 20
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
    1c7a:	84 bb       	out	0x14, r24	; 20
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	8a 95       	dec	r24
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <init_PipeModules+0x94>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <init_PipeModules+0x9a>
    1c84:	91 50       	subi	r25, 0x01	; 1
    1c86:	91 11       	cpse	r25, r1
    1c88:	ef cf       	rjmp	.-34     	; 0x1c68 <init_PipeModules+0x7e>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c90:	90 e2       	ldi	r25, 0x20	; 32
    1c92:	84 b3       	in	r24, 0x14	; 20
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	84 bb       	out	0x14, r24	; 20
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	88 b9       	out	0x08, r24	; 8
    1c9c:	20 b1       	in	r18, 0x00	; 0
    1c9e:	90 fd       	sbrc	r25, 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <init_PipeModules+0xbc>
    1ca2:	8a ea       	ldi	r24, 0xAA	; 170
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <init_PipeModules+0xbe>
    1ca6:	85 e5       	ldi	r24, 0x55	; 85
    1ca8:	82 27       	eor	r24, r18
    1caa:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1cae:	82 23       	and	r24, r18
    1cb0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1cb4:	84 b3       	in	r24, 0x14	; 20
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	84 bb       	out	0x14, r24	; 20
    1cba:	85 e0       	ldi	r24, 0x05	; 5
    1cbc:	8a 95       	dec	r24
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <init_PipeModules+0xd2>
    1cc0:	00 00       	nop
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	31 f7       	brne	.-52     	; 0x1c92 <init_PipeModules+0xa8>
    1cc6:	00 00       	nop
    1cc8:	00 00       	nop
    1cca:	84 b3       	in	r24, 0x14	; 20
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	84 bb       	out	0x14, r24	; 20
    1cd0:	84 b3       	in	r24, 0x14	; 20
    1cd2:	87 60       	ori	r24, 0x07	; 7
    1cd4:	84 bb       	out	0x14, r24	; 20
    1cd6:	84 b3       	in	r24, 0x14	; 20
    1cd8:	8b 7f       	andi	r24, 0xFB	; 251
    1cda:	84 bb       	out	0x14, r24	; 20
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <init_PipeModules+0xf4>
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <init_PipeModules+0xfa>
    1ce4:	84 b3       	in	r24, 0x14	; 20
    1ce6:	84 60       	ori	r24, 0x04	; 4
    1ce8:	84 bb       	out	0x14, r24	; 20
    1cea:	90 e2       	ldi	r25, 0x20	; 32
    1cec:	e1 e4       	ldi	r30, 0x41	; 65
    1cee:	f3 e0       	ldi	r31, 0x03	; 3
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	84 81       	ldd	r24, Z+4	; 0x04
    1cf6:	83 83       	std	Z+3, r24	; 0x03
    1cf8:	84 b3       	in	r24, 0x14	; 20
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	84 bb       	out	0x14, r24	; 20
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	81 83       	std	Z+1, r24	; 0x01
    1d02:	88 b9       	out	0x08, r24	; 8
    1d04:	85 81       	ldd	r24, Z+5	; 0x05
    1d06:	84 83       	std	Z+4, r24	; 0x04
    1d08:	86 81       	ldd	r24, Z+6	; 0x06
    1d0a:	85 83       	std	Z+5, r24	; 0x05
    1d0c:	80 b1       	in	r24, 0x00	; 0
    1d0e:	86 83       	std	Z+6, r24	; 0x06
    1d10:	82 83       	std	Z+2, r24	; 0x02
    1d12:	83 83       	std	Z+3, r24	; 0x03
    1d14:	84 83       	std	Z+4, r24	; 0x04
    1d16:	85 83       	std	Z+5, r24	; 0x05
    1d18:	87 83       	std	Z+7, r24	; 0x07
    1d1a:	84 b3       	in	r24, 0x14	; 20
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	84 bb       	out	0x14, r24	; 20
    1d20:	38 97       	sbiw	r30, 0x08	; 8
    1d22:	91 50       	subi	r25, 0x01	; 1
    1d24:	29 f7       	brne	.-54     	; 0x1cf0 <init_PipeModules+0x106>
    1d26:	00 00       	nop
    1d28:	00 00       	nop
    1d2a:	84 b3       	in	r24, 0x14	; 20
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	84 bb       	out	0x14, r24	; 20
    1d30:	84 b3       	in	r24, 0x14	; 20
    1d32:	8d 7f       	andi	r24, 0xFD	; 253
    1d34:	84 bb       	out	0x14, r24	; 20
    1d36:	18 b8       	out	0x08, r1	; 8
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	8a 95       	dec	r24
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <init_PipeModules+0x150>
    1d3e:	00 00       	nop
    1d40:	84 b3       	in	r24, 0x14	; 20
    1d42:	82 60       	ori	r24, 0x02	; 2
    1d44:	84 bb       	out	0x14, r24	; 20
    1d46:	08 95       	ret

00001d48 <test_PipeModule>:
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <test_PipeModule+0x6>
    1d4c:	6a c0       	rjmp	.+212    	; 0x1e22 <test_PipeModule+0xda>
    1d4e:	31 e0       	ldi	r19, 0x01	; 1
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <test_PipeModule+0xc>
    1d52:	33 0f       	add	r19, r19
    1d54:	8a 95       	dec	r24
    1d56:	ea f7       	brpl	.-6      	; 0x1d52 <test_PipeModule+0xa>
    1d58:	80 e8       	ldi	r24, 0x80	; 128
    1d5a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1d5e:	8b b1       	in	r24, 0x0b	; 11
    1d60:	8f 77       	andi	r24, 0x7F	; 127
    1d62:	8b b9       	out	0x0b, r24	; 11
    1d64:	84 b3       	in	r24, 0x14	; 20
    1d66:	87 60       	ori	r24, 0x07	; 7
    1d68:	84 bb       	out	0x14, r24	; 20
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	1d c0       	rjmp	.+58     	; 0x1da8 <test_PipeModule+0x60>
    1d6e:	20 fd       	sbrc	r18, 0
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <test_PipeModule+0x30>
    1d72:	83 2f       	mov	r24, r19
    1d74:	80 95       	com	r24
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <test_PipeModule+0x32>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	88 b9       	out	0x08, r24	; 8
    1d7c:	26 95       	lsr	r18
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	8a 95       	dec	r24
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <test_PipeModule+0x38>
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <test_PipeModule+0x3e>
    1d86:	84 b3       	in	r24, 0x14	; 20
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	84 bb       	out	0x14, r24	; 20
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	8a 95       	dec	r24
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <test_PipeModule+0x46>
    1d92:	00 c0       	rjmp	.+0      	; 0x1d94 <test_PipeModule+0x4c>
    1d94:	84 b3       	in	r24, 0x14	; 20
    1d96:	81 60       	ori	r24, 0x01	; 1
    1d98:	84 bb       	out	0x14, r24	; 20
    1d9a:	9f 5f       	subi	r25, 0xFF	; 255
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <test_PipeModule+0x5a>
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	25 ea       	ldi	r18, 0xA5	; 165
    1da2:	98 30       	cpi	r25, 0x08	; 8
    1da4:	20 f3       	brcs	.-56     	; 0x1d6e <test_PipeModule+0x26>
    1da6:	4f 5f       	subi	r20, 0xFF	; 255
    1da8:	44 30       	cpi	r20, 0x04	; 4
    1daa:	c8 f3       	brcs	.-14     	; 0x1d9e <test_PipeModule+0x56>
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <test_PipeModule+0x86>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	8a 95       	dec	r24
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <test_PipeModule+0x6a>
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <test_PipeModule+0x70>
    1db8:	84 b3       	in	r24, 0x14	; 20
    1dba:	8e 7f       	andi	r24, 0xFE	; 254
    1dbc:	84 bb       	out	0x14, r24	; 20
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <test_PipeModule+0x78>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <test_PipeModule+0x7e>
    1dc6:	84 b3       	in	r24, 0x14	; 20
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	84 bb       	out	0x14, r24	; 20
    1dcc:	9f 5f       	subi	r25, 0xFF	; 255
    1dce:	90 32       	cpi	r25, 0x20	; 32
    1dd0:	78 f3       	brcs	.-34     	; 0x1db0 <test_PipeModule+0x68>
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	ba 01       	movw	r22, r20
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <test_PipeModule+0xc2>
    1ddc:	44 0f       	add	r20, r20
    1dde:	55 1f       	adc	r21, r21
    1de0:	66 1f       	adc	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	8a 95       	dec	r24
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <test_PipeModule+0x9e>
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <test_PipeModule+0xa4>
    1dec:	84 b3       	in	r24, 0x14	; 20
    1dee:	8e 7f       	andi	r24, 0xFE	; 254
    1df0:	84 bb       	out	0x14, r24	; 20
    1df2:	80 b1       	in	r24, 0x00	; 0
    1df4:	83 23       	and	r24, r19
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <test_PipeModule+0xb2>
    1df8:	41 60       	ori	r20, 0x01	; 1
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	8a 95       	dec	r24
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <test_PipeModule+0xb4>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <test_PipeModule+0xba>
    1e02:	84 b3       	in	r24, 0x14	; 20
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	84 bb       	out	0x14, r24	; 20
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
    1e0a:	90 32       	cpi	r25, 0x20	; 32
    1e0c:	38 f3       	brcs	.-50     	; 0x1ddc <test_PipeModule+0x94>
    1e0e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1e12:	8b b1       	in	r24, 0x0b	; 11
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	8b b9       	out	0x0b, r24	; 11
    1e18:	34 2f       	mov	r19, r20
    1e1a:	25 2f       	mov	r18, r21
    1e1c:	86 2f       	mov	r24, r22
    1e1e:	97 2f       	mov	r25, r23
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <test_PipeModule+0xe2>
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	63 2f       	mov	r22, r19
    1e2c:	72 2f       	mov	r23, r18
    1e2e:	08 95       	ret

00001e30 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e30:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1e32:	e9 e4       	ldi	r30, 0x49	; 73
    1e34:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1e3a:	2f ef       	ldi	r18, 0xFF	; 255
    1e3c:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1e3e:	26 81       	ldd	r18, Z+6	; 0x06
    1e40:	82 2b       	or	r24, r18
		pPipe++;
    1e42:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e44:	9f 5f       	subi	r25, 0xFF	; 255
    1e46:	90 32       	cpi	r25, 0x20	; 32
    1e48:	c0 f3       	brcs	.-16     	; 0x1e3a <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1e4a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1e4e:	89 23       	and	r24, r25
    1e50:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1e54:	89 23       	and	r24, r25
    1e56:	08 95       	ret

00001e58 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1e58:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e5c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e60:	81 ff       	sbrs	r24, 1
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1e64:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e68:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e6c:	81 ff       	sbrs	r24, 1
    1e6e:	fc cf       	rjmp	.-8      	; 0x1e68 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1e70:	08 95       	ret

00001e72 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1e78:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e7a:	f8 94       	cli
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <module_StartPowerOn+0x18>
    1e7e:	ef e2       	ldi	r30, 0x2F	; 47
    1e80:	f2 e0       	ldi	r31, 0x02	; 2
    1e82:	88 e2       	ldi	r24, 0x28	; 40
    1e84:	82 83       	std	Z+2, r24	; 0x02
    1e86:	13 82       	std	Z+3, r1	; 0x03
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	f8 cf       	rjmp	.-16     	; 0x1e7e <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e8e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e90:	08 95       	ret

00001e92 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1e92:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	31 f5       	brne	.+76     	; 0x1ee6 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1e9a:	ca df       	rcall	.-108    	; 0x1e30 <module_TestAllInputs>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1ea0:	85 b1       	in	r24, 0x05	; 5
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1ea6:	82 e1       	ldi	r24, 0x12	; 18
    1ea8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1eac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eae:	f8 94       	cli
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <module_PowerControl+0x2e>
    1eb4:	ef e2       	ldi	r30, 0x2F	; 47
    1eb6:	f2 e0       	ldi	r31, 0x02	; 2
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	82 83       	std	Z+2, r24	; 0x02
    1ebc:	13 82       	std	Z+3, r1	; 0x03
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	f8 cf       	rjmp	.-16     	; 0x1eb4 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ec4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ec6:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1ec8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eca:	f8 94       	cli
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <module_PowerControl+0x4c>
    1ed0:	ef e2       	ldi	r30, 0x2F	; 47
    1ed2:	f2 e0       	ldi	r31, 0x02	; 2
    1ed4:	8c e0       	ldi	r24, 0x0C	; 12
    1ed6:	82 83       	std	Z+2, r24	; 0x02
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	83 83       	std	Z+3, r24	; 0x03
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	81 11       	cpse	r24, r1
    1ee0:	f7 cf       	rjmp	.-18     	; 0x1ed0 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ee2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ee4:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1ee6:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1ee8:	b1 f4       	brne	.+44     	; 0x1f16 <module_PowerControl+0x84>
    1eea:	a2 df       	rcall	.-188    	; 0x1e30 <module_TestAllInputs>
		if (testResult == 0){
    1eec:	81 11       	cpse	r24, r1
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1ef0:	84 e1       	ldi	r24, 0x14	; 20
    1ef2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1ef6:	0b c0       	rjmp	.+22     	; 0x1f0e <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	be d5       	rcall	.+2940   	; 0x2a7e <log_putError>
			POWER_OFF
    1f02:	85 b1       	in	r24, 0x05	; 5
    1f04:	8f 7b       	andi	r24, 0xBF	; 191
    1f06:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f14:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f1c:	08 95       	ret

00001f1e <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1f22:	94 30       	cpi	r25, 0x04	; 4
    1f24:	50 f4       	brcc	.+20     	; 0x1f3a <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1f26:	e9 2f       	mov	r30, r25
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <softKey_WantLong+0x14>
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <softKey_WantLong+0x16>
    1f32:	26 e0       	ldi	r18, 0x06	; 6
    1f34:	e1 5b       	subi	r30, 0xB1	; 177
    1f36:	fc 4f       	sbci	r31, 0xFC	; 252
    1f38:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f3a:	9f 5f       	subi	r25, 0xFF	; 255
    1f3c:	96 30       	cpi	r25, 0x06	; 6
    1f3e:	88 f3       	brcs	.-30     	; 0x1f22 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1f40:	08 95       	ret

00001f42 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	0b b6       	in	r0, 0x3b	; 59
    1f4e:	0f 92       	push	r0
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	2f 93       	push	r18
    1f5a:	3f 93       	push	r19
    1f5c:	4f 93       	push	r20
    1f5e:	5f 93       	push	r21
    1f60:	6f 93       	push	r22
    1f62:	7f 93       	push	r23
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	af 93       	push	r26
    1f6a:	bf 93       	push	r27
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1f74:	85 b1       	in	r24, 0x05	; 5
    1f76:	80 68       	ori	r24, 0x80	; 128
    1f78:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1f7a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1f84:	83 70       	andi	r24, 0x03	; 3
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <__vector_21+0x4a>
    1f8a:	58 c1       	rjmp	.+688    	; 0x223c <__stack+0x3d>
    1f8c:	38 f0       	brcs	.+14     	; 0x1f9c <__vector_21+0x5a>
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_21+0x52>
    1f92:	a5 c1       	rjmp	.+842    	; 0x22de <__stack+0xdf>
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <__vector_21+0x58>
    1f98:	ca c1       	rjmp	.+916    	; 0x232e <__stack+0x12f>
    1f9a:	05 c2       	rjmp	.+1034   	; 0x23a6 <__stack+0x1a7>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1f9c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	1a c1       	rjmp	.+564    	; 0x21d8 <__vector_21+0x296>
    1fa4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1fa8:	96 fd       	sbrc	r25, 6
    1faa:	16 c1       	rjmp	.+556    	; 0x21d8 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e7 5b       	subi	r30, 0xB7	; 183
    1fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1fc4:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1fc8:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1fca:	49 17       	cp	r20, r25
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <__vector_21+0x90>
		return data1-data2;
    1fce:	94 1b       	sub	r25, r20
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <__vector_21+0x96>
	} else {
		return data2-data1;
    1fd2:	54 2f       	mov	r21, r20
    1fd4:	59 1b       	sub	r21, r25
    1fd6:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1fd8:	94 30       	cpi	r25, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <__vector_21+0x9c>
    1fdc:	fd c0       	rjmp	.+506    	; 0x21d8 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1fde:	81 11       	cpse	r24, r1
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1fe2:	42 32       	cpi	r20, 0x22	; 34
    1fe4:	70 f0       	brcs	.+28     	; 0x2002 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1fe6:	4f 33       	cpi	r20, 0x3F	; 63
    1fe8:	70 f0       	brcs	.+28     	; 0x2006 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1fea:	48 36       	cpi	r20, 0x68	; 104
    1fec:	70 f0       	brcs	.+28     	; 0x200a <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1fee:	46 39       	cpi	r20, 0x96	; 150
    1ff0:	70 f0       	brcs	.+28     	; 0x200e <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1ff2:	4f 3b       	cpi	r20, 0xBF	; 191
    1ff4:	70 f0       	brcs	.+28     	; 0x2012 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1ff6:	48 3e       	cpi	r20, 0xE8	; 232
    1ff8:	70 f4       	brcc	.+28     	; 0x2016 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1ffa:	c6 e0       	ldi	r28, 0x06	; 6
    1ffc:	0d c0       	rjmp	.+26     	; 0x2018 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1ffe:	cf ef       	ldi	r28, 0xFF	; 255
    2000:	0b c0       	rjmp	.+22     	; 0x2018 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    2002:	c4 e0       	ldi	r28, 0x04	; 4
    2004:	09 c0       	rjmp	.+18     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    2006:	c3 e0       	ldi	r28, 0x03	; 3
    2008:	07 c0       	rjmp	.+14     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    200a:	c5 e0       	ldi	r28, 0x05	; 5
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    200e:	c1 e0       	ldi	r28, 0x01	; 1
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    2012:	c2 e0       	ldi	r28, 0x02	; 2
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    2016:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    2018:	f9 01       	movw	r30, r18
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	e7 5b       	subi	r30, 0xB7	; 183
    2028:	fc 4f       	sbci	r31, 0xFC	; 252
    202a:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    202c:	dc 17       	cp	r29, r28
    202e:	09 f4       	brne	.+2      	; 0x2032 <__vector_21+0xf0>
    2030:	48 c0       	rjmp	.+144    	; 0x20c2 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    2032:	df 3f       	cpi	r29, 0xFF	; 255
    2034:	19 f0       	breq	.+6      	; 0x203c <__vector_21+0xfa>
    2036:	cf 3f       	cpi	r28, 0xFF	; 255
    2038:	09 f0       	breq	.+2      	; 0x203c <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    203a:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    203c:	f9 01       	movw	r30, r18
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e7 5b       	subi	r30, 0xB7	; 183
    204c:	fc 4f       	sbci	r31, 0xFC	; 252
    204e:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2050:	df 3f       	cpi	r29, 0xFF	; 255
    2052:	f9 f4       	brne	.+62     	; 0x2092 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    2054:	c9 01       	movw	r24, r18
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	fc 01       	movw	r30, r24
    205c:	e2 0f       	add	r30, r18
    205e:	f3 1f       	adc	r31, r19
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	e7 5b       	subi	r30, 0xB7	; 183
    2066:	fc 4f       	sbci	r31, 0xFC	; 252
    2068:	15 82       	std	Z+5, r1	; 0x05
    206a:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    206c:	fc 01       	movw	r30, r24
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    207c:	ec 2f       	mov	r30, r28
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	e2 5b       	subi	r30, 0xB2	; 178
    2082:	fc 4f       	sbci	r31, 0xFC	; 252
    2084:	80 81       	ld	r24, Z
    2086:	80 ff       	sbrs	r24, 0
    2088:	a7 c0       	rjmp	.+334    	; 0x21d8 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    208a:	8c 2f       	mov	r24, r28
    208c:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
    2090:	a3 c0       	rjmp	.+326    	; 0x21d8 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    2092:	ed 2f       	mov	r30, r29
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	e2 5b       	subi	r30, 0xB2	; 178
    2098:	fc 4f       	sbci	r31, 0xFC	; 252
    209a:	80 81       	ld	r24, Z
    209c:	81 ff       	sbrs	r24, 1
    209e:	9c c0       	rjmp	.+312    	; 0x21d8 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    20a0:	f9 01       	movw	r30, r18
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	e7 5b       	subi	r30, 0xB7	; 183
    20b0:	fc 4f       	sbci	r31, 0xFC	; 252
    20b2:	83 81       	ldd	r24, Z+3	; 0x03
    20b4:	83 70       	andi	r24, 0x03	; 3
    20b6:	09 f0       	breq	.+2      	; 0x20ba <__vector_21+0x178>
    20b8:	8f c0       	rjmp	.+286    	; 0x21d8 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    20ba:	8d 2f       	mov	r24, r29
    20bc:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
    20c0:	8b c0       	rjmp	.+278    	; 0x21d8 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    20c2:	cf 3f       	cpi	r28, 0xFF	; 255
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <__vector_21+0x186>
    20c6:	88 c0       	rjmp	.+272    	; 0x21d8 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    20c8:	f9 01       	movw	r30, r18
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	df 01       	movw	r26, r30
    20d0:	a2 0f       	add	r26, r18
    20d2:	b3 1f       	adc	r27, r19
    20d4:	aa 0f       	add	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	a7 5b       	subi	r26, 0xB7	; 183
    20da:	bc 4f       	sbci	r27, 0xFC	; 252
    20dc:	14 96       	adiw	r26, 0x04	; 4
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	15 97       	sbiw	r26, 0x05	; 5
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	15 96       	adiw	r26, 0x05	; 5
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    20ee:	fd 01       	movw	r30, r26
    20f0:	84 81       	ldd	r24, Z+4	; 0x04
    20f2:	95 81       	ldd	r25, Z+5	; 0x05
    20f4:	8b 34       	cpi	r24, 0x4B	; 75
    20f6:	91 05       	cpc	r25, r1
    20f8:	a9 f4       	brne	.+42     	; 0x2124 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    20fa:	ed 2f       	mov	r30, r29
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	e2 5b       	subi	r30, 0xB2	; 178
    2100:	fc 4f       	sbci	r31, 0xFC	; 252
    2102:	80 81       	ld	r24, Z
    2104:	82 ff       	sbrs	r24, 2
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2108:	8c 2f       	mov	r24, r28
    210a:	80 68       	ori	r24, 0x80	; 128
    210c:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2110:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	e8 9f       	mul	r30, r24
    2118:	f0 01       	movw	r30, r0
    211a:	11 24       	eor	r1, r1
    211c:	e7 5b       	subi	r30, 0xB7	; 183
    211e:	fc 4f       	sbci	r31, 0xFC	; 252
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2124:	ed 2f       	mov	r30, r29
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	e2 5b       	subi	r30, 0xB2	; 178
    212a:	fc 4f       	sbci	r31, 0xFC	; 252
    212c:	80 81       	ld	r24, Z
    212e:	83 ff       	sbrs	r24, 3
    2130:	53 c0       	rjmp	.+166    	; 0x21d8 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    2132:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	fc 01       	movw	r30, r24
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	e8 0f       	add	r30, r24
    2140:	f9 1f       	adc	r31, r25
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e7 5b       	subi	r30, 0xB7	; 183
    2148:	fc 4f       	sbci	r31, 0xFC	; 252
    214a:	23 81       	ldd	r18, Z+3	; 0x03
    214c:	21 11       	cpse	r18, r1
    214e:	1e c0       	rjmp	.+60     	; 0x218c <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2150:	fc 01       	movw	r30, r24
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	e8 0f       	add	r30, r24
    2158:	f9 1f       	adc	r31, r25
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e7 5b       	subi	r30, 0xB7	; 183
    2160:	fc 4f       	sbci	r31, 0xFC	; 252
    2162:	24 81       	ldd	r18, Z+4	; 0x04
    2164:	35 81       	ldd	r19, Z+5	; 0x05
    2166:	22 33       	cpi	r18, 0x32	; 50
    2168:	31 05       	cpc	r19, r1
    216a:	b1 f5       	brne	.+108    	; 0x21d8 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    216c:	26 e0       	ldi	r18, 0x06	; 6
    216e:	28 9f       	mul	r18, r24
    2170:	f0 01       	movw	r30, r0
    2172:	29 9f       	mul	r18, r25
    2174:	f0 0d       	add	r31, r0
    2176:	11 24       	eor	r1, r1
    2178:	e7 5b       	subi	r30, 0xB7	; 183
    217a:	fc 4f       	sbci	r31, 0xFC	; 252
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2180:	15 82       	std	Z+5, r1	; 0x05
    2182:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2184:	8c 2f       	mov	r24, r28
    2186:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
    218a:	26 c0       	rjmp	.+76     	; 0x21d8 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    218c:	fc 01       	movw	r30, r24
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	e8 0f       	add	r30, r24
    2194:	f9 1f       	adc	r31, r25
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	e7 5b       	subi	r30, 0xB7	; 183
    219c:	fc 4f       	sbci	r31, 0xFC	; 252
    219e:	23 81       	ldd	r18, Z+3	; 0x03
    21a0:	21 30       	cpi	r18, 0x01	; 1
    21a2:	d1 f4       	brne	.+52     	; 0x21d8 <__vector_21+0x296>
    21a4:	26 e0       	ldi	r18, 0x06	; 6
    21a6:	28 9f       	mul	r18, r24
    21a8:	f0 01       	movw	r30, r0
    21aa:	29 9f       	mul	r18, r25
    21ac:	f0 0d       	add	r31, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	e7 5b       	subi	r30, 0xB7	; 183
    21b2:	fc 4f       	sbci	r31, 0xFC	; 252
    21b4:	24 81       	ldd	r18, Z+4	; 0x04
    21b6:	35 81       	ldd	r19, Z+5	; 0x05
    21b8:	2c 30       	cpi	r18, 0x0C	; 12
    21ba:	31 05       	cpc	r19, r1
    21bc:	69 f4       	brne	.+26     	; 0x21d8 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    21be:	26 e0       	ldi	r18, 0x06	; 6
    21c0:	28 9f       	mul	r18, r24
    21c2:	f0 01       	movw	r30, r0
    21c4:	29 9f       	mul	r18, r25
    21c6:	f0 0d       	add	r31, r0
    21c8:	11 24       	eor	r1, r1
    21ca:	e7 5b       	subi	r30, 0xB7	; 183
    21cc:	fc 4f       	sbci	r31, 0xFC	; 252
    21ce:	15 82       	std	Z+5, r1	; 0x05
    21d0:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    21d2:	8c 2f       	mov	r24, r28
    21d4:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    21d8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <__vector_21+0x2a8>
		adcNr = 0;
    21e6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    21ea:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21ee:	81 11       	cpse	r24, r1
    21f0:	0c c0       	rjmp	.+24     	; 0x220a <__stack+0xb>
		newMux = adcKeys[adcNr].mux;
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e8 0f       	add	r30, r24
    21fc:	f9 1f       	adc	r31, r25
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e7 5b       	subi	r30, 0xB7	; 183
    2204:	fc 4f       	sbci	r31, 0xFC	; 252
    2206:	80 81       	ld	r24, Z
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__stack+0xd>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    220a:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    220c:	98 2f       	mov	r25, r24
    220e:	9f 71       	andi	r25, 0x1F	; 31
    2210:	90 66       	ori	r25, 0x60	; 96
    2212:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2216:	eb e7       	ldi	r30, 0x7B	; 123
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	20 81       	ld	r18, Z
    221c:	80 72       	andi	r24, 0x20	; 32
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	95 95       	asr	r25
    2222:	87 95       	ror	r24
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	92 2f       	mov	r25, r18
    222a:	9f 7d       	andi	r25, 0xDF	; 223
    222c:	89 2b       	or	r24, r25
    222e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2230:	ea e7       	ldi	r30, 0x7A	; 122
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 64       	ori	r24, 0x40	; 64
    2238:	80 83       	st	Z, r24
    223a:	b5 c0       	rjmp	.+362    	; 0x23a6 <__stack+0x1a7>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    223c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2240:	80 38       	cpi	r24, 0x80	; 128
    2242:	09 f4       	brne	.+2      	; 0x2246 <__stack+0x47>
    2244:	b0 c0       	rjmp	.+352    	; 0x23a6 <__stack+0x1a7>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2246:	84 b3       	in	r24, 0x14	; 20
    2248:	87 60       	ori	r24, 0x07	; 7
    224a:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    224c:	84 b3       	in	r24, 0x14	; 20
    224e:	8b 7f       	andi	r24, 0xFB	; 251
    2250:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    2252:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    2256:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2258:	e2 e0       	ldi	r30, 0x02	; 2
    225a:	ea 95       	dec	r30
    225c:	f1 f7       	brne	.-4      	; 0x225a <__stack+0x5b>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <__stack+0x61>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2260:	84 b3       	in	r24, 0x14	; 20
    2262:	84 60       	ori	r24, 0x04	; 4
    2264:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2266:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2268:	e1 e4       	ldi	r30, 0x41	; 65
    226a:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    226c:	83 81       	ldd	r24, Z+3	; 0x03
    226e:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2270:	84 81       	ldd	r24, Z+4	; 0x04
    2272:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    2274:	84 b3       	in	r24, 0x14	; 20
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    227a:	81 81       	ldd	r24, Z+1	; 0x01
    227c:	82 2b       	or	r24, r18
    227e:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2280:	85 81       	ldd	r24, Z+5	; 0x05
    2282:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2288:	80 b1       	in	r24, 0x00	; 0
    228a:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    228c:	84 b3       	in	r24, 0x14	; 20
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    2292:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2294:	91 50       	subi	r25, 0x01	; 1
    2296:	51 f7       	brne	.-44     	; 0x226c <__stack+0x6d>
	asm("nop");
    2298:	00 00       	nop
	asm("nop");
    229a:	00 00       	nop
	PIPE_CLOCK_H
    229c:	84 b3       	in	r24, 0x14	; 20
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    22a2:	84 b3       	in	r24, 0x14	; 20
    22a4:	8d 7f       	andi	r24, 0xFD	; 253
    22a6:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    22a8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    22b2:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    22b4:	8b b1       	in	r24, 0x0b	; 11
    22b6:	80 68       	ori	r24, 0x80	; 128
    22b8:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    22ba:	84 b3       	in	r24, 0x14	; 20
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	84 bb       	out	0x14, r24	; 20
    22c0:	72 c0       	rjmp	.+228    	; 0x23a6 <__stack+0x1a7>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    22c2:	80 81       	ld	r24, Z
    22c4:	81 50       	subi	r24, 0x01	; 1
    22c6:	8e 3f       	cpi	r24, 0xFE	; 254
    22c8:	38 f4       	brcc	.+14     	; 0x22d8 <__stack+0xd9>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    22ca:	21 81       	ldd	r18, Z+1	; 0x01
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    22ce:	25 30       	cpi	r18, 0x05	; 5
    22d0:	10 f0       	brcs	.+4      	; 0x22d6 <__stack+0xd7>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    22d2:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    22d4:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    22d6:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    22d8:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__stack+0xe5>
    22de:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    22e0:	ef e2       	ldi	r30, 0x2F	; 47
    22e2:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    22e4:	99 30       	cpi	r25, 0x09	; 9
    22e6:	68 f3       	brcs	.-38     	; 0x22c2 <__stack+0xc3>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    22e8:	e1 e4       	ldi	r30, 0x41	; 65
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	80 81       	ld	r24, Z
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	80 83       	st	Z, r24
    22f2:	8a 3f       	cpi	r24, 0xFA	; 250
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <__stack+0xf9>
    22f6:	57 c0       	rjmp	.+174    	; 0x23a6 <__stack+0x1a7>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    22fe:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2300:	81 81       	ldd	r24, Z+1	; 0x01
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	81 83       	std	Z+1, r24	; 0x01
    2306:	8c 33       	cpi	r24, 0x3C	; 60
    2308:	08 f4       	brcc	.+2      	; 0x230c <__stack+0x10d>
    230a:	4d c0       	rjmp	.+154    	; 0x23a6 <__stack+0x1a7>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    230c:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	82 83       	std	Z+2, r24	; 0x02
    2314:	8c 33       	cpi	r24, 0x3C	; 60
    2316:	08 f4       	brcc	.+2      	; 0x231a <__stack+0x11b>
    2318:	46 c0       	rjmp	.+140    	; 0x23a6 <__stack+0x1a7>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    231a:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    231c:	83 81       	ldd	r24, Z+3	; 0x03
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	83 83       	std	Z+3, r24	; 0x03
    2322:	84 36       	cpi	r24, 0x64	; 100
    2324:	08 f4       	brcc	.+2      	; 0x2328 <__stack+0x129>
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <__stack+0x1a7>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2328:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    232c:	3c c0       	rjmp	.+120    	; 0x23a6 <__stack+0x1a7>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    232e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2332:	80 38       	cpi	r24, 0x80	; 128
    2334:	c1 f1       	breq	.+112    	; 0x23a6 <__stack+0x1a7>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    2336:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    233a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    233e:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2340:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2342:	09 e4       	ldi	r16, 0x49	; 73
    2344:	12 e0       	ldi	r17, 0x02	; 2
    2346:	2c c0       	rjmp	.+88     	; 0x23a0 <__stack+0x1a1>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2348:	f8 01       	movw	r30, r16
    234a:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    234c:	83 81       	ldd	r24, Z+3	; 0x03
    234e:	9c 2f       	mov	r25, r28
    2350:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2352:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2354:	84 81       	ldd	r24, Z+4	; 0x04
    2356:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2358:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    235a:	25 81       	ldd	r18, Z+5	; 0x05
    235c:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    235e:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2360:	86 81       	ldd	r24, Z+6	; 0x06
    2362:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    2364:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2366:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2368:	cd 23       	and	r28, r29
    236a:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    236c:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    236e:	8d 2f       	mov	r24, r29
    2370:	80 95       	com	r24
    2372:	8c 23       	and	r24, r28
    2374:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2376:	21 f0       	breq	.+8      	; 0x2380 <__stack+0x181>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2378:	9f 2d       	mov	r25, r15
    237a:	90 62       	ori	r25, 0x20	; 32
    237c:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2380:	c0 95       	com	r28
    2382:	cd 23       	and	r28, r29
    2384:	8c 2f       	mov	r24, r28
    2386:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2388:	19 f0       	breq	.+6      	; 0x2390 <__stack+0x191>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    238a:	9f 2d       	mov	r25, r15
    238c:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <pipeMsgPush>
		}
		curPipe++;
    2390:	08 5f       	subi	r16, 0xF8	; 248
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2394:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    239e:	f3 94       	inc	r15
    23a0:	ff e1       	ldi	r31, 0x1F	; 31
    23a2:	ff 15       	cp	r31, r15
    23a4:	88 f6       	brcc	.-94     	; 0x2348 <__stack+0x149>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    23a6:	85 b1       	in	r24, 0x05	; 5
    23a8:	8f 77       	andi	r24, 0x7F	; 127
    23aa:	85 b9       	out	0x05, r24	; 5

}
    23ac:	ff 91       	pop	r31
    23ae:	ef 91       	pop	r30
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	bf 91       	pop	r27
    23b6:	af 91       	pop	r26
    23b8:	9f 91       	pop	r25
    23ba:	8f 91       	pop	r24
    23bc:	7f 91       	pop	r23
    23be:	6f 91       	pop	r22
    23c0:	5f 91       	pop	r21
    23c2:	4f 91       	pop	r20
    23c4:	3f 91       	pop	r19
    23c6:	2f 91       	pop	r18
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	0f 90       	pop	r0
    23d2:	0b be       	out	0x3b, r0	; 59
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    23de:	e8 2f       	mov	r30, r24
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	e7 5b       	subi	r30, 0xB7	; 183
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	60 95       	com	r22
    23f4:	81 81       	ldd	r24, Z+1	; 0x01
    23f6:	68 23       	and	r22, r24
    23f8:	61 83       	std	Z+1, r22	; 0x01
    23fa:	08 95       	ret

000023fc <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    23fc:	e8 2f       	mov	r30, r24
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	e7 5b       	subi	r30, 0xB7	; 183
    240e:	fd 4f       	sbci	r31, 0xFD	; 253
    2410:	81 81       	ldd	r24, Z+1	; 0x01
    2412:	68 2b       	or	r22, r24
    2414:	61 83       	std	Z+1, r22	; 0x01
    2416:	08 95       	ret

00002418 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    241c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    241e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2420:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2422:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2424:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2426:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2428:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    242c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2430:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2434:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2438:	8a b1       	in	r24, 0x0a	; 10
    243a:	80 68       	ori	r24, 0x80	; 128
    243c:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    243e:	8b b1       	in	r24, 0x0b	; 11
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2444:	84 b1       	in	r24, 0x04	; 4
    2446:	80 64       	ori	r24, 0x40	; 64
    2448:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    244a:	85 b1       	in	r24, 0x05	; 5
    244c:	8f 7b       	andi	r24, 0xBF	; 191
    244e:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2450:	84 b1       	in	r24, 0x04	; 4
    2452:	80 63       	ori	r24, 0x30	; 48
    2454:	84 b9       	out	0x04, r24	; 4
    2456:	08 95       	ret

00002458 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2458:	88 23       	and	r24, r24
    245a:	34 f4       	brge	.+12     	; 0x2468 <lcd_write_nibble+0x10>
    245c:	e2 e0       	ldi	r30, 0x02	; 2
    245e:	f1 e0       	ldi	r31, 0x01	; 1
    2460:	90 81       	ld	r25, Z
    2462:	90 61       	ori	r25, 0x10	; 16
    2464:	90 83       	st	Z, r25
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <lcd_write_nibble+0x1a>
    2468:	e2 e0       	ldi	r30, 0x02	; 2
    246a:	f1 e0       	ldi	r31, 0x01	; 1
    246c:	90 81       	ld	r25, Z
    246e:	9f 7e       	andi	r25, 0xEF	; 239
    2470:	90 83       	st	Z, r25
    2472:	86 ff       	sbrs	r24, 6
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <lcd_write_nibble+0x2a>
    2476:	e2 e0       	ldi	r30, 0x02	; 2
    2478:	f1 e0       	ldi	r31, 0x01	; 1
    247a:	90 81       	ld	r25, Z
    247c:	98 60       	ori	r25, 0x08	; 8
    247e:	90 83       	st	Z, r25
    2480:	05 c0       	rjmp	.+10     	; 0x248c <lcd_write_nibble+0x34>
    2482:	e2 e0       	ldi	r30, 0x02	; 2
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	90 81       	ld	r25, Z
    2488:	97 7f       	andi	r25, 0xF7	; 247
    248a:	90 83       	st	Z, r25
    248c:	85 ff       	sbrs	r24, 5
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <lcd_write_nibble+0x40>
    2490:	9e b1       	in	r25, 0x0e	; 14
    2492:	98 60       	ori	r25, 0x08	; 8
    2494:	9e b9       	out	0x0e, r25	; 14
    2496:	03 c0       	rjmp	.+6      	; 0x249e <lcd_write_nibble+0x46>
    2498:	9e b1       	in	r25, 0x0e	; 14
    249a:	97 7f       	andi	r25, 0xF7	; 247
    249c:	9e b9       	out	0x0e, r25	; 14
    249e:	84 ff       	sbrs	r24, 4
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <lcd_write_nibble+0x52>
    24a2:	84 b3       	in	r24, 0x14	; 20
    24a4:	80 62       	ori	r24, 0x20	; 32
    24a6:	84 bb       	out	0x14, r24	; 20
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <lcd_write_nibble+0x58>
    24aa:	84 b3       	in	r24, 0x14	; 20
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	84 bb       	out	0x14, r24	; 20
    24b0:	e2 e0       	ldi	r30, 0x02	; 2
    24b2:	f1 e0       	ldi	r31, 0x01	; 1
    24b4:	80 81       	ld	r24, Z
    24b6:	80 64       	ori	r24, 0x40	; 64
    24b8:	80 83       	st	Z, r24
    24ba:	85 e0       	ldi	r24, 0x05	; 5
    24bc:	8a 95       	dec	r24
    24be:	f1 f7       	brne	.-4      	; 0x24bc <lcd_write_nibble+0x64>
    24c0:	00 00       	nop
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 7b       	andi	r24, 0xBF	; 191
    24c6:	80 83       	st	Z, r24
    24c8:	85 e0       	ldi	r24, 0x05	; 5
    24ca:	8a 95       	dec	r24
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <lcd_write_nibble+0x72>
    24ce:	00 00       	nop
    24d0:	08 95       	ret

000024d2 <lcd_write_character>:
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	d8 2f       	mov	r29, r24
    24d8:	c5 b1       	in	r28, 0x05	; 5
    24da:	c0 73       	andi	r28, 0x30	; 48
    24dc:	85 b1       	in	r24, 0x05	; 5
    24de:	8f 7c       	andi	r24, 0xCF	; 207
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	85 b9       	out	0x05, r24	; 5
    24e4:	e2 e0       	ldi	r30, 0x02	; 2
    24e6:	f1 e0       	ldi	r31, 0x01	; 1
    24e8:	80 81       	ld	r24, Z
    24ea:	80 62       	ori	r24, 0x20	; 32
    24ec:	80 83       	st	Z, r24
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 7b       	andi	r24, 0xBF	; 191
    24f2:	80 83       	st	Z, r24
    24f4:	8d 2f       	mov	r24, r29
    24f6:	b0 df       	rcall	.-160    	; 0x2458 <lcd_write_nibble>
    24f8:	8d 2f       	mov	r24, r29
    24fa:	82 95       	swap	r24
    24fc:	80 7f       	andi	r24, 0xF0	; 240
    24fe:	ac df       	rcall	.-168    	; 0x2458 <lcd_write_nibble>
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <lcd_write_character+0x32>
    2508:	00 c0       	rjmp	.+0      	; 0x250a <lcd_write_character+0x38>
    250a:	00 00       	nop
    250c:	85 b1       	in	r24, 0x05	; 5
    250e:	80 73       	andi	r24, 0x30	; 48
    2510:	c8 2b       	or	r28, r24
    2512:	c5 b9       	out	0x05, r28	; 5
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <lcd_write_command>:
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	d8 2f       	mov	r29, r24
    2520:	c5 b1       	in	r28, 0x05	; 5
    2522:	c0 73       	andi	r28, 0x30	; 48
    2524:	85 b1       	in	r24, 0x05	; 5
    2526:	8f 7c       	andi	r24, 0xCF	; 207
    2528:	80 61       	ori	r24, 0x10	; 16
    252a:	85 b9       	out	0x05, r24	; 5
    252c:	e2 e0       	ldi	r30, 0x02	; 2
    252e:	f1 e0       	ldi	r31, 0x01	; 1
    2530:	80 81       	ld	r24, Z
    2532:	8f 7d       	andi	r24, 0xDF	; 223
    2534:	80 83       	st	Z, r24
    2536:	80 81       	ld	r24, Z
    2538:	8f 7b       	andi	r24, 0xBF	; 191
    253a:	80 83       	st	Z, r24
    253c:	8d 2f       	mov	r24, r29
    253e:	8c df       	rcall	.-232    	; 0x2458 <lcd_write_nibble>
    2540:	8d 2f       	mov	r24, r29
    2542:	82 95       	swap	r24
    2544:	80 7f       	andi	r24, 0xF0	; 240
    2546:	88 df       	rcall	.-240    	; 0x2458 <lcd_write_nibble>
    2548:	d1 50       	subi	r29, 0x01	; 1
    254a:	d2 30       	cpi	r29, 0x02	; 2
    254c:	38 f4       	brcc	.+14     	; 0x255c <lcd_write_command+0x42>
    254e:	8f e0       	ldi	r24, 0x0F	; 15
    2550:	97 e2       	ldi	r25, 0x27	; 39
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <lcd_write_command+0x38>
    2556:	00 c0       	rjmp	.+0      	; 0x2558 <lcd_write_command+0x3e>
    2558:	00 00       	nop
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <lcd_write_command+0x4e>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <lcd_write_command+0x46>
    2564:	00 c0       	rjmp	.+0      	; 0x2566 <lcd_write_command+0x4c>
    2566:	00 00       	nop
    2568:	85 b1       	in	r24, 0x05	; 5
    256a:	80 73       	andi	r24, 0x30	; 48
    256c:	c8 2b       	or	r28, r24
    256e:	c5 b9       	out	0x05, r28	; 5
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <lcd_init>:
    2576:	cf 93       	push	r28
    2578:	c5 b1       	in	r28, 0x05	; 5
    257a:	c0 73       	andi	r28, 0x30	; 48
    257c:	85 b1       	in	r24, 0x05	; 5
    257e:	8f 7c       	andi	r24, 0xCF	; 207
    2580:	80 61       	ori	r24, 0x10	; 16
    2582:	85 b9       	out	0x05, r24	; 5
    2584:	e1 e0       	ldi	r30, 0x01	; 1
    2586:	f1 e0       	ldi	r31, 0x01	; 1
    2588:	80 81       	ld	r24, Z
    258a:	80 61       	ori	r24, 0x10	; 16
    258c:	80 83       	st	Z, r24
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	80 83       	st	Z, r24
    2594:	8d b1       	in	r24, 0x0d	; 13
    2596:	88 60       	ori	r24, 0x08	; 8
    2598:	8d b9       	out	0x0d, r24	; 13
    259a:	83 b3       	in	r24, 0x13	; 19
    259c:	80 62       	ori	r24, 0x20	; 32
    259e:	83 bb       	out	0x13, r24	; 19
    25a0:	80 81       	ld	r24, Z
    25a2:	80 64       	ori	r24, 0x40	; 64
    25a4:	80 83       	st	Z, r24
    25a6:	80 81       	ld	r24, Z
    25a8:	80 62       	ori	r24, 0x20	; 32
    25aa:	80 83       	st	Z, r24
    25ac:	2f ef       	ldi	r18, 0xFF	; 255
    25ae:	81 ee       	ldi	r24, 0xE1	; 225
    25b0:	94 e0       	ldi	r25, 0x04	; 4
    25b2:	21 50       	subi	r18, 0x01	; 1
    25b4:	80 40       	sbci	r24, 0x00	; 0
    25b6:	90 40       	sbci	r25, 0x00	; 0
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <lcd_init+0x3c>
    25ba:	00 c0       	rjmp	.+0      	; 0x25bc <lcd_init+0x46>
    25bc:	00 00       	nop
    25be:	e2 e0       	ldi	r30, 0x02	; 2
    25c0:	f1 e0       	ldi	r31, 0x01	; 1
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7d       	andi	r24, 0xDF	; 223
    25c6:	80 83       	st	Z, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	80 83       	st	Z, r24
    25ce:	80 e3       	ldi	r24, 0x30	; 48
    25d0:	43 df       	rcall	.-378    	; 0x2458 <lcd_write_nibble>
    25d2:	8f e1       	ldi	r24, 0x1F	; 31
    25d4:	9e e4       	ldi	r25, 0x4E	; 78
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <lcd_init+0x60>
    25da:	00 c0       	rjmp	.+0      	; 0x25dc <lcd_init+0x66>
    25dc:	00 00       	nop
    25de:	80 e3       	ldi	r24, 0x30	; 48
    25e0:	3b df       	rcall	.-394    	; 0x2458 <lcd_write_nibble>
    25e2:	8f e1       	ldi	r24, 0x1F	; 31
    25e4:	9e e4       	ldi	r25, 0x4E	; 78
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <lcd_init+0x70>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <lcd_init+0x76>
    25ec:	00 00       	nop
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	33 df       	rcall	.-410    	; 0x2458 <lcd_write_nibble>
    25f2:	8f e1       	ldi	r24, 0x1F	; 31
    25f4:	9e e4       	ldi	r25, 0x4E	; 78
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <lcd_init+0x80>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <lcd_init+0x86>
    25fc:	00 00       	nop
    25fe:	88 e2       	ldi	r24, 0x28	; 40
    2600:	2b df       	rcall	.-426    	; 0x2458 <lcd_write_nibble>
    2602:	8f ef       	ldi	r24, 0xFF	; 255
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <lcd_init+0x90>
    260a:	00 c0       	rjmp	.+0      	; 0x260c <lcd_init+0x96>
    260c:	00 00       	nop
    260e:	88 e2       	ldi	r24, 0x28	; 40
    2610:	84 df       	rcall	.-248    	; 0x251a <lcd_write_command>
    2612:	88 e0       	ldi	r24, 0x08	; 8
    2614:	82 df       	rcall	.-252    	; 0x251a <lcd_write_command>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	80 df       	rcall	.-256    	; 0x251a <lcd_write_command>
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	7e df       	rcall	.-260    	; 0x251a <lcd_write_command>
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	7c df       	rcall	.-264    	; 0x251a <lcd_write_command>
    2622:	85 b1       	in	r24, 0x05	; 5
    2624:	80 73       	andi	r24, 0x30	; 48
    2626:	c8 2b       	or	r28, r24
    2628:	c5 b9       	out	0x05, r28	; 5
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <lcd_goto>:
    262e:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    2632:	80 58       	subi	r24, 0x80	; 128
    2634:	72 cf       	rjmp	.-284    	; 0x251a <lcd_write_command>
    2636:	08 95       	ret

00002638 <lcd_clrscr>:
    2638:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	6d df       	rcall	.-294    	; 0x251a <lcd_write_command>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	e8 e5       	ldi	r30, 0x58	; 88
    2644:	f3 e0       	ldi	r31, 0x03	; 3
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <lcd_clrscr+0x18>
    2648:	90 e2       	ldi	r25, 0x20	; 32
    264a:	90 83       	st	Z, r25
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	31 96       	adiw	r30, 0x01	; 1
    2650:	80 35       	cpi	r24, 0x50	; 80
    2652:	d0 f3       	brcs	.-12     	; 0x2648 <lcd_clrscr+0x10>
    2654:	08 95       	ret

00002656 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2656:	84 31       	cpi	r24, 0x14	; 20
    2658:	98 f0       	brcs	.+38     	; 0x2680 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    265a:	90 ec       	ldi	r25, 0xC0	; 192
    265c:	98 0f       	add	r25, r24
    265e:	94 31       	cpi	r25, 0x14	; 20
    2660:	10 f4       	brcc	.+4      	; 0x2666 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2662:	8c 52       	subi	r24, 0x2C	; 44
    2664:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2666:	9c ee       	ldi	r25, 0xEC	; 236
    2668:	98 0f       	add	r25, r24
    266a:	94 31       	cpi	r25, 0x14	; 20
    266c:	10 f4       	brcc	.+4      	; 0x2672 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    266e:	8c 5e       	subi	r24, 0xEC	; 236
    2670:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2672:	9c ea       	ldi	r25, 0xAC	; 172
    2674:	98 0f       	add	r25, r24
    2676:	94 31       	cpi	r25, 0x14	; 20
    2678:	10 f4       	brcc	.+4      	; 0x267e <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    267a:	88 51       	subi	r24, 0x18	; 24
    267c:	08 95       	ret
	}
	return 0xFF;
    267e:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    2680:	08 95       	ret

00002682 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    2688:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    268c:	8c 2f       	mov	r24, r28
    268e:	e3 df       	rcall	.-58     	; 0x2656 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2690:	8f 3f       	cpi	r24, 0xFF	; 255
    2692:	31 f1       	breq	.+76     	; 0x26e0 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2694:	d1 3a       	cpi	r29, 0xA1	; 161
    2696:	81 f0       	breq	.+32     	; 0x26b8 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2698:	d0 38       	cpi	r29, 0x80	; 128
    269a:	81 f0       	breq	.+32     	; 0x26bc <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    269c:	d5 3a       	cpi	r29, 0xA5	; 165
    269e:	81 f0       	breq	.+32     	; 0x26c0 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    26a0:	da 30       	cpi	r29, 0x0A	; 10
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    26a4:	d2 3e       	cpi	r29, 0xE2	; 226
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    26a8:	d5 3f       	cpi	r29, 0xF5	; 245
    26aa:	81 f0       	breq	.+32     	; 0x26cc <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    26ac:	df 3e       	cpi	r29, 0xEF	; 239
    26ae:	81 f0       	breq	.+32     	; 0x26d0 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    26b0:	d1 3e       	cpi	r29, 0xE1	; 225
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    26b4:	9d 2f       	mov	r25, r29
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    26b8:	90 e2       	ldi	r25, 0x20	; 32
    26ba:	0d c0       	rjmp	.+26     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    26bc:	90 e2       	ldi	r25, 0x20	; 32
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    26c0:	94 e1       	ldi	r25, 0x14	; 20
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    26c4:	95 e1       	ldi	r25, 0x15	; 21
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    26c8:	93 e1       	ldi	r25, 0x13	; 19
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    26cc:	92 e1       	ldi	r25, 0x12	; 18
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    26d0:	91 e1       	ldi	r25, 0x11	; 17
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    26d4:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    26d6:	e8 2f       	mov	r30, r24
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	e8 5a       	subi	r30, 0xA8	; 168
    26dc:	fc 4f       	sbci	r31, 0xFC	; 252
    26de:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    26e0:	cf 5f       	subi	r28, 0xFF	; 255
    26e2:	cf 77       	andi	r28, 0x7F	; 127
    26e4:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    26e8:	8d 2f       	mov	r24, r29
    26ea:	f3 de       	rcall	.-538    	; 0x24d2 <lcd_write_character>
}
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	fc 01       	movw	r30, r24
	if (s != NULL){
    26f8:	89 2b       	or	r24, r25
    26fa:	19 f4       	brne	.+6      	; 0x2702 <lcd_puts+0x10>
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    26fe:	c1 df       	rcall	.-126    	; 0x2682 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2700:	fe 01       	movw	r30, r28
    2702:	ef 01       	movw	r28, r30
    2704:	21 96       	adiw	r28, 0x01	; 1
    2706:	80 81       	ld	r24, Z
    2708:	81 11       	cpse	r24, r1
    270a:	f9 cf       	rjmp	.-14     	; 0x26fe <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2718:	89 2b       	or	r24, r25
    271a:	19 f4       	brne	.+6      	; 0x2722 <lcd_puts_P+0x10>
    271c:	07 c0       	rjmp	.+14     	; 0x272c <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    271e:	b1 df       	rcall	.-158    	; 0x2682 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2720:	fe 01       	movw	r30, r28
    2722:	ef 01       	movw	r28, r30
    2724:	21 96       	adiw	r28, 0x01	; 1
    2726:	84 91       	lpm	r24, Z
    2728:	81 11       	cpse	r24, r1
    272a:	f9 cf       	rjmp	.-14     	; 0x271e <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2732:	82 ed       	ldi	r24, 0xD2	; 210
    2734:	93 e0       	ldi	r25, 0x03	; 3
    2736:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    273a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    273e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2742:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2746:	08 95       	ret

00002748 <log_count>:
    2748:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    274c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2750:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    2754:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    2758:	82 17       	cp	r24, r18
    275a:	93 07       	cpc	r25, r19
    275c:	48 f0       	brcs	.+18     	; 0x2770 <log_count+0x28>
    275e:	82 1b       	sub	r24, r18
    2760:	93 0b       	sbc	r25, r19
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	9d ec       	ldi	r25, 0xCD	; 205
    2768:	89 9f       	mul	r24, r25
    276a:	80 2d       	mov	r24, r0
    276c:	11 24       	eor	r1, r1
    276e:	08 95       	ret
    2770:	80 57       	subi	r24, 0x70	; 112
    2772:	9e 4f       	sbci	r25, 0xFE	; 254
    2774:	82 1b       	sub	r24, r18
    2776:	93 0b       	sbc	r25, r19
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	9d ec       	ldi	r25, 0xCD	; 205
    277e:	89 9f       	mul	r24, r25
    2780:	80 2d       	mov	r24, r0
    2782:	11 24       	eor	r1, r1
    2784:	08 95       	ret

00002786 <log_getLog>:
    2786:	cf 93       	push	r28
    2788:	c8 2f       	mov	r28, r24
    278a:	de df       	rcall	.-68     	; 0x2748 <log_count>
    278c:	c8 17       	cp	r28, r24
    278e:	f8 f4       	brcc	.+62     	; 0x27ce <log_getLog+0x48>
    2790:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    2794:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    2798:	8c 2f       	mov	r24, r28
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	28 0f       	add	r18, r24
    27b0:	39 1f       	adc	r19, r25
    27b2:	ca 01       	movw	r24, r20
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	65 e0       	ldi	r22, 0x05	; 5
    27ba:	88 35       	cpi	r24, 0x58	; 88
    27bc:	96 07       	cpc	r25, r22
    27be:	49 f0       	breq	.+18     	; 0x27d2 <log_getLog+0x4c>
    27c0:	40 f0       	brcs	.+16     	; 0x27d2 <log_getLog+0x4c>
    27c2:	20 59       	subi	r18, 0x90	; 144
    27c4:	31 40       	sbci	r19, 0x01	; 1
    27c6:	ca 01       	movw	r24, r20
    27c8:	82 0f       	add	r24, r18
    27ca:	93 1f       	adc	r25, r19
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <log_getLog+0x4c>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <log_getErrorText>:
    27d6:	d7 df       	rcall	.-82     	; 0x2786 <log_getLog>
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	f1 f1       	breq	.+124    	; 0x2858 <log_getErrorText+0x82>
    27dc:	fc 01       	movw	r30, r24
    27de:	36 81       	ldd	r19, Z+6	; 0x06
    27e0:	67 81       	ldd	r22, Z+7	; 0x07
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	34 c0       	rjmp	.+104    	; 0x284e <log_getErrorText+0x78>
    27e6:	42 2f       	mov	r20, r18
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	fa 01       	movw	r30, r20
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	cf 01       	movw	r24, r30
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
    2802:	e6 59       	subi	r30, 0x96	; 150
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	84 91       	lpm	r24, Z
    2808:	38 13       	cpse	r19, r24
    280a:	20 c0       	rjmp	.+64     	; 0x284c <log_getErrorText+0x76>
    280c:	fa 01       	movw	r30, r20
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	cf 01       	movw	r24, r30
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	e8 0f       	add	r30, r24
    2822:	f9 1f       	adc	r31, r25
    2824:	e5 59       	subi	r30, 0x95	; 149
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	84 91       	lpm	r24, Z
    282a:	68 13       	cpse	r22, r24
    282c:	0f c0       	rjmp	.+30     	; 0x284c <log_getErrorText+0x76>
    282e:	44 0f       	add	r20, r20
    2830:	55 1f       	adc	r21, r21
    2832:	ca 01       	movw	r24, r20
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	48 0f       	add	r20, r24
    2842:	59 1f       	adc	r21, r25
    2844:	ca 01       	movw	r24, r20
    2846:	84 59       	subi	r24, 0x94	; 148
    2848:	9e 4f       	sbci	r25, 0xFE	; 254
    284a:	08 95       	ret
    284c:	2f 5f       	subi	r18, 0xFF	; 255
    284e:	20 31       	cpi	r18, 0x10	; 16
    2850:	50 f2       	brcs	.-108    	; 0x27e6 <log_getErrorText+0x10>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	08 95       	ret
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	08 95       	ret

0000285e <logCheckUnreadErrorLogs>:
    285e:	cf 93       	push	r28
    2860:	73 df       	rcall	.-282    	; 0x2748 <log_count>
    2862:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    2866:	81 11       	cpse	r24, r1
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    286a:	17 c0       	rjmp	.+46     	; 0x289a <logCheckUnreadErrorLogs+0x3c>
    286c:	8c 2f       	mov	r24, r28
    286e:	8b df       	rcall	.-234    	; 0x2786 <log_getLog>
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	61 f0       	breq	.+24     	; 0x288c <logCheckUnreadErrorLogs+0x2e>
    2874:	fc 01       	movw	r30, r24
    2876:	24 81       	ldd	r18, Z+4	; 0x04
    2878:	20 32       	cpi	r18, 0x20	; 32
    287a:	51 f0       	breq	.+20     	; 0x2890 <logCheckUnreadErrorLogs+0x32>
    287c:	95 81       	ldd	r25, Z+5	; 0x05
    287e:	8c 2f       	mov	r24, r28
    2880:	95 34       	cpi	r25, 0x45	; 69
    2882:	39 f4       	brne	.+14     	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    2884:	8f ef       	ldi	r24, 0xFF	; 255
    2886:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    288a:	07 c0       	rjmp	.+14     	; 0x289a <logCheckUnreadErrorLogs+0x3c>
    288c:	8c 2f       	mov	r24, r28
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    2890:	8c 2f       	mov	r24, r28
    2892:	cf ef       	ldi	r28, 0xFF	; 255
    2894:	c8 0f       	add	r28, r24
    2896:	81 11       	cpse	r24, r1
    2898:	e9 cf       	rjmp	.-46     	; 0x286c <logCheckUnreadErrorLogs+0xe>
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <log_getShortTextFromPtr>:
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	09 f4       	brne	.+2      	; 0x28aa <log_getShortTextFromPtr+0xc>
    28a8:	7b c0       	rjmp	.+246    	; 0x29a0 <log_getShortTextFromPtr+0x102>
    28aa:	16 2f       	mov	r17, r22
    28ac:	ec 01       	movw	r28, r24
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	88 23       	and	r24, r24
    28b2:	79 f0       	breq	.+30     	; 0x28d2 <log_getShortTextFromPtr+0x34>
    28b4:	6a ea       	ldi	r22, 0xAA	; 170
    28b6:	73 e0       	ldi	r23, 0x03	; 3
    28b8:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    28bc:	bc 01       	movw	r22, r24
    28be:	6f 5f       	subi	r22, 0xFF	; 255
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	28 e6       	ldi	r18, 0x68	; 104
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 83       	st	Z, r18
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    28ce:	dc 01       	movw	r26, r24
    28d0:	2f c0       	rjmp	.+94     	; 0x2930 <log_getShortTextFromPtr+0x92>
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 23       	and	r24, r24
    28d6:	79 f0       	breq	.+30     	; 0x28f6 <log_getShortTextFromPtr+0x58>
    28d8:	6a ea       	ldi	r22, 0xAA	; 170
    28da:	73 e0       	ldi	r23, 0x03	; 3
    28dc:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    28e0:	bc 01       	movw	r22, r24
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	2d e6       	ldi	r18, 0x6D	; 109
    28e8:	fc 01       	movw	r30, r24
    28ea:	20 83       	st	Z, r18
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    28f2:	dc 01       	movw	r26, r24
    28f4:	1d c0       	rjmp	.+58     	; 0x2930 <log_getShortTextFromPtr+0x92>
    28f6:	6a ea       	ldi	r22, 0xAA	; 170
    28f8:	73 e0       	ldi	r23, 0x03	; 3
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    2900:	fc 01       	movw	r30, r24
    2902:	83 e7       	ldi	r24, 0x73	; 115
    2904:	80 83       	st	Z, r24
    2906:	98 81       	ld	r25, Y
    2908:	99 0f       	add	r25, r25
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <log_getShortTextFromPtr+0x74>
    290e:	99 51       	subi	r25, 0x19	; 25
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	99 31       	cpi	r25, 0x19	; 25
    2914:	e0 f7       	brcc	.-8      	; 0x290e <log_getShortTextFromPtr+0x70>
    2916:	20 5d       	subi	r18, 0xD0	; 208
    2918:	21 83       	std	Z+1, r18	; 0x01
    291a:	99 0f       	add	r25, r25
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <log_getShortTextFromPtr+0x86>
    2920:	95 50       	subi	r25, 0x05	; 5
    2922:	2f 5f       	subi	r18, 0xFF	; 255
    2924:	95 30       	cpi	r25, 0x05	; 5
    2926:	e0 f7       	brcc	.-8      	; 0x2920 <log_getShortTextFromPtr+0x82>
    2928:	df 01       	movw	r26, r30
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	20 5d       	subi	r18, 0xD0	; 208
    292e:	22 83       	std	Z+2, r18	; 0x02
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	90 34       	cpi	r25, 0x40	; 64
    2934:	51 f0       	breq	.+20     	; 0x294a <log_getShortTextFromPtr+0xac>
    2936:	90 38       	cpi	r25, 0x80	; 128
    2938:	19 f0       	breq	.+6      	; 0x2940 <log_getShortTextFromPtr+0xa2>
    293a:	90 32       	cpi	r25, 0x20	; 32
    293c:	81 f4       	brne	.+32     	; 0x295e <log_getShortTextFromPtr+0xc0>
    293e:	0a c0       	rjmp	.+20     	; 0x2954 <log_getShortTextFromPtr+0xb6>
    2940:	fd 01       	movw	r30, r26
    2942:	31 96       	adiw	r30, 0x01	; 1
    2944:	8a e2       	ldi	r24, 0x2A	; 42
    2946:	8c 93       	st	X, r24
    2948:	0e c0       	rjmp	.+28     	; 0x2966 <log_getShortTextFromPtr+0xc8>
    294a:	fd 01       	movw	r30, r26
    294c:	31 96       	adiw	r30, 0x01	; 1
    294e:	85 ea       	ldi	r24, 0xA5	; 165
    2950:	8c 93       	st	X, r24
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <log_getShortTextFromPtr+0xc8>
    2954:	fd 01       	movw	r30, r26
    2956:	31 96       	adiw	r30, 0x01	; 1
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	8c 93       	st	X, r24
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <log_getShortTextFromPtr+0xc8>
    295e:	fd 01       	movw	r30, r26
    2960:	31 96       	adiw	r30, 0x01	; 1
    2962:	8f e3       	ldi	r24, 0x3F	; 63
    2964:	8c 93       	st	X, r24
    2966:	bf 01       	movw	r22, r30
    2968:	6f 5f       	subi	r22, 0xFF	; 255
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	80 83       	st	Z, r24
    2970:	8e 81       	ldd	r24, Y+6	; 0x06
    2972:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    2976:	bc 01       	movw	r22, r24
    2978:	8f 81       	ldd	r24, Y+7	; 0x07
    297a:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    297e:	bc 01       	movw	r22, r24
    2980:	6f 5f       	subi	r22, 0xFF	; 255
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	2d e2       	ldi	r18, 0x2D	; 45
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
    298a:	88 85       	ldd	r24, Y+8	; 0x08
    298c:	99 85       	ldd	r25, Y+9	; 0x09
    298e:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <putChar_long>
    2992:	fc 01       	movw	r30, r24
    2994:	10 82       	st	Z, r1
    2996:	1f 3f       	cpi	r17, 0xFF	; 255
    2998:	41 f0       	breq	.+16     	; 0x29aa <log_getShortTextFromPtr+0x10c>
    299a:	1c 83       	std	Y+4, r17	; 0x04
    299c:	60 df       	rcall	.-320    	; 0x285e <logCheckUnreadErrorLogs>
    299e:	05 c0       	rjmp	.+10     	; 0x29aa <log_getShortTextFromPtr+0x10c>
    29a0:	ea ea       	ldi	r30, 0xAA	; 170
    29a2:	f3 e0       	ldi	r31, 0x03	; 3
    29a4:	8d e2       	ldi	r24, 0x2D	; 45
    29a6:	80 83       	st	Z, r24
    29a8:	11 82       	std	Z+1, r1	; 0x01
    29aa:	8a ea       	ldi	r24, 0xAA	; 170
    29ac:	93 e0       	ldi	r25, 0x03	; 3
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	08 95       	ret

000029b6 <log_put>:
    29b6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29ba:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29be:	a1 e4       	ldi	r26, 0x41	; 65
    29c0:	b2 e0       	ldi	r27, 0x02	; 2
    29c2:	9c 91       	ld	r25, X
    29c4:	90 83       	st	Z, r25
    29c6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29ca:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	9c 91       	ld	r25, X
    29d2:	11 97       	sbiw	r26, 0x01	; 1
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29da:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29de:	12 96       	adiw	r26, 0x02	; 2
    29e0:	9c 91       	ld	r25, X
    29e2:	12 97       	sbiw	r26, 0x02	; 2
    29e4:	92 83       	std	Z+2, r25	; 0x02
    29e6:	13 96       	adiw	r26, 0x03	; 3
    29e8:	9c 91       	ld	r25, X
    29ea:	93 83       	std	Z+3, r25	; 0x03
    29ec:	25 83       	std	Z+5, r18	; 0x05
    29ee:	86 83       	std	Z+6, r24	; 0x06
    29f0:	67 83       	std	Z+7, r22	; 0x07
    29f2:	51 87       	std	Z+9, r21	; 0x09
    29f4:	40 87       	std	Z+8, r20	; 0x08
    29f6:	80 e8       	ldi	r24, 0x80	; 128
    29f8:	84 83       	std	Z+4, r24	; 0x04
    29fa:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    29fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2a00:	81 f4       	brne	.+32     	; 0x2a22 <log_put+0x6c>
    2a02:	84 e6       	ldi	r24, 0x64	; 100
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    2a0a:	6f ef       	ldi	r22, 0xFF	; 255
    2a0c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a10:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a14:	44 df       	rcall	.-376    	; 0x289e <log_getShortTextFromPtr>
    2a16:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    2a1a:	8e ef       	ldi	r24, 0xFE	; 254
    2a1c:	92 e1       	ldi	r25, 0x12	; 18
    2a1e:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    2a22:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a26:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a2a:	0a 96       	adiw	r24, 0x0a	; 10
    2a2c:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a30:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a34:	88 55       	subi	r24, 0x58	; 88
    2a36:	95 40       	sbci	r25, 0x05	; 5
    2a38:	39 f0       	breq	.+14     	; 0x2a48 <log_put+0x92>
    2a3a:	30 f0       	brcs	.+12     	; 0x2a48 <log_put+0x92>
    2a3c:	82 ed       	ldi	r24, 0xD2	; 210
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a44:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a48:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2a4c:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a50:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    2a54:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	79 f4       	brne	.+30     	; 0x2a7c <log_put+0xc6>
    2a5e:	0a 96       	adiw	r24, 0x0a	; 10
    2a60:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a64:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a68:	88 55       	subi	r24, 0x58	; 88
    2a6a:	95 40       	sbci	r25, 0x05	; 5
    2a6c:	39 f0       	breq	.+14     	; 0x2a7c <log_put+0xc6>
    2a6e:	30 f0       	brcs	.+12     	; 0x2a7c <log_put+0xc6>
    2a70:	82 ed       	ldi	r24, 0xD2	; 210
    2a72:	93 e0       	ldi	r25, 0x03	; 3
    2a74:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a78:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a7c:	08 95       	ret

00002a7e <log_putError>:
    2a7e:	25 e4       	ldi	r18, 0x45	; 69
    2a80:	9a df       	rcall	.-204    	; 0x29b6 <log_put>
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2a88:	08 95       	ret

00002a8a <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2a8a:	cf 93       	push	r28
    2a8c:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2a8e:	7b de       	rcall	.-778    	; 0x2786 <log_getLog>
	if (pLogEntry != NULL){
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2a94:	6c 2f       	mov	r22, r28
    2a96:	03 df       	rcall	.-506    	; 0x289e <log_getShortTextFromPtr>
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2a9a:	ea ea       	ldi	r30, 0xAA	; 170
    2a9c:	f3 e0       	ldi	r31, 0x03	; 3
    2a9e:	8d e2       	ldi	r24, 0x2D	; 45
    2aa0:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2aa2:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2aa4:	cf 01       	movw	r24, r30
	}
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2aaa:	b6 dc       	rcall	.-1684   	; 0x2418 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2aac:	85 b1       	in	r24, 0x05	; 5
    2aae:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2ab0:	85 b9       	out	0x05, r24	; 5
    2ab2:	3f de       	rcall	.-898    	; 0x2732 <init_log>
	init_Serial0SerUSB();
    2ab4:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <init_Serial0SerUSB>
	init_message();
    2ab8:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <init_message>
	init_HwTimer();
	init_Timers();
    2abc:	35 d8       	rcall	.-3990   	; 0x1b28 <init_HwTimer>
    2abe:	1c d8       	rcall	.-4040   	; 0x1af8 <init_Timers>
	init_ADC();
    2ac0:	42 d8       	rcall	.-3964   	; 0x1b46 <init_ADC>
	init_Pipe();
    2ac2:	6b d8       	rcall	.-3882   	; 0x1b9a <init_Pipe>
    2ac4:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <init_Serial1MIDI>
	init_Serial1MIDI();
    2ac8:	90 d8       	rcall	.-3808   	; 0x1bea <init_PipeModules>
	init_PipeModules();
    2aca:	0e 94 e7 30 	call	0x61ce	; 0x61ce <init_Midi2Manual>
	init_Midi2Manual();
    2ace:	0e 94 27 31 	call	0x624e	; 0x624e <init_Manual2Midi>
	init_Manual2Midi();
    2ad2:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <init_Midi>
	init_Midi();
    2ad6:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <init_Registers>
	init_Registers();
    2ada:	0e 94 b8 31 	call	0x6370	; 0x6370 <init_Manual2Module>
	init_Manual2Module();
    2ade:	0e 94 af 2b 	call	0x575e	; 0x575e <init_SoftKeys>
	init_SoftKeys();
    2ae2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2ae6:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2aea:	45 dd       	rcall	.-1398   	; 0x2576 <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2aec:	0e 94 90 39 	call	0x7320	; 0x7320 <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2af0:	a3 dd       	rcall	.-1210   	; 0x2638 <lcd_clrscr>
    2af2:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2af4:	9c dd       	rcall	.-1224   	; 0x262e <lcd_goto>
    2af6:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0b de       	rcall	.-1002   	; 0x2712 <lcd_puts_P>
    2afc:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2afe:	97 dd       	rcall	.-1234   	; 0x262e <lcd_goto>
    2b00:	8e e9       	ldi	r24, 0x9E	; 158
    2b02:	92 e1       	ldi	r25, 0x12	; 18
	lcd_puts_P(sw_version);
    2b04:	06 de       	rcall	.-1012   	; 0x2712 <lcd_puts_P>
    2b06:	78 94       	sei
    2b08:	2f ef       	ldi	r18, 0xFF	; 255
    2b0a:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2b0c:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b0e:	21 50       	subi	r18, 0x01	; 1
    2b10:	40 40       	sbci	r20, 0x00	; 0
    2b12:	80 40       	sbci	r24, 0x00	; 0
    2b14:	e1 f7       	brne	.-8      	; 0x2b0e <main+0x64>
    2b16:	00 c0       	rjmp	.+0      	; 0x2b18 <main+0x6e>
    2b18:	00 00       	nop
    2b1a:	0e 94 4e 38 	call	0x709c	; 0x709c <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2b1e:	8c dd       	rcall	.-1256   	; 0x2638 <lcd_clrscr>
	lcd_clrscr ();
    2b20:	a8 d9       	rcall	.-3248   	; 0x1e72 <module_StartPowerOn>
    2b22:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2b24:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2b28:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2b2c:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2b2e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2b32:	df ef       	ldi	r29, 0xFF	; 255
    2b34:	85 b1       	in	r24, 0x05	; 5
    2b36:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2b38:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2b3a:	20 91 fe 13 	lds	r18, 0x13FE	; 0x8013fe <serESPRxInIndex>
    2b3e:	30 91 ff 13 	lds	r19, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2b42:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    2b46:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <main+0xa8>
    2b50:	66 c0       	rjmp	.+204    	; 0x2c1e <main+0x174>
    2b52:	0e 94 b8 38 	call	0x7170	; 0x7170 <serial3SER_ESPReadRx>
    2b56:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2b58:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2b5c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2b60:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2b62:	8c 0f       	add	r24, r28
    2b64:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2b66:	28 f4       	brcc	.+10     	; 0x2b72 <main+0xc8>
    2b68:	80 e8       	ldi	r24, 0x80	; 128
    2b6a:	8c 0f       	add	r24, r28
    2b6c:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2b70:	56 c0       	rjmp	.+172    	; 0x2c1e <main+0x174>
    2b72:	c0 39       	cpi	r28, 0x90	; 144
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <main+0xce>
    2b76:	53 c0       	rjmp	.+166    	; 0x2c1e <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2b78:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <serESPInBuffer>
    2b7c:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <main+0xd8>
    2b80:	4e c0       	rjmp	.+156    	; 0x2c1e <main+0x174>
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	e9 2f       	mov	r30, r25
    2b86:	09 2e       	mov	r0, r25
    2b88:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2b8a:	ff 0b       	sbc	r31, r31
    2b8c:	ef 50       	subi	r30, 0x0F	; 15
    2b8e:	fc 4e       	sbci	r31, 0xEC	; 236
    2b90:	80 81       	ld	r24, Z
    2b92:	8d 33       	cpi	r24, 0x3D	; 61
    2b94:	19 f0       	breq	.+6      	; 0x2b9c <main+0xf2>
    2b96:	9f 5f       	subi	r25, 0xFF	; 255
    2b98:	98 30       	cpi	r25, 0x08	; 8
    2b9a:	a4 f3       	brlt	.-24     	; 0x2b84 <main+0xda>
							break;
						}
						i++;
    2b9c:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2b9e:	0c f0       	brlt	.+2      	; 0x2ba2 <main+0xf8>
    2ba0:	3e c0       	rjmp	.+124    	; 0x2c1e <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2ba2:	89 2f       	mov	r24, r25
    2ba4:	85 95       	asr	r24
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2ba8:	06 c0       	rjmp	.+12     	; 0x2bb6 <main+0x10c>
    2baa:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	e5 5b       	subi	r30, 0xB5	; 181
							serESPMidiTmp[j] = 0;
    2bb0:	f9 4e       	sbci	r31, 0xE9	; 233
    2bb2:	10 82       	st	Z, r1
    2bb4:	2f 5f       	subi	r18, 0xFF	; 255
    2bb6:	23 30       	cpi	r18, 0x03	; 3
    2bb8:	c0 f3       	brcs	.-16     	; 0x2baa <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bba:	2c c0       	rjmp	.+88     	; 0x2c14 <main+0x16a>
    2bbc:	e9 2f       	mov	r30, r25
    2bbe:	09 2e       	mov	r0, r25
    2bc0:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2bc2:	ff 0b       	sbc	r31, r31
    2bc4:	ef 50       	subi	r30, 0x0F	; 15
    2bc6:	fc 4e       	sbci	r31, 0xEC	; 236
    2bc8:	30 81       	ld	r19, Z
    2bca:	20 ed       	ldi	r18, 0xD0	; 208
    2bcc:	23 0f       	add	r18, r19
    2bce:	2a 30       	cpi	r18, 0x0A	; 10
    2bd0:	10 f0       	brcs	.+4      	; 0x2bd6 <main+0x12c>
    2bd2:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2bd4:	23 0f       	add	r18, r19
    2bd6:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2bd8:	af 70       	andi	r26, 0x0F	; 15
    2bda:	eb e4       	ldi	r30, 0x4B	; 75
							}
							asciiData &= 0x0F;
    2bdc:	f6 e1       	ldi	r31, 0x16	; 22
    2bde:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2be0:	20 e1       	ldi	r18, 0x10	; 16
    2be2:	62 9f       	mul	r22, r18
    2be4:	b0 01       	movw	r22, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	41 81       	ldd	r20, Z+1	; 0x01
    2bea:	24 2f       	mov	r18, r20
    2bec:	22 95       	swap	r18
    2bee:	2f 70       	andi	r18, 0x0F	; 15
    2bf0:	62 2b       	or	r22, r18
    2bf2:	62 83       	std	Z+2, r22	; 0x02
    2bf4:	20 e1       	ldi	r18, 0x10	; 16
    2bf6:	42 9f       	mul	r20, r18
    2bf8:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2bfa:	11 24       	eor	r1, r1
    2bfc:	20 81       	ld	r18, Z
    2bfe:	32 2f       	mov	r19, r18
    2c00:	32 95       	swap	r19
    2c02:	3f 70       	andi	r19, 0x0F	; 15
    2c04:	43 2b       	or	r20, r19
    2c06:	41 83       	std	Z+1, r20	; 0x01
    2c08:	40 e1       	ldi	r20, 0x10	; 16
    2c0a:	24 9f       	mul	r18, r20
    2c0c:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2c0e:	11 24       	eor	r1, r1
    2c10:	2a 2b       	or	r18, r26
    2c12:	20 83       	st	Z, r18
    2c14:	91 50       	subi	r25, 0x01	; 1
    2c16:	19 16       	cp	r1, r25
    2c18:	8c f2       	brlt	.-94     	; 0x2bbc <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2c1a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <proc_ESPmidi>
    2c1e:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2c22:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <main+0x17e>
    2c26:	51 c0       	rjmp	.+162    	; 0x2cca <main+0x220>
    2c28:	85 b1       	in	r24, 0x05	; 5
    2c2a:	80 63       	ori	r24, 0x30	; 48
    2c2c:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2c2e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <message_get>
    2c32:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2c34:	86 38       	cpi	r24, 0x86	; 134
    2c36:	b9 f4       	brne	.+46     	; 0x2c66 <main+0x1bc>
    2c38:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				// PANIC BUTTON
				midiSendAllNotesOff();
    2c3c:	0e 94 56 33 	call	0x66ac	; 0x66ac <midi_AllManualsOff>
				midi_AllManualsOff();
    2c40:	0e 94 b7 30 	call	0x616e	; 0x616e <midi_resetRegisters>
				midi_resetRegisters();
    2c44:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <midi_CouplerReset>
				midi_CouplerReset();
    2c48:	74 dd       	rcall	.-1304   	; 0x2732 <init_log>
    2c4a:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
				init_log(); // clear log V 0.70
    2c4e:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2c52:	85 b1       	in	r24, 0x05	; 5
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	85 b9       	out	0x05, r24	; 5
				POWER_ON
    2c58:	83 e1       	ldi	r24, 0x13	; 19
    2c5a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2c5e:	8a e8       	ldi	r24, 0x8A	; 138
    2c60:	92 e0       	ldi	r25, 0x02	; 2
    2c62:	0e 94 8d 2a 	call	0x551a	; 0x551a <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2c66:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2c6c:	f9 f4       	brne	.+62     	; 0x2cac <main+0x202>
    2c6e:	8c 2f       	mov	r24, r28
    2c70:	8f 73       	andi	r24, 0x3F	; 63
    2c72:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2c74:	69 f4       	brne	.+26     	; 0x2c90 <main+0x1e6>
    2c76:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <menu_Init>
    2c82:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2c86:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	48 d9       	rcall	.-3440   	; 0x1f1e <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2c8e:	1d c0       	rjmp	.+58     	; 0x2cca <main+0x220>
    2c90:	9f ef       	ldi	r25, 0xFF	; 255
    2c92:	98 0f       	add	r25, r24
    2c94:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2c96:	c8 f4       	brcc	.+50     	; 0x2cca <main+0x220>
    2c98:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <softKey_MessageKey_ToSoftKeyNr>
    2c9c:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2c9e:	0e 94 88 2c 	call	0x5910	; 0x5910 <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2ca2:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2ca6:	0e 94 34 2c 	call	0x5868	; 0x5868 <softKeys_toLCD>
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <main+0x220>
					softKeys_toLCD();
    2cac:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2cb0:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <main+0x216>
    2cb4:	8c 2f       	mov	r24, r28
    2cb6:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2cba:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <main+0x220>
    2cc0:	8d ef       	ldi	r24, 0xFD	; 253
    2cc2:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2cc6:	0e 94 58 29 	call	0x52b0	; 0x52b0 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2cca:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2cce:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd0:	69 f4       	brne	.+26     	; 0x2cec <main+0x242>
    2cd2:	df 3f       	cpi	r29, 0xFF	; 255
    2cd4:	61 f4       	brne	.+24     	; 0x2cee <main+0x244>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2cd6:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2cda:	0e 94 34 2c 	call	0x5868	; 0x5868 <softKeys_toLCD>
				softKeys_toLCD();
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	1e d9       	rcall	.-3524   	; 0x1f1e <softKey_WantLong>
				softKey_WantLong(TRUE);
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // update program display 
    2ce8:	d0 e0       	ldi	r29, 0x00	; 0
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <main+0x244>
    2cec:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2cee:	85 b1       	in	r24, 0x05	; 5
    2cf0:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2cf2:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2cf4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2cf8:	81 11       	cpse	r24, r1
    2cfa:	09 c0       	rjmp	.+18     	; 0x2d0e <main+0x264>
    2cfc:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2d00:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <menu_deleteMessage>
				menu_deleteMessage();
    2d04:	8c 2f       	mov	r24, r28
    2d06:	93 dc       	rcall	.-1754   	; 0x262e <lcd_goto>
				lcd_goto(saveCursor);
    2d08:	8f ef       	ldi	r24, 0xFF	; 255
    2d0a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2d0e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2d12:	81 11       	cpse	r24, r1
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <main+0x280>
    2d16:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2d1a:	88 23       	and	r24, r24
    2d1c:	19 f0       	breq	.+6      	; 0x2d24 <main+0x27a>
    2d1e:	0e 94 58 29 	call	0x52b0	; 0x52b0 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <main+0x280>
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2d2a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    2d2e:	81 11       	cpse	r24, r1
    2d30:	1a c0       	rjmp	.+52     	; 0x2d66 <main+0x2bc>
    2d32:	af d8       	rcall	.-3746   	; 0x1e92 <module_PowerControl>
			module_PowerControl();
    2d34:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <menu_showPowerState>
			menu_showPowerState();
    2d38:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3e:	99 f4       	brne	.+38     	; 0x2d66 <main+0x2bc>
    2d40:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2d44:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2d46:	73 dc       	rcall	.-1818   	; 0x262e <lcd_goto>
    2d48:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <main+0x2ae>
    2d50:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2d52:	92 e0       	ldi	r25, 0x02	; 2
    2d54:	de dc       	rcall	.-1604   	; 0x2712 <lcd_puts_P>
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <main+0x2b8>
    2d58:	82 31       	cpi	r24, 0x12	; 18
    2d5a:	19 f4       	brne	.+6      	; 0x2d62 <main+0x2b8>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2d5c:	84 e1       	ldi	r24, 0x14	; 20
    2d5e:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2d62:	8c 2f       	mov	r24, r28
    2d64:	64 dc       	rcall	.-1848   	; 0x262e <lcd_goto>
				}
				lcd_goto(saveCursor);
    2d66:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2d6a:	9f e7       	ldi	r25, 0x7F	; 127
    2d6c:	98 0f       	add	r25, r24
    2d6e:	96 30       	cpi	r25, 0x06	; 6
    2d70:	10 f0       	brcs	.+4      	; 0x2d76 <main+0x2cc>
    2d72:	8e 3f       	cpi	r24, 0xFE	; 254
    2d74:	09 f5       	brne	.+66     	; 0x2db8 <main+0x30e>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2d76:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <main+0x2e0>
    2d7e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2d82:	69 dc       	rcall	.-1838   	; 0x2656 <getCursorFromLCDRAMcursor>
    2d84:	0e 94 82 38 	call	0x7104	; 0x7104 <serial3SER_ESPSend>
    2d88:	03 c0       	rjmp	.+6      	; 0x2d90 <main+0x2e6>
    2d8a:	8f e7       	ldi	r24, 0x7F	; 127
    2d8c:	0e 94 82 38 	call	0x7104	; 0x7104 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2d90:	81 e8       	ldi	r24, 0x81	; 129
    2d92:	0e 94 82 38 	call	0x7104	; 0x7104 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2d96:	c0 e0       	ldi	r28, 0x00	; 0
    2d98:	e8 e5       	ldi	r30, 0x58	; 88
    2d9a:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d9c:	08 c0       	rjmp	.+16     	; 0x2dae <main+0x304>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2d9e:	8f 01       	movw	r16, r30
    2da0:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2da2:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2da4:	80 81       	ld	r24, Z
    2da6:	0e 94 82 38 	call	0x7104	; 0x7104 <serial3SER_ESPSend>
    2daa:	cf 5f       	subi	r28, 0xFF	; 255
    2dac:	f8 01       	movw	r30, r16
    2dae:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2db0:	b0 f3       	brcs	.-20     	; 0x2d9e <main+0x2f4>
				serial3SER_ESPSend(*pChar++);
    2db2:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2db4:	0e 94 82 38 	call	0x7104	; 0x7104 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2dbe:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <midi_CheckTxActiveSense>
    2dc2:	0e 94 60 33 	call	0x66c0	; 0x66c0 <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2dc6:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    2dca:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2dce:	88 23       	and	r24, r24
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <main+0x332>
    2dd2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2dd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <main+0x332>
    2dda:	67 c0       	rjmp	.+206    	; 0x2eaa <main+0x400>
    2ddc:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
			if (prog_Display == PROGR_NONE) {
    2de0:	8f 3f       	cpi	r24, 0xFF	; 255
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <main+0x33c>
    2de4:	62 c0       	rjmp	.+196    	; 0x2eaa <main+0x400>
    2de6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    2dea:	8f 3f       	cpi	r24, 0xFF	; 255
    2dec:	91 f1       	breq	.+100    	; 0x2e52 <main+0x3a8>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2df0:	1e dc       	rcall	.-1988   	; 0x262e <lcd_goto>
    2df2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					if (midiLastInManual == MANUAL_NONE) {
    2df6:	8f 3f       	cpi	r24, 0xFF	; 255
    2df8:	69 f4       	brne	.+26     	; 0x2e14 <main+0x36a>
    2dfa:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    2dfe:	0e 94 82 3b 	call	0x7704	; 0x7704 <lcd_ChannelOut>
						lcd_putc('?');
    2e02:	8f e3       	ldi	r24, 0x3F	; 63
    2e04:	3e dc       	rcall	.-1924   	; 0x2682 <lcd_putc>
						lcd_noteOut(midiLastInNote);
    2e06:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e0a:	0e 94 31 3b 	call	0x7662	; 0x7662 <lcd_noteOut>
						lcd_putc(' ');
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	38 dc       	rcall	.-1936   	; 0x2682 <lcd_putc>
    2e12:	0c c0       	rjmp	.+24     	; 0x2e2c <main+0x382>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    2e14:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e18:	0e 94 31 3b 	call	0x7662	; 0x7662 <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    2e1c:	8e e7       	ldi	r24, 0x7E	; 126
    2e1e:	31 dc       	rcall	.-1950   	; 0x2682 <lcd_putc>
    2e20:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
						lcd_ManualOutDec(midiLastInManual);
    2e24:	0e 94 93 3b 	call	0x7726	; 0x7726 <lcd_ManualOutDec>
    2e28:	80 e2       	ldi	r24, 0x20	; 32
						lcd_putc(' ');
    2e2a:	2b dc       	rcall	.-1962   	; 0x2682 <lcd_putc>
    2e2c:	8c 2f       	mov	r24, r28
    2e2e:	ff db       	rcall	.-2050   	; 0x262e <lcd_goto>
					}
					lcd_goto(oldcursor);
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
					midiLastInNote = MIDI_NOTE_NONE;
    2e36:	9f b7       	in	r25, 0x3f	; 63
					// now start timer 
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e38:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <main+0x3a0>
    2e3e:	ef e2       	ldi	r30, 0x2F	; 47
    2e40:	f2 e0       	ldi	r31, 0x02	; 2
    2e42:	83 e2       	ldi	r24, 0x23	; 35
    2e44:	80 87       	std	Z+8, r24	; 0x08
    2e46:	11 86       	std	Z+9, r1	; 0x09
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	81 11       	cpse	r24, r1
    2e4c:	f8 cf       	rjmp	.-16     	; 0x2e3e <main+0x394>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e4e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2e50:	2c c0       	rjmp	.+88     	; 0x2eaa <main+0x400>
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2e52:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2e56:	8f 3f       	cpi	r24, 0xFF	; 255
    2e58:	d9 f0       	breq	.+54     	; 0x2e90 <main+0x3e6>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	e8 db       	rcall	.-2096   	; 0x262e <lcd_goto>
    2e5e:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('p');
    2e60:	10 dc       	rcall	.-2016   	; 0x2682 <lcd_putc>
    2e62:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
					lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2e66:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
    2e6a:	8e e7       	ldi	r24, 0x7E	; 126
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2e6c:	0a dc       	rcall	.-2028   	; 0x2682 <lcd_putc>
    2e6e:	8f ef       	ldi	r24, 0xFF	; 255
    2e70:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2e74:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e76:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	06 c0       	rjmp	.+12     	; 0x2e88 <main+0x3de>
    2e7c:	ef e2       	ldi	r30, 0x2F	; 47
    2e7e:	f2 e0       	ldi	r31, 0x02	; 2
    2e80:	83 e2       	ldi	r24, 0x23	; 35
    2e82:	80 87       	std	Z+8, r24	; 0x08
    2e84:	11 86       	std	Z+9, r1	; 0x09
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	81 11       	cpse	r24, r1
    2e8a:	f8 cf       	rjmp	.-16     	; 0x2e7c <main+0x3d2>
    2e8c:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e8e:	0d c0       	rjmp	.+26     	; 0x2eaa <main+0x400>
    __asm__ volatile ("" ::: "memory");
    2e90:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2e94:	81 11       	cpse	r24, r1
    2e96:	09 c0       	rjmp	.+18     	; 0x2eaa <main+0x400>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e98:	ca db       	rcall	.-2156   	; 0x262e <lcd_goto>
    2e9a:	86 e0       	ldi	r24, 0x06	; 6
					lcd_blank(6);
    2e9c:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
					lcd_goto(oldcursor);
    2ea0:	8c 2f       	mov	r24, r28
    2ea2:	c5 db       	rcall	.-2166   	; 0x262e <lcd_goto>
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2ea6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
				}
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2eaa:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2eae:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <main+0x410>
    2eb2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	5b c0       	rjmp	.+182    	; 0x2f70 <main+0x4c6>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2eba:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec0:	f9 f0       	breq	.+62     	; 0x2f00 <main+0x456>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2ec2:	8f e0       	ldi	r24, 0x0F	; 15
    2ec4:	b4 db       	rcall	.-2200   	; 0x262e <lcd_goto>
    2ec6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2eca:	0e 94 93 3b 	call	0x7726	; 0x7726 <lcd_ManualOutDec>
    2ece:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2ed0:	d8 db       	rcall	.-2128   	; 0x2682 <lcd_putc>
    2ed2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2ed6:	0e 94 31 3b 	call	0x7662	; 0x7662 <lcd_noteOut>
				lcd_goto(oldcursor);
    2eda:	8c 2f       	mov	r24, r28
    2edc:	a8 db       	rcall	.-2224   	; 0x262e <lcd_goto>
    2ede:	8f ef       	ldi	r24, 0xFF	; 255
				midiLastOutNote = MIDI_NOTE_NONE;
    2ee0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2ee4:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2ee6:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <main+0x44e>
    2eec:	ef e2       	ldi	r30, 0x2F	; 47
    2eee:	f2 e0       	ldi	r31, 0x02	; 2
    2ef0:	88 e2       	ldi	r24, 0x28	; 40
    2ef2:	82 87       	std	Z+10, r24	; 0x0a
    2ef4:	13 86       	std	Z+11, r1	; 0x0b
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ef8:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2efa:	f8 cf       	rjmp	.-16     	; 0x2eec <main+0x442>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2efc:	9f bf       	out	0x3f, r25	; 63
    2efe:	38 c0       	rjmp	.+112    	; 0x2f70 <main+0x4c6>
    2f00:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f04:	8f 3f       	cpi	r24, 0xFF	; 255
    2f06:	31 f1       	breq	.+76     	; 0x2f54 <main+0x4aa>
    2f08:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    2f0a:	91 db       	rcall	.-2270   	; 0x262e <lcd_goto>
    2f0c:	82 e5       	ldi	r24, 0x52	; 82
    2f0e:	b9 db       	rcall	.-2190   	; 0x2682 <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2f10:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f14:	8f 77       	andi	r24, 0x7F	; 127
    2f16:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2f1a:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f1e:	88 23       	and	r24, r24
    2f20:	14 f0       	brlt	.+4      	; 0x2f26 <main+0x47c>
    2f22:	88 e0       	ldi	r24, 0x08	; 8
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <main+0x47e>
    2f26:	89 e0       	ldi	r24, 0x09	; 9
    2f28:	ac db       	rcall	.-2216   	; 0x2682 <lcd_putc>
				lcd_putc(' ');
    2f2a:	80 e2       	ldi	r24, 0x20	; 32
    2f2c:	aa db       	rcall	.-2220   	; 0x2682 <lcd_putc>
    2f2e:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2f30:	7e db       	rcall	.-2308   	; 0x262e <lcd_goto>
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2f38:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2f3a:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <main+0x4a2>
    2f40:	ef e2       	ldi	r30, 0x2F	; 47
    2f42:	f2 e0       	ldi	r31, 0x02	; 2
    2f44:	88 e2       	ldi	r24, 0x28	; 40
    2f46:	82 87       	std	Z+10, r24	; 0x0a
    2f48:	13 86       	std	Z+11, r1	; 0x0b
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	81 11       	cpse	r24, r1
    2f4e:	f8 cf       	rjmp	.-16     	; 0x2f40 <main+0x496>
    2f50:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f52:	0e c0       	rjmp	.+28     	; 0x2f70 <main+0x4c6>
    __asm__ volatile ("" ::: "memory");
    2f54:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2f58:	81 11       	cpse	r24, r1
    2f5a:	0a c0       	rjmp	.+20     	; 0x2f70 <main+0x4c6>
    2f5c:	8f e0       	ldi	r24, 0x0F	; 15
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f5e:	67 db       	rcall	.-2354   	; 0x262e <lcd_goto>
    2f60:	85 e0       	ldi	r24, 0x05	; 5
    2f62:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
				lcd_blank(5);
    2f66:	8c 2f       	mov	r24, r28
    2f68:	62 db       	rcall	.-2364   	; 0x262e <lcd_goto>
				lcd_goto(oldcursor);
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2f70:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <prog_UpdDisplay>
    2f74:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    2f76:	31 f4       	brne	.+12     	; 0x2f84 <main+0x4da>
    2f78:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
			prog_UpdDisplay = FALSE;
    2f7e:	57 db       	rcall	.-2386   	; 0x262e <lcd_goto>
    2f80:	0e 94 c6 30 	call	0x618c	; 0x618c <prog_toLcd>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    2f84:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			prog_toLcd();
    2f88:	8f 3f       	cpi	r24, 0xFF	; 255
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <main+0x4e4>
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2f8c:	7e c0       	rjmp	.+252    	; 0x308a <main+0x5e0>
    2f8e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2f92:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2f96:	c0 91 db 18 	lds	r28, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2f9a:	cf 3f       	cpi	r28, 0xFF	; 255
			uint8_t oldBlink = lcd_cursorIsOn;
    2f9c:	11 f4       	brne	.+4      	; 0x2fa2 <main+0x4f8>
			if (oldBlink == TRUE) {
    2f9e:	0e 94 cf 3b 	call	0x779e	; 0x779e <lcd_cursoroff>
				lcd_cursoroff();
    2fa2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    2fa6:	88 23       	and	r24, r24
    2fa8:	59 f0       	breq	.+22     	; 0x2fc0 <main+0x516>
    2faa:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2fae:	80 fd       	sbrc	r24, 0
    2fb0:	0e c0       	rjmp	.+28     	; 0x2fce <main+0x524>
    2fb2:	0f 2e       	mov	r0, r31
    2fb4:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    2fb6:	ef 2e       	mov	r14, r31
    2fb8:	f0 2d       	mov	r31, r0
    2fba:	04 e4       	ldi	r16, 0x44	; 68
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2fbc:	12 e0       	ldi	r17, 0x02	; 2
    2fbe:	0c c0       	rjmp	.+24     	; 0x2fd8 <main+0x52e>
    2fc0:	0f 2e       	mov	r0, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2fc2:	fa e3       	ldi	r31, 0x3A	; 58
    2fc4:	ef 2e       	mov	r14, r31
    2fc6:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2fc8:	03 e4       	ldi	r16, 0x43	; 67
    2fca:	12 e0       	ldi	r17, 0x02	; 2
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <main+0x52e>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2fce:	68 94       	set
    2fd0:	ee 24       	eor	r14, r14
    2fd2:	e5 f8       	bld	r14, 5
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2fd4:	04 e4       	ldi	r16, 0x44	; 68
    2fd6:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2fd8:	87 e0       	ldi	r24, 0x07	; 7
    2fda:	29 db       	rcall	.-2478   	; 0x262e <lcd_goto>
			lcd_dec2out(*(pTime--));
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 81       	ld	r24, Z
    2fe0:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
			lcd_putc(separator);
    2fe4:	8e 2d       	mov	r24, r14
    2fe6:	4d db       	rcall	.-2406   	; 0x2682 <lcd_putc>
			lcd_dec2out(*pTime);
    2fe8:	f8 01       	movw	r30, r16
    2fea:	31 97       	sbiw	r30, 0x01	; 1
    2fec:	80 81       	ld	r24, Z
    2fee:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2ff2:	40 91 4f 16 	lds	r20, 0x164F	; 0x80164f <midiRxOvflCount>
			if (ovflCount > 0){
    2ff6:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2ff8:	31 f0       	breq	.+12     	; 0x3006 <main+0x55c>
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	83 e0       	ldi	r24, 0x03	; 3
    3000:	3e dd       	rcall	.-1412   	; 0x2a7e <log_putError>
				midiRxOvflCount = 0;
    3002:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    3006:	40 91 56 16 	lds	r20, 0x1656	; 0x801656 <midiTxOvflCount>
			if (ovflCount > 0){
    300a:	44 23       	and	r20, r20
    300c:	31 f0       	breq	.+12     	; 0x301a <main+0x570>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	34 dd       	rcall	.-1432   	; 0x2a7e <log_putError>
    3016:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
				midiTxOvflCount = 0;
    301a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    301e:	84 ff       	sbrs	r24, 4
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <main+0x57c>
    3022:	80 e2       	ldi	r24, 0x20	; 32
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <main+0x57e>
    3026:	89 e0       	ldi	r24, 0x09	; 9
    3028:	2c db       	rcall	.-2472   	; 0x2682 <lcd_putc>
    302a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    302e:	8f 3f       	cpi	r24, 0xFF	; 255
    3030:	11 f4       	brne	.+4      	; 0x3036 <main+0x58c>
    3032:	85 e4       	ldi	r24, 0x45	; 69
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <main+0x58e>
    3036:	80 e2       	ldi	r24, 0x20	; 32
    3038:	24 db       	rcall	.-2488   	; 0x2682 <lcd_putc>
    303a:	8f 2d       	mov	r24, r15
    303c:	f8 da       	rcall	.-2576   	; 0x262e <lcd_goto>
    303e:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- restore cursor ---
			lcd_goto(oldCursor);
    3040:	11 f4       	brne	.+4      	; 0x3046 <main+0x59c>
    3042:	0e 94 c8 3b 	call	0x7790	; 0x7790 <lcd_cursosblink>
			if (oldBlink == TRUE) {
    3046:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				lcd_cursosblink();
    304a:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    304c:	69 f4       	brne	.+26     	; 0x3068 <main+0x5be>
    304e:	9f b7       	in	r25, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <main+0x5b8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3056:	ef e2       	ldi	r30, 0x2F	; 47
    3058:	f2 e0       	ldi	r31, 0x02	; 2
    305a:	8d e7       	ldi	r24, 0x7D	; 125
    305c:	80 87       	std	Z+8, r24	; 0x08
    305e:	11 86       	std	Z+9, r1	; 0x09
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	81 11       	cpse	r24, r1
    3064:	f8 cf       	rjmp	.-16     	; 0x3056 <main+0x5ac>
    3066:	9f bf       	out	0x3f, r25	; 63
    3068:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    306c:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    306e:	69 f4       	brne	.+26     	; 0x308a <main+0x5e0>
    3070:	9f b7       	in	r25, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3076:	06 c0       	rjmp	.+12     	; 0x3084 <main+0x5da>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3078:	ef e2       	ldi	r30, 0x2F	; 47
    307a:	f2 e0       	ldi	r31, 0x02	; 2
    307c:	8d e7       	ldi	r24, 0x7D	; 125
    307e:	82 87       	std	Z+10, r24	; 0x0a
    3080:	13 86       	std	Z+11, r1	; 0x0b
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	81 11       	cpse	r24, r1
    3086:	f8 cf       	rjmp	.-16     	; 0x3078 <main+0x5ce>
    3088:	9f bf       	out	0x3f, r25	; 63
    308a:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    308e:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3090:	39 f4       	brne	.+14     	; 0x30a0 <main+0x5f6>
    3092:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    3096:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    309c:	84 e0       	ldi	r24, 0x04	; 4
    309e:	ef dc       	rcall	.-1570   	; 0x2a7e <log_putError>
    30a0:	85 b1       	in	r24, 0x05	; 5
    30a2:	8f 7c       	andi	r24, 0xCF	; 207
    30a4:	80 62       	ori	r24, 0x20	; 32
    30a6:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MIDI
    30a8:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    30ac:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    30b0:	98 17       	cp	r25, r24
    30b2:	21 f0       	breq	.+8      	; 0x30bc <main+0x612>
    30b4:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <serial1MIDIReadRx>
    30b8:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    30bc:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <pipeMsgStatus>
    30c0:	8f 3f       	cpi	r24, 0xFF	; 255
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <main+0x61c>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    30c4:	37 cd       	rjmp	.-1426   	; 0x2b34 <main+0x8a>
    30c6:	0e 94 77 2d 	call	0x5aee	; 0x5aee <pipeMsgGet>
    30ca:	0e 94 ae 34 	call	0x695c	; 0x695c <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    30ce:	32 cd       	rjmp	.-1436   	; 0x2b34 <main+0x8a>

000030d0 <menu_enterWriteModule>:
    30d0:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    30d4:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    30d8:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
    30dc:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <menu_enterWriteModule+0x1e>
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	0a 94       	dec	r0
    30f0:	e2 f7       	brpl	.-8      	; 0x30ea <menu_enterWriteModule+0x1a>
    30f2:	48 2f       	mov	r20, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	e1 e4       	ldi	r30, 0x41	; 65
    30f8:	f3 e0       	ldi	r31, 0x03	; 3
    30fa:	22 c0       	rjmp	.+68     	; 0x3140 <menu_enterWriteModule+0x70>
    30fc:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    3100:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    3104:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    3108:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	aa 1f       	adc	r26, r26
    3112:	bb 1f       	adc	r27, r27
    3114:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    3118:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    311c:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3120:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3124:	21 81       	ldd	r18, Z+1	; 0x01
    3126:	24 23       	and	r18, r20
    3128:	49 f0       	breq	.+18     	; 0x313c <menu_enterWriteModule+0x6c>
    312a:	81 60       	ori	r24, 0x01	; 1
    312c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    3130:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    3134:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3138:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    313c:	38 97       	sbiw	r30, 0x08	; 8
    313e:	3f 5f       	subi	r19, 0xFF	; 255
    3140:	30 32       	cpi	r19, 0x20	; 32
    3142:	e0 f2       	brcs	.-72     	; 0x30fc <menu_enterWriteModule+0x2c>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	08 95       	ret

00003148 <menu_exitWriteModule>:
    3148:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    314c:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    3150:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    3154:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    3158:	85 30       	cpi	r24, 0x05	; 5
    315a:	09 f5       	brne	.+66     	; 0x319e <menu_exitWriteModule+0x56>
    315c:	a1 e0       	ldi	r26, 0x01	; 1
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3164:	02 c0       	rjmp	.+4      	; 0x316a <menu_exitWriteModule+0x22>
    3166:	aa 0f       	add	r26, r26
    3168:	bb 1f       	adc	r27, r27
    316a:	0a 94       	dec	r0
    316c:	e2 f7       	brpl	.-8      	; 0x3166 <menu_exitWriteModule+0x1e>
    316e:	3a 2f       	mov	r19, r26
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	e1 e4       	ldi	r30, 0x41	; 65
    3174:	f3 e0       	ldi	r31, 0x03	; 3
    3176:	11 c0       	rjmp	.+34     	; 0x319a <menu_exitWriteModule+0x52>
    3178:	77 23       	and	r23, r23
    317a:	24 f4       	brge	.+8      	; 0x3184 <menu_exitWriteModule+0x3c>
    317c:	81 81       	ldd	r24, Z+1	; 0x01
    317e:	83 2b       	or	r24, r19
    3180:	81 83       	std	Z+1, r24	; 0x01
    3182:	05 c0       	rjmp	.+10     	; 0x318e <menu_exitWriteModule+0x46>
    3184:	21 81       	ldd	r18, Z+1	; 0x01
    3186:	8a 2f       	mov	r24, r26
    3188:	80 95       	com	r24
    318a:	82 23       	and	r24, r18
    318c:	81 83       	std	Z+1, r24	; 0x01
    318e:	44 0f       	add	r20, r20
    3190:	55 1f       	adc	r21, r21
    3192:	66 1f       	adc	r22, r22
    3194:	77 1f       	adc	r23, r23
    3196:	38 97       	sbiw	r30, 0x08	; 8
    3198:	9f 5f       	subi	r25, 0xFF	; 255
    319a:	90 32       	cpi	r25, 0x20	; 32
    319c:	68 f3       	brcs	.-38     	; 0x3178 <menu_exitWriteModule+0x30>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	08 95       	ret

000031a2 <menuOnEnterModSel>:
    31a2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31a6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31aa:	3e 96       	adiw	r30, 0x0e	; 14
    31ac:	85 91       	lpm	r24, Z+
    31ae:	95 91       	lpm	r25, Z+
    31b0:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	08 95       	ret

000031b8 <menuOnEnterMidiInCh>:
    31b8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31bc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31c0:	3e 96       	adiw	r30, 0x0e	; 14
    31c2:	85 91       	lpm	r24, Z+
    31c4:	95 91       	lpm	r25, Z+
    31c6:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	08 95       	ret

000031ce <menuOnEnterMidiInSec>:
    31ce:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31d2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31d6:	3e 96       	adiw	r30, 0x0e	; 14
    31d8:	25 91       	lpm	r18, Z+
    31da:	35 91       	lpm	r19, Z+
    31dc:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    31e0:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    31e4:	8f 70       	andi	r24, 0x0F	; 15
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	23 70       	andi	r18, 0x03	; 3
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	82 0f       	add	r24, r18
    31f4:	91 1d       	adc	r25, r1
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3202:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	08 95       	ret

0000320a <menuOnEnterModManual>:
    320a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    320e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3212:	3e 96       	adiw	r30, 0x0e	; 14
    3214:	85 91       	lpm	r24, Z+
    3216:	95 91       	lpm	r25, Z+
    3218:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	08 95       	ret

00003220 <menuOnEnterModSec>:
    3220:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3224:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3228:	3e 96       	adiw	r30, 0x0e	; 14
    322a:	85 91       	lpm	r24, Z+
    322c:	95 91       	lpm	r25, Z+
    322e:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    3232:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    3236:	2f 70       	andi	r18, 0x0F	; 15
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	83 70       	andi	r24, 0x03	; 3
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a9 01       	movw	r20, r18
    3240:	44 0f       	add	r20, r20
    3242:	55 1f       	adc	r21, r21
    3244:	24 0f       	add	r18, r20
    3246:	35 1f       	adc	r19, r21
    3248:	22 0f       	add	r18, r18
    324a:	33 1f       	adc	r19, r19
    324c:	22 0f       	add	r18, r18
    324e:	33 1f       	adc	r19, r19
    3250:	ac 01       	movw	r20, r24
    3252:	44 0f       	add	r20, r20
    3254:	55 1f       	adc	r21, r21
    3256:	84 0f       	add	r24, r20
    3258:	95 1f       	adc	r25, r21
    325a:	82 0f       	add	r24, r18
    325c:	93 1f       	adc	r25, r19
    325e:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3262:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	08 95       	ret

0000326a <menuOnEnterModSecReg>:
    326a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    326e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3272:	3e 96       	adiw	r30, 0x0e	; 14
    3274:	85 91       	lpm	r24, Z+
    3276:	95 91       	lpm	r25, Z+
    3278:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    327c:	87 70       	andi	r24, 0x07	; 7
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	9c 01       	movw	r18, r24
    3282:	22 0f       	add	r18, r18
    3284:	33 1f       	adc	r19, r19
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    328e:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	08 95       	ret

00003296 <menuOnEnterKey>:
    3296:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    329a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    329e:	3e 96       	adiw	r30, 0x0e	; 14
    32a0:	85 91       	lpm	r24, Z+
    32a2:	95 91       	lpm	r25, Z+
    32a4:	84 30       	cpi	r24, 0x04	; 4
    32a6:	60 f4       	brcc	.+24     	; 0x32c0 <menuOnEnterKey+0x2a>
    32a8:	fc 01       	movw	r30, r24
    32aa:	ff 27       	eor	r31, r31
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	e6 54       	subi	r30, 0x46	; 70
    32b2:	fa 4f       	sbci	r31, 0xFA	; 250
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    32bc:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	08 95       	ret

000032c4 <menuOnExitMidiThrough>:
    32c4:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_UpdateMidiThrough>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	08 95       	ret

000032cc <menuOnExitRegisterEdit>:
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	86 30       	cpi	r24, 0x06	; 6
    32d4:	f1 f0       	breq	.+60     	; 0x3312 <menuOnExitRegisterEdit+0x46>
    32d6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32da:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32de:	3e 96       	adiw	r30, 0x0e	; 14
    32e0:	05 90       	lpm	r0, Z+
    32e2:	f4 91       	lpm	r31, Z
    32e4:	e0 2d       	mov	r30, r0
    32e6:	cf 01       	movw	r24, r30
    32e8:	8d 56       	subi	r24, 0x6D	; 109
    32ea:	95 40       	sbci	r25, 0x05	; 5
    32ec:	88 0f       	add	r24, r24
    32ee:	88 0f       	add	r24, r24
    32f0:	88 0f       	add	r24, r24
    32f2:	d0 81       	ld	r29, Z
    32f4:	c0 e0       	ldi	r28, 0x00	; 0
    32f6:	0b c0       	rjmp	.+22     	; 0x330e <menuOnExitRegisterEdit+0x42>
    32f8:	11 e0       	ldi	r17, 0x01	; 1
    32fa:	18 0f       	add	r17, r24
    32fc:	6d 2f       	mov	r22, r29
    32fe:	66 1f       	adc	r22, r22
    3300:	66 27       	eor	r22, r22
    3302:	66 1f       	adc	r22, r22
    3304:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <register_onOff>
    3308:	dd 0f       	add	r29, r29
    330a:	cf 5f       	subi	r28, 0xFF	; 255
    330c:	81 2f       	mov	r24, r17
    330e:	c8 30       	cpi	r28, 0x08	; 8
    3310:	98 f3       	brcs	.-26     	; 0x32f8 <menuOnExitRegisterEdit+0x2c>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	08 95       	ret

0000331c <softKeyRegOff>:
    331c:	81 11       	cpse	r24, r1
    331e:	0e 94 b7 30 	call	0x616e	; 0x616e <midi_resetRegisters>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	08 95       	ret

00003326 <menuOnExitCoupler>:
    3326:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    332a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    332e:	3e 96       	adiw	r30, 0x0e	; 14
    3330:	85 91       	lpm	r24, Z+
    3332:	95 91       	lpm	r25, Z+
    3334:	81 51       	subi	r24, 0x11	; 17
    3336:	98 40       	sbci	r25, 0x08	; 8
    3338:	fc 01       	movw	r30, r24
    333a:	ff 27       	eor	r31, r31
    333c:	ef 5e       	subi	r30, 0xEF	; 239
    333e:	f7 4f       	sbci	r31, 0xF7	; 247
    3340:	20 81       	ld	r18, Z
    3342:	21 11       	cpse	r18, r1
    3344:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <set_Coupler>
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	08 95       	ret

0000334c <menuOnExitSaveProgram>:
    334c:	86 30       	cpi	r24, 0x06	; 6
    334e:	39 f0       	breq	.+14     	; 0x335e <menuOnExitSaveProgram+0x12>
    3350:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3354:	80 34       	cpi	r24, 0x40	; 64
    3356:	18 f4       	brcc	.+6      	; 0x335e <menuOnExitSaveProgram+0x12>
    3358:	6f ef       	ldi	r22, 0xFF	; 255
    335a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <register_toProgram>
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	08 95       	ret

00003362 <menuOnExitKeys>:
    3362:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <eeprom_UpdateSoftkeys>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	08 95       	ret

0000336a <menu_readModule>:
    336a:	cf 92       	push	r12
    336c:	df 92       	push	r13
    336e:	ef 92       	push	r14
    3370:	ff 92       	push	r15
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <menu_readModule+0x16>
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	0a 94       	dec	r0
    3382:	e2 f7       	brpl	.-8      	; 0x337c <menu_readModule+0x12>
    3384:	28 2f       	mov	r18, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	e1 e4       	ldi	r30, 0x41	; 65
    338a:	f3 e0       	ldi	r31, 0x03	; 3
    338c:	c1 2c       	mov	r12, r1
    338e:	d1 2c       	mov	r13, r1
    3390:	76 01       	movw	r14, r12
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <menu_readModule+0x40>
    3394:	cc 0c       	add	r12, r12
    3396:	dd 1c       	adc	r13, r13
    3398:	ee 1c       	adc	r14, r14
    339a:	ff 1c       	adc	r15, r15
    339c:	86 81       	ldd	r24, Z+6	; 0x06
    339e:	82 23       	and	r24, r18
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <menu_readModule+0x3c>
    33a2:	68 94       	set
    33a4:	c0 f8       	bld	r12, 0
    33a6:	38 97       	sbiw	r30, 0x08	; 8
    33a8:	9f 5f       	subi	r25, 0xFF	; 255
    33aa:	90 32       	cpi	r25, 0x20	; 32
    33ac:	98 f3       	brcs	.-26     	; 0x3394 <menu_readModule+0x2a>
    33ae:	8e e1       	ldi	r24, 0x1E	; 30
    33b0:	3e d9       	rcall	.-3460   	; 0x262e <lcd_goto>
    33b2:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <editLong>
    33b6:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <editLong+0x1>
    33ba:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <editLong+0x2>
    33be:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <editLong+0x3>
    33c2:	0e 94 b4 39 	call	0x7368	; 0x7368 <lcd_longout>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	df 90       	pop	r13
    33ce:	cf 90       	pop	r12
    33d0:	08 95       	ret

000033d2 <menu_testModule>:
    33d2:	8e e1       	ldi	r24, 0x1E	; 30
    33d4:	2c d9       	rcall	.-3496   	; 0x262e <lcd_goto>
    33d6:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    33da:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <test_PipeModule>
    33de:	60 93 dd 18 	sts	0x18DD, r22	; 0x8018dd <editLong>
    33e2:	70 93 de 18 	sts	0x18DE, r23	; 0x8018de <editLong+0x1>
    33e6:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <editLong+0x2>
    33ea:	90 93 e0 18 	sts	0x18E0, r25	; 0x8018e0 <editLong+0x3>
    33ee:	0e 94 b4 39 	call	0x7368	; 0x7368 <lcd_longout>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	08 95       	ret

000033f6 <menuOnEnterTune>:
    33f6:	cf 93       	push	r28
    33f8:	8f 3f       	cpi	r24, 0xFF	; 255
    33fa:	09 f0       	breq	.+2      	; 0x33fe <menuOnEnterTune+0x8>
    33fc:	77 c0       	rjmp	.+238    	; 0x34ec <menuOnEnterTune+0xf6>
    33fe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.3009>
    3402:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.3010>
    3406:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    340a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    340e:	3e 96       	adiw	r30, 0x0e	; 14
    3410:	85 91       	lpm	r24, Z+
    3412:	95 91       	lpm	r25, Z+
    3414:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3418:	84 30       	cpi	r24, 0x04	; 4
    341a:	10 f0       	brcs	.+4      	; 0x3420 <menuOnEnterTune+0x2a>
    341c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	39 c0       	rjmp	.+114    	; 0x3496 <menuOnEnterTune+0xa0>
    3424:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	e2 2f       	mov	r30, r18
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	df 01       	movw	r26, r30
    3430:	aa 0f       	add	r26, r26
    3432:	bb 1f       	adc	r27, r27
    3434:	ad 01       	movw	r20, r26
    3436:	4e 0f       	add	r20, r30
    3438:	5f 1f       	adc	r21, r31
    343a:	dc 01       	movw	r26, r24
    343c:	aa 0f       	add	r26, r26
    343e:	bb 1f       	adc	r27, r27
    3440:	a8 0f       	add	r26, r24
    3442:	b9 1f       	adc	r27, r25
    3444:	aa 0f       	add	r26, r26
    3446:	bb 1f       	adc	r27, r27
    3448:	aa 0f       	add	r26, r26
    344a:	bb 1f       	adc	r27, r27
    344c:	a4 0f       	add	r26, r20
    344e:	b5 1f       	adc	r27, r21
    3450:	ac 5c       	subi	r26, 0xCC	; 204
    3452:	b6 4f       	sbci	r27, 0xF6	; 246
    3454:	3c 91       	ld	r19, X
    3456:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.3009>
    345a:	34 17       	cp	r19, r20
    345c:	10 f4       	brcc	.+4      	; 0x3462 <menuOnEnterTune+0x6c>
    345e:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.3009>
    3462:	af 01       	movw	r20, r30
    3464:	44 0f       	add	r20, r20
    3466:	55 1f       	adc	r21, r21
    3468:	e4 0f       	add	r30, r20
    346a:	f5 1f       	adc	r31, r21
    346c:	ac 01       	movw	r20, r24
    346e:	44 0f       	add	r20, r20
    3470:	55 1f       	adc	r21, r21
    3472:	84 0f       	add	r24, r20
    3474:	95 1f       	adc	r25, r21
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	e8 0f       	add	r30, r24
    3480:	f9 1f       	adc	r31, r25
    3482:	ec 5c       	subi	r30, 0xCC	; 204
    3484:	f6 4f       	sbci	r31, 0xF6	; 246
    3486:	81 81       	ldd	r24, Z+1	; 0x01
    3488:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.3010>
    348c:	98 17       	cp	r25, r24
    348e:	10 f4       	brcc	.+4      	; 0x3494 <menuOnEnterTune+0x9e>
    3490:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.3010>
    3494:	2f 5f       	subi	r18, 0xFF	; 255
    3496:	24 30       	cpi	r18, 0x04	; 4
    3498:	28 f2       	brcs	.-118    	; 0x3424 <menuOnEnterTune+0x2e>
    349a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3009>
    349e:	88 23       	and	r24, r24
    34a0:	4c f4       	brge	.+18     	; 0x34b4 <menuOnEnterTune+0xbe>
    34a2:	8e e1       	ldi	r24, 0x1E	; 30
    34a4:	c4 d8       	rcall	.-3704   	; 0x262e <lcd_goto>
    34a6:	80 ea       	ldi	r24, 0xA0	; 160
    34a8:	93 e0       	ldi	r25, 0x03	; 3
    34aa:	33 d9       	rcall	.-3482   	; 0x2712 <lcd_puts_P>
    34ac:	8f ef       	ldi	r24, 0xFF	; 255
    34ae:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <menuOnEnterTune+0xc6>
    34b4:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    34b8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3011>
    34bc:	66 ec       	ldi	r22, 0xC6	; 198
    34be:	72 e1       	ldi	r23, 0x12	; 18
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    34c6:	65 ed       	ldi	r22, 0xD5	; 213
    34c8:	72 e1       	ldi	r23, 0x12	; 18
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    34d0:	6a ed       	ldi	r22, 0xDA	; 218
    34d2:	72 e1       	ldi	r23, 0x12	; 18
    34d4:	82 e0       	ldi	r24, 0x02	; 2
    34d6:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    34da:	6c ed       	ldi	r22, 0xDC	; 220
    34dc:	72 e1       	ldi	r23, 0x12	; 18
    34de:	83 e0       	ldi	r24, 0x03	; 3
    34e0:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    34e4:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    34e8:	cf ef       	ldi	r28, 0xFF	; 255
    34ea:	71 c0       	rjmp	.+226    	; 0x35ce <menuOnEnterTune+0x1d8>
    34ec:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34f0:	6f 3f       	cpi	r22, 0xFF	; 255
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <menuOnEnterTune+0x100>
    34f4:	61 c0       	rjmp	.+194    	; 0x35b8 <menuOnEnterTune+0x1c2>
    34f6:	81 30       	cpi	r24, 0x01	; 1
    34f8:	d9 f4       	brne	.+54     	; 0x3530 <menuOnEnterTune+0x13a>
    34fa:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.3010>
    34fe:	68 17       	cp	r22, r24
    3500:	08 f0       	brcs	.+2      	; 0x3504 <menuOnEnterTune+0x10e>
    3502:	5c c0       	rjmp	.+184    	; 0x35bc <menuOnEnterTune+0x1c6>
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    350a:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    350e:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3512:	6f 5f       	subi	r22, 0xFF	; 255
    3514:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3518:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    351c:	81 30       	cpi	r24, 0x01	; 1
    351e:	09 f0       	breq	.+2      	; 0x3522 <menuOnEnterTune+0x12c>
    3520:	4f c0       	rjmp	.+158    	; 0x35c0 <menuOnEnterTune+0x1ca>
    3522:	41 e0       	ldi	r20, 0x01	; 1
    3524:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3528:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    352c:	cf ef       	ldi	r28, 0xFF	; 255
    352e:	4f c0       	rjmp	.+158    	; 0x35ce <menuOnEnterTune+0x1d8>
    3530:	84 30       	cpi	r24, 0x04	; 4
    3532:	d1 f4       	brne	.+52     	; 0x3568 <menuOnEnterTune+0x172>
    3534:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3009>
    3538:	86 17       	cp	r24, r22
    353a:	08 f0       	brcs	.+2      	; 0x353e <menuOnEnterTune+0x148>
    353c:	43 c0       	rjmp	.+134    	; 0x35c4 <menuOnEnterTune+0x1ce>
    353e:	40 e0       	ldi	r20, 0x00	; 0
    3540:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3544:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    3548:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    354c:	61 50       	subi	r22, 0x01	; 1
    354e:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3552:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    3556:	81 30       	cpi	r24, 0x01	; 1
    3558:	b9 f5       	brne	.+110    	; 0x35c8 <menuOnEnterTune+0x1d2>
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3560:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    3564:	cf ef       	ldi	r28, 0xFF	; 255
    3566:	33 c0       	rjmp	.+102    	; 0x35ce <menuOnEnterTune+0x1d8>
    3568:	83 30       	cpi	r24, 0x03	; 3
    356a:	91 f4       	brne	.+36     	; 0x3590 <menuOnEnterTune+0x19a>
    356c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    3570:	81 11       	cpse	r24, r1
    3572:	04 c0       	rjmp	.+8      	; 0x357c <menuOnEnterTune+0x186>
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.3011>
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <menuOnEnterTune+0x18a>
    357c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3011>
    3580:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.3011>
    3584:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3588:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    358c:	cf ef       	ldi	r28, 0xFF	; 255
    358e:	1f c0       	rjmp	.+62     	; 0x35ce <menuOnEnterTune+0x1d8>
    3590:	82 30       	cpi	r24, 0x02	; 2
    3592:	11 f0       	breq	.+4      	; 0x3598 <menuOnEnterTune+0x1a2>
    3594:	86 30       	cpi	r24, 0x06	; 6
    3596:	39 f4       	brne	.+14     	; 0x35a6 <menuOnEnterTune+0x1b0>
    3598:	40 e0       	ldi	r20, 0x00	; 0
    359a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    359e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    35a2:	c0 e0       	ldi	r28, 0x00	; 0
    35a4:	14 c0       	rjmp	.+40     	; 0x35ce <menuOnEnterTune+0x1d8>
    35a6:	85 30       	cpi	r24, 0x05	; 5
    35a8:	89 f4       	brne	.+34     	; 0x35cc <menuOnEnterTune+0x1d6>
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    35b0:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <manual_NoteOnOff>
    35b4:	c0 e0       	ldi	r28, 0x00	; 0
    35b6:	0b c0       	rjmp	.+22     	; 0x35ce <menuOnEnterTune+0x1d8>
    35b8:	c0 e0       	ldi	r28, 0x00	; 0
    35ba:	09 c0       	rjmp	.+18     	; 0x35ce <menuOnEnterTune+0x1d8>
    35bc:	cf ef       	ldi	r28, 0xFF	; 255
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <menuOnEnterTune+0x1d8>
    35c0:	cf ef       	ldi	r28, 0xFF	; 255
    35c2:	05 c0       	rjmp	.+10     	; 0x35ce <menuOnEnterTune+0x1d8>
    35c4:	cf ef       	ldi	r28, 0xFF	; 255
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <menuOnEnterTune+0x1d8>
    35c8:	cf ef       	ldi	r28, 0xFF	; 255
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <menuOnEnterTune+0x1d8>
    35cc:	cf ef       	ldi	r28, 0xFF	; 255
    35ce:	cf 3f       	cpi	r28, 0xFF	; 255
    35d0:	59 f5       	brne	.+86     	; 0x3628 <menuOnEnterTune+0x232>
    35d2:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    35d6:	8f 3f       	cpi	r24, 0xFF	; 255
    35d8:	29 f1       	breq	.+74     	; 0x3624 <menuOnEnterTune+0x22e>
    35da:	8e e1       	ldi	r24, 0x1E	; 30
    35dc:	28 d8       	rcall	.-4016   	; 0x262e <lcd_goto>
    35de:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    35e2:	0e 94 31 3b 	call	0x7662	; 0x7662 <lcd_noteOut>
    35e6:	80 e2       	ldi	r24, 0x20	; 32
    35e8:	4c d8       	rcall	.-3944   	; 0x2682 <lcd_putc>
    35ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    35ee:	81 11       	cpse	r24, r1
    35f0:	07 c0       	rjmp	.+14     	; 0x3600 <menuOnEnterTune+0x20a>
    35f2:	81 e6       	ldi	r24, 0x61	; 97
    35f4:	46 d8       	rcall	.-3956   	; 0x2682 <lcd_putc>
    35f6:	85 e7       	ldi	r24, 0x75	; 117
    35f8:	44 d8       	rcall	.-3960   	; 0x2682 <lcd_putc>
    35fa:	83 e7       	ldi	r24, 0x73	; 115
    35fc:	42 d8       	rcall	.-3964   	; 0x2682 <lcd_putc>
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <menuOnEnterTune+0x216>
    3600:	85 e6       	ldi	r24, 0x65	; 101
    3602:	3f d8       	rcall	.-3970   	; 0x2682 <lcd_putc>
    3604:	89 e6       	ldi	r24, 0x69	; 105
    3606:	3d d8       	rcall	.-3974   	; 0x2682 <lcd_putc>
    3608:	8e e6       	ldi	r24, 0x6E	; 110
    360a:	3b d8       	rcall	.-3978   	; 0x2682 <lcd_putc>
    360c:	61 e0       	ldi	r22, 0x01	; 1
    360e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    3612:	81 11       	cpse	r24, r1
    3614:	01 c0       	rjmp	.+2      	; 0x3618 <menuOnEnterTune+0x222>
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	0e 94 5f 3c 	call	0x78be	; 0x78be <keylabel_statcheck>
    361e:	81 11       	cpse	r24, r1
    3620:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    3624:	8e e1       	ldi	r24, 0x1E	; 30
    3626:	03 d8       	rcall	.-4090   	; 0x262e <lcd_goto>
    3628:	8c 2f       	mov	r24, r28
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <menuOnExitMidiActiveSense>:
    362e:	0e 94 23 0c 	call	0x1846	; 0x1846 <eeprom_UpdateMidiOutMap>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	08 95       	ret

00003636 <menuOnExitMidiOut>:
    3636:	0e 94 23 0c 	call	0x1846	; 0x1846 <eeprom_UpdateMidiOutMap>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	08 95       	ret

0000363e <menuOnExitMidiIn>:
    363e:	0e 94 01 0c 	call	0x1802	; 0x1802 <eeprom_UpdateMidiInMap>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	08 95       	ret

00003646 <menuOnExitManual>:
    3646:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_UpdateManualMap>
    364a:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <registers_CalcCount>
    364e:	0e 94 bf 0c 	call	0x197e	; 0x197e <eeprom_UpdateReg>
    3652:	0e 94 61 31 	call	0x62c2	; 0x62c2 <Midi_updateManualRange>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	08 95       	ret

0000365a <menuOnExitModules>:
    365a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <eeprom_UpdateModules>
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	08 95       	ret

00003662 <menuOnEnterUSBprotokoll>:
    3662:	cf 93       	push	r28
    3664:	83 e8       	ldi	r24, 0x83	; 131
    3666:	93 e0       	ldi	r25, 0x03	; 3
    3668:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    366c:	6d d8       	rcall	.-3878   	; 0x2748 <log_count>
    366e:	81 11       	cpse	r24, r1
    3670:	17 c0       	rjmp	.+46     	; 0x36a0 <menuOnEnterUSBprotokoll+0x3e>
    3672:	89 e8       	ldi	r24, 0x89	; 137
    3674:	93 e0       	ldi	r25, 0x03	; 3
    3676:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    367a:	16 c0       	rjmp	.+44     	; 0x36a8 <menuOnEnterUSBprotokoll+0x46>
    367c:	6f ef       	ldi	r22, 0xFF	; 255
    367e:	8c 2f       	mov	r24, r28
    3680:	04 da       	rcall	.-3064   	; 0x2a8a <log_getShortTextFromIndex>
    3682:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3686:	8e ef       	ldi	r24, 0xFE	; 254
    3688:	92 e1       	ldi	r25, 0x12	; 18
    368a:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    368e:	8c 2f       	mov	r24, r28
    3690:	a2 d8       	rcall	.-3772   	; 0x27d6 <log_getErrorText>
    3692:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3696:	8e ef       	ldi	r24, 0xFE	; 254
    3698:	92 e1       	ldi	r25, 0x12	; 18
    369a:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    369e:	8c 2f       	mov	r24, r28
    36a0:	cf ef       	ldi	r28, 0xFF	; 255
    36a2:	c8 0f       	add	r28, r24
    36a4:	81 11       	cpse	r24, r1
    36a6:	ea cf       	rjmp	.-44     	; 0x367c <menuOnEnterUSBprotokoll+0x1a>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	cf 91       	pop	r28
    36ac:	08 95       	ret

000036ae <menuOnExitUSBactive>:
    36ae:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <eeprom_UpdateUSB>
    36b2:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    36b6:	8f 3f       	cpi	r24, 0xFF	; 255
    36b8:	61 f4       	brne	.+24     	; 0x36d2 <menuOnExitUSBactive+0x24>
    36ba:	8a e6       	ldi	r24, 0x6A	; 106
    36bc:	93 e0       	ldi	r25, 0x03	; 3
    36be:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    36c2:	8e e9       	ldi	r24, 0x9E	; 158
    36c4:	92 e1       	ldi	r25, 0x12	; 18
    36c6:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    36ca:	8e ef       	ldi	r24, 0xFE	; 254
    36cc:	92 e1       	ldi	r25, 0x12	; 18
    36ce:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	08 95       	ret

000036d6 <menuOnEnterUSBsendHW>:
    36d6:	9f 92       	push	r9
    36d8:	af 92       	push	r10
    36da:	bf 92       	push	r11
    36dc:	cf 92       	push	r12
    36de:	df 92       	push	r13
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	81 e5       	ldi	r24, 0x51	; 81
    36ee:	93 e0       	ldi	r25, 0x03	; 3
    36f0:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    36f4:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    36f8:	8e e3       	ldi	r24, 0x3E	; 62
    36fa:	93 e0       	ldi	r25, 0x03	; 3
    36fc:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3700:	c5 e5       	ldi	r28, 0x55	; 85
    3702:	d3 e0       	ldi	r29, 0x03	; 3
    3704:	61 ee       	ldi	r22, 0xE1	; 225
    3706:	78 e1       	ldi	r23, 0x18	; 24
    3708:	88 81       	ld	r24, Y
    370a:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    370e:	22 e7       	ldi	r18, 0x72	; 114
    3710:	fc 01       	movw	r30, r24
    3712:	20 83       	st	Z, r18
    3714:	bc 01       	movw	r22, r24
    3716:	6e 5f       	subi	r22, 0xFE	; 254
    3718:	7f 4f       	sbci	r23, 0xFF	; 255
    371a:	20 e2       	ldi	r18, 0x20	; 32
    371c:	21 83       	std	Z+1, r18	; 0x01
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    3724:	27 e7       	ldi	r18, 0x77	; 119
    3726:	fc 01       	movw	r30, r24
    3728:	20 83       	st	Z, r18
    372a:	81 ee       	ldi	r24, 0xE1	; 225
    372c:	98 e1       	ldi	r25, 0x18	; 24
    372e:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3732:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3736:	8c e2       	ldi	r24, 0x2C	; 44
    3738:	93 e0       	ldi	r25, 0x03	; 3
    373a:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    373e:	61 ee       	ldi	r22, 0xE1	; 225
    3740:	78 e1       	ldi	r23, 0x18	; 24
    3742:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    3746:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    374a:	81 ee       	ldi	r24, 0xE1	; 225
    374c:	98 e1       	ldi	r25, 0x18	; 24
    374e:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3752:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3756:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    375a:	e1 2c       	mov	r14, r1
    375c:	d1 c0       	rjmp	.+418    	; 0x3900 <menuOnEnterUSBsendHW+0x22a>
    375e:	83 e2       	ldi	r24, 0x23	; 35
    3760:	93 e0       	ldi	r25, 0x03	; 3
    3762:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3766:	61 ee       	ldi	r22, 0xE1	; 225
    3768:	78 e1       	ldi	r23, 0x18	; 24
    376a:	8e 2d       	mov	r24, r14
    376c:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <putChar_Manual>
    3770:	81 ee       	ldi	r24, 0xE1	; 225
    3772:	98 e1       	ldi	r25, 0x18	; 24
    3774:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3778:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    377c:	f1 2c       	mov	r15, r1
    377e:	a4 c0       	rjmp	.+328    	; 0x38c8 <menuOnEnterUSBsendHW+0x1f2>
    3780:	8c e1       	ldi	r24, 0x1C	; 28
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3788:	80 e3       	ldi	r24, 0x30	; 48
    378a:	8f 0d       	add	r24, r15
    378c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    3790:	8a e3       	ldi	r24, 0x3A	; 58
    3792:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    3796:	80 e2       	ldi	r24, 0x20	; 32
    3798:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    379c:	0e 2d       	mov	r16, r14
    379e:	10 e0       	ldi	r17, 0x00	; 0
    37a0:	cf 2c       	mov	r12, r15
    37a2:	d1 2c       	mov	r13, r1
    37a4:	e6 01       	movw	r28, r12
    37a6:	cc 0f       	add	r28, r28
    37a8:	dd 1f       	adc	r29, r29
    37aa:	ce 01       	movw	r24, r28
    37ac:	8c 0d       	add	r24, r12
    37ae:	9d 1d       	adc	r25, r13
    37b0:	e8 01       	movw	r28, r16
    37b2:	cc 0f       	add	r28, r28
    37b4:	dd 1f       	adc	r29, r29
    37b6:	c0 0f       	add	r28, r16
    37b8:	d1 1f       	adc	r29, r17
    37ba:	cc 0f       	add	r28, r28
    37bc:	dd 1f       	adc	r29, r29
    37be:	cc 0f       	add	r28, r28
    37c0:	dd 1f       	adc	r29, r29
    37c2:	c8 0f       	add	r28, r24
    37c4:	d9 1f       	adc	r29, r25
    37c6:	cc 5c       	subi	r28, 0xCC	; 204
    37c8:	d6 4f       	sbci	r29, 0xF6	; 246
    37ca:	61 ee       	ldi	r22, 0xE1	; 225
    37cc:	78 e1       	ldi	r23, 0x18	; 24
    37ce:	88 81       	ld	r24, Y
    37d0:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    37d4:	bc 01       	movw	r22, r24
    37d6:	6f 5f       	subi	r22, 0xFF	; 255
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	0f 2e       	mov	r0, r31
    37dc:	fe e2       	ldi	r31, 0x2E	; 46
    37de:	bf 2e       	mov	r11, r31
    37e0:	f0 2d       	mov	r31, r0
    37e2:	fc 01       	movw	r30, r24
    37e4:	b0 82       	st	Z, r11
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    37ec:	bc 01       	movw	r22, r24
    37ee:	6f 5f       	subi	r22, 0xFF	; 255
    37f0:	7f 4f       	sbci	r23, 0xFF	; 255
    37f2:	fc 01       	movw	r30, r24
    37f4:	b0 82       	st	Z, r11
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    37fc:	fc 01       	movw	r30, r24
    37fe:	80 e2       	ldi	r24, 0x20	; 32
    3800:	80 83       	st	Z, r24
    3802:	9d e3       	ldi	r25, 0x3D	; 61
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	82 83       	std	Z+2, r24	; 0x02
    3808:	81 ee       	ldi	r24, 0xE1	; 225
    380a:	98 e1       	ldi	r25, 0x18	; 24
    380c:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3810:	88 81       	ld	r24, Y
    3812:	88 23       	and	r24, r24
    3814:	2c f4       	brge	.+10     	; 0x3820 <menuOnEnterUSBsendHW+0x14a>
    3816:	8a e0       	ldi	r24, 0x0A	; 10
    3818:	93 e0       	ldi	r25, 0x03	; 3
    381a:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    381e:	51 c0       	rjmp	.+162    	; 0x38c2 <menuOnEnterUSBsendHW+0x1ec>
    3820:	61 ee       	ldi	r22, 0xE1	; 225
    3822:	78 e1       	ldi	r23, 0x18	; 24
    3824:	0e 94 8e 3a 	call	0x751c	; 0x751c <putChar_Note>
    3828:	bc 01       	movw	r22, r24
    382a:	6f 5f       	subi	r22, 0xFF	; 255
    382c:	7f 4f       	sbci	r23, 0xFF	; 255
    382e:	0f 2e       	mov	r0, r31
    3830:	fd e2       	ldi	r31, 0x2D	; 45
    3832:	9f 2e       	mov	r9, r31
    3834:	f0 2d       	mov	r31, r0
    3836:	fc 01       	movw	r30, r24
    3838:	90 82       	st	Z, r9
    383a:	f6 01       	movw	r30, r12
    383c:	ee 0f       	add	r30, r30
    383e:	ff 1f       	adc	r31, r31
    3840:	ce 0e       	add	r12, r30
    3842:	df 1e       	adc	r13, r31
    3844:	58 01       	movw	r10, r16
    3846:	aa 0c       	add	r10, r10
    3848:	bb 1c       	adc	r11, r11
    384a:	e5 01       	movw	r28, r10
    384c:	c0 0f       	add	r28, r16
    384e:	d1 1f       	adc	r29, r17
    3850:	cc 0f       	add	r28, r28
    3852:	dd 1f       	adc	r29, r29
    3854:	cc 0f       	add	r28, r28
    3856:	dd 1f       	adc	r29, r29
    3858:	cc 0d       	add	r28, r12
    385a:	dd 1d       	adc	r29, r13
    385c:	cc 5c       	subi	r28, 0xCC	; 204
    385e:	d6 4f       	sbci	r29, 0xF6	; 246
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	0e 94 8e 3a 	call	0x751c	; 0x751c <putChar_Note>
    3866:	20 e2       	ldi	r18, 0x20	; 32
    3868:	fc 01       	movw	r30, r24
    386a:	20 83       	st	Z, r18
    386c:	11 82       	std	Z+1, r1	; 0x01
    386e:	81 ee       	ldi	r24, 0xE1	; 225
    3870:	98 e1       	ldi	r25, 0x18	; 24
    3872:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3876:	82 e0       	ldi	r24, 0x02	; 2
    3878:	93 e0       	ldi	r25, 0x03	; 3
    387a:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	82 95       	swap	r24
    3882:	86 95       	lsr	r24
    3884:	87 70       	andi	r24, 0x07	; 7
    3886:	80 5d       	subi	r24, 0xD0	; 208
    3888:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    388c:	8a ef       	ldi	r24, 0xFA	; 250
    388e:	92 e0       	ldi	r25, 0x02	; 2
    3890:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	61 ee       	ldi	r22, 0xE1	; 225
    3898:	78 e1       	ldi	r23, 0x18	; 24
    389a:	8f 71       	andi	r24, 0x1F	; 31
    389c:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    38a0:	bc 01       	movw	r22, r24
    38a2:	6f 5f       	subi	r22, 0xFF	; 255
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	fc 01       	movw	r30, r24
    38a8:	90 82       	st	Z, r9
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	99 81       	ldd	r25, Y+1	; 0x01
    38ae:	28 81       	ld	r18, Y
    38b0:	8f 71       	andi	r24, 0x1F	; 31
    38b2:	89 0f       	add	r24, r25
    38b4:	82 1b       	sub	r24, r18
    38b6:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    38ba:	81 ee       	ldi	r24, 0xE1	; 225
    38bc:	98 e1       	ldi	r25, 0x18	; 24
    38be:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    38c2:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    38c6:	f3 94       	inc	r15
    38c8:	f3 e0       	ldi	r31, 0x03	; 3
    38ca:	ff 15       	cp	r31, r15
    38cc:	08 f0       	brcs	.+2      	; 0x38d0 <menuOnEnterUSBsendHW+0x1fa>
    38ce:	58 cf       	rjmp	.-336    	; 0x3780 <menuOnEnterUSBsendHW+0xaa>
    38d0:	88 ed       	ldi	r24, 0xD8	; 216
    38d2:	92 e0       	ldi	r25, 0x02	; 2
    38d4:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    38d8:	ee 2d       	mov	r30, r14
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	e8 5d       	subi	r30, 0xD8	; 216
    38e2:	f6 4f       	sbci	r31, 0xF6	; 246
    38e4:	61 ee       	ldi	r22, 0xE1	; 225
    38e6:	78 e1       	ldi	r23, 0x18	; 24
    38e8:	81 81       	ldd	r24, Z+1	; 0x01
    38ea:	0e 94 4e 3a 	call	0x749c	; 0x749c <putChar_MidiChan>
    38ee:	81 ee       	ldi	r24, 0xE1	; 225
    38f0:	98 e1       	ldi	r25, 0x18	; 24
    38f2:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    38f6:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    38fa:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    38fe:	e3 94       	inc	r14
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	8e 15       	cp	r24, r14
    3904:	08 f0       	brcs	.+2      	; 0x3908 <menuOnEnterUSBsendHW+0x232>
    3906:	2b cf       	rjmp	.-426    	; 0x375e <menuOnEnterUSBsendHW+0x88>
    3908:	80 e1       	ldi	r24, 0x10	; 16
    390a:	93 e0       	ldi	r25, 0x03	; 3
    390c:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3910:	f1 2c       	mov	r15, r1
    3912:	94 c0       	rjmp	.+296    	; 0x3a3c <menuOnEnterUSBsendHW+0x366>
    3914:	8c e1       	ldi	r24, 0x1C	; 28
    3916:	93 e0       	ldi	r25, 0x03	; 3
    3918:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    391c:	80 e3       	ldi	r24, 0x30	; 48
    391e:	8f 0d       	add	r24, r15
    3920:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    3924:	8a e3       	ldi	r24, 0x3A	; 58
    3926:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    392a:	80 e2       	ldi	r24, 0x20	; 32
    392c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    3930:	cf 2d       	mov	r28, r15
    3932:	d0 e0       	ldi	r29, 0x00	; 0
    3934:	8e 01       	movw	r16, r28
    3936:	00 0f       	add	r16, r16
    3938:	11 1f       	adc	r17, r17
    393a:	0c 0f       	add	r16, r28
    393c:	1d 1f       	adc	r17, r29
    393e:	09 50       	subi	r16, 0x09	; 9
    3940:	18 4f       	sbci	r17, 0xF8	; 248
    3942:	61 ee       	ldi	r22, 0xE1	; 225
    3944:	78 e1       	ldi	r23, 0x18	; 24
    3946:	f8 01       	movw	r30, r16
    3948:	80 81       	ld	r24, Z
    394a:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    394e:	bc 01       	movw	r22, r24
    3950:	6f 5f       	subi	r22, 0xFF	; 255
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	0f 2e       	mov	r0, r31
    3956:	fe e2       	ldi	r31, 0x2E	; 46
    3958:	ef 2e       	mov	r14, r31
    395a:	f0 2d       	mov	r31, r0
    395c:	fc 01       	movw	r30, r24
    395e:	e0 82       	st	Z, r14
    3960:	f8 01       	movw	r30, r16
    3962:	81 81       	ldd	r24, Z+1	; 0x01
    3964:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    3968:	bc 01       	movw	r22, r24
    396a:	6f 5f       	subi	r22, 0xFF	; 255
    396c:	7f 4f       	sbci	r23, 0xFF	; 255
    396e:	fc 01       	movw	r30, r24
    3970:	e0 82       	st	Z, r14
    3972:	f8 01       	movw	r30, r16
    3974:	82 81       	ldd	r24, Z+2	; 0x02
    3976:	0e 94 36 3a 	call	0x746c	; 0x746c <putChar_hex>
    397a:	fc 01       	movw	r30, r24
    397c:	80 e2       	ldi	r24, 0x20	; 32
    397e:	80 83       	st	Z, r24
    3980:	9d e3       	ldi	r25, 0x3D	; 61
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	82 83       	std	Z+2, r24	; 0x02
    3986:	13 82       	std	Z+3, r1	; 0x03
    3988:	81 ee       	ldi	r24, 0xE1	; 225
    398a:	98 e1       	ldi	r25, 0x18	; 24
    398c:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3990:	f8 01       	movw	r30, r16
    3992:	80 81       	ld	r24, Z
    3994:	8f 3f       	cpi	r24, 0xFF	; 255
    3996:	29 f4       	brne	.+10     	; 0x39a2 <menuOnEnterUSBsendHW+0x2cc>
    3998:	8a e0       	ldi	r24, 0x0A	; 10
    399a:	93 e0       	ldi	r25, 0x03	; 3
    399c:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    39a0:	4a c0       	rjmp	.+148    	; 0x3a36 <menuOnEnterUSBsendHW+0x360>
    39a2:	e1 ee       	ldi	r30, 0xE1	; 225
    39a4:	f8 e1       	ldi	r31, 0x18	; 24
    39a6:	92 e5       	ldi	r25, 0x52	; 82
    39a8:	90 83       	st	Z, r25
    39aa:	9e e2       	ldi	r25, 0x2E	; 46
    39ac:	91 83       	std	Z+1, r25	; 0x01
    39ae:	63 ee       	ldi	r22, 0xE3	; 227
    39b0:	78 e1       	ldi	r23, 0x18	; 24
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_Dec>
    39b8:	bc 01       	movw	r22, r24
    39ba:	6f 5f       	subi	r22, 0xFF	; 255
    39bc:	7f 4f       	sbci	r23, 0xFF	; 255
    39be:	1d e2       	ldi	r17, 0x2D	; 45
    39c0:	fc 01       	movw	r30, r24
    39c2:	10 83       	st	Z, r17
    39c4:	ce 01       	movw	r24, r28
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	c8 0f       	add	r28, r24
    39cc:	d9 1f       	adc	r29, r25
    39ce:	c9 50       	subi	r28, 0x09	; 9
    39d0:	d8 4f       	sbci	r29, 0xF8	; 248
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	8f 5f       	subi	r24, 0xFF	; 255
    39d6:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_Dec>
    39da:	20 e2       	ldi	r18, 0x20	; 32
    39dc:	fc 01       	movw	r30, r24
    39de:	20 83       	st	Z, r18
    39e0:	11 82       	std	Z+1, r1	; 0x01
    39e2:	81 ee       	ldi	r24, 0xE1	; 225
    39e4:	98 e1       	ldi	r25, 0x18	; 24
    39e6:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	93 e0       	ldi	r25, 0x03	; 3
    39ee:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	82 95       	swap	r24
    39f6:	86 95       	lsr	r24
    39f8:	87 70       	andi	r24, 0x07	; 7
    39fa:	80 5d       	subi	r24, 0xD0	; 208
    39fc:	0e 94 6f 36 	call	0x6cde	; 0x6cde <serial0SER_USBSend>
    3a00:	8a ef       	ldi	r24, 0xFA	; 250
    3a02:	92 e0       	ldi	r25, 0x02	; 2
    3a04:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	61 ee       	ldi	r22, 0xE1	; 225
    3a0c:	78 e1       	ldi	r23, 0x18	; 24
    3a0e:	8f 71       	andi	r24, 0x1F	; 31
    3a10:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    3a14:	bc 01       	movw	r22, r24
    3a16:	6f 5f       	subi	r22, 0xFF	; 255
    3a18:	7f 4f       	sbci	r23, 0xFF	; 255
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	10 83       	st	Z, r17
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	99 81       	ldd	r25, Y+1	; 0x01
    3a22:	28 81       	ld	r18, Y
    3a24:	8f 71       	andi	r24, 0x1F	; 31
    3a26:	89 0f       	add	r24, r25
    3a28:	82 1b       	sub	r24, r18
    3a2a:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <putChar_Dec2>
    3a2e:	81 ee       	ldi	r24, 0xE1	; 225
    3a30:	98 e1       	ldi	r25, 0x18	; 24
    3a32:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3a36:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3a3a:	f3 94       	inc	r15
    3a3c:	f7 e0       	ldi	r31, 0x07	; 7
    3a3e:	ff 15       	cp	r31, r15
    3a40:	08 f0       	brcs	.+2      	; 0x3a44 <menuOnEnterUSBsendHW+0x36e>
    3a42:	68 cf       	rjmp	.-304    	; 0x3914 <menuOnEnterUSBsendHW+0x23e>
    3a44:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3a48:	8f ec       	ldi	r24, 0xCF	; 207
    3a4a:	92 e0       	ldi	r25, 0x02	; 2
    3a4c:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3a50:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3a54:	e1 2c       	mov	r14, r1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	64 c0       	rjmp	.+200    	; 0x3b22 <menuOnEnterUSBsendHW+0x44c>
    3a5a:	ce 2d       	mov	r28, r14
    3a5c:	d0 e0       	ldi	r29, 0x00	; 0
    3a5e:	0f 2d       	mov	r16, r15
    3a60:	10 e0       	ldi	r17, 0x00	; 0
    3a62:	fe 01       	movw	r30, r28
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	e0 0f       	add	r30, r16
    3a6e:	f1 1f       	adc	r31, r17
    3a70:	ee 0f       	add	r30, r30
    3a72:	ff 1f       	adc	r31, r31
    3a74:	ee 0f       	add	r30, r30
    3a76:	ff 1f       	adc	r31, r31
    3a78:	e8 5d       	subi	r30, 0xD8	; 216
    3a7a:	f7 4f       	sbci	r31, 0xF7	; 247
    3a7c:	80 81       	ld	r24, Z
    3a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <menuOnEnterUSBsendHW+0x3ae>
    3a82:	47 c0       	rjmp	.+142    	; 0x3b12 <menuOnEnterUSBsendHW+0x43c>
    3a84:	61 ee       	ldi	r22, 0xE1	; 225
    3a86:	78 e1       	ldi	r23, 0x18	; 24
    3a88:	8e 2d       	mov	r24, r14
    3a8a:	0e 94 4e 3a 	call	0x749c	; 0x749c <putChar_MidiChan>
    3a8e:	bc 01       	movw	r22, r24
    3a90:	6f 5f       	subi	r22, 0xFF	; 255
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255
    3a94:	0f 2e       	mov	r0, r31
    3a96:	f8 e2       	ldi	r31, 0x28	; 40
    3a98:	df 2e       	mov	r13, r31
    3a9a:	f0 2d       	mov	r31, r0
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	d0 82       	st	Z, r13
    3aa0:	cc 0f       	add	r28, r28
    3aa2:	dd 1f       	adc	r29, r29
    3aa4:	cc 0f       	add	r28, r28
    3aa6:	dd 1f       	adc	r29, r29
    3aa8:	c0 0f       	add	r28, r16
    3aaa:	d1 1f       	adc	r29, r17
    3aac:	cc 0f       	add	r28, r28
    3aae:	dd 1f       	adc	r29, r29
    3ab0:	cc 0f       	add	r28, r28
    3ab2:	dd 1f       	adc	r29, r29
    3ab4:	c8 5d       	subi	r28, 0xD8	; 216
    3ab6:	d7 4f       	sbci	r29, 0xF7	; 247
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	0e 94 8e 3a 	call	0x751c	; 0x751c <putChar_Note>
    3abe:	bc 01       	movw	r22, r24
    3ac0:	6f 5f       	subi	r22, 0xFF	; 255
    3ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac4:	2d e2       	ldi	r18, 0x2D	; 45
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	20 83       	st	Z, r18
    3aca:	99 81       	ldd	r25, Y+1	; 0x01
    3acc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ace:	89 0f       	add	r24, r25
    3ad0:	0e 94 8e 3a 	call	0x751c	; 0x751c <putChar_Note>
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	19 e2       	ldi	r17, 0x29	; 41
    3ad8:	10 83       	st	Z, r17
    3ada:	80 e2       	ldi	r24, 0x20	; 32
    3adc:	81 83       	std	Z+1, r24	; 0x01
    3ade:	bf 01       	movw	r22, r30
    3ae0:	6d 5f       	subi	r22, 0xFD	; 253
    3ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae4:	8e e3       	ldi	r24, 0x3E	; 62
    3ae6:	82 83       	std	Z+2, r24	; 0x02
    3ae8:	88 81       	ld	r24, Y
    3aea:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <putChar_Manual>
    3aee:	bc 01       	movw	r22, r24
    3af0:	6f 5f       	subi	r22, 0xFF	; 255
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	fc 01       	movw	r30, r24
    3af6:	d0 82       	st	Z, r13
    3af8:	8b 81       	ldd	r24, Y+3	; 0x03
    3afa:	0e 94 8e 3a 	call	0x751c	; 0x751c <putChar_Note>
    3afe:	fc 01       	movw	r30, r24
    3b00:	10 83       	st	Z, r17
    3b02:	11 82       	std	Z+1, r1	; 0x01
    3b04:	81 ee       	ldi	r24, 0xE1	; 225
    3b06:	98 e1       	ldi	r25, 0x18	; 24
    3b08:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3b0c:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b10:	9f ef       	ldi	r25, 0xFF	; 255
    3b12:	f3 94       	inc	r15
    3b14:	01 c0       	rjmp	.+2      	; 0x3b18 <menuOnEnterUSBsendHW+0x442>
    3b16:	f1 2c       	mov	r15, r1
    3b18:	f3 e0       	ldi	r31, 0x03	; 3
    3b1a:	ff 15       	cp	r31, r15
    3b1c:	08 f0       	brcs	.+2      	; 0x3b20 <menuOnEnterUSBsendHW+0x44a>
    3b1e:	9d cf       	rjmp	.-198    	; 0x3a5a <menuOnEnterUSBsendHW+0x384>
    3b20:	e3 94       	inc	r14
    3b22:	8f e0       	ldi	r24, 0x0F	; 15
    3b24:	8e 15       	cp	r24, r14
    3b26:	b8 f7       	brcc	.-18     	; 0x3b16 <menuOnEnterUSBsendHW+0x440>
    3b28:	91 11       	cpse	r25, r1
    3b2a:	06 c0       	rjmp	.+12     	; 0x3b38 <menuOnEnterUSBsendHW+0x462>
    3b2c:	84 eb       	ldi	r24, 0xB4	; 180
    3b2e:	92 e0       	ldi	r25, 0x02	; 2
    3b30:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3b34:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b38:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b3c:	85 ec       	ldi	r24, 0xC5	; 197
    3b3e:	92 e0       	ldi	r25, 0x02	; 2
    3b40:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3b44:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b48:	c0 e0       	ldi	r28, 0x00	; 0
    3b4a:	25 c0       	rjmp	.+74     	; 0x3b96 <menuOnEnterUSBsendHW+0x4c0>
    3b4c:	61 ee       	ldi	r22, 0xE1	; 225
    3b4e:	78 e1       	ldi	r23, 0x18	; 24
    3b50:	8c 2f       	mov	r24, r28
    3b52:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <putChar_Manual>
    3b56:	dc 01       	movw	r26, r24
    3b58:	bc 01       	movw	r22, r24
    3b5a:	6f 5f       	subi	r22, 0xFF	; 255
    3b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5e:	8a e3       	ldi	r24, 0x3A	; 58
    3b60:	8c 93       	st	X, r24
    3b62:	ec 2f       	mov	r30, r28
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	ee 0f       	add	r30, r30
    3b68:	ff 1f       	adc	r31, r31
    3b6a:	e8 5d       	subi	r30, 0xD8	; 216
    3b6c:	f6 4f       	sbci	r31, 0xF6	; 246
    3b6e:	80 81       	ld	r24, Z
    3b70:	8f 3f       	cpi	r24, 0xFF	; 255
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <menuOnEnterUSBsendHW+0x4a4>
    3b74:	0e 94 4e 3a 	call	0x749c	; 0x749c <putChar_MidiChan>
    3b78:	05 c0       	rjmp	.+10     	; 0x3b84 <menuOnEnterUSBsendHW+0x4ae>
    3b7a:	cd 01       	movw	r24, r26
    3b7c:	02 96       	adiw	r24, 0x02	; 2
    3b7e:	2d e2       	ldi	r18, 0x2D	; 45
    3b80:	11 96       	adiw	r26, 0x01	; 1
    3b82:	2c 93       	st	X, r18
    3b84:	fc 01       	movw	r30, r24
    3b86:	10 82       	st	Z, r1
    3b88:	81 ee       	ldi	r24, 0xE1	; 225
    3b8a:	98 e1       	ldi	r25, 0x18	; 24
    3b8c:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3b90:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b94:	cf 5f       	subi	r28, 0xFF	; 255
    3b96:	c4 30       	cpi	r28, 0x04	; 4
    3b98:	c8 f2       	brcs	.-78     	; 0x3b4c <menuOnEnterUSBsendHW+0x476>
    3b9a:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3b9e:	89 eb       	ldi	r24, 0xB9	; 185
    3ba0:	92 e0       	ldi	r25, 0x02	; 2
    3ba2:	0e 94 65 37 	call	0x6eca	; 0x6eca <serial0SER_USB_sendStringP>
    3ba6:	c6 e2       	ldi	r28, 0x26	; 38
    3ba8:	d8 e0       	ldi	r29, 0x08	; 8
    3baa:	61 ee       	ldi	r22, 0xE1	; 225
    3bac:	78 e1       	ldi	r23, 0x18	; 24
    3bae:	88 81       	ld	r24, Y
    3bb0:	0e 94 4e 3a 	call	0x749c	; 0x749c <putChar_MidiChan>
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	6f 5f       	subi	r22, 0xFF	; 255
    3bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bba:	2e e3       	ldi	r18, 0x3E	; 62
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	20 83       	st	Z, r18
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	0e 94 4e 3a 	call	0x749c	; 0x749c <putChar_MidiChan>
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	10 82       	st	Z, r1
    3bca:	81 ee       	ldi	r24, 0xE1	; 225
    3bcc:	98 e1       	ldi	r25, 0x18	; 24
    3bce:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <serial0SER_USB_sendString>
    3bd2:	0e 94 77 37 	call	0x6eee	; 0x6eee <serial0SER_USB_sendCRLF>
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	ff 90       	pop	r15
    3be2:	ef 90       	pop	r14
    3be4:	df 90       	pop	r13
    3be6:	cf 90       	pop	r12
    3be8:	bf 90       	pop	r11
    3bea:	af 90       	pop	r10
    3bec:	9f 90       	pop	r9
    3bee:	08 95       	ret

00003bf0 <reverseRegisterBits>:
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	10 e0       	ldi	r17, 0x00	; 0
    3bf8:	09 c0       	rjmp	.+18     	; 0x3c0c <reverseRegisterBits+0x1c>
    3bfa:	c1 2f       	mov	r28, r17
    3bfc:	d0 e0       	ldi	r29, 0x00	; 0
    3bfe:	c3 59       	subi	r28, 0x93	; 147
    3c00:	da 4f       	sbci	r29, 0xFA	; 250
    3c02:	88 81       	ld	r24, Y
    3c04:	0e 94 96 3c 	call	0x792c	; 0x792c <reverse_Bits>
    3c08:	88 83       	st	Y, r24
    3c0a:	1f 5f       	subi	r17, 0xFF	; 255
    3c0c:	18 30       	cpi	r17, 0x08	; 8
    3c0e:	a8 f3       	brcs	.-22     	; 0x3bfa <reverseRegisterBits+0xa>
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	1f 91       	pop	r17
    3c16:	08 95       	ret

00003c18 <menuOnUpdateRegister>:
    3c18:	8d e6       	ldi	r24, 0x6D	; 109
    3c1a:	95 e0       	ldi	r25, 0x05	; 5
    3c1c:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <read_allRegister>
    3c20:	e7 df       	rcall	.-50     	; 0x3bf0 <reverseRegisterBits>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	08 95       	ret

00003c26 <menuOnEnterResetReg>:
    3c26:	0e 94 b7 30 	call	0x616e	; 0x616e <midi_resetRegisters>
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	f5 df       	rcall	.-22     	; 0x3c18 <menuOnUpdateRegister>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	08 95       	ret

00003c32 <menuOnExitLoadProgran>:
    3c32:	86 30       	cpi	r24, 0x06	; 6
    3c34:	31 f0       	breq	.+12     	; 0x3c42 <menuOnExitLoadProgran+0x10>
    3c36:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3c3a:	80 34       	cpi	r24, 0x40	; 64
    3c3c:	10 f4       	brcc	.+4      	; 0x3c42 <menuOnExitLoadProgran+0x10>
    3c3e:	0e 94 25 30 	call	0x604a	; 0x604a <program_toRegister>
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	e9 df       	rcall	.-46     	; 0x3c18 <menuOnUpdateRegister>
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	08 95       	ret

00003c4a <softkeyCoupler>:
    3c4a:	cf 93       	push	r28
    3c4c:	c6 2f       	mov	r28, r22
    3c4e:	88 23       	and	r24, r24
    3c50:	d9 f0       	breq	.+54     	; 0x3c88 <softkeyCoupler+0x3e>
    3c52:	e6 2f       	mov	r30, r22
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	df 01       	movw	r26, r30
    3c58:	af 5e       	subi	r26, 0xEF	; 239
    3c5a:	b7 4f       	sbci	r27, 0xF7	; 247
    3c5c:	8c 91       	ld	r24, X
    3c5e:	81 11       	cpse	r24, r1
    3c60:	08 c0       	rjmp	.+16     	; 0x3c72 <softkeyCoupler+0x28>
    3c62:	86 2f       	mov	r24, r22
    3c64:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <set_Coupler>
    3c68:	88 23       	and	r24, r24
    3c6a:	71 f0       	breq	.+28     	; 0x3c88 <softkeyCoupler+0x3e>
    3c6c:	0e 94 1b 33 	call	0x6636	; 0x6636 <midi_ManualOff>
    3c70:	0b c0       	rjmp	.+22     	; 0x3c88 <softkeyCoupler+0x3e>
    3c72:	df 01       	movw	r26, r30
    3c74:	af 5e       	subi	r26, 0xEF	; 239
    3c76:	b7 4f       	sbci	r27, 0xF7	; 247
    3c78:	1c 92       	st	X, r1
    3c7a:	ee 0f       	add	r30, r30
    3c7c:	ff 1f       	adc	r31, r31
    3c7e:	ec 55       	subi	r30, 0x5C	; 92
    3c80:	fd 4e       	sbci	r31, 0xED	; 237
    3c82:	84 91       	lpm	r24, Z
    3c84:	0e 94 1b 33 	call	0x6636	; 0x6636 <midi_ManualOff>
    3c88:	ec 2f       	mov	r30, r28
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	ef 5e       	subi	r30, 0xEF	; 239
    3c8e:	f7 4f       	sbci	r31, 0xF7	; 247
    3c90:	80 81       	ld	r24, Z
    3c92:	81 11       	cpse	r24, r1
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <softkeyCoupler+0x50>
    3c96:	82 e8       	ldi	r24, 0x82	; 130
    3c98:	01 c0       	rjmp	.+2      	; 0x3c9c <softkeyCoupler+0x52>
    3c9a:	81 e8       	ldi	r24, 0x81	; 129
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret

00003ca0 <softKeyCoupler2from3>:
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	d3 cf       	rjmp	.-90     	; 0x3c4a <softkeyCoupler>
    3ca4:	08 95       	ret

00003ca6 <softKeyCoupler1from3>:
    3ca6:	61 e0       	ldi	r22, 0x01	; 1
    3ca8:	d0 cf       	rjmp	.-96     	; 0x3c4a <softkeyCoupler>
    3caa:	08 95       	ret

00003cac <softKeyCouplerPfrom3>:
    3cac:	63 e0       	ldi	r22, 0x03	; 3
    3cae:	cd cf       	rjmp	.-102    	; 0x3c4a <softkeyCoupler>
    3cb0:	08 95       	ret

00003cb2 <softKeyCoupler1from2>:
    3cb2:	62 e0       	ldi	r22, 0x02	; 2
    3cb4:	ca cf       	rjmp	.-108    	; 0x3c4a <softkeyCoupler>
    3cb6:	08 95       	ret

00003cb8 <softKeyCouplerPfrom2>:
    3cb8:	64 e0       	ldi	r22, 0x04	; 4
    3cba:	c7 cf       	rjmp	.-114    	; 0x3c4a <softkeyCoupler>
    3cbc:	08 95       	ret

00003cbe <softKeyCouplerPfrom1>:
    3cbe:	65 e0       	ldi	r22, 0x05	; 5
    3cc0:	c4 cf       	rjmp	.-120    	; 0x3c4a <softkeyCoupler>
    3cc2:	08 95       	ret

00003cc4 <softKeyCoupler3from2>:
    3cc4:	66 e0       	ldi	r22, 0x06	; 6
    3cc6:	c1 cf       	rjmp	.-126    	; 0x3c4a <softkeyCoupler>
    3cc8:	08 95       	ret

00003cca <softKeyCoupler3from1>:
    3cca:	67 e0       	ldi	r22, 0x07	; 7
    3ccc:	be cf       	rjmp	.-132    	; 0x3c4a <softkeyCoupler>
    3cce:	08 95       	ret

00003cd0 <softKeyCoupler3fromP>:
    3cd0:	69 e0       	ldi	r22, 0x09	; 9
    3cd2:	bb cf       	rjmp	.-138    	; 0x3c4a <softkeyCoupler>
    3cd4:	08 95       	ret

00003cd6 <softKeyCoupler2from1>:
    3cd6:	68 e0       	ldi	r22, 0x08	; 8
    3cd8:	b8 cf       	rjmp	.-144    	; 0x3c4a <softkeyCoupler>
    3cda:	08 95       	ret

00003cdc <softKeyCoupler2fromP>:
    3cdc:	6a e0       	ldi	r22, 0x0A	; 10
    3cde:	b5 cf       	rjmp	.-150    	; 0x3c4a <softkeyCoupler>
    3ce0:	08 95       	ret

00003ce2 <softKeyCoupler1fromP>:
    3ce2:	6b e0       	ldi	r22, 0x0B	; 11
    3ce4:	b2 cf       	rjmp	.-156    	; 0x3c4a <softkeyCoupler>
    3ce6:	08 95       	ret

00003ce8 <send_progrChange_toMidiThru>:
    3ce8:	cf 93       	push	r28
    3cea:	80 34       	cpi	r24, 0x40	; 64
    3cec:	60 f4       	brcc	.+24     	; 0x3d06 <send_progrChange_toMidiThru+0x1e>
    3cee:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <midiThrough+0x1>
    3cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf4:	41 f0       	breq	.+16     	; 0x3d06 <send_progrChange_toMidiThru+0x1e>
    3cf6:	c8 2f       	mov	r28, r24
    3cf8:	89 2f       	mov	r24, r25
    3cfa:	80 6c       	ori	r24, 0xC0	; 192
    3cfc:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <serial1MIDISend>
    3d00:	8c 2f       	mov	r24, r28
    3d02:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <serial1MIDISend>
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <softKeyPrM>:
    3d0a:	88 23       	and	r24, r24
    3d0c:	34 f4       	brge	.+12     	; 0x3d1a <softKeyPrM+0x10>
    3d0e:	0e 94 b7 30 	call	0x616e	; 0x616e <midi_resetRegisters>
    3d12:	8f ef       	ldi	r24, 0xFF	; 255
    3d14:	0e 94 1b 30 	call	0x6036	; 0x6036 <prog_set>
    3d18:	13 c0       	rjmp	.+38     	; 0x3d40 <softKeyPrM+0x36>
    3d1a:	88 23       	and	r24, r24
    3d1c:	89 f0       	breq	.+34     	; 0x3d40 <softKeyPrM+0x36>
    3d1e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d22:	8f 3f       	cpi	r24, 0xFF	; 255
    3d24:	21 f4       	brne	.+8      	; 0x3d2e <softKeyPrM+0x24>
    3d26:	8f e3       	ldi	r24, 0x3F	; 63
    3d28:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d2c:	03 c0       	rjmp	.+6      	; 0x3d34 <softKeyPrM+0x2a>
    3d2e:	81 50       	subi	r24, 0x01	; 1
    3d30:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d34:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d38:	d7 df       	rcall	.-82     	; 0x3ce8 <send_progrChange_toMidiThru>
    3d3a:	8f ef       	ldi	r24, 0xFF	; 255
    3d3c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	08 95       	ret

00003d44 <softKeyPrInc>:
    3d44:	88 23       	and	r24, r24
    3d46:	e9 f0       	breq	.+58     	; 0x3d82 <softKeyPrInc+0x3e>
    3d48:	4c f4       	brge	.+18     	; 0x3d5c <softKeyPrInc+0x18>
    3d4a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d50:	91 f0       	breq	.+36     	; 0x3d76 <softKeyPrInc+0x32>
    3d52:	88 5f       	subi	r24, 0xF8	; 248
    3d54:	88 73       	andi	r24, 0x38	; 56
    3d56:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d5a:	0d c0       	rjmp	.+26     	; 0x3d76 <softKeyPrInc+0x32>
    3d5c:	88 23       	and	r24, r24
    3d5e:	59 f0       	breq	.+22     	; 0x3d76 <softKeyPrInc+0x32>
    3d60:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d64:	8f 33       	cpi	r24, 0x3F	; 63
    3d66:	21 f4       	brne	.+8      	; 0x3d70 <softKeyPrInc+0x2c>
    3d68:	8f ef       	ldi	r24, 0xFF	; 255
    3d6a:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <softKeyPrInc+0x32>
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d76:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d7a:	b6 df       	rcall	.-148    	; 0x3ce8 <send_progrChange_toMidiThru>
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	08 95       	ret

00003d86 <softKeyPrDec>:
    3d86:	88 23       	and	r24, r24
    3d88:	e9 f0       	breq	.+58     	; 0x3dc4 <softKeyPrDec+0x3e>
    3d8a:	4c f4       	brge	.+18     	; 0x3d9e <softKeyPrDec+0x18>
    3d8c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d90:	8f 3f       	cpi	r24, 0xFF	; 255
    3d92:	91 f0       	breq	.+36     	; 0x3db8 <softKeyPrDec+0x32>
    3d94:	88 50       	subi	r24, 0x08	; 8
    3d96:	88 73       	andi	r24, 0x38	; 56
    3d98:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d9c:	0d c0       	rjmp	.+26     	; 0x3db8 <softKeyPrDec+0x32>
    3d9e:	88 23       	and	r24, r24
    3da0:	59 f0       	breq	.+22     	; 0x3db8 <softKeyPrDec+0x32>
    3da2:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3da6:	8f 3f       	cpi	r24, 0xFF	; 255
    3da8:	21 f4       	brne	.+8      	; 0x3db2 <softKeyPrDec+0x2c>
    3daa:	8f e3       	ldi	r24, 0x3F	; 63
    3dac:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3db0:	03 c0       	rjmp	.+6      	; 0x3db8 <softKeyPrDec+0x32>
    3db2:	81 50       	subi	r24, 0x01	; 1
    3db4:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3db8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dbc:	95 df       	rcall	.-214    	; 0x3ce8 <send_progrChange_toMidiThru>
    3dbe:	8f ef       	ldi	r24, 0xFF	; 255
    3dc0:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	08 95       	ret

00003dc8 <softKeyPBInc>:
    3dc8:	88 23       	and	r24, r24
    3dca:	61 f0       	breq	.+24     	; 0x3de4 <softKeyPBInc+0x1c>
    3dcc:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    3dd2:	41 f0       	breq	.+16     	; 0x3de4 <softKeyPBInc+0x1c>
    3dd4:	88 5f       	subi	r24, 0xF8	; 248
    3dd6:	88 73       	andi	r24, 0x38	; 56
    3dd8:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3ddc:	85 df       	rcall	.-246    	; 0x3ce8 <send_progrChange_toMidiThru>
    3dde:	8f ef       	ldi	r24, 0xFF	; 255
    3de0:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	08 95       	ret

00003de8 <softKeyPBDec>:
    3de8:	88 23       	and	r24, r24
    3dea:	61 f0       	breq	.+24     	; 0x3e04 <softKeyPBDec+0x1c>
    3dec:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3df0:	8f 3f       	cpi	r24, 0xFF	; 255
    3df2:	41 f0       	breq	.+16     	; 0x3e04 <softKeyPBDec+0x1c>
    3df4:	88 50       	subi	r24, 0x08	; 8
    3df6:	88 73       	andi	r24, 0x38	; 56
    3df8:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dfc:	75 df       	rcall	.-278    	; 0x3ce8 <send_progrChange_toMidiThru>
    3dfe:	8f ef       	ldi	r24, 0xFF	; 255
    3e00:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	08 95       	ret

00003e08 <menu_Init>:
    3e08:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	69 f4       	brne	.+26     	; 0x3e2a <menu_Init+0x22>
    3e10:	86 ed       	ldi	r24, 0xD6	; 214
    3e12:	97 e0       	ldi	r25, 0x07	; 7
    3e14:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e18:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e1c:	8f ed       	ldi	r24, 0xDF	; 223
    3e1e:	93 e0       	ldi	r25, 0x03	; 3
    3e20:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3e24:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3e28:	08 c0       	rjmp	.+16     	; 0x3e3a <menu_Init+0x32>
    3e2a:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e2e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e32:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3e36:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3e3a:	8f ef       	ldi	r24, 0xFF	; 255
    3e3c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3e40:	89 ee       	ldi	r24, 0xE9	; 233
    3e42:	93 e0       	ldi	r25, 0x03	; 3
    3e44:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3e48:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3e4c:	08 95       	ret

00003e4e <softkeyLeft>:
    3e4e:	6e ed       	ldi	r22, 0xDE	; 222
    3e50:	72 e1       	ldi	r23, 0x12	; 18
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e58:	08 95       	ret

00003e5a <softkeyRight>:
    3e5a:	60 ee       	ldi	r22, 0xE0	; 224
    3e5c:	72 e1       	ldi	r23, 0x12	; 18
    3e5e:	83 e0       	ldi	r24, 0x03	; 3
    3e60:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e64:	08 95       	ret

00003e66 <softkeyDown>:
    3e66:	62 ee       	ldi	r22, 0xE2	; 226
    3e68:	72 e1       	ldi	r23, 0x12	; 18
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e70:	08 95       	ret

00003e72 <softkeyOn>:
    3e72:	60 ed       	ldi	r22, 0xD0	; 208
    3e74:	72 e1       	ldi	r23, 0x12	; 18
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e7c:	08 95       	ret

00003e7e <softkeyOff>:
    3e7e:	6b ec       	ldi	r22, 0xCB	; 203
    3e80:	72 e1       	ldi	r23, 0x12	; 18
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e88:	08 95       	ret

00003e8a <softkeyUp>:
    3e8a:	64 ee       	ldi	r22, 0xE4	; 228
    3e8c:	72 e1       	ldi	r23, 0x12	; 18
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3e94:	08 95       	ret

00003e96 <softkeyPlus>:
    3e96:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3e9a:	8a 30       	cpi	r24, 0x0A	; 10
    3e9c:	11 f0       	breq	.+4      	; 0x3ea2 <softkeyPlus+0xc>
    3e9e:	8e 30       	cpi	r24, 0x0E	; 14
    3ea0:	31 f4       	brne	.+12     	; 0x3eae <softkeyPlus+0x18>
    3ea2:	6c eb       	ldi	r22, 0xBC	; 188
    3ea4:	72 e1       	ldi	r23, 0x12	; 18
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3eac:	08 95       	ret
    3eae:	6c ed       	ldi	r22, 0xDC	; 220
    3eb0:	72 e1       	ldi	r23, 0x12	; 18
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3eb8:	08 95       	ret

00003eba <softkeyMinus>:
    3eba:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3ebe:	8a 30       	cpi	r24, 0x0A	; 10
    3ec0:	11 f0       	breq	.+4      	; 0x3ec6 <softkeyMinus+0xc>
    3ec2:	8e 30       	cpi	r24, 0x0E	; 14
    3ec4:	31 f4       	brne	.+12     	; 0x3ed2 <softkeyMinus+0x18>
    3ec6:	6e eb       	ldi	r22, 0xBE	; 190
    3ec8:	72 e1       	ldi	r23, 0x12	; 18
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3ed0:	08 95       	ret
    3ed2:	6a ed       	ldi	r22, 0xDA	; 218
    3ed4:	72 e1       	ldi	r23, 0x12	; 18
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0c 94 f1 3b 	jmp	0x77e2	; 0x77e2 <keylabel_set>
    3edc:	08 95       	ret

00003ede <dataToNibbles>:
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3ee6:	8e 2f       	mov	r24, r30
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	fc 01       	movw	r30, r24
    3eec:	32 97       	sbiw	r30, 0x02	; 2
    3eee:	ed 30       	cpi	r30, 0x0D	; 13
    3ef0:	f1 05       	cpc	r31, r1
    3ef2:	08 f0       	brcs	.+2      	; 0x3ef6 <dataToNibbles+0x18>
    3ef4:	e4 c0       	rjmp	.+456    	; 0x40be <dataToNibbles+0x1e0>
    3ef6:	88 27       	eor	r24, r24
    3ef8:	ee 58       	subi	r30, 0x8E	; 142
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	8f 4f       	sbci	r24, 0xFF	; 255
    3efe:	0c 94 a3 3c 	jmp	0x7946	; 0x7946 <__tablejump2__>
    3f02:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f06:	e4 ec       	ldi	r30, 0xC4	; 196
    3f08:	f5 e0       	ldi	r31, 0x05	; 5
    3f0a:	98 2f       	mov	r25, r24
    3f0c:	92 95       	swap	r25
    3f0e:	9f 70       	andi	r25, 0x0F	; 15
    3f10:	90 83       	st	Z, r25
    3f12:	8f 70       	andi	r24, 0x0F	; 15
    3f14:	81 83       	std	Z+1, r24	; 0x01
    3f16:	d3 c0       	rjmp	.+422    	; 0x40be <dataToNibbles+0x1e0>
    3f18:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f1c:	80 31       	cpi	r24, 0x10	; 16
    3f1e:	20 f0       	brcs	.+8      	; 0x3f28 <dataToNibbles+0x4a>
    3f20:	8f ef       	ldi	r24, 0xFF	; 255
    3f22:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f26:	cb c0       	rjmp	.+406    	; 0x40be <dataToNibbles+0x1e0>
    3f28:	8f 5f       	subi	r24, 0xFF	; 255
    3f2a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f2e:	c7 c0       	rjmp	.+398    	; 0x40be <dataToNibbles+0x1e0>
    3f30:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f34:	88 23       	and	r24, r24
    3f36:	34 f4       	brge	.+12     	; 0x3f44 <dataToNibbles+0x66>
    3f38:	e4 ec       	ldi	r30, 0xC4	; 196
    3f3a:	f5 e0       	ldi	r31, 0x05	; 5
    3f3c:	10 82       	st	Z, r1
    3f3e:	8f ef       	ldi	r24, 0xFF	; 255
    3f40:	81 83       	std	Z+1, r24	; 0x01
    3f42:	bd c0       	rjmp	.+378    	; 0x40be <dataToNibbles+0x1e0>
    3f44:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3f48:	08 c0       	rjmp	.+16     	; 0x3f5a <dataToNibbles+0x7c>
    3f4a:	e4 ec       	ldi	r30, 0xC4	; 196
    3f4c:	f5 e0       	ldi	r31, 0x05	; 5
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	9f 5f       	subi	r25, 0xFF	; 255
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	8c 50       	subi	r24, 0x0C	; 12
    3f56:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f5a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f5e:	8c 30       	cpi	r24, 0x0C	; 12
    3f60:	a0 f7       	brcc	.-24     	; 0x3f4a <dataToNibbles+0x6c>
    3f62:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f66:	ab c0       	rjmp	.+342    	; 0x40be <dataToNibbles+0x1e0>
    3f68:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f6c:	e4 ec       	ldi	r30, 0xC4	; 196
    3f6e:	f5 e0       	ldi	r31, 0x05	; 5
    3f70:	98 2f       	mov	r25, r24
    3f72:	92 95       	swap	r25
    3f74:	96 95       	lsr	r25
    3f76:	97 70       	andi	r25, 0x07	; 7
    3f78:	90 83       	st	Z, r25
    3f7a:	8f 71       	andi	r24, 0x1F	; 31
    3f7c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f80:	11 82       	std	Z+1, r1	; 0x01
    3f82:	08 c0       	rjmp	.+16     	; 0x3f94 <dataToNibbles+0xb6>
    3f84:	e4 ec       	ldi	r30, 0xC4	; 196
    3f86:	f5 e0       	ldi	r31, 0x05	; 5
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	9f 5f       	subi	r25, 0xFF	; 255
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	8a 50       	subi	r24, 0x0A	; 10
    3f90:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f94:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f98:	8a 30       	cpi	r24, 0x0A	; 10
    3f9a:	a0 f7       	brcc	.-24     	; 0x3f84 <dataToNibbles+0xa6>
    3f9c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3fa0:	8e c0       	rjmp	.+284    	; 0x40be <dataToNibbles+0x1e0>
    3fa2:	e4 ec       	ldi	r30, 0xC4	; 196
    3fa4:	f5 e0       	ldi	r31, 0x05	; 5
    3fa6:	10 82       	st	Z, r1
    3fa8:	11 82       	std	Z+1, r1	; 0x01
    3faa:	08 c0       	rjmp	.+16     	; 0x3fbc <dataToNibbles+0xde>
    3fac:	e4 ec       	ldi	r30, 0xC4	; 196
    3fae:	f5 e0       	ldi	r31, 0x05	; 5
    3fb0:	90 81       	ld	r25, Z
    3fb2:	9f 5f       	subi	r25, 0xFF	; 255
    3fb4:	90 83       	st	Z, r25
    3fb6:	84 56       	subi	r24, 0x64	; 100
    3fb8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fbc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fc0:	84 36       	cpi	r24, 0x64	; 100
    3fc2:	a0 f7       	brcc	.-24     	; 0x3fac <dataToNibbles+0xce>
    3fc4:	08 c0       	rjmp	.+16     	; 0x3fd6 <dataToNibbles+0xf8>
    3fc6:	e4 ec       	ldi	r30, 0xC4	; 196
    3fc8:	f5 e0       	ldi	r31, 0x05	; 5
    3fca:	91 81       	ldd	r25, Z+1	; 0x01
    3fcc:	9f 5f       	subi	r25, 0xFF	; 255
    3fce:	91 83       	std	Z+1, r25	; 0x01
    3fd0:	8a 50       	subi	r24, 0x0A	; 10
    3fd2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fd6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fda:	8a 30       	cpi	r24, 0x0A	; 10
    3fdc:	a0 f7       	brcc	.-24     	; 0x3fc6 <dataToNibbles+0xe8>
    3fde:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3fe2:	6d c0       	rjmp	.+218    	; 0x40be <dataToNibbles+0x1e0>
    3fe4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fe8:	84 30       	cpi	r24, 0x04	; 4
    3fea:	20 f0       	brcs	.+8      	; 0x3ff4 <dataToNibbles+0x116>
    3fec:	8f ef       	ldi	r24, 0xFF	; 255
    3fee:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ff2:	65 c0       	rjmp	.+202    	; 0x40be <dataToNibbles+0x1e0>
    3ff4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ff8:	62 c0       	rjmp	.+196    	; 0x40be <dataToNibbles+0x1e0>
    3ffa:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ffe:	84 30       	cpi	r24, 0x04	; 4
    4000:	20 f0       	brcs	.+8      	; 0x400a <dataToNibbles+0x12c>
    4002:	83 e0       	ldi	r24, 0x03	; 3
    4004:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4008:	5a c0       	rjmp	.+180    	; 0x40be <dataToNibbles+0x1e0>
    400a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    400e:	57 c0       	rjmp	.+174    	; 0x40be <dataToNibbles+0x1e0>
    4010:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4014:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4018:	52 c0       	rjmp	.+164    	; 0x40be <dataToNibbles+0x1e0>
    401a:	e9 2f       	mov	r30, r25
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4022:	28 2f       	mov	r18, r24
    4024:	22 1f       	adc	r18, r18
    4026:	22 27       	eor	r18, r18
    4028:	22 1f       	adc	r18, r18
    402a:	ec 53       	subi	r30, 0x3C	; 60
    402c:	fa 4f       	sbci	r31, 0xFA	; 250
    402e:	20 83       	st	Z, r18
    4030:	88 0f       	add	r24, r24
    4032:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4036:	9f 5f       	subi	r25, 0xFF	; 255
    4038:	01 c0       	rjmp	.+2      	; 0x403c <dataToNibbles+0x15e>
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	98 30       	cpi	r25, 0x08	; 8
    403e:	68 f3       	brcs	.-38     	; 0x401a <dataToNibbles+0x13c>
    4040:	3e c0       	rjmp	.+124    	; 0x40be <dataToNibbles+0x1e0>
    4042:	82 50       	subi	r24, 0x02	; 2
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	de 01       	movw	r26, r28
    4048:	9d 91       	ld	r25, X+
    404a:	ec 53       	subi	r30, 0x3C	; 60
    404c:	fa 4f       	sbci	r31, 0xFA	; 250
    404e:	9f 70       	andi	r25, 0x0F	; 15
    4050:	90 83       	st	Z, r25
    4052:	e8 2f       	mov	r30, r24
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	98 81       	ld	r25, Y
    4058:	ec 53       	subi	r30, 0x3C	; 60
    405a:	fa 4f       	sbci	r31, 0xFA	; 250
    405c:	92 95       	swap	r25
    405e:	9f 70       	andi	r25, 0x0F	; 15
    4060:	90 83       	st	Z, r25
    4062:	ed 01       	movw	r28, r26
    4064:	03 c0       	rjmp	.+6      	; 0x406c <dataToNibbles+0x18e>
    4066:	c2 ea       	ldi	r28, 0xA2	; 162
    4068:	d5 e0       	ldi	r29, 0x05	; 5
    406a:	88 e0       	ldi	r24, 0x08	; 8
    406c:	ef ef       	ldi	r30, 0xFF	; 255
    406e:	e8 0f       	add	r30, r24
    4070:	81 11       	cpse	r24, r1
    4072:	e7 cf       	rjmp	.-50     	; 0x4042 <dataToNibbles+0x164>
    4074:	24 c0       	rjmp	.+72     	; 0x40be <dataToNibbles+0x1e0>
    4076:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    407a:	e4 ec       	ldi	r30, 0xC4	; 196
    407c:	f5 e0       	ldi	r31, 0x05	; 5
    407e:	98 2f       	mov	r25, r24
    4080:	97 70       	andi	r25, 0x07	; 7
    4082:	9f 5f       	subi	r25, 0xFF	; 255
    4084:	90 83       	st	Z, r25
    4086:	86 95       	lsr	r24
    4088:	86 95       	lsr	r24
    408a:	86 95       	lsr	r24
    408c:	8f 5f       	subi	r24, 0xFF	; 255
    408e:	81 83       	std	Z+1, r24	; 0x01
    4090:	16 c0       	rjmp	.+44     	; 0x40be <dataToNibbles+0x1e0>
    4092:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    409c:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    40a0:	08 c0       	rjmp	.+16     	; 0x40b2 <dataToNibbles+0x1d4>
    40a2:	e4 ec       	ldi	r30, 0xC4	; 196
    40a4:	f5 e0       	ldi	r31, 0x05	; 5
    40a6:	90 81       	ld	r25, Z
    40a8:	9f 5f       	subi	r25, 0xFF	; 255
    40aa:	90 83       	st	Z, r25
    40ac:	8a 50       	subi	r24, 0x0A	; 10
    40ae:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    40b2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    40b6:	8a 30       	cpi	r24, 0x0A	; 10
    40b8:	a0 f7       	brcc	.-24     	; 0x40a2 <dataToNibbles+0x1c4>
    40ba:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	08 95       	ret

000040c4 <nibbleToLCDstring>:
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    40d0:	8e 2f       	mov	r24, r30
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	fc 01       	movw	r30, r24
    40d6:	32 97       	sbiw	r30, 0x02	; 2
    40d8:	ed 30       	cpi	r30, 0x0D	; 13
    40da:	f1 05       	cpc	r31, r1
    40dc:	08 f0       	brcs	.+2      	; 0x40e0 <nibbleToLCDstring+0x1c>
    40de:	3b c1       	rjmp	.+630    	; 0x4356 <nibbleToLCDstring+0x292>
    40e0:	88 27       	eor	r24, r24
    40e2:	e1 58       	subi	r30, 0x81	; 129
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	8f 4f       	sbci	r24, 0xFF	; 255
    40e8:	0c 94 a3 3c 	jmp	0x7946	; 0x7946 <__tablejump2__>
    40ec:	04 ec       	ldi	r16, 0xC4	; 196
    40ee:	15 e0       	ldi	r17, 0x05	; 5
    40f0:	f8 01       	movw	r30, r16
    40f2:	80 81       	ld	r24, Z
    40f4:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    40f8:	c5 e2       	ldi	r28, 0x25	; 37
    40fa:	d2 e0       	ldi	r29, 0x02	; 2
    40fc:	88 83       	st	Y, r24
    40fe:	f8 01       	movw	r30, r16
    4100:	81 81       	ldd	r24, Z+1	; 0x01
    4102:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    4106:	89 83       	std	Y+1, r24	; 0x01
    4108:	1a 82       	std	Y+2, r1	; 0x02
    410a:	25 c1       	rjmp	.+586    	; 0x4356 <nibbleToLCDstring+0x292>
    410c:	e5 e2       	ldi	r30, 0x25	; 37
    410e:	f2 e0       	ldi	r31, 0x02	; 2
    4110:	83 e4       	ldi	r24, 0x43	; 67
    4112:	80 83       	st	Z, r24
    4114:	88 e6       	ldi	r24, 0x68	; 104
    4116:	81 83       	std	Z+1, r24	; 0x01
    4118:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    411c:	8f 3f       	cpi	r24, 0xFF	; 255
    411e:	29 f4       	brne	.+10     	; 0x412a <nibbleToLCDstring+0x66>
    4120:	80 e2       	ldi	r24, 0x20	; 32
    4122:	82 83       	std	Z+2, r24	; 0x02
    4124:	8d e2       	ldi	r24, 0x2D	; 45
    4126:	83 83       	std	Z+3, r24	; 0x03
    4128:	12 c0       	rjmp	.+36     	; 0x414e <nibbleToLCDstring+0x8a>
    412a:	8a 30       	cpi	r24, 0x0A	; 10
    412c:	48 f0       	brcs	.+18     	; 0x4140 <nibbleToLCDstring+0x7c>
    412e:	c5 e2       	ldi	r28, 0x25	; 37
    4130:	d2 e0       	ldi	r29, 0x02	; 2
    4132:	91 e3       	ldi	r25, 0x31	; 49
    4134:	9a 83       	std	Y+2, r25	; 0x02
    4136:	8a 50       	subi	r24, 0x0A	; 10
    4138:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    413c:	8b 83       	std	Y+3, r24	; 0x03
    413e:	07 c0       	rjmp	.+14     	; 0x414e <nibbleToLCDstring+0x8a>
    4140:	c5 e2       	ldi	r28, 0x25	; 37
    4142:	d2 e0       	ldi	r29, 0x02	; 2
    4144:	90 e2       	ldi	r25, 0x20	; 32
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    414c:	8b 83       	std	Y+3, r24	; 0x03
    414e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    4152:	01 c1       	rjmp	.+514    	; 0x4356 <nibbleToLCDstring+0x292>
    4154:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4158:	8f 3f       	cpi	r24, 0xFF	; 255
    415a:	21 f0       	breq	.+8      	; 0x4164 <nibbleToLCDstring+0xa0>
    415c:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    4160:	9f 3f       	cpi	r25, 0xFF	; 255
    4162:	59 f4       	brne	.+22     	; 0x417a <nibbleToLCDstring+0xb6>
    4164:	e5 e2       	ldi	r30, 0x25	; 37
    4166:	f2 e0       	ldi	r31, 0x02	; 2
    4168:	8e e6       	ldi	r24, 0x6E	; 110
    416a:	80 83       	st	Z, r24
    416c:	9f e6       	ldi	r25, 0x6F	; 111
    416e:	91 83       	std	Z+1, r25	; 0x01
    4170:	82 83       	std	Z+2, r24	; 0x02
    4172:	85 e6       	ldi	r24, 0x65	; 101
    4174:	83 83       	std	Z+3, r24	; 0x03
    4176:	14 82       	std	Z+4, r1	; 0x04
    4178:	ee c0       	rjmp	.+476    	; 0x4356 <nibbleToLCDstring+0x292>
    417a:	9f e5       	ldi	r25, 0x5F	; 95
    417c:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    4180:	8b 30       	cpi	r24, 0x0B	; 11
    4182:	21 f4       	brne	.+8      	; 0x418c <nibbleToLCDstring+0xc8>
    4184:	88 e4       	ldi	r24, 0x48	; 72
    4186:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    418a:	20 c0       	rjmp	.+64     	; 0x41cc <nibbleToLCDstring+0x108>
    418c:	85 30       	cpi	r24, 0x05	; 5
    418e:	58 f4       	brcc	.+22     	; 0x41a6 <nibbleToLCDstring+0xe2>
    4190:	98 2f       	mov	r25, r24
    4192:	96 95       	lsr	r25
    4194:	9d 5b       	subi	r25, 0xBD	; 189
    4196:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    419a:	80 ff       	sbrs	r24, 0
    419c:	17 c0       	rjmp	.+46     	; 0x41cc <nibbleToLCDstring+0x108>
    419e:	83 e2       	ldi	r24, 0x23	; 35
    41a0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    41a4:	13 c0       	rjmp	.+38     	; 0x41cc <nibbleToLCDstring+0x108>
    41a6:	28 2f       	mov	r18, r24
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	25 50       	subi	r18, 0x05	; 5
    41ac:	31 09       	sbc	r19, r1
    41ae:	35 95       	asr	r19
    41b0:	27 95       	ror	r18
    41b2:	2a 5b       	subi	r18, 0xBA	; 186
    41b4:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    41b8:	80 fd       	sbrc	r24, 0
    41ba:	03 c0       	rjmp	.+6      	; 0x41c2 <nibbleToLCDstring+0xfe>
    41bc:	83 e2       	ldi	r24, 0x23	; 35
    41be:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    41c2:	28 34       	cpi	r18, 0x48	; 72
    41c4:	19 f4       	brne	.+6      	; 0x41cc <nibbleToLCDstring+0x108>
    41c6:	81 e4       	ldi	r24, 0x41	; 65
    41c8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    41cc:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    41d0:	81 11       	cpse	r24, r1
    41d2:	04 c0       	rjmp	.+8      	; 0x41dc <nibbleToLCDstring+0x118>
    41d4:	8d e6       	ldi	r24, 0x6D	; 109
    41d6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41da:	0b c0       	rjmp	.+22     	; 0x41f2 <nibbleToLCDstring+0x12e>
    41dc:	8c 30       	cpi	r24, 0x0C	; 12
    41de:	30 f4       	brcc	.+12     	; 0x41ec <nibbleToLCDstring+0x128>
    41e0:	81 50       	subi	r24, 0x01	; 1
    41e2:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    41e6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41ea:	03 c0       	rjmp	.+6      	; 0x41f2 <nibbleToLCDstring+0x12e>
    41ec:	8d e2       	ldi	r24, 0x2D	; 45
    41ee:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41f2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    41f6:	af c0       	rjmp	.+350    	; 0x4356 <nibbleToLCDstring+0x292>
    41f8:	c5 e2       	ldi	r28, 0x25	; 37
    41fa:	d2 e0       	ldi	r29, 0x02	; 2
    41fc:	8d e4       	ldi	r24, 0x4D	; 77
    41fe:	88 83       	st	Y, r24
    4200:	04 ec       	ldi	r16, 0xC4	; 196
    4202:	15 e0       	ldi	r17, 0x05	; 5
    4204:	f8 01       	movw	r30, r16
    4206:	80 81       	ld	r24, Z
    4208:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    420c:	89 83       	std	Y+1, r24	; 0x01
    420e:	82 e4       	ldi	r24, 0x42	; 66
    4210:	8a 83       	std	Y+2, r24	; 0x02
    4212:	f8 01       	movw	r30, r16
    4214:	81 81       	ldd	r24, Z+1	; 0x01
    4216:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    421a:	8b 83       	std	Y+3, r24	; 0x03
    421c:	f8 01       	movw	r30, r16
    421e:	82 81       	ldd	r24, Z+2	; 0x02
    4220:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    4224:	8c 83       	std	Y+4, r24	; 0x04
    4226:	1d 82       	std	Y+5, r1	; 0x05
    4228:	96 c0       	rjmp	.+300    	; 0x4356 <nibbleToLCDstring+0x292>
    422a:	04 ec       	ldi	r16, 0xC4	; 196
    422c:	15 e0       	ldi	r17, 0x05	; 5
    422e:	f8 01       	movw	r30, r16
    4230:	80 81       	ld	r24, Z
    4232:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    4236:	c5 e2       	ldi	r28, 0x25	; 37
    4238:	d2 e0       	ldi	r29, 0x02	; 2
    423a:	88 83       	st	Y, r24
    423c:	f8 01       	movw	r30, r16
    423e:	81 81       	ldd	r24, Z+1	; 0x01
    4240:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    4244:	89 83       	std	Y+1, r24	; 0x01
    4246:	f8 01       	movw	r30, r16
    4248:	82 81       	ldd	r24, Z+2	; 0x02
    424a:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    424e:	8a 83       	std	Y+2, r24	; 0x02
    4250:	1b 82       	std	Y+3, r1	; 0x03
    4252:	81 c0       	rjmp	.+258    	; 0x4356 <nibbleToLCDstring+0x292>
    4254:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4258:	83 30       	cpi	r24, 0x03	; 3
    425a:	38 f4       	brcc	.+14     	; 0x426a <nibbleToLCDstring+0x1a6>
    425c:	e5 e2       	ldi	r30, 0x25	; 37
    425e:	f2 e0       	ldi	r31, 0x02	; 2
    4260:	93 e3       	ldi	r25, 0x33	; 51
    4262:	98 1b       	sub	r25, r24
    4264:	90 83       	st	Z, r25
    4266:	11 82       	std	Z+1, r1	; 0x01
    4268:	76 c0       	rjmp	.+236    	; 0x4356 <nibbleToLCDstring+0x292>
    426a:	83 30       	cpi	r24, 0x03	; 3
    426c:	31 f4       	brne	.+12     	; 0x427a <nibbleToLCDstring+0x1b6>
    426e:	e5 e2       	ldi	r30, 0x25	; 37
    4270:	f2 e0       	ldi	r31, 0x02	; 2
    4272:	80 e5       	ldi	r24, 0x50	; 80
    4274:	80 83       	st	Z, r24
    4276:	11 82       	std	Z+1, r1	; 0x01
    4278:	6e c0       	rjmp	.+220    	; 0x4356 <nibbleToLCDstring+0x292>
    427a:	e5 e2       	ldi	r30, 0x25	; 37
    427c:	f2 e0       	ldi	r31, 0x02	; 2
    427e:	8d e2       	ldi	r24, 0x2D	; 45
    4280:	80 83       	st	Z, r24
    4282:	11 82       	std	Z+1, r1	; 0x01
    4284:	68 c0       	rjmp	.+208    	; 0x4356 <nibbleToLCDstring+0x292>
    4286:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    428a:	e5 e2       	ldi	r30, 0x25	; 37
    428c:	f2 e0       	ldi	r31, 0x02	; 2
    428e:	80 5d       	subi	r24, 0xD0	; 208
    4290:	80 83       	st	Z, r24
    4292:	11 82       	std	Z+1, r1	; 0x01
    4294:	60 c0       	rjmp	.+192    	; 0x4356 <nibbleToLCDstring+0x292>
    4296:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    429a:	81 11       	cpse	r24, r1
    429c:	09 c0       	rjmp	.+18     	; 0x42b0 <nibbleToLCDstring+0x1ec>
    429e:	e5 e2       	ldi	r30, 0x25	; 37
    42a0:	f2 e0       	ldi	r31, 0x02	; 2
    42a2:	81 e4       	ldi	r24, 0x41	; 65
    42a4:	80 83       	st	Z, r24
    42a6:	85 e7       	ldi	r24, 0x75	; 117
    42a8:	81 83       	std	Z+1, r24	; 0x01
    42aa:	83 e7       	ldi	r24, 0x73	; 115
    42ac:	82 83       	std	Z+2, r24	; 0x02
    42ae:	08 c0       	rjmp	.+16     	; 0x42c0 <nibbleToLCDstring+0x1fc>
    42b0:	e5 e2       	ldi	r30, 0x25	; 37
    42b2:	f2 e0       	ldi	r31, 0x02	; 2
    42b4:	85 e4       	ldi	r24, 0x45	; 69
    42b6:	80 83       	st	Z, r24
    42b8:	89 e6       	ldi	r24, 0x69	; 105
    42ba:	81 83       	std	Z+1, r24	; 0x01
    42bc:	8e e6       	ldi	r24, 0x6E	; 110
    42be:	82 83       	std	Z+2, r24	; 0x02
    42c0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    42c4:	48 c0       	rjmp	.+144    	; 0x4356 <nibbleToLCDstring+0x292>
    42c6:	c1 2f       	mov	r28, r17
    42c8:	d0 e0       	ldi	r29, 0x00	; 0
    42ca:	fe 01       	movw	r30, r28
    42cc:	ec 53       	subi	r30, 0x3C	; 60
    42ce:	fa 4f       	sbci	r31, 0xFA	; 250
    42d0:	80 81       	ld	r24, Z
    42d2:	0e 94 66 39 	call	0x72cc	; 0x72cc <nibbleToChr>
    42d6:	cb 5d       	subi	r28, 0xDB	; 219
    42d8:	dd 4f       	sbci	r29, 0xFD	; 253
    42da:	88 83       	st	Y, r24
    42dc:	1f 5f       	subi	r17, 0xFF	; 255
    42de:	01 c0       	rjmp	.+2      	; 0x42e2 <nibbleToLCDstring+0x21e>
    42e0:	10 e0       	ldi	r17, 0x00	; 0
    42e2:	18 30       	cpi	r17, 0x08	; 8
    42e4:	80 f3       	brcs	.-32     	; 0x42c6 <nibbleToLCDstring+0x202>
    42e6:	37 c0       	rjmp	.+110    	; 0x4356 <nibbleToLCDstring+0x292>
    42e8:	82 2f       	mov	r24, r18
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	fc 01       	movw	r30, r24
    42ee:	ec 53       	subi	r30, 0x3C	; 60
    42f0:	fa 4f       	sbci	r31, 0xFA	; 250
    42f2:	30 81       	ld	r19, Z
    42f4:	31 11       	cpse	r19, r1
    42f6:	02 c0       	rjmp	.+4      	; 0x42fc <nibbleToLCDstring+0x238>
    42f8:	3f e6       	ldi	r19, 0x6F	; 111
    42fa:	01 c0       	rjmp	.+2      	; 0x42fe <nibbleToLCDstring+0x23a>
    42fc:	39 e4       	ldi	r19, 0x49	; 73
    42fe:	fc 01       	movw	r30, r24
    4300:	eb 5d       	subi	r30, 0xDB	; 219
    4302:	fd 4f       	sbci	r31, 0xFD	; 253
    4304:	30 83       	st	Z, r19
    4306:	2f 5f       	subi	r18, 0xFF	; 255
    4308:	01 c0       	rjmp	.+2      	; 0x430c <nibbleToLCDstring+0x248>
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	28 30       	cpi	r18, 0x08	; 8
    430e:	60 f3       	brcs	.-40     	; 0x42e8 <nibbleToLCDstring+0x224>
    4310:	22 c0       	rjmp	.+68     	; 0x4356 <nibbleToLCDstring+0x292>
    4312:	a4 ec       	ldi	r26, 0xC4	; 196
    4314:	b5 e0       	ldi	r27, 0x05	; 5
    4316:	8c 91       	ld	r24, X
    4318:	e5 e2       	ldi	r30, 0x25	; 37
    431a:	f2 e0       	ldi	r31, 0x02	; 2
    431c:	80 5d       	subi	r24, 0xD0	; 208
    431e:	80 83       	st	Z, r24
    4320:	11 96       	adiw	r26, 0x01	; 1
    4322:	8c 91       	ld	r24, X
    4324:	80 5c       	subi	r24, 0xC0	; 192
    4326:	81 83       	std	Z+1, r24	; 0x01
    4328:	12 82       	std	Z+2, r1	; 0x02
    432a:	15 c0       	rjmp	.+42     	; 0x4356 <nibbleToLCDstring+0x292>
    432c:	e4 ec       	ldi	r30, 0xC4	; 196
    432e:	f5 e0       	ldi	r31, 0x05	; 5
    4330:	90 81       	ld	r25, Z
    4332:	81 81       	ldd	r24, Z+1	; 0x01
    4334:	29 2f       	mov	r18, r25
    4336:	28 2b       	or	r18, r24
    4338:	31 f4       	brne	.+12     	; 0x4346 <nibbleToLCDstring+0x282>
    433a:	e5 e2       	ldi	r30, 0x25	; 37
    433c:	f2 e0       	ldi	r31, 0x02	; 2
    433e:	8d e2       	ldi	r24, 0x2D	; 45
    4340:	80 83       	st	Z, r24
    4342:	81 83       	std	Z+1, r24	; 0x01
    4344:	06 c0       	rjmp	.+12     	; 0x4352 <nibbleToLCDstring+0x28e>
    4346:	e5 e2       	ldi	r30, 0x25	; 37
    4348:	f2 e0       	ldi	r31, 0x02	; 2
    434a:	90 5d       	subi	r25, 0xD0	; 208
    434c:	90 83       	st	Z, r25
    434e:	80 5d       	subi	r24, 0xD0	; 208
    4350:	81 83       	std	Z+1, r24	; 0x01
    4352:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	08 95       	ret

00004360 <LCDStringOut>:
    4360:	0f 93       	push	r16
    4362:	1f 93       	push	r17
    4364:	cf 93       	push	r28
    4366:	8e e1       	ldi	r24, 0x1E	; 30
    4368:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    436c:	c0 e0       	ldi	r28, 0x00	; 0
    436e:	05 e2       	ldi	r16, 0x25	; 37
    4370:	12 e0       	ldi	r17, 0x02	; 2
    4372:	0b c0       	rjmp	.+22     	; 0x438a <LCDStringOut+0x2a>
    4374:	f8 01       	movw	r30, r16
    4376:	80 81       	ld	r24, Z
    4378:	88 23       	and	r24, r24
    437a:	19 f0       	breq	.+6      	; 0x4382 <LCDStringOut+0x22>
    437c:	0f 5f       	subi	r16, 0xFF	; 255
    437e:	1f 4f       	sbci	r17, 0xFF	; 255
    4380:	01 c0       	rjmp	.+2      	; 0x4384 <LCDStringOut+0x24>
    4382:	80 e2       	ldi	r24, 0x20	; 32
    4384:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4388:	cf 5f       	subi	r28, 0xFF	; 255
    438a:	ca 30       	cpi	r28, 0x0A	; 10
    438c:	98 f3       	brcs	.-26     	; 0x4374 <LCDStringOut+0x14>
    438e:	cf 91       	pop	r28
    4390:	1f 91       	pop	r17
    4392:	0f 91       	pop	r16
    4394:	08 95       	ret

00004396 <nibbleCheckOvfl>:
    4396:	8a 30       	cpi	r24, 0x0A	; 10
    4398:	1c f4       	brge	.+6      	; 0x43a0 <nibbleCheckOvfl+0xa>
    439a:	88 23       	and	r24, r24
    439c:	1c f0       	brlt	.+6      	; 0x43a4 <nibbleCheckOvfl+0xe>
    439e:	08 95       	ret
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	08 95       	ret
    43a4:	89 e0       	ldi	r24, 0x09	; 9
    43a6:	08 95       	ret

000043a8 <nibbleChange>:
    43a8:	0f 93       	push	r16
    43aa:	1f 93       	push	r17
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	c8 2f       	mov	r28, r24
    43b2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    43b6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    43ba:	31 96       	adiw	r30, 0x01	; 1
    43bc:	84 91       	lpm	r24, Z
    43be:	28 2f       	mov	r18, r24
    43c0:	20 71       	andi	r18, 0x10	; 16
    43c2:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    43c6:	8e 2f       	mov	r24, r30
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	fc 01       	movw	r30, r24
    43cc:	32 97       	sbiw	r30, 0x02	; 2
    43ce:	ed 30       	cpi	r30, 0x0D	; 13
    43d0:	f1 05       	cpc	r31, r1
    43d2:	08 f0       	brcs	.+2      	; 0x43d6 <nibbleChange+0x2e>
    43d4:	93 c1       	rjmp	.+806    	; 0x46fc <nibbleChange+0x354>
    43d6:	88 27       	eor	r24, r24
    43d8:	e4 57       	subi	r30, 0x74	; 116
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	8f 4f       	sbci	r24, 0xFF	; 255
    43de:	0c 94 a3 3c 	jmp	0x7946	; 0x7946 <__tablejump2__>
    43e2:	d0 e0       	ldi	r29, 0x00	; 0
    43e4:	cc 53       	subi	r28, 0x3C	; 60
    43e6:	da 4f       	sbci	r29, 0xFA	; 250
    43e8:	88 81       	ld	r24, Y
    43ea:	68 0f       	add	r22, r24
    43ec:	6f 70       	andi	r22, 0x0F	; 15
    43ee:	68 83       	st	Y, r22
    43f0:	85 c1       	rjmp	.+778    	; 0x46fc <nibbleChange+0x354>
    43f2:	21 11       	cpse	r18, r1
    43f4:	1b c0       	rjmp	.+54     	; 0x442c <nibbleChange+0x84>
    43f6:	61 30       	cpi	r22, 0x01	; 1
    43f8:	41 f4       	brne	.+16     	; 0x440a <nibbleChange+0x62>
    43fa:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43fe:	80 31       	cpi	r24, 0x10	; 16
    4400:	20 f0       	brcs	.+8      	; 0x440a <nibbleChange+0x62>
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4408:	79 c1       	rjmp	.+754    	; 0x46fc <nibbleChange+0x354>
    440a:	6f 3f       	cpi	r22, 0xFF	; 255
    440c:	49 f4       	brne	.+18     	; 0x4420 <nibbleChange+0x78>
    440e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4412:	82 50       	subi	r24, 0x02	; 2
    4414:	8f 30       	cpi	r24, 0x0F	; 15
    4416:	20 f0       	brcs	.+8      	; 0x4420 <nibbleChange+0x78>
    4418:	80 e1       	ldi	r24, 0x10	; 16
    441a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    441e:	6e c1       	rjmp	.+732    	; 0x46fc <nibbleChange+0x354>
    4420:	e4 ec       	ldi	r30, 0xC4	; 196
    4422:	f5 e0       	ldi	r31, 0x05	; 5
    4424:	80 81       	ld	r24, Z
    4426:	68 0f       	add	r22, r24
    4428:	60 83       	st	Z, r22
    442a:	68 c1       	rjmp	.+720    	; 0x46fc <nibbleChange+0x354>
    442c:	61 30       	cpi	r22, 0x01	; 1
    442e:	41 f4       	brne	.+16     	; 0x4440 <nibbleChange+0x98>
    4430:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4434:	80 31       	cpi	r24, 0x10	; 16
    4436:	21 f4       	brne	.+8      	; 0x4440 <nibbleChange+0x98>
    4438:	8f ef       	ldi	r24, 0xFF	; 255
    443a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    443e:	5e c1       	rjmp	.+700    	; 0x46fc <nibbleChange+0x354>
    4440:	61 30       	cpi	r22, 0x01	; 1
    4442:	41 f4       	brne	.+16     	; 0x4454 <nibbleChange+0xac>
    4444:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4448:	8f 3f       	cpi	r24, 0xFF	; 255
    444a:	21 f4       	brne	.+8      	; 0x4454 <nibbleChange+0xac>
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4452:	54 c1       	rjmp	.+680    	; 0x46fc <nibbleChange+0x354>
    4454:	6f 3f       	cpi	r22, 0xFF	; 255
    4456:	41 f4       	brne	.+16     	; 0x4468 <nibbleChange+0xc0>
    4458:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    445c:	8f 3f       	cpi	r24, 0xFF	; 255
    445e:	21 f4       	brne	.+8      	; 0x4468 <nibbleChange+0xc0>
    4460:	80 e1       	ldi	r24, 0x10	; 16
    4462:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4466:	4a c1       	rjmp	.+660    	; 0x46fc <nibbleChange+0x354>
    4468:	6f 3f       	cpi	r22, 0xFF	; 255
    446a:	41 f4       	brne	.+16     	; 0x447c <nibbleChange+0xd4>
    446c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	21 f4       	brne	.+8      	; 0x447c <nibbleChange+0xd4>
    4474:	8f ef       	ldi	r24, 0xFF	; 255
    4476:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    447a:	40 c1       	rjmp	.+640    	; 0x46fc <nibbleChange+0x354>
    447c:	e4 ec       	ldi	r30, 0xC4	; 196
    447e:	f5 e0       	ldi	r31, 0x05	; 5
    4480:	80 81       	ld	r24, Z
    4482:	68 0f       	add	r22, r24
    4484:	60 83       	st	Z, r22
    4486:	3a c1       	rjmp	.+628    	; 0x46fc <nibbleChange+0x354>
    4488:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    448c:	8f 3f       	cpi	r24, 0xFF	; 255
    448e:	09 f4       	brne	.+2      	; 0x4492 <nibbleChange+0xea>
    4490:	c1 e0       	ldi	r28, 0x01	; 1
    4492:	c1 11       	cpse	r28, r1
    4494:	16 c0       	rjmp	.+44     	; 0x44c2 <nibbleChange+0x11a>
    4496:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    449a:	8c 30       	cpi	r24, 0x0C	; 12
    449c:	50 f4       	brcc	.+20     	; 0x44b2 <nibbleChange+0x10a>
    449e:	8b 30       	cpi	r24, 0x0B	; 11
    44a0:	11 f4       	brne	.+4      	; 0x44a6 <nibbleChange+0xfe>
    44a2:	61 30       	cpi	r22, 0x01	; 1
    44a4:	41 f0       	breq	.+16     	; 0x44b6 <nibbleChange+0x10e>
    44a6:	81 11       	cpse	r24, r1
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <nibbleChange+0x106>
    44aa:	6f 3f       	cpi	r22, 0xFF	; 255
    44ac:	31 f0       	breq	.+12     	; 0x44ba <nibbleChange+0x112>
    44ae:	68 0f       	add	r22, r24
    44b0:	05 c0       	rjmp	.+10     	; 0x44bc <nibbleChange+0x114>
    44b2:	60 e0       	ldi	r22, 0x00	; 0
    44b4:	03 c0       	rjmp	.+6      	; 0x44bc <nibbleChange+0x114>
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <nibbleChange+0x114>
    44ba:	6b e0       	ldi	r22, 0x0B	; 11
    44bc:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    44c0:	2b c0       	rjmp	.+86     	; 0x4518 <nibbleChange+0x170>
    44c2:	21 11       	cpse	r18, r1
    44c4:	0a c0       	rjmp	.+20     	; 0x44da <nibbleChange+0x132>
    44c6:	81 11       	cpse	r24, r1
    44c8:	02 c0       	rjmp	.+4      	; 0x44ce <nibbleChange+0x126>
    44ca:	6f 3f       	cpi	r22, 0xFF	; 255
    44cc:	c1 f0       	breq	.+48     	; 0x44fe <nibbleChange+0x156>
    44ce:	8a 30       	cpi	r24, 0x0A	; 10
    44d0:	11 f4       	brne	.+4      	; 0x44d6 <nibbleChange+0x12e>
    44d2:	61 30       	cpi	r22, 0x01	; 1
    44d4:	b1 f0       	breq	.+44     	; 0x4502 <nibbleChange+0x15a>
    44d6:	68 0f       	add	r22, r24
    44d8:	1d c0       	rjmp	.+58     	; 0x4514 <nibbleChange+0x16c>
    44da:	81 11       	cpse	r24, r1
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <nibbleChange+0x13a>
    44de:	6f 3f       	cpi	r22, 0xFF	; 255
    44e0:	91 f0       	breq	.+36     	; 0x4506 <nibbleChange+0x15e>
    44e2:	8a 30       	cpi	r24, 0x0A	; 10
    44e4:	11 f4       	brne	.+4      	; 0x44ea <nibbleChange+0x142>
    44e6:	61 30       	cpi	r22, 0x01	; 1
    44e8:	81 f0       	breq	.+32     	; 0x450a <nibbleChange+0x162>
    44ea:	8f 3f       	cpi	r24, 0xFF	; 255
    44ec:	11 f4       	brne	.+4      	; 0x44f2 <nibbleChange+0x14a>
    44ee:	61 30       	cpi	r22, 0x01	; 1
    44f0:	71 f0       	breq	.+28     	; 0x450e <nibbleChange+0x166>
    44f2:	8f 3f       	cpi	r24, 0xFF	; 255
    44f4:	11 f4       	brne	.+4      	; 0x44fa <nibbleChange+0x152>
    44f6:	6f 3f       	cpi	r22, 0xFF	; 255
    44f8:	61 f0       	breq	.+24     	; 0x4512 <nibbleChange+0x16a>
    44fa:	68 0f       	add	r22, r24
    44fc:	0b c0       	rjmp	.+22     	; 0x4514 <nibbleChange+0x16c>
    44fe:	6a e0       	ldi	r22, 0x0A	; 10
    4500:	09 c0       	rjmp	.+18     	; 0x4514 <nibbleChange+0x16c>
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <nibbleChange+0x16c>
    4506:	6f ef       	ldi	r22, 0xFF	; 255
    4508:	05 c0       	rjmp	.+10     	; 0x4514 <nibbleChange+0x16c>
    450a:	6f ef       	ldi	r22, 0xFF	; 255
    450c:	03 c0       	rjmp	.+6      	; 0x4514 <nibbleChange+0x16c>
    450e:	60 e0       	ldi	r22, 0x00	; 0
    4510:	01 c0       	rjmp	.+2      	; 0x4514 <nibbleChange+0x16c>
    4512:	6a e0       	ldi	r22, 0x0A	; 10
    4514:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4518:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    451c:	9f 3f       	cpi	r25, 0xFF	; 255
    451e:	09 f4       	brne	.+2      	; 0x4522 <nibbleChange+0x17a>
    4520:	ed c0       	rjmp	.+474    	; 0x46fc <nibbleChange+0x354>
    4522:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4526:	8f 3f       	cpi	r24, 0xFF	; 255
    4528:	09 f4       	brne	.+2      	; 0x452c <nibbleChange+0x184>
    452a:	e8 c0       	rjmp	.+464    	; 0x46fc <nibbleChange+0x354>
    452c:	28 2f       	mov	r18, r24
    452e:	22 0f       	add	r18, r18
    4530:	82 0f       	add	r24, r18
    4532:	28 2f       	mov	r18, r24
    4534:	22 0f       	add	r18, r18
    4536:	22 0f       	add	r18, r18
    4538:	92 0f       	add	r25, r18
    453a:	0a f0       	brmi	.+2      	; 0x453e <nibbleChange+0x196>
    453c:	df c0       	rjmp	.+446    	; 0x46fc <nibbleChange+0x354>
    453e:	e4 ec       	ldi	r30, 0xC4	; 196
    4540:	f5 e0       	ldi	r31, 0x05	; 5
    4542:	87 e0       	ldi	r24, 0x07	; 7
    4544:	80 83       	st	Z, r24
    4546:	8a e0       	ldi	r24, 0x0A	; 10
    4548:	81 83       	std	Z+1, r24	; 0x01
    454a:	d8 c0       	rjmp	.+432    	; 0x46fc <nibbleChange+0x354>
    454c:	c1 11       	cpse	r28, r1
    454e:	07 c0       	rjmp	.+14     	; 0x455e <nibbleChange+0x1b6>
    4550:	e4 ec       	ldi	r30, 0xC4	; 196
    4552:	f5 e0       	ldi	r31, 0x05	; 5
    4554:	80 81       	ld	r24, Z
    4556:	68 0f       	add	r22, r24
    4558:	67 70       	andi	r22, 0x07	; 7
    455a:	60 83       	st	Z, r22
    455c:	cf c0       	rjmp	.+414    	; 0x46fc <nibbleChange+0x354>
    455e:	d0 e0       	ldi	r29, 0x00	; 0
    4560:	04 ec       	ldi	r16, 0xC4	; 196
    4562:	15 e0       	ldi	r17, 0x05	; 5
    4564:	cc 53       	subi	r28, 0x3C	; 60
    4566:	da 4f       	sbci	r29, 0xFA	; 250
    4568:	88 81       	ld	r24, Y
    456a:	86 0f       	add	r24, r22
    456c:	14 df       	rcall	.-472    	; 0x4396 <nibbleCheckOvfl>
    456e:	88 83       	st	Y, r24
    4570:	f8 01       	movw	r30, r16
    4572:	81 81       	ldd	r24, Z+1	; 0x01
    4574:	92 81       	ldd	r25, Z+2	; 0x02
    4576:	88 0f       	add	r24, r24
    4578:	28 2f       	mov	r18, r24
    457a:	22 0f       	add	r18, r18
    457c:	22 0f       	add	r18, r18
    457e:	82 0f       	add	r24, r18
    4580:	89 0f       	add	r24, r25
    4582:	80 32       	cpi	r24, 0x20	; 32
    4584:	2c f0       	brlt	.+10     	; 0x4590 <nibbleChange+0x1e8>
    4586:	83 e0       	ldi	r24, 0x03	; 3
    4588:	81 83       	std	Z+1, r24	; 0x01
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	82 83       	std	Z+2, r24	; 0x02
    458e:	b6 c0       	rjmp	.+364    	; 0x46fc <nibbleChange+0x354>
    4590:	88 23       	and	r24, r24
    4592:	0c f0       	brlt	.+2      	; 0x4596 <nibbleChange+0x1ee>
    4594:	b3 c0       	rjmp	.+358    	; 0x46fc <nibbleChange+0x354>
    4596:	e4 ec       	ldi	r30, 0xC4	; 196
    4598:	f5 e0       	ldi	r31, 0x05	; 5
    459a:	11 82       	std	Z+1, r1	; 0x01
    459c:	12 82       	std	Z+2, r1	; 0x02
    459e:	ae c0       	rjmp	.+348    	; 0x46fc <nibbleChange+0x354>
    45a0:	d0 e0       	ldi	r29, 0x00	; 0
    45a2:	04 ec       	ldi	r16, 0xC4	; 196
    45a4:	15 e0       	ldi	r17, 0x05	; 5
    45a6:	cc 53       	subi	r28, 0x3C	; 60
    45a8:	da 4f       	sbci	r29, 0xFA	; 250
    45aa:	88 81       	ld	r24, Y
    45ac:	86 0f       	add	r24, r22
    45ae:	f3 de       	rcall	.-538    	; 0x4396 <nibbleCheckOvfl>
    45b0:	88 83       	st	Y, r24
    45b2:	f8 01       	movw	r30, r16
    45b4:	20 81       	ld	r18, Z
    45b6:	81 81       	ldd	r24, Z+1	; 0x01
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	ac 01       	movw	r20, r24
    45bc:	44 0f       	add	r20, r20
    45be:	55 1f       	adc	r21, r21
    45c0:	88 0f       	add	r24, r24
    45c2:	99 1f       	adc	r25, r25
    45c4:	88 0f       	add	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	88 0f       	add	r24, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	84 0f       	add	r24, r20
    45ce:	95 1f       	adc	r25, r21
    45d0:	f4 e6       	ldi	r31, 0x64	; 100
    45d2:	2f 9f       	mul	r18, r31
    45d4:	80 0d       	add	r24, r0
    45d6:	91 1d       	adc	r25, r1
    45d8:	11 24       	eor	r1, r1
    45da:	f8 01       	movw	r30, r16
    45dc:	22 81       	ldd	r18, Z+2	; 0x02
    45de:	82 0f       	add	r24, r18
    45e0:	91 1d       	adc	r25, r1
    45e2:	8f 3f       	cpi	r24, 0xFF	; 255
    45e4:	91 05       	cpc	r25, r1
    45e6:	09 f0       	breq	.+2      	; 0x45ea <nibbleChange+0x242>
    45e8:	0c f4       	brge	.+2      	; 0x45ec <nibbleChange+0x244>
    45ea:	88 c0       	rjmp	.+272    	; 0x46fc <nibbleChange+0x354>
    45ec:	82 e0       	ldi	r24, 0x02	; 2
    45ee:	80 83       	st	Z, r24
    45f0:	85 e0       	ldi	r24, 0x05	; 5
    45f2:	81 83       	std	Z+1, r24	; 0x01
    45f4:	82 83       	std	Z+2, r24	; 0x02
    45f6:	82 c0       	rjmp	.+260    	; 0x46fc <nibbleChange+0x354>
    45f8:	22 23       	and	r18, r18
    45fa:	a1 f0       	breq	.+40     	; 0x4624 <nibbleChange+0x27c>
    45fc:	d0 e0       	ldi	r29, 0x00	; 0
    45fe:	fe 01       	movw	r30, r28
    4600:	ec 53       	subi	r30, 0x3C	; 60
    4602:	fa 4f       	sbci	r31, 0xFA	; 250
    4604:	80 81       	ld	r24, Z
    4606:	68 0f       	add	r22, r24
    4608:	60 83       	st	Z, r22
    460a:	64 30       	cpi	r22, 0x04	; 4
    460c:	19 f4       	brne	.+6      	; 0x4614 <nibbleChange+0x26c>
    460e:	8f ef       	ldi	r24, 0xFF	; 255
    4610:	80 83       	st	Z, r24
    4612:	74 c0       	rjmp	.+232    	; 0x46fc <nibbleChange+0x354>
    4614:	6e 3f       	cpi	r22, 0xFE	; 254
    4616:	09 f0       	breq	.+2      	; 0x461a <nibbleChange+0x272>
    4618:	71 c0       	rjmp	.+226    	; 0x46fc <nibbleChange+0x354>
    461a:	cc 53       	subi	r28, 0x3C	; 60
    461c:	da 4f       	sbci	r29, 0xFA	; 250
    461e:	83 e0       	ldi	r24, 0x03	; 3
    4620:	88 83       	st	Y, r24
    4622:	6c c0       	rjmp	.+216    	; 0x46fc <nibbleChange+0x354>
    4624:	d0 e0       	ldi	r29, 0x00	; 0
    4626:	fe 01       	movw	r30, r28
    4628:	ec 53       	subi	r30, 0x3C	; 60
    462a:	fa 4f       	sbci	r31, 0xFA	; 250
    462c:	80 81       	ld	r24, Z
    462e:	81 11       	cpse	r24, r1
    4630:	05 c0       	rjmp	.+10     	; 0x463c <nibbleChange+0x294>
    4632:	6f 3f       	cpi	r22, 0xFF	; 255
    4634:	19 f4       	brne	.+6      	; 0x463c <nibbleChange+0x294>
    4636:	83 e0       	ldi	r24, 0x03	; 3
    4638:	80 83       	st	Z, r24
    463a:	60 c0       	rjmp	.+192    	; 0x46fc <nibbleChange+0x354>
    463c:	83 30       	cpi	r24, 0x03	; 3
    463e:	31 f4       	brne	.+12     	; 0x464c <nibbleChange+0x2a4>
    4640:	61 30       	cpi	r22, 0x01	; 1
    4642:	21 f4       	brne	.+8      	; 0x464c <nibbleChange+0x2a4>
    4644:	cc 53       	subi	r28, 0x3C	; 60
    4646:	da 4f       	sbci	r29, 0xFA	; 250
    4648:	18 82       	st	Y, r1
    464a:	58 c0       	rjmp	.+176    	; 0x46fc <nibbleChange+0x354>
    464c:	cc 53       	subi	r28, 0x3C	; 60
    464e:	da 4f       	sbci	r29, 0xFA	; 250
    4650:	68 0f       	add	r22, r24
    4652:	68 83       	st	Y, r22
    4654:	53 c0       	rjmp	.+166    	; 0x46fc <nibbleChange+0x354>
    4656:	d0 e0       	ldi	r29, 0x00	; 0
    4658:	cc 53       	subi	r28, 0x3C	; 60
    465a:	da 4f       	sbci	r29, 0xFA	; 250
    465c:	88 81       	ld	r24, Y
    465e:	68 0f       	add	r22, r24
    4660:	63 70       	andi	r22, 0x03	; 3
    4662:	68 83       	st	Y, r22
    4664:	4b c0       	rjmp	.+150    	; 0x46fc <nibbleChange+0x354>
    4666:	e4 ec       	ldi	r30, 0xC4	; 196
    4668:	f5 e0       	ldi	r31, 0x05	; 5
    466a:	80 81       	ld	r24, Z
    466c:	80 95       	com	r24
    466e:	80 83       	st	Z, r24
    4670:	45 c0       	rjmp	.+138    	; 0x46fc <nibbleChange+0x354>
    4672:	d0 e0       	ldi	r29, 0x00	; 0
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	61 fd       	sbrc	r22, 1
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	cc 53       	subi	r28, 0x3C	; 60
    467c:	da 4f       	sbci	r29, 0xFA	; 250
    467e:	88 83       	st	Y, r24
    4680:	3d c0       	rjmp	.+122    	; 0x46fc <nibbleChange+0x354>
    4682:	61 30       	cpi	r22, 0x01	; 1
    4684:	41 f4       	brne	.+16     	; 0x4696 <nibbleChange+0x2ee>
    4686:	d0 e0       	ldi	r29, 0x00	; 0
    4688:	cc 53       	subi	r28, 0x3C	; 60
    468a:	da 4f       	sbci	r29, 0xFA	; 250
    468c:	88 81       	ld	r24, Y
    468e:	87 70       	andi	r24, 0x07	; 7
    4690:	8f 5f       	subi	r24, 0xFF	; 255
    4692:	88 83       	st	Y, r24
    4694:	33 c0       	rjmp	.+102    	; 0x46fc <nibbleChange+0x354>
    4696:	ec 2f       	mov	r30, r28
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	ec 53       	subi	r30, 0x3C	; 60
    469c:	fa 4f       	sbci	r31, 0xFA	; 250
    469e:	80 81       	ld	r24, Z
    46a0:	82 50       	subi	r24, 0x02	; 2
    46a2:	87 70       	andi	r24, 0x07	; 7
    46a4:	8f 5f       	subi	r24, 0xFF	; 255
    46a6:	80 83       	st	Z, r24
    46a8:	29 c0       	rjmp	.+82     	; 0x46fc <nibbleChange+0x354>
    46aa:	e4 ec       	ldi	r30, 0xC4	; 196
    46ac:	f5 e0       	ldi	r31, 0x05	; 5
    46ae:	90 81       	ld	r25, Z
    46b0:	81 81       	ldd	r24, Z+1	; 0x01
    46b2:	99 0f       	add	r25, r25
    46b4:	29 2f       	mov	r18, r25
    46b6:	22 0f       	add	r18, r18
    46b8:	22 0f       	add	r18, r18
    46ba:	92 0f       	add	r25, r18
    46bc:	89 0f       	add	r24, r25
    46be:	c1 11       	cpse	r28, r1
    46c0:	07 c0       	rjmp	.+14     	; 0x46d0 <nibbleChange+0x328>
    46c2:	66 0f       	add	r22, r22
    46c4:	96 2f       	mov	r25, r22
    46c6:	99 0f       	add	r25, r25
    46c8:	99 0f       	add	r25, r25
    46ca:	69 0f       	add	r22, r25
    46cc:	68 0f       	add	r22, r24
    46ce:	01 c0       	rjmp	.+2      	; 0x46d2 <nibbleChange+0x32a>
    46d0:	68 0f       	add	r22, r24
    46d2:	66 23       	and	r22, r22
    46d4:	1c f0       	brlt	.+6      	; 0x46dc <nibbleChange+0x334>
    46d6:	61 34       	cpi	r22, 0x41	; 65
    46d8:	1c f4       	brge	.+6      	; 0x46e0 <nibbleChange+0x338>
    46da:	03 c0       	rjmp	.+6      	; 0x46e2 <nibbleChange+0x33a>
    46dc:	60 e0       	ldi	r22, 0x00	; 0
    46de:	01 c0       	rjmp	.+2      	; 0x46e2 <nibbleChange+0x33a>
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    46e6:	06 c0       	rjmp	.+12     	; 0x46f4 <nibbleChange+0x34c>
    46e8:	e4 ec       	ldi	r30, 0xC4	; 196
    46ea:	f5 e0       	ldi	r31, 0x05	; 5
    46ec:	80 81       	ld	r24, Z
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	80 83       	st	Z, r24
    46f2:	6a 50       	subi	r22, 0x0A	; 10
    46f4:	6a 30       	cpi	r22, 0x0A	; 10
    46f6:	c4 f7       	brge	.-16     	; 0x46e8 <nibbleChange+0x340>
    46f8:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	1f 91       	pop	r17
    4702:	0f 91       	pop	r16
    4704:	08 95       	ret

00004706 <nibbleToData>:
    4706:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    470a:	8e 2f       	mov	r24, r30
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	fc 01       	movw	r30, r24
    4710:	32 97       	sbiw	r30, 0x02	; 2
    4712:	ed 30       	cpi	r30, 0x0D	; 13
    4714:	f1 05       	cpc	r31, r1
    4716:	08 f0       	brcs	.+2      	; 0x471a <nibbleToData+0x14>
    4718:	da c0       	rjmp	.+436    	; 0x48ce <nibbleToData+0x1c8>
    471a:	88 27       	eor	r24, r24
    471c:	e7 56       	subi	r30, 0x67	; 103
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	8f 4f       	sbci	r24, 0xFF	; 255
    4722:	0c 94 a3 3c 	jmp	0x7946	; 0x7946 <__tablejump2__>
    4726:	e4 ec       	ldi	r30, 0xC4	; 196
    4728:	f5 e0       	ldi	r31, 0x05	; 5
    472a:	80 81       	ld	r24, Z
    472c:	20 e1       	ldi	r18, 0x10	; 16
    472e:	82 9f       	mul	r24, r18
    4730:	c0 01       	movw	r24, r0
    4732:	11 24       	eor	r1, r1
    4734:	91 81       	ldd	r25, Z+1	; 0x01
    4736:	9f 70       	andi	r25, 0x0F	; 15
    4738:	89 2b       	or	r24, r25
    473a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    473e:	08 95       	ret
    4740:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    4744:	8f ef       	ldi	r24, 0xFF	; 255
    4746:	89 0f       	add	r24, r25
    4748:	80 31       	cpi	r24, 0x10	; 16
    474a:	18 f0       	brcs	.+6      	; 0x4752 <nibbleToData+0x4c>
    474c:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    4750:	08 95       	ret
    4752:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4756:	08 95       	ret
    4758:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    475c:	9f 3f       	cpi	r25, 0xFF	; 255
    475e:	21 f0       	breq	.+8      	; 0x4768 <nibbleToData+0x62>
    4760:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4764:	8f 3f       	cpi	r24, 0xFF	; 255
    4766:	21 f4       	brne	.+8      	; 0x4770 <nibbleToData+0x6a>
    4768:	8f ef       	ldi	r24, 0xFF	; 255
    476a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    476e:	08 95       	ret
    4770:	28 2f       	mov	r18, r24
    4772:	22 0f       	add	r18, r18
    4774:	82 0f       	add	r24, r18
    4776:	88 0f       	add	r24, r24
    4778:	88 0f       	add	r24, r24
    477a:	89 0f       	add	r24, r25
    477c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4780:	08 95       	ret
    4782:	e4 ec       	ldi	r30, 0xC4	; 196
    4784:	f5 e0       	ldi	r31, 0x05	; 5
    4786:	80 81       	ld	r24, Z
    4788:	30 e2       	ldi	r19, 0x20	; 32
    478a:	83 9f       	mul	r24, r19
    478c:	c0 01       	movw	r24, r0
    478e:	11 24       	eor	r1, r1
    4790:	21 81       	ldd	r18, Z+1	; 0x01
    4792:	32 81       	ldd	r19, Z+2	; 0x02
    4794:	22 0f       	add	r18, r18
    4796:	42 2f       	mov	r20, r18
    4798:	44 0f       	add	r20, r20
    479a:	44 0f       	add	r20, r20
    479c:	24 0f       	add	r18, r20
    479e:	23 0f       	add	r18, r19
    47a0:	20 32       	cpi	r18, 0x20	; 32
    47a2:	20 f0       	brcs	.+8      	; 0x47ac <nibbleToData+0xa6>
    47a4:	8f 61       	ori	r24, 0x1F	; 31
    47a6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47aa:	08 95       	ret
    47ac:	82 2b       	or	r24, r18
    47ae:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47b2:	08 95       	ret
    47b4:	e4 ec       	ldi	r30, 0xC4	; 196
    47b6:	f5 e0       	ldi	r31, 0x05	; 5
    47b8:	20 81       	ld	r18, Z
    47ba:	81 81       	ldd	r24, Z+1	; 0x01
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	ac 01       	movw	r20, r24
    47c0:	44 0f       	add	r20, r20
    47c2:	55 1f       	adc	r21, r21
    47c4:	88 0f       	add	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	88 0f       	add	r24, r24
    47ca:	99 1f       	adc	r25, r25
    47cc:	88 0f       	add	r24, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	84 0f       	add	r24, r20
    47d2:	95 1f       	adc	r25, r21
    47d4:	34 e6       	ldi	r19, 0x64	; 100
    47d6:	23 9f       	mul	r18, r19
    47d8:	80 0d       	add	r24, r0
    47da:	91 1d       	adc	r25, r1
    47dc:	11 24       	eor	r1, r1
    47de:	22 81       	ldd	r18, Z+2	; 0x02
    47e0:	82 0f       	add	r24, r18
    47e2:	91 1d       	adc	r25, r1
    47e4:	8f 3f       	cpi	r24, 0xFF	; 255
    47e6:	91 05       	cpc	r25, r1
    47e8:	29 f0       	breq	.+10     	; 0x47f4 <nibbleToData+0xee>
    47ea:	20 f0       	brcs	.+8      	; 0x47f4 <nibbleToData+0xee>
    47ec:	8f ef       	ldi	r24, 0xFF	; 255
    47ee:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f2:	08 95       	ret
    47f4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f8:	08 95       	ret
    47fa:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    47fe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4802:	84 30       	cpi	r24, 0x04	; 4
    4804:	08 f4       	brcc	.+2      	; 0x4808 <nibbleToData+0x102>
    4806:	63 c0       	rjmp	.+198    	; 0x48ce <nibbleToData+0x1c8>
    4808:	8f ef       	ldi	r24, 0xFF	; 255
    480a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    480e:	08 95       	ret
    4810:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4814:	83 70       	andi	r24, 0x03	; 3
    4816:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    481a:	08 95       	ret
    481c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4820:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4824:	08 95       	ret
    4826:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	0c c0       	rjmp	.+24     	; 0x4846 <nibbleToData+0x140>
    482e:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    4832:	99 0f       	add	r25, r25
    4834:	e8 2f       	mov	r30, r24
    4836:	f0 e0       	ldi	r31, 0x00	; 0
    4838:	ec 53       	subi	r30, 0x3C	; 60
    483a:	fa 4f       	sbci	r31, 0xFA	; 250
    483c:	20 81       	ld	r18, Z
    483e:	92 0f       	add	r25, r18
    4840:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    4844:	8f 5f       	subi	r24, 0xFF	; 255
    4846:	88 30       	cpi	r24, 0x08	; 8
    4848:	90 f3       	brcs	.-28     	; 0x482e <nibbleToData+0x128>
    484a:	08 95       	ret
    484c:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    4850:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    4854:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    4858:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    485c:	a2 ea       	ldi	r26, 0xA2	; 162
    485e:	b5 e0       	ldi	r27, 0x05	; 5
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	10 c0       	rjmp	.+32     	; 0x4884 <nibbleToData+0x17e>
    4864:	82 50       	subi	r24, 0x02	; 2
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	ec 53       	subi	r30, 0x3C	; 60
    486a:	fa 4f       	sbci	r31, 0xFA	; 250
    486c:	90 81       	ld	r25, Z
    486e:	e8 2f       	mov	r30, r24
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	ec 53       	subi	r30, 0x3C	; 60
    4874:	fa 4f       	sbci	r31, 0xFA	; 250
    4876:	20 81       	ld	r18, Z
    4878:	30 e1       	ldi	r19, 0x10	; 16
    487a:	23 9f       	mul	r18, r19
    487c:	90 0d       	add	r25, r0
    487e:	11 24       	eor	r1, r1
    4880:	9c 93       	st	X, r25
    4882:	11 96       	adiw	r26, 0x01	; 1
    4884:	ef ef       	ldi	r30, 0xFF	; 255
    4886:	e8 0f       	add	r30, r24
    4888:	81 11       	cpse	r24, r1
    488a:	ec cf       	rjmp	.-40     	; 0x4864 <nibbleToData+0x15e>
    488c:	08 95       	ret
    488e:	e4 ec       	ldi	r30, 0xC4	; 196
    4890:	f5 e0       	ldi	r31, 0x05	; 5
    4892:	20 81       	ld	r18, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	89 2f       	mov	r24, r25
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	88 0f       	add	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	88 0f       	add	r24, r24
    48a2:	99 1f       	adc	r25, r25
    48a4:	88 0f       	add	r24, r24
    48a6:	99 1f       	adc	r25, r25
    48a8:	9f ef       	ldi	r25, 0xFF	; 255
    48aa:	92 0f       	add	r25, r18
    48ac:	89 2b       	or	r24, r25
    48ae:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    48b2:	08 95       	ret
    48b4:	e4 ec       	ldi	r30, 0xC4	; 196
    48b6:	f5 e0       	ldi	r31, 0x05	; 5
    48b8:	80 81       	ld	r24, Z
    48ba:	91 81       	ldd	r25, Z+1	; 0x01
    48bc:	88 0f       	add	r24, r24
    48be:	28 2f       	mov	r18, r24
    48c0:	22 0f       	add	r18, r18
    48c2:	22 0f       	add	r18, r18
    48c4:	82 0f       	add	r24, r18
    48c6:	89 0f       	add	r24, r25
    48c8:	81 50       	subi	r24, 0x01	; 1
    48ca:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    48ce:	08 95       	ret

000048d0 <menuTextOut>:
    48d0:	0f 93       	push	r16
    48d2:	1f 93       	push	r17
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	8c 01       	movw	r16, r24
    48da:	d6 2f       	mov	r29, r22
    48dc:	c0 e0       	ldi	r28, 0x00	; 0
    48de:	0c c0       	rjmp	.+24     	; 0x48f8 <menuTextOut+0x28>
    48e0:	f8 01       	movw	r30, r16
    48e2:	84 91       	lpm	r24, Z
    48e4:	88 23       	and	r24, r24
    48e6:	19 f0       	breq	.+6      	; 0x48ee <menuTextOut+0x1e>
    48e8:	0f 5f       	subi	r16, 0xFF	; 255
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	02 c0       	rjmp	.+4      	; 0x48f2 <menuTextOut+0x22>
    48ee:	8d 2f       	mov	r24, r29
    48f0:	d0 e2       	ldi	r29, 0x20	; 32
    48f2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    48f6:	cf 5f       	subi	r28, 0xFF	; 255
    48f8:	ca 30       	cpi	r28, 0x0A	; 10
    48fa:	90 f3       	brcs	.-28     	; 0x48e0 <menuTextOut+0x10>
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	0f 91       	pop	r16
    4904:	08 95       	ret

00004906 <menuParentMenuToLCD>:
    4906:	80 e4       	ldi	r24, 0x40	; 64
    4908:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    490c:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4910:	e1 11       	cpse	r30, r1
    4912:	07 c0       	rjmp	.+14     	; 0x4922 <menuParentMenuToLCD+0x1c>
    4914:	6a e3       	ldi	r22, 0x3A	; 58
    4916:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    491a:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    491e:	d8 cf       	rjmp	.-80     	; 0x48d0 <menuTextOut>
    4920:	08 95       	ret
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	31 97       	sbiw	r30, 0x01	; 1
    4926:	ee 0f       	add	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	e5 58       	subi	r30, 0x85	; 133
    492c:	fa 4f       	sbci	r31, 0xFA	; 250
    492e:	80 81       	ld	r24, Z
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	6a e3       	ldi	r22, 0x3A	; 58
    4934:	02 96       	adiw	r24, 0x02	; 2
    4936:	cc cf       	rjmp	.-104    	; 0x48d0 <menuTextOut>
    4938:	08 95       	ret

0000493a <menuDisplayValue>:
    493a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    493e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4942:	84 91       	lpm	r24, Z
    4944:	8f 73       	andi	r24, 0x3F	; 63
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	02 97       	sbiw	r24, 0x02	; 2
    494a:	1c f0       	brlt	.+6      	; 0x4952 <menuDisplayValue+0x18>
    494c:	c8 da       	rcall	.-2672   	; 0x3ede <dataToNibbles>
    494e:	ba db       	rcall	.-2188   	; 0x40c4 <nibbleToLCDstring>
    4950:	07 cd       	rjmp	.-1522   	; 0x4360 <LCDStringOut>
    4952:	08 95       	ret

00004954 <menuCursorSetDataNibble>:
    4954:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4958:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    495c:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4960:	e8 0f       	add	r30, r24
    4962:	f1 1d       	adc	r31, r1
    4964:	31 96       	adiw	r30, 0x01	; 1
    4966:	84 91       	lpm	r24, Z
    4968:	82 5e       	subi	r24, 0xE2	; 226
    496a:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    496e:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4978:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    497c:	84 91       	lpm	r24, Z
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	28 17       	cp	r18, r24
    4984:	39 07       	cpc	r19, r25
    4986:	14 f4       	brge	.+4      	; 0x498c <menuCursorSetDataNibble+0x38>
    4988:	68 da       	rcall	.-2864   	; 0x3e5a <softkeyRight>
    498a:	03 c0       	rjmp	.+6      	; 0x4992 <menuCursorSetDataNibble+0x3e>
    498c:	83 e0       	ldi	r24, 0x03	; 3
    498e:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4992:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4996:	88 23       	and	r24, r24
    4998:	11 f0       	breq	.+4      	; 0x499e <menuCursorSetDataNibble+0x4a>
    499a:	59 da       	rcall	.-2894   	; 0x3e4e <softkeyLeft>
    499c:	03 c0       	rjmp	.+6      	; 0x49a4 <menuCursorSetDataNibble+0x50>
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    49a4:	78 da       	rcall	.-2832   	; 0x3e96 <softkeyPlus>
    49a6:	89 da       	rcall	.-2798   	; 0x3eba <softkeyMinus>
    49a8:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <keylabel_toLCD>
    49ac:	08 95       	ret

000049ae <menuCursorSetExtra>:
    49ae:	84 e1       	ldi	r24, 0x14	; 20
    49b0:	0c 94 17 13 	jmp	0x262e	; 0x262e <lcd_goto>
    49b4:	08 95       	ret

000049b6 <menuOnEnterStatusMidiIn>:
    49b6:	0f 93       	push	r16
    49b8:	1f 93       	push	r17
    49ba:	cf 93       	push	r28
    49bc:	f8 df       	rcall	.-16     	; 0x49ae <menuCursorSetExtra>
    49be:	8b ed       	ldi	r24, 0xDB	; 219
    49c0:	93 e0       	ldi	r25, 0x03	; 3
    49c2:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    49c6:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49ca:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49ce:	0e 94 29 3b 	call	0x7652	; 0x7652 <lcd_wordout>
    49d2:	8d e2       	ldi	r24, 0x2D	; 45
    49d4:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    49d8:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49dc:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49e0:	04 97       	sbiw	r24, 0x04	; 4
    49e2:	30 f4       	brcc	.+12     	; 0x49f0 <menuOnEnterStatusMidiIn+0x3a>
    49e4:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49e8:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49ec:	c8 2f       	mov	r28, r24
    49ee:	01 c0       	rjmp	.+2      	; 0x49f2 <menuOnEnterStatusMidiIn+0x3c>
    49f0:	c4 e0       	ldi	r28, 0x04	; 4
    49f2:	00 91 44 16 	lds	r16, 0x1644	; 0x801644 <midiRxInIndex>
    49f6:	10 e0       	ldi	r17, 0x00	; 0
    49f8:	00 5c       	subi	r16, 0xC0	; 192
    49fa:	1b 4e       	sbci	r17, 0xEB	; 235
    49fc:	13 c0       	rjmp	.+38     	; 0x4a24 <menuOnEnterStatusMidiIn+0x6e>
    49fe:	84 e1       	ldi	r24, 0x14	; 20
    4a00:	01 34       	cpi	r16, 0x41	; 65
    4a02:	18 07       	cpc	r17, r24
    4a04:	10 f0       	brcs	.+4      	; 0x4a0a <menuOnEnterStatusMidiIn+0x54>
    4a06:	f8 01       	movw	r30, r16
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <menuOnEnterStatusMidiIn+0x58>
    4a0a:	e0 e4       	ldi	r30, 0x40	; 64
    4a0c:	f5 e1       	ldi	r31, 0x15	; 21
    4a0e:	8f 01       	movw	r16, r30
    4a10:	01 50       	subi	r16, 0x01	; 1
    4a12:	11 09       	sbc	r17, r1
    4a14:	80 81       	ld	r24, Z
    4a16:	0e 94 9d 39 	call	0x733a	; 0x733a <lcd_hexout>
    4a1a:	c1 50       	subi	r28, 0x01	; 1
    4a1c:	19 f0       	breq	.+6      	; 0x4a24 <menuOnEnterStatusMidiIn+0x6e>
    4a1e:	80 e2       	ldi	r24, 0x20	; 32
    4a20:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4a24:	c1 11       	cpse	r28, r1
    4a26:	eb cf       	rjmp	.-42     	; 0x49fe <menuOnEnterStatusMidiIn+0x48>
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	cf 91       	pop	r28
    4a2c:	1f 91       	pop	r17
    4a2e:	0f 91       	pop	r16
    4a30:	08 95       	ret

00004a32 <menuOnEnterStatusMidiOut>:
    4a32:	0f 93       	push	r16
    4a34:	1f 93       	push	r17
    4a36:	cf 93       	push	r28
    4a38:	ba df       	rcall	.-140    	; 0x49ae <menuCursorSetExtra>
    4a3a:	86 ed       	ldi	r24, 0xD6	; 214
    4a3c:	93 e0       	ldi	r25, 0x03	; 3
    4a3e:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4a42:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a46:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a4a:	0e 94 29 3b 	call	0x7652	; 0x7652 <lcd_wordout>
    4a4e:	8d e2       	ldi	r24, 0x2D	; 45
    4a50:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4a54:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a58:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a5c:	04 97       	sbiw	r24, 0x04	; 4
    4a5e:	30 f4       	brcc	.+12     	; 0x4a6c <menuOnEnterStatusMidiOut+0x3a>
    4a60:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a64:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a68:	c8 2f       	mov	r28, r24
    4a6a:	01 c0       	rjmp	.+2      	; 0x4a6e <menuOnEnterStatusMidiOut+0x3c>
    4a6c:	c4 e0       	ldi	r28, 0x04	; 4
    4a6e:	00 91 ef 13 	lds	r16, 0x13EF	; 0x8013ef <midiTxInIndex>
    4a72:	10 e0       	ldi	r17, 0x00	; 0
    4a74:	0f 5b       	subi	r16, 0xBF	; 191
    4a76:	1a 4e       	sbci	r17, 0xEA	; 234
    4a78:	13 c0       	rjmp	.+38     	; 0x4aa0 <menuOnEnterStatusMidiOut+0x6e>
    4a7a:	85 e1       	ldi	r24, 0x15	; 21
    4a7c:	02 34       	cpi	r16, 0x42	; 66
    4a7e:	18 07       	cpc	r17, r24
    4a80:	10 f0       	brcs	.+4      	; 0x4a86 <menuOnEnterStatusMidiOut+0x54>
    4a82:	f8 01       	movw	r30, r16
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <menuOnEnterStatusMidiOut+0x58>
    4a86:	e1 e4       	ldi	r30, 0x41	; 65
    4a88:	f6 e1       	ldi	r31, 0x16	; 22
    4a8a:	8f 01       	movw	r16, r30
    4a8c:	01 50       	subi	r16, 0x01	; 1
    4a8e:	11 09       	sbc	r17, r1
    4a90:	80 81       	ld	r24, Z
    4a92:	0e 94 9d 39 	call	0x733a	; 0x733a <lcd_hexout>
    4a96:	c1 50       	subi	r28, 0x01	; 1
    4a98:	19 f0       	breq	.+6      	; 0x4aa0 <menuOnEnterStatusMidiOut+0x6e>
    4a9a:	80 e2       	ldi	r24, 0x20	; 32
    4a9c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4aa0:	c1 11       	cpse	r28, r1
    4aa2:	eb cf       	rjmp	.-42     	; 0x4a7a <menuOnEnterStatusMidiOut+0x48>
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	cf 91       	pop	r28
    4aa8:	1f 91       	pop	r17
    4aaa:	0f 91       	pop	r16
    4aac:	08 95       	ret

00004aae <menuOnEnterLogDisp>:
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab6:	a9 f4       	brne	.+42     	; 0x4ae2 <menuOnEnterLogDisp+0x34>
    4ab8:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4abc:	81 50       	subi	r24, 0x01	; 1
    4abe:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4ac2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.3053>
    4ac6:	66 ec       	ldi	r22, 0xC6	; 198
    4ac8:	72 e1       	ldi	r23, 0x12	; 18
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    4ad0:	60 ec       	ldi	r22, 0xC0	; 192
    4ad2:	72 e1       	ldi	r23, 0x12	; 18
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    4ada:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    4ade:	cf ef       	ldi	r28, 0xFF	; 255
    4ae0:	2f c0       	rjmp	.+94     	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4ae2:	84 30       	cpi	r24, 0x04	; 4
    4ae4:	49 f4       	brne	.+18     	; 0x4af8 <menuOnEnterLogDisp+0x4a>
    4ae6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4aea:	88 23       	and	r24, r24
    4aec:	21 f1       	breq	.+72     	; 0x4b36 <menuOnEnterLogDisp+0x88>
    4aee:	81 50       	subi	r24, 0x01	; 1
    4af0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4af4:	cf ef       	ldi	r28, 0xFF	; 255
    4af6:	24 c0       	rjmp	.+72     	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4af8:	81 30       	cpi	r24, 0x01	; 1
    4afa:	91 f4       	brne	.+36     	; 0x4b20 <menuOnEnterLogDisp+0x72>
    4afc:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3052>
    4b00:	10 e0       	ldi	r17, 0x00	; 0
    4b02:	0f 5f       	subi	r16, 0xFF	; 255
    4b04:	1f 4f       	sbci	r17, 0xFF	; 255
    4b06:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	08 17       	cp	r16, r24
    4b0e:	19 07       	cpc	r17, r25
    4b10:	a4 f4       	brge	.+40     	; 0x4b3a <menuOnEnterLogDisp+0x8c>
    4b12:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b16:	8f 5f       	subi	r24, 0xFF	; 255
    4b18:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4b1c:	cf ef       	ldi	r28, 0xFF	; 255
    4b1e:	10 c0       	rjmp	.+32     	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4b20:	83 30       	cpi	r24, 0x03	; 3
    4b22:	11 f0       	breq	.+4      	; 0x4b28 <menuOnEnterLogDisp+0x7a>
    4b24:	85 30       	cpi	r24, 0x05	; 5
    4b26:	59 f4       	brne	.+22     	; 0x4b3e <menuOnEnterLogDisp+0x90>
    4b28:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b2c:	80 95       	com	r24
    4b2e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.3053>
    4b32:	cf ef       	ldi	r28, 0xFF	; 255
    4b34:	05 c0       	rjmp	.+10     	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4b36:	cf ef       	ldi	r28, 0xFF	; 255
    4b38:	03 c0       	rjmp	.+6      	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4b3a:	cf ef       	ldi	r28, 0xFF	; 255
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <menuOnEnterLogDisp+0x92>
    4b3e:	c0 e0       	ldi	r28, 0x00	; 0
    4b40:	cf 3f       	cpi	r28, 0xFF	; 255
    4b42:	09 f0       	breq	.+2      	; 0x4b46 <menuOnEnterLogDisp+0x98>
    4b44:	54 c0       	rjmp	.+168    	; 0x4bee <menuOnEnterLogDisp+0x140>
    4b46:	33 df       	rcall	.-410    	; 0x49ae <menuCursorSetExtra>
    4b48:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4b4c:	81 11       	cpse	r24, r1
    4b4e:	06 c0       	rjmp	.+12     	; 0x4b5c <menuOnEnterLogDisp+0xae>
    4b50:	89 e9       	ldi	r24, 0x99	; 153
    4b52:	93 e0       	ldi	r25, 0x03	; 3
    4b54:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4b58:	c0 e0       	ldi	r28, 0x00	; 0
    4b5a:	1d c0       	rjmp	.+58     	; 0x4b96 <menuOnEnterLogDisp+0xe8>
    4b5c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b60:	8f 5f       	subi	r24, 0xFF	; 255
    4b62:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
    4b66:	8a e3       	ldi	r24, 0x3A	; 58
    4b68:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4b6c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b70:	81 11       	cpse	r24, r1
    4b72:	08 c0       	rjmp	.+16     	; 0x4b84 <menuOnEnterLogDisp+0xd6>
    4b74:	60 e2       	ldi	r22, 0x20	; 32
    4b76:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b7a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <log_getShortTextFromIndex>
    4b7e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <lcd_puts>
    4b82:	06 c0       	rjmp	.+12     	; 0x4b90 <menuOnEnterLogDisp+0xe2>
    4b84:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b88:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <log_getErrorText>
    4b8c:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4b90:	0e 94 b1 3b 	call	0x7762	; 0x7762 <lcd_clrEol>
    4b94:	0c df       	rcall	.-488    	; 0x49ae <menuCursorSetExtra>
    4b96:	61 e0       	ldi	r22, 0x01	; 1
    4b98:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <menuOnEnterLogDisp+0xf4>
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	0e 94 5f 3c 	call	0x78be	; 0x78be <keylabel_statcheck>
    4ba8:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3052>
    4bac:	10 e0       	ldi	r17, 0x00	; 0
    4bae:	0f 5f       	subi	r16, 0xFF	; 255
    4bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb2:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	08 17       	cp	r16, r24
    4bba:	19 07       	cpc	r17, r25
    4bbc:	34 f4       	brge	.+12     	; 0x4bca <menuOnEnterLogDisp+0x11c>
    4bbe:	60 ee       	ldi	r22, 0xE0	; 224
    4bc0:	72 e1       	ldi	r23, 0x12	; 18
    4bc2:	83 e0       	ldi	r24, 0x03	; 3
    4bc4:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    4bc8:	03 c0       	rjmp	.+6      	; 0x4bd0 <menuOnEnterLogDisp+0x122>
    4bca:	83 e0       	ldi	r24, 0x03	; 3
    4bcc:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4bd0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4bd4:	88 23       	and	r24, r24
    4bd6:	31 f0       	breq	.+12     	; 0x4be4 <menuOnEnterLogDisp+0x136>
    4bd8:	6e ed       	ldi	r22, 0xDE	; 222
    4bda:	72 e1       	ldi	r23, 0x12	; 18
    4bdc:	82 e0       	ldi	r24, 0x02	; 2
    4bde:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
    4be2:	03 c0       	rjmp	.+6      	; 0x4bea <menuOnEnterLogDisp+0x13c>
    4be4:	82 e0       	ldi	r24, 0x02	; 2
    4be6:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4bea:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    4bee:	8c 2f       	mov	r24, r28
    4bf0:	cf 91       	pop	r28
    4bf2:	1f 91       	pop	r17
    4bf4:	0f 91       	pop	r16
    4bf6:	08 95       	ret

00004bf8 <menuCursorSetMenu>:
    4bf8:	8a e4       	ldi	r24, 0x4A	; 74
    4bfa:	0c 94 17 13 	jmp	0x262e	; 0x262e <lcd_goto>
    4bfe:	08 95       	ret

00004c00 <menuClearExtraDisp>:
    4c00:	d6 de       	rcall	.-596    	; 0x49ae <menuCursorSetExtra>
    4c02:	8a e0       	ldi	r24, 0x0A	; 10
    4c04:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <lcd_blank>
    4c08:	08 95       	ret

00004c0a <menu_ClearDataDisp>:
    4c0a:	8e e1       	ldi	r24, 0x1E	; 30
    4c0c:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c10:	8a e0       	ldi	r24, 0x0A	; 10
    4c12:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <lcd_blank>
    4c16:	08 95       	ret

00004c18 <menuClearMenuDisp>:
    4c18:	80 e4       	ldi	r24, 0x40	; 64
    4c1a:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c1e:	8a e0       	ldi	r24, 0x0A	; 10
    4c20:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    4c24:	e9 df       	rcall	.-46     	; 0x4bf8 <menuCursorSetMenu>
    4c26:	8a e0       	ldi	r24, 0x0A	; 10
    4c28:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <lcd_blank>
    4c2c:	08 95       	ret

00004c2e <menu_ClearAllDisp>:
    4c2e:	f4 df       	rcall	.-24     	; 0x4c18 <menuClearMenuDisp>
    4c30:	ec df       	rcall	.-40     	; 0x4c0a <menu_ClearDataDisp>
    4c32:	e6 cf       	rjmp	.-52     	; 0x4c00 <menuClearExtraDisp>
    4c34:	08 95       	ret

00004c36 <menuCheckArrowDown>:
    4c36:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c3a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c3e:	84 91       	lpm	r24, Z
    4c40:	8f 73       	andi	r24, 0x3F	; 63
    4c42:	81 30       	cpi	r24, 0x01	; 1
    4c44:	11 f4       	brne	.+4      	; 0x4c4a <menuCheckArrowDown+0x14>
    4c46:	0f c9       	rjmp	.-3554   	; 0x3e66 <softkeyDown>
    4c48:	08 95       	ret
    4c4a:	3e 96       	adiw	r30, 0x0e	; 14
    4c4c:	05 90       	lpm	r0, Z+
    4c4e:	f4 91       	lpm	r31, Z
    4c50:	e0 2d       	mov	r30, r0
    4c52:	30 97       	sbiw	r30, 0x00	; 0
    4c54:	59 f0       	breq	.+22     	; 0x4c6c <menuCheckArrowDown+0x36>
    4c56:	89 30       	cpi	r24, 0x09	; 9
    4c58:	39 f4       	brne	.+14     	; 0x4c68 <menuCheckArrowDown+0x32>
    4c5a:	80 81       	ld	r24, Z
    4c5c:	81 11       	cpse	r24, r1
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <menuCheckArrowDown+0x2e>
    4c60:	08 c9       	rjmp	.-3568   	; 0x3e72 <softkeyOn>
    4c62:	08 95       	ret
    4c64:	0c c9       	rjmp	.-3560   	; 0x3e7e <softkeyOff>
    4c66:	08 95       	ret
    4c68:	fe c8       	rjmp	.-3588   	; 0x3e66 <softkeyDown>
    4c6a:	08 95       	ret
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	0c 94 2c 3c 	jmp	0x7858	; 0x7858 <keylabel_clr>
    4c72:	08 95       	ret

00004c74 <menuCurrMenuToLCD>:
    4c74:	cf 93       	push	r28
    4c76:	89 e4       	ldi	r24, 0x49	; 73
    4c78:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c7c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c80:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c84:	c4 91       	lpm	r28, Z
    4c86:	c0 7c       	andi	r28, 0xC0	; 192
    4c88:	c0 38       	cpi	r28, 0x80	; 128
    4c8a:	39 f4       	brne	.+14     	; 0x4c9a <menuCurrMenuToLCD+0x26>
    4c8c:	80 e2       	ldi	r24, 0x20	; 32
    4c8e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4c92:	82 e0       	ldi	r24, 0x02	; 2
    4c94:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4c98:	04 c0       	rjmp	.+8      	; 0x4ca2 <menuCurrMenuToLCD+0x2e>
    4c9a:	8f e7       	ldi	r24, 0x7F	; 127
    4c9c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4ca0:	d6 d8       	rcall	.-3668   	; 0x3e4e <softkeyLeft>
    4ca2:	c0 3c       	cpi	r28, 0xC0	; 192
    4ca4:	29 f4       	brne	.+10     	; 0x4cb0 <menuCurrMenuToLCD+0x3c>
    4ca6:	83 e0       	ldi	r24, 0x03	; 3
    4ca8:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4cac:	c0 e2       	ldi	r28, 0x20	; 32
    4cae:	02 c0       	rjmp	.+4      	; 0x4cb4 <menuCurrMenuToLCD+0x40>
    4cb0:	d4 d8       	rcall	.-3672   	; 0x3e5a <softkeyRight>
    4cb2:	ce e7       	ldi	r28, 0x7E	; 126
    4cb4:	ea d8       	rcall	.-3628   	; 0x3e8a <softkeyUp>
    4cb6:	bf df       	rcall	.-130    	; 0x4c36 <menuCheckArrowDown>
    4cb8:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4cbc:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cc0:	6c 2f       	mov	r22, r28
    4cc2:	02 96       	adiw	r24, 0x02	; 2
    4cc4:	05 de       	rcall	.-1014   	; 0x48d0 <menuTextOut>
    4cc6:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    4cca:	96 df       	rcall	.-212    	; 0x4bf8 <menuCursorSetMenu>
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <menuItemChanged>:
    4cd0:	8f ef       	ldi	r24, 0xFF	; 255
    4cd2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4cd6:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4cda:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cde:	fc 01       	movw	r30, r24
    4ce0:	24 91       	lpm	r18, Z
    4ce2:	62 2f       	mov	r22, r18
    4ce4:	6f 73       	andi	r22, 0x3F	; 63
    4ce6:	62 30       	cpi	r22, 0x02	; 2
    4ce8:	08 f4       	brcc	.+2      	; 0x4cec <menuItemChanged+0x1c>
    4cea:	49 c0       	rjmp	.+146    	; 0x4d7e <menuItemChanged+0xae>
    4cec:	9c 01       	movw	r18, r24
    4cee:	22 5f       	subi	r18, 0xF2	; 242
    4cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf2:	f9 01       	movw	r30, r18
    4cf4:	45 91       	lpm	r20, Z+
    4cf6:	55 91       	lpm	r21, Z+
    4cf8:	41 15       	cp	r20, r1
    4cfa:	51 05       	cpc	r21, r1
    4cfc:	09 f4       	brne	.+2      	; 0x4d00 <menuItemChanged+0x30>
    4cfe:	3f c0       	rjmp	.+126    	; 0x4d7e <menuItemChanged+0xae>
    4d00:	e6 2f       	mov	r30, r22
    4d02:	f0 e0       	ldi	r31, 0x00	; 0
    4d04:	31 97       	sbiw	r30, 0x01	; 1
    4d06:	9f 01       	movw	r18, r30
    4d08:	22 0f       	add	r18, r18
    4d0a:	33 1f       	adc	r19, r19
    4d0c:	22 0f       	add	r18, r18
    4d0e:	33 1f       	adc	r19, r19
    4d10:	22 0f       	add	r18, r18
    4d12:	33 1f       	adc	r19, r19
    4d14:	e2 0f       	add	r30, r18
    4d16:	f3 1f       	adc	r31, r19
    4d18:	e7 51       	subi	r30, 0x17	; 23
    4d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    4d1c:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4d20:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4d24:	24 91       	lpm	r18, Z
    4d26:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	25 91       	lpm	r18, Z+
    4d2e:	2f 73       	andi	r18, 0x3F	; 63
    4d30:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4d34:	24 91       	lpm	r18, Z
    4d36:	22 23       	and	r18, r18
    4d38:	2c f4       	brge	.+10     	; 0x4d44 <menuItemChanged+0x74>
    4d3a:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4d3e:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <menuItemChanged+0x78>
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	24 0f       	add	r18, r20
    4d4a:	35 1f       	adc	r19, r21
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	84 91       	lpm	r24, Z
    4d50:	8f 73       	andi	r24, 0x3F	; 63
    4d52:	8b 30       	cpi	r24, 0x0B	; 11
    4d54:	71 f4       	brne	.+28     	; 0x4d72 <menuItemChanged+0xa2>
    4d56:	f9 01       	movw	r30, r18
    4d58:	80 81       	ld	r24, Z
    4d5a:	91 81       	ldd	r25, Z+1	; 0x01
    4d5c:	a2 81       	ldd	r26, Z+2	; 0x02
    4d5e:	b3 81       	ldd	r27, Z+3	; 0x03
    4d60:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4d64:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4d68:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4d6c:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4d70:	04 c0       	rjmp	.+8      	; 0x4d7a <menuItemChanged+0xaa>
    4d72:	f9 01       	movw	r30, r18
    4d74:	80 81       	ld	r24, Z
    4d76:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4d7a:	df dd       	rcall	.-1090   	; 0x493a <menuDisplayValue>
    4d7c:	07 c0       	rjmp	.+14     	; 0x4d8c <menuItemChanged+0xbc>
    4d7e:	45 df       	rcall	.-374    	; 0x4c0a <menu_ClearDataDisp>
    4d80:	89 ee       	ldi	r24, 0xE9	; 233
    4d82:	93 e0       	ldi	r25, 0x03	; 3
    4d84:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4d88:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4d8c:	54 df       	rcall	.-344    	; 0x4c36 <menuCheckArrowDown>
    4d8e:	34 cf       	rjmp	.-408    	; 0x4bf8 <menuCursorSetMenu>
    4d90:	08 95       	ret

00004d92 <menu_InitLCD>:
    4d92:	36 df       	rcall	.-404    	; 0x4c00 <menuClearExtraDisp>
    4d94:	9d df       	rcall	.-198    	; 0x4cd0 <menuItemChanged>
    4d96:	b7 dd       	rcall	.-1170   	; 0x4906 <menuParentMenuToLCD>
    4d98:	6d df       	rcall	.-294    	; 0x4c74 <menuCurrMenuToLCD>
    4d9a:	0c 94 c8 3b 	jmp	0x7790	; 0x7790 <lcd_cursosblink>
    4d9e:	08 95       	ret

00004da0 <menu_ProcessMessage>:
    4da0:	cf 93       	push	r28
    4da2:	c8 2f       	mov	r28, r24
    4da4:	0e 94 c8 3b 	call	0x7790	; 0x7790 <lcd_cursosblink>
    4da8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4dac:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4db0:	84 91       	lpm	r24, Z
    4db2:	8f 73       	andi	r24, 0x3F	; 63
    4db4:	81 30       	cpi	r24, 0x01	; 1
    4db6:	29 f0       	breq	.+10     	; 0x4dc2 <menu_ProcessMessage+0x22>
    4db8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <menu_ProcessMessage+0x22>
    4dc0:	68 c1       	rjmp	.+720    	; 0x5092 <menu_ProcessMessage+0x2f2>
    4dc2:	31 96       	adiw	r30, 0x01	; 1
    4dc4:	84 91       	lpm	r24, Z
    4dc6:	86 ff       	sbrs	r24, 6
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <menu_ProcessMessage+0x2e>
    4dca:	1a df       	rcall	.-460    	; 0x4c00 <menuClearExtraDisp>
    4dcc:	15 df       	rcall	.-470    	; 0x4bf8 <menuCursorSetMenu>
    4dce:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4dd2:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	01 96       	adiw	r24, 0x01	; 1
    4dda:	fc 01       	movw	r30, r24
    4ddc:	84 91       	lpm	r24, Z
    4dde:	98 2f       	mov	r25, r24
    4de0:	90 72       	andi	r25, 0x20	; 32
    4de2:	85 ff       	sbrs	r24, 5
    4de4:	1f c0       	rjmp	.+62     	; 0x4e24 <menu_ProcessMessage+0x84>
    4de6:	9b 01       	movw	r18, r22
    4de8:	20 5f       	subi	r18, 0xF0	; 240
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	f9 01       	movw	r30, r18
    4dee:	25 91       	lpm	r18, Z+
    4df0:	35 91       	lpm	r19, Z+
    4df2:	21 15       	cp	r18, r1
    4df4:	31 05       	cpc	r19, r1
    4df6:	b1 f0       	breq	.+44     	; 0x4e24 <menu_ProcessMessage+0x84>
    4df8:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4dfc:	4f 3f       	cpi	r20, 0xFF	; 255
    4dfe:	91 f0       	breq	.+36     	; 0x4e24 <menu_ProcessMessage+0x84>
    4e00:	8c 2f       	mov	r24, r28
    4e02:	f9 01       	movw	r30, r18
    4e04:	19 95       	eicall
    4e06:	8f 3f       	cpi	r24, 0xFF	; 255
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <menu_ProcessMessage+0x72>
    4e0a:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4e0e:	80 e0       	ldi	r24, 0x00	; 0
    4e10:	04 c2       	rjmp	.+1032   	; 0x521a <menu_ProcessMessage+0x47a>
    4e12:	f6 de       	rcall	.-532    	; 0x4c00 <menuClearExtraDisp>
    4e14:	fa de       	rcall	.-524    	; 0x4c0a <menu_ClearDataDisp>
    4e16:	f0 de       	rcall	.-544    	; 0x4bf8 <menuCursorSetMenu>
    4e18:	8f ef       	ldi	r24, 0xFF	; 255
    4e1a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4e1e:	2a df       	rcall	.-428    	; 0x4c74 <menuCurrMenuToLCD>
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	fb c1       	rjmp	.+1014   	; 0x521a <menu_ProcessMessage+0x47a>
    4e24:	c3 30       	cpi	r28, 0x03	; 3
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <menu_ProcessMessage+0x8a>
    4e28:	64 c0       	rjmp	.+200    	; 0x4ef2 <menu_ProcessMessage+0x152>
    4e2a:	28 f4       	brcc	.+10     	; 0x4e36 <menu_ProcessMessage+0x96>
    4e2c:	c1 30       	cpi	r28, 0x01	; 1
    4e2e:	51 f0       	breq	.+20     	; 0x4e44 <menu_ProcessMessage+0xa4>
    4e30:	c2 30       	cpi	r28, 0x02	; 2
    4e32:	31 f1       	breq	.+76     	; 0x4e80 <menu_ProcessMessage+0xe0>
    4e34:	db c1       	rjmp	.+950    	; 0x51ec <menu_ProcessMessage+0x44c>
    4e36:	c5 30       	cpi	r28, 0x05	; 5
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <menu_ProcessMessage+0x9c>
    4e3a:	5b c0       	rjmp	.+182    	; 0x4ef2 <menu_ProcessMessage+0x152>
    4e3c:	90 f0       	brcs	.+36     	; 0x4e62 <menu_ProcessMessage+0xc2>
    4e3e:	c6 30       	cpi	r28, 0x06	; 6
    4e40:	f9 f0       	breq	.+62     	; 0x4e80 <menu_ProcessMessage+0xe0>
    4e42:	d4 c1       	rjmp	.+936    	; 0x51ec <menu_ProcessMessage+0x44c>
    4e44:	fb 01       	movw	r30, r22
    4e46:	84 91       	lpm	r24, Z
    4e48:	80 7c       	andi	r24, 0xC0	; 192
    4e4a:	80 3c       	cpi	r24, 0xC0	; 192
    4e4c:	09 f4       	brne	.+2      	; 0x4e50 <menu_ProcessMessage+0xb0>
    4e4e:	d0 c1       	rjmp	.+928    	; 0x51f0 <menu_ProcessMessage+0x450>
    4e50:	74 96       	adiw	r30, 0x14	; 20
    4e52:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e56:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e5a:	3a df       	rcall	.-396    	; 0x4cd0 <menuItemChanged>
    4e5c:	0b df       	rcall	.-490    	; 0x4c74 <menuCurrMenuToLCD>
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	dc c1       	rjmp	.+952    	; 0x521a <menu_ProcessMessage+0x47a>
    4e62:	fb 01       	movw	r30, r22
    4e64:	84 91       	lpm	r24, Z
    4e66:	80 7c       	andi	r24, 0xC0	; 192
    4e68:	80 38       	cpi	r24, 0x80	; 128
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <menu_ProcessMessage+0xce>
    4e6c:	c3 c1       	rjmp	.+902    	; 0x51f4 <menu_ProcessMessage+0x454>
    4e6e:	74 97       	sbiw	r30, 0x14	; 20
    4e70:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e74:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e78:	2b df       	rcall	.-426    	; 0x4cd0 <menuItemChanged>
    4e7a:	fc de       	rcall	.-520    	; 0x4c74 <menuCurrMenuToLCD>
    4e7c:	80 e0       	ldi	r24, 0x00	; 0
    4e7e:	cd c1       	rjmp	.+922    	; 0x521a <menu_ProcessMessage+0x47a>
    4e80:	84 ff       	sbrs	r24, 4
    4e82:	04 c0       	rjmp	.+8      	; 0x4e8c <menu_ProcessMessage+0xec>
    4e84:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4e88:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4e8c:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4e90:	ee 23       	and	r30, r30
    4e92:	e9 f0       	breq	.+58     	; 0x4ece <menu_ProcessMessage+0x12e>
    4e94:	e1 50       	subi	r30, 0x01	; 1
    4e96:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	ee 0f       	add	r30, r30
    4e9e:	ff 1f       	adc	r31, r31
    4ea0:	e5 58       	subi	r30, 0x85	; 133
    4ea2:	fa 4f       	sbci	r31, 0xFA	; 250
    4ea4:	01 90       	ld	r0, Z+
    4ea6:	f0 81       	ld	r31, Z
    4ea8:	e0 2d       	mov	r30, r0
    4eaa:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4eae:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4eb2:	72 96       	adiw	r30, 0x12	; 18
    4eb4:	05 90       	lpm	r0, Z+
    4eb6:	f4 91       	lpm	r31, Z
    4eb8:	e0 2d       	mov	r30, r0
    4eba:	30 97       	sbiw	r30, 0x00	; 0
    4ebc:	11 f0       	breq	.+4      	; 0x4ec2 <menu_ProcessMessage+0x122>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	19 95       	eicall
    4ec2:	9e de       	rcall	.-708    	; 0x4c00 <menuClearExtraDisp>
    4ec4:	20 dd       	rcall	.-1472   	; 0x4906 <menuParentMenuToLCD>
    4ec6:	d6 de       	rcall	.-596    	; 0x4c74 <menuCurrMenuToLCD>
    4ec8:	03 df       	rcall	.-506    	; 0x4cd0 <menuItemChanged>
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	a6 c1       	rjmp	.+844    	; 0x521a <menu_ProcessMessage+0x47a>
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4eda:	82 e0       	ldi	r24, 0x02	; 2
    4edc:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4ee0:	83 e0       	ldi	r24, 0x03	; 3
    4ee2:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    4ee6:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    4eea:	0e 94 cf 3b 	call	0x779e	; 0x779e <lcd_cursoroff>
    4eee:	8f ef       	ldi	r24, 0xFF	; 255
    4ef0:	94 c1       	rjmp	.+808    	; 0x521a <menu_ProcessMessage+0x47a>
    4ef2:	fb 01       	movw	r30, r22
    4ef4:	24 91       	lpm	r18, Z
    4ef6:	2f 73       	andi	r18, 0x3F	; 63
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	22 30       	cpi	r18, 0x02	; 2
    4efc:	31 05       	cpc	r19, r1
    4efe:	0c f4       	brge	.+2      	; 0x4f02 <menu_ProcessMessage+0x162>
    4f00:	48 c0       	rjmp	.+144    	; 0x4f92 <menu_ProcessMessage+0x1f2>
    4f02:	70 96       	adiw	r30, 0x10	; 16
    4f04:	05 90       	lpm	r0, Z+
    4f06:	f4 91       	lpm	r31, Z
    4f08:	e0 2d       	mov	r30, r0
    4f0a:	30 97       	sbiw	r30, 0x00	; 0
    4f0c:	19 f0       	breq	.+6      	; 0x4f14 <menu_ProcessMessage+0x174>
    4f0e:	8c 2f       	mov	r24, r28
    4f10:	19 95       	eicall
    4f12:	de de       	rcall	.-580    	; 0x4cd0 <menuItemChanged>
    4f14:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4f18:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f1c:	c9 01       	movw	r24, r18
    4f1e:	01 96       	adiw	r24, 0x01	; 1
    4f20:	fc 01       	movw	r30, r24
    4f22:	84 91       	lpm	r24, Z
    4f24:	83 fd       	sbrc	r24, 3
    4f26:	68 c1       	rjmp	.+720    	; 0x51f8 <menu_ProcessMessage+0x458>
    4f28:	c9 01       	movw	r24, r18
    4f2a:	0e 96       	adiw	r24, 0x0e	; 14
    4f2c:	fc 01       	movw	r30, r24
    4f2e:	85 91       	lpm	r24, Z+
    4f30:	95 91       	lpm	r25, Z+
    4f32:	89 2b       	or	r24, r25
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <menu_ProcessMessage+0x198>
    4f36:	62 c1       	rjmp	.+708    	; 0x51fc <menu_ProcessMessage+0x45c>
    4f38:	f9 01       	movw	r30, r18
    4f3a:	84 91       	lpm	r24, Z
    4f3c:	8f 73       	andi	r24, 0x3F	; 63
    4f3e:	89 30       	cpi	r24, 0x09	; 9
    4f40:	19 f5       	brne	.+70     	; 0x4f88 <menu_ProcessMessage+0x1e8>
    4f42:	61 e0       	ldi	r22, 0x01	; 1
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	30 da       	rcall	.-2976   	; 0x43a8 <nibbleChange>
    4f48:	de db       	rcall	.-2116   	; 0x4706 <nibbleToData>
    4f4a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f4e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f52:	3e 96       	adiw	r30, 0x0e	; 14
    4f54:	05 90       	lpm	r0, Z+
    4f56:	f4 91       	lpm	r31, Z
    4f58:	e0 2d       	mov	r30, r0
    4f5a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4f5e:	80 83       	st	Z, r24
    4f60:	ec dc       	rcall	.-1576   	; 0x493a <menuDisplayValue>
    4f62:	69 de       	rcall	.-814    	; 0x4c36 <menuCheckArrowDown>
    4f64:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
    4f68:	47 de       	rcall	.-882    	; 0x4bf8 <menuCursorSetMenu>
    4f6a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f6e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f72:	72 96       	adiw	r30, 0x12	; 18
    4f74:	05 90       	lpm	r0, Z+
    4f76:	f4 91       	lpm	r31, Z
    4f78:	e0 2d       	mov	r30, r0
    4f7a:	30 97       	sbiw	r30, 0x00	; 0
    4f7c:	09 f4       	brne	.+2      	; 0x4f80 <menu_ProcessMessage+0x1e0>
    4f7e:	40 c1       	rjmp	.+640    	; 0x5200 <menu_ProcessMessage+0x460>
    4f80:	80 e0       	ldi	r24, 0x00	; 0
    4f82:	19 95       	eicall
    4f84:	80 e0       	ldi	r24, 0x00	; 0
    4f86:	49 c1       	rjmp	.+658    	; 0x521a <menu_ProcessMessage+0x47a>
    4f88:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4f8c:	e3 dc       	rcall	.-1594   	; 0x4954 <menuCursorSetDataNibble>
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	44 c1       	rjmp	.+648    	; 0x521a <menu_ProcessMessage+0x47a>
    4f92:	2f ef       	ldi	r18, 0xFF	; 255
    4f94:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4f98:	84 ff       	sbrs	r24, 4
    4f9a:	26 c0       	rjmp	.+76     	; 0x4fe8 <menu_ProcessMessage+0x248>
    4f9c:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4fa0:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4fa4:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4fa8:	ee 23       	and	r30, r30
    4faa:	09 f4       	brne	.+2      	; 0x4fae <menu_ProcessMessage+0x20e>
    4fac:	2b c1       	rjmp	.+598    	; 0x5204 <menu_ProcessMessage+0x464>
    4fae:	e1 50       	subi	r30, 0x01	; 1
    4fb0:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4fb4:	f0 e0       	ldi	r31, 0x00	; 0
    4fb6:	ee 0f       	add	r30, r30
    4fb8:	ff 1f       	adc	r31, r31
    4fba:	e5 58       	subi	r30, 0x85	; 133
    4fbc:	fa 4f       	sbci	r31, 0xFA	; 250
    4fbe:	01 90       	ld	r0, Z+
    4fc0:	f0 81       	ld	r31, Z
    4fc2:	e0 2d       	mov	r30, r0
    4fc4:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4fc8:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4fcc:	72 96       	adiw	r30, 0x12	; 18
    4fce:	05 90       	lpm	r0, Z+
    4fd0:	f4 91       	lpm	r31, Z
    4fd2:	e0 2d       	mov	r30, r0
    4fd4:	30 97       	sbiw	r30, 0x00	; 0
    4fd6:	11 f0       	breq	.+4      	; 0x4fdc <menu_ProcessMessage+0x23c>
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	19 95       	eicall
    4fdc:	11 de       	rcall	.-990    	; 0x4c00 <menuClearExtraDisp>
    4fde:	93 dc       	rcall	.-1754   	; 0x4906 <menuParentMenuToLCD>
    4fe0:	49 de       	rcall	.-878    	; 0x4c74 <menuCurrMenuToLCD>
    4fe2:	76 de       	rcall	.-788    	; 0x4cd0 <menuItemChanged>
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
    4fe6:	19 c1       	rjmp	.+562    	; 0x521a <menu_ProcessMessage+0x47a>
    4fe8:	fb 01       	movw	r30, r22
    4fea:	70 96       	adiw	r30, 0x10	; 16
    4fec:	05 90       	lpm	r0, Z+
    4fee:	f4 91       	lpm	r31, Z
    4ff0:	e0 2d       	mov	r30, r0
    4ff2:	30 97       	sbiw	r30, 0x00	; 0
    4ff4:	99 f0       	breq	.+38     	; 0x501c <menu_ProcessMessage+0x27c>
    4ff6:	99 23       	and	r25, r25
    4ff8:	71 f0       	breq	.+28     	; 0x5016 <menu_ProcessMessage+0x276>
    4ffa:	8f ef       	ldi	r24, 0xFF	; 255
    4ffc:	19 95       	eicall
    4ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    5000:	19 f4       	brne	.+6      	; 0x5008 <menu_ProcessMessage+0x268>
    5002:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    5006:	0a c0       	rjmp	.+20     	; 0x501c <menu_ProcessMessage+0x27c>
    5008:	fb dd       	rcall	.-1034   	; 0x4c00 <menuClearExtraDisp>
    500a:	ff dd       	rcall	.-1026   	; 0x4c0a <menu_ClearDataDisp>
    500c:	f5 dd       	rcall	.-1046   	; 0x4bf8 <menuCursorSetMenu>
    500e:	8f ef       	ldi	r24, 0xFF	; 255
    5010:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    5014:	03 c0       	rjmp	.+6      	; 0x501c <menu_ProcessMessage+0x27c>
    5016:	85 e0       	ldi	r24, 0x05	; 5
    5018:	19 95       	eicall
    501a:	ee dd       	rcall	.-1060   	; 0x4bf8 <menuCursorSetMenu>
    501c:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    5020:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5024:	c9 01       	movw	r24, r18
    5026:	0c 96       	adiw	r24, 0x0c	; 12
    5028:	fc 01       	movw	r30, r24
    502a:	85 91       	lpm	r24, Z+
    502c:	95 91       	lpm	r25, Z+
    502e:	89 2b       	or	r24, r25
    5030:	09 f4       	brne	.+2      	; 0x5034 <menu_ProcessMessage+0x294>
    5032:	ea c0       	rjmp	.+468    	; 0x5208 <menu_ProcessMessage+0x468>
    5034:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    5038:	a0 31       	cpi	r26, 0x10	; 16
    503a:	08 f0       	brcs	.+2      	; 0x503e <menu_ProcessMessage+0x29e>
    503c:	e7 c0       	rjmp	.+462    	; 0x520c <menu_ProcessMessage+0x46c>
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	8a 0f       	add	r24, r26
    5042:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    5046:	b0 e0       	ldi	r27, 0x00	; 0
    5048:	aa 0f       	add	r26, r26
    504a:	bb 1f       	adc	r27, r27
    504c:	a5 58       	subi	r26, 0x85	; 133
    504e:	ba 4f       	sbci	r27, 0xFA	; 250
    5050:	2d 93       	st	X+, r18
    5052:	3c 93       	st	X, r19
    5054:	c9 01       	movw	r24, r18
    5056:	01 96       	adiw	r24, 0x01	; 1
    5058:	fc 01       	movw	r30, r24
    505a:	84 91       	lpm	r24, Z
    505c:	83 ff       	sbrs	r24, 3
    505e:	0b c0       	rjmp	.+22     	; 0x5076 <menu_ProcessMessage+0x2d6>
    5060:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5064:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5068:	00 97       	sbiw	r24, 0x00	; 0
    506a:	29 f0       	breq	.+10     	; 0x5076 <menu_ProcessMessage+0x2d6>
    506c:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    5070:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    5074:	08 c0       	rjmp	.+16     	; 0x5086 <menu_ProcessMessage+0x2e6>
    5076:	f9 01       	movw	r30, r18
    5078:	3c 96       	adiw	r30, 0x0c	; 12
    507a:	85 91       	lpm	r24, Z+
    507c:	95 91       	lpm	r25, Z+
    507e:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    5082:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    5086:	bc dd       	rcall	.-1160   	; 0x4c00 <menuClearExtraDisp>
    5088:	3e dc       	rcall	.-1924   	; 0x4906 <menuParentMenuToLCD>
    508a:	f4 dd       	rcall	.-1048   	; 0x4c74 <menuCurrMenuToLCD>
    508c:	21 de       	rcall	.-958    	; 0x4cd0 <menuItemChanged>
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	c4 c0       	rjmp	.+392    	; 0x521a <menu_ProcessMessage+0x47a>
    5092:	c3 30       	cpi	r28, 0x03	; 3
    5094:	09 f4       	brne	.+2      	; 0x5098 <menu_ProcessMessage+0x2f8>
    5096:	49 c0       	rjmp	.+146    	; 0x512a <menu_ProcessMessage+0x38a>
    5098:	28 f4       	brcc	.+10     	; 0x50a4 <menu_ProcessMessage+0x304>
    509a:	c1 30       	cpi	r28, 0x01	; 1
    509c:	59 f0       	breq	.+22     	; 0x50b4 <menu_ProcessMessage+0x314>
    509e:	c2 30       	cpi	r28, 0x02	; 2
    50a0:	31 f1       	breq	.+76     	; 0x50ee <menu_ProcessMessage+0x34e>
    50a2:	b6 c0       	rjmp	.+364    	; 0x5210 <menu_ProcessMessage+0x470>
    50a4:	c5 30       	cpi	r28, 0x05	; 5
    50a6:	09 f4       	brne	.+2      	; 0x50aa <menu_ProcessMessage+0x30a>
    50a8:	5e c0       	rjmp	.+188    	; 0x5166 <menu_ProcessMessage+0x3c6>
    50aa:	c0 f0       	brcs	.+48     	; 0x50dc <menu_ProcessMessage+0x33c>
    50ac:	c6 30       	cpi	r28, 0x06	; 6
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <menu_ProcessMessage+0x312>
    50b0:	8a c0       	rjmp	.+276    	; 0x51c6 <menu_ProcessMessage+0x426>
    50b2:	ae c0       	rjmp	.+348    	; 0x5210 <menu_ProcessMessage+0x470>
    50b4:	48 2f       	mov	r20, r24
    50b6:	50 e0       	ldi	r21, 0x00	; 0
    50b8:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    50bc:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    50c0:	24 91       	lpm	r18, Z
    50c2:	30 e0       	ldi	r19, 0x00	; 0
    50c4:	21 50       	subi	r18, 0x01	; 1
    50c6:	31 09       	sbc	r19, r1
    50c8:	42 17       	cp	r20, r18
    50ca:	53 07       	cpc	r21, r19
    50cc:	0c f0       	brlt	.+2      	; 0x50d0 <menu_ProcessMessage+0x330>
    50ce:	a2 c0       	rjmp	.+324    	; 0x5214 <menu_ProcessMessage+0x474>
    50d0:	8f 5f       	subi	r24, 0xFF	; 255
    50d2:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    50d6:	3e dc       	rcall	.-1924   	; 0x4954 <menuCursorSetDataNibble>
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	9f c0       	rjmp	.+318    	; 0x521a <menu_ProcessMessage+0x47a>
    50dc:	88 23       	and	r24, r24
    50de:	09 f4       	brne	.+2      	; 0x50e2 <menu_ProcessMessage+0x342>
    50e0:	9b c0       	rjmp	.+310    	; 0x5218 <menu_ProcessMessage+0x478>
    50e2:	81 50       	subi	r24, 0x01	; 1
    50e4:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    50e8:	35 dc       	rcall	.-1942   	; 0x4954 <menuCursorSetDataNibble>
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	96 c0       	rjmp	.+300    	; 0x521a <menu_ProcessMessage+0x47a>
    50ee:	61 e0       	ldi	r22, 0x01	; 1
    50f0:	5b d9       	rcall	.-3402   	; 0x43a8 <nibbleChange>
    50f2:	09 db       	rcall	.-2542   	; 0x4706 <nibbleToData>
    50f4:	22 dc       	rcall	.-1980   	; 0x493a <menuDisplayValue>
    50f6:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    50fa:	8a 30       	cpi	r24, 0x0A	; 10
    50fc:	11 f0       	breq	.+4      	; 0x5102 <menu_ProcessMessage+0x362>
    50fe:	8e 30       	cpi	r24, 0x0E	; 14
    5100:	89 f4       	brne	.+34     	; 0x5124 <menu_ProcessMessage+0x384>
    5102:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5106:	42 2f       	mov	r20, r18
    5108:	50 e0       	ldi	r21, 0x00	; 0
    510a:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    510e:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5112:	84 91       	lpm	r24, Z
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	48 17       	cp	r20, r24
    511a:	59 07       	cpc	r21, r25
    511c:	1c f4       	brge	.+6      	; 0x5124 <menu_ProcessMessage+0x384>
    511e:	2f 5f       	subi	r18, 0xFF	; 255
    5120:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    5124:	17 dc       	rcall	.-2002   	; 0x4954 <menuCursorSetDataNibble>
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	78 c0       	rjmp	.+240    	; 0x521a <menu_ProcessMessage+0x47a>
    512a:	6f ef       	ldi	r22, 0xFF	; 255
    512c:	3d d9       	rcall	.-3462   	; 0x43a8 <nibbleChange>
    512e:	eb da       	rcall	.-2602   	; 0x4706 <nibbleToData>
    5130:	04 dc       	rcall	.-2040   	; 0x493a <menuDisplayValue>
    5132:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    5136:	8a 30       	cpi	r24, 0x0A	; 10
    5138:	11 f0       	breq	.+4      	; 0x513e <menu_ProcessMessage+0x39e>
    513a:	8e 30       	cpi	r24, 0x0E	; 14
    513c:	89 f4       	brne	.+34     	; 0x5160 <menu_ProcessMessage+0x3c0>
    513e:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5142:	42 2f       	mov	r20, r18
    5144:	50 e0       	ldi	r21, 0x00	; 0
    5146:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    514a:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    514e:	84 91       	lpm	r24, Z
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	01 97       	sbiw	r24, 0x01	; 1
    5154:	48 17       	cp	r20, r24
    5156:	59 07       	cpc	r21, r25
    5158:	1c f4       	brge	.+6      	; 0x5160 <menu_ProcessMessage+0x3c0>
    515a:	2f 5f       	subi	r18, 0xFF	; 255
    515c:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    5160:	f9 db       	rcall	.-2062   	; 0x4954 <menuCursorSetDataNibble>
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	5a c0       	rjmp	.+180    	; 0x521a <menu_ProcessMessage+0x47a>
    5166:	cf da       	rcall	.-2658   	; 0x4706 <nibbleToData>
    5168:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    516c:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5170:	c9 01       	movw	r24, r18
    5172:	0e 96       	adiw	r24, 0x0e	; 14
    5174:	fc 01       	movw	r30, r24
    5176:	a5 91       	lpm	r26, Z+
    5178:	b5 91       	lpm	r27, Z+
    517a:	10 97       	sbiw	r26, 0x00	; 0
    517c:	21 f1       	breq	.+72     	; 0x51c6 <menu_ProcessMessage+0x426>
    517e:	0d 97       	sbiw	r24, 0x0d	; 13
    5180:	fc 01       	movw	r30, r24
    5182:	84 91       	lpm	r24, Z
    5184:	88 23       	and	r24, r24
    5186:	2c f4       	brge	.+10     	; 0x5192 <menu_ProcessMessage+0x3f2>
    5188:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    518c:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <menu_ProcessMessage+0x3f6>
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	a8 0f       	add	r26, r24
    5198:	b9 1f       	adc	r27, r25
    519a:	f9 01       	movw	r30, r18
    519c:	84 91       	lpm	r24, Z
    519e:	8f 73       	andi	r24, 0x3F	; 63
    51a0:	8b 30       	cpi	r24, 0x0B	; 11
    51a2:	71 f4       	brne	.+28     	; 0x51c0 <menu_ProcessMessage+0x420>
    51a4:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    51a8:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    51ac:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    51b0:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    51b4:	4d 93       	st	X+, r20
    51b6:	5d 93       	st	X+, r21
    51b8:	6d 93       	st	X+, r22
    51ba:	7c 93       	st	X, r23
    51bc:	13 97       	sbiw	r26, 0x03	; 3
    51be:	03 c0       	rjmp	.+6      	; 0x51c6 <menu_ProcessMessage+0x426>
    51c0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    51c4:	8c 93       	st	X, r24
    51c6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    51ca:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    51ce:	72 96       	adiw	r30, 0x12	; 18
    51d0:	05 90       	lpm	r0, Z+
    51d2:	f4 91       	lpm	r31, Z
    51d4:	e0 2d       	mov	r30, r0
    51d6:	30 97       	sbiw	r30, 0x00	; 0
    51d8:	11 f0       	breq	.+4      	; 0x51de <menu_ProcessMessage+0x43e>
    51da:	8c 2f       	mov	r24, r28
    51dc:	19 95       	eicall
    51de:	8f ef       	ldi	r24, 0xFF	; 255
    51e0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    51e4:	47 dd       	rcall	.-1394   	; 0x4c74 <menuCurrMenuToLCD>
    51e6:	74 dd       	rcall	.-1304   	; 0x4cd0 <menuItemChanged>
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	17 c0       	rjmp	.+46     	; 0x521a <menu_ProcessMessage+0x47a>
    51ec:	80 e0       	ldi	r24, 0x00	; 0
    51ee:	15 c0       	rjmp	.+42     	; 0x521a <menu_ProcessMessage+0x47a>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	13 c0       	rjmp	.+38     	; 0x521a <menu_ProcessMessage+0x47a>
    51f4:	80 e0       	ldi	r24, 0x00	; 0
    51f6:	11 c0       	rjmp	.+34     	; 0x521a <menu_ProcessMessage+0x47a>
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	0f c0       	rjmp	.+30     	; 0x521a <menu_ProcessMessage+0x47a>
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	0d c0       	rjmp	.+26     	; 0x521a <menu_ProcessMessage+0x47a>
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	0b c0       	rjmp	.+22     	; 0x521a <menu_ProcessMessage+0x47a>
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	09 c0       	rjmp	.+18     	; 0x521a <menu_ProcessMessage+0x47a>
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	07 c0       	rjmp	.+14     	; 0x521a <menu_ProcessMessage+0x47a>
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	05 c0       	rjmp	.+10     	; 0x521a <menu_ProcessMessage+0x47a>
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	03 c0       	rjmp	.+6      	; 0x521a <menu_ProcessMessage+0x47a>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	01 c0       	rjmp	.+2      	; 0x521a <menu_ProcessMessage+0x47a>
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	cf 91       	pop	r28
    521c:	08 95       	ret

0000521e <displayMenuMessage_P>:
    521e:	0f 93       	push	r16
    5220:	1f 93       	push	r17
    5222:	cf 93       	push	r28
    5224:	df 93       	push	r29
    5226:	ec 01       	movw	r28, r24
    5228:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    522c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5230:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5234:	84 91       	lpm	r24, Z
    5236:	8f 73       	andi	r24, 0x3F	; 63
    5238:	81 30       	cpi	r24, 0x01	; 1
    523a:	91 f4       	brne	.+36     	; 0x5260 <displayMenuMessage_P+0x42>
    523c:	ce 01       	movw	r24, r28
    523e:	0e 94 82 3c 	call	0x7904	; 0x7904 <get_StrLenP>
    5242:	24 e1       	ldi	r18, 0x14	; 20
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	a9 01       	movw	r20, r18
    5248:	48 1b       	sub	r20, r24
    524a:	51 09       	sbc	r21, r1
    524c:	ca 01       	movw	r24, r20
    524e:	95 95       	asr	r25
    5250:	87 95       	ror	r24
    5252:	8c 5e       	subi	r24, 0xEC	; 236
    5254:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5258:	83 e0       	ldi	r24, 0x03	; 3
    525a:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    525e:	05 c0       	rjmp	.+10     	; 0x526a <displayMenuMessage_P+0x4c>
    5260:	84 e1       	ldi	r24, 0x14	; 20
    5262:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5266:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    526a:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    526e:	ce 01       	movw	r24, r28
    5270:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    5274:	80 2f       	mov	r24, r16
    5276:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    527a:	9f b7       	in	r25, 0x3f	; 63
    527c:	f8 94       	cli
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	06 c0       	rjmp	.+12     	; 0x528e <displayMenuMessage_P+0x70>
    5282:	ef e2       	ldi	r30, 0x2F	; 47
    5284:	f2 e0       	ldi	r31, 0x02	; 2
    5286:	84 e6       	ldi	r24, 0x64	; 100
    5288:	86 87       	std	Z+14, r24	; 0x0e
    528a:	17 86       	std	Z+15, r1	; 0x0f
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	81 11       	cpse	r24, r1
    5290:	f8 cf       	rjmp	.-16     	; 0x5282 <displayMenuMessage_P+0x64>
    5292:	9f bf       	out	0x3f, r25	; 63
    5294:	81 2f       	mov	r24, r17
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	1f 91       	pop	r17
    529c:	0f 91       	pop	r16
    529e:	08 95       	ret

000052a0 <menu_OnEnterMidiPanic>:
    52a0:	88 eb       	ldi	r24, 0xB8	; 184
    52a2:	93 e0       	ldi	r25, 0x03	; 3
    52a4:	bc df       	rcall	.-136    	; 0x521e <displayMenuMessage_P>
    52a6:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <midiSendAllNotesOff>
    52aa:	a6 dc       	rcall	.-1716   	; 0x4bf8 <menuCursorSetMenu>
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	08 95       	ret

000052b0 <menu_ModuleTestExecute>:
    52b0:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    52b4:	8f 3f       	cpi	r24, 0xFF	; 255
    52b6:	11 f0       	breq	.+4      	; 0x52bc <menu_ModuleTestExecute+0xc>
    52b8:	8d 3f       	cpi	r24, 0xFD	; 253
    52ba:	71 f5       	brne	.+92     	; 0x5318 <menu_ModuleTestExecute+0x68>
    52bc:	0e 94 cf 3b 	call	0x779e	; 0x779e <lcd_cursoroff>
    52c0:	a4 dc       	rcall	.-1720   	; 0x4c0a <menu_ClearDataDisp>
    52c2:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	e9 e4       	ldi	r30, 0x49	; 73
    52ca:	f2 e0       	ldi	r31, 0x02	; 2
    52cc:	07 c0       	rjmp	.+14     	; 0x52dc <menu_ModuleTestExecute+0x2c>
    52ce:	21 81       	ldd	r18, Z+1	; 0x01
    52d0:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    52d4:	82 2b       	or	r24, r18
    52d6:	81 83       	std	Z+1, r24	; 0x01
    52d8:	38 96       	adiw	r30, 0x08	; 8
    52da:	9f 5f       	subi	r25, 0xFF	; 255
    52dc:	90 32       	cpi	r25, 0x20	; 32
    52de:	b8 f3       	brcs	.-18     	; 0x52ce <menu_ModuleTestExecute+0x1e>
    52e0:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    52e4:	8f 3f       	cpi	r24, 0xFF	; 255
    52e6:	19 f4       	brne	.+6      	; 0x52ee <menu_ModuleTestExecute+0x3e>
    52e8:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    52ec:	5b c0       	rjmp	.+182    	; 0x53a4 <menu_ModuleTestExecute+0xf4>
    52ee:	82 eb       	ldi	r24, 0xB2	; 178
    52f0:	93 e0       	ldi	r25, 0x03	; 3
    52f2:	95 df       	rcall	.-214    	; 0x521e <displayMenuMessage_P>
    52f4:	8e ef       	ldi	r24, 0xFE	; 254
    52f6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    52fa:	9f b7       	in	r25, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	06 c0       	rjmp	.+12     	; 0x530e <menu_ModuleTestExecute+0x5e>
    5302:	ef e2       	ldi	r30, 0x2F	; 47
    5304:	f2 e0       	ldi	r31, 0x02	; 2
    5306:	82 e0       	ldi	r24, 0x02	; 2
    5308:	84 87       	std	Z+12, r24	; 0x0c
    530a:	85 87       	std	Z+13, r24	; 0x0d
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	81 11       	cpse	r24, r1
    5310:	f8 cf       	rjmp	.-16     	; 0x5302 <menu_ModuleTestExecute+0x52>
    5312:	9f bf       	out	0x3f, r25	; 63
    5314:	71 dc       	rcall	.-1822   	; 0x4bf8 <menuCursorSetMenu>
    5316:	46 c0       	rjmp	.+140    	; 0x53a4 <menu_ModuleTestExecute+0xf4>
    5318:	8e 3f       	cpi	r24, 0xFE	; 254
    531a:	41 f4       	brne	.+16     	; 0x532c <menu_ModuleTestExecute+0x7c>
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    5322:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    5326:	0e 94 c8 3b 	call	0x7790	; 0x7790 <lcd_cursosblink>
    532a:	3c c0       	rjmp	.+120    	; 0x53a4 <menu_ModuleTestExecute+0xf4>
    532c:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    5330:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5334:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    5338:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    533c:	76 95       	lsr	r23
    533e:	67 95       	ror	r22
    5340:	57 95       	ror	r21
    5342:	47 95       	ror	r20
    5344:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    5348:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    534c:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5350:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5354:	e8 2f       	mov	r30, r24
    5356:	f0 e0       	ldi	r31, 0x00	; 0
    5358:	df 01       	movw	r26, r30
    535a:	aa 0f       	add	r26, r26
    535c:	bb 1f       	adc	r27, r27
    535e:	aa 0f       	add	r26, r26
    5360:	bb 1f       	adc	r27, r27
    5362:	aa 0f       	add	r26, r26
    5364:	bb 1f       	adc	r27, r27
    5366:	a7 5b       	subi	r26, 0xB7	; 183
    5368:	bd 4f       	sbci	r27, 0xFD	; 253
    536a:	16 96       	adiw	r26, 0x06	; 6
    536c:	2c 91       	ld	r18, X
    536e:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5372:	29 23       	and	r18, r25
    5374:	49 f4       	brne	.+18     	; 0x5388 <menu_ModuleTestExecute+0xd8>
    5376:	70 68       	ori	r23, 0x80	; 128
    5378:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    537c:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    5380:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5384:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5388:	ee 0f       	add	r30, r30
    538a:	ff 1f       	adc	r31, r31
    538c:	ee 0f       	add	r30, r30
    538e:	ff 1f       	adc	r31, r31
    5390:	ee 0f       	add	r30, r30
    5392:	ff 1f       	adc	r31, r31
    5394:	e7 5b       	subi	r30, 0xB7	; 183
    5396:	fd 4f       	sbci	r31, 0xFD	; 253
    5398:	21 81       	ldd	r18, Z+1	; 0x01
    539a:	92 2b       	or	r25, r18
    539c:	91 83       	std	Z+1, r25	; 0x01
    539e:	8f 5f       	subi	r24, 0xFF	; 255
    53a0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    53a4:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    53a8:	e0 32       	cpi	r30, 0x20	; 32
    53aa:	28 f5       	brcc	.+74     	; 0x53f6 <menu_ModuleTestExecute+0x146>
    53ac:	f0 e0       	ldi	r31, 0x00	; 0
    53ae:	ee 0f       	add	r30, r30
    53b0:	ff 1f       	adc	r31, r31
    53b2:	ee 0f       	add	r30, r30
    53b4:	ff 1f       	adc	r31, r31
    53b6:	ee 0f       	add	r30, r30
    53b8:	ff 1f       	adc	r31, r31
    53ba:	e7 5b       	subi	r30, 0xB7	; 183
    53bc:	fd 4f       	sbci	r31, 0xFD	; 253
    53be:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    53c2:	98 2f       	mov	r25, r24
    53c4:	90 95       	com	r25
    53c6:	81 81       	ldd	r24, Z+1	; 0x01
    53c8:	89 23       	and	r24, r25
    53ca:	81 83       	std	Z+1, r24	; 0x01
    53cc:	8e e1       	ldi	r24, 0x1E	; 30
    53ce:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    53d2:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    53d6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <lcd_dec2out>
    53da:	9f b7       	in	r25, 0x3f	; 63
    53dc:	f8 94       	cli
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	06 c0       	rjmp	.+12     	; 0x53ee <menu_ModuleTestExecute+0x13e>
    53e2:	ef e2       	ldi	r30, 0x2F	; 47
    53e4:	f2 e0       	ldi	r31, 0x02	; 2
    53e6:	88 e0       	ldi	r24, 0x08	; 8
    53e8:	84 87       	std	Z+12, r24	; 0x0c
    53ea:	15 86       	std	Z+13, r1	; 0x0d
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	81 11       	cpse	r24, r1
    53f0:	f8 cf       	rjmp	.-16     	; 0x53e2 <menu_ModuleTestExecute+0x132>
    53f2:	9f bf       	out	0x3f, r25	; 63
    53f4:	08 95       	ret
    53f6:	e0 32       	cpi	r30, 0x20	; 32
    53f8:	81 f5       	brne	.+96     	; 0x545a <menu_ModuleTestExecute+0x1aa>
    53fa:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    53fe:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5402:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    5406:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    540a:	00 97       	sbiw	r24, 0x00	; 0
    540c:	a1 05       	cpc	r26, r1
    540e:	b1 05       	cpc	r27, r1
    5410:	21 f4       	brne	.+8      	; 0x541a <menu_ModuleTestExecute+0x16a>
    5412:	8e ea       	ldi	r24, 0xAE	; 174
    5414:	93 e0       	ldi	r25, 0x03	; 3
    5416:	03 df       	rcall	.-506    	; 0x521e <displayMenuMessage_P>
    5418:	0f c0       	rjmp	.+30     	; 0x5438 <menu_ModuleTestExecute+0x188>
    541a:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <editLong>
    541e:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <editLong+0x1>
    5422:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <editLong+0x2>
    5426:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <editLong+0x3>
    542a:	8b ea       	ldi	r24, 0xAB	; 171
    542c:	93 e0       	ldi	r25, 0x03	; 3
    542e:	f7 de       	rcall	.-530    	; 0x521e <displayMenuMessage_P>
    5430:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5434:	0e 94 b4 39 	call	0x7368	; 0x7368 <lcd_longout>
    5438:	8e ef       	ldi	r24, 0xFE	; 254
    543a:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    543e:	9f b7       	in	r25, 0x3f	; 63
    5440:	f8 94       	cli
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	06 c0       	rjmp	.+12     	; 0x5452 <menu_ModuleTestExecute+0x1a2>
    5446:	ef e2       	ldi	r30, 0x2F	; 47
    5448:	f2 e0       	ldi	r31, 0x02	; 2
    544a:	82 e0       	ldi	r24, 0x02	; 2
    544c:	84 87       	std	Z+12, r24	; 0x0c
    544e:	85 87       	std	Z+13, r24	; 0x0d
    5450:	80 e0       	ldi	r24, 0x00	; 0
    5452:	81 11       	cpse	r24, r1
    5454:	f8 cf       	rjmp	.-16     	; 0x5446 <menu_ModuleTestExecute+0x196>
    5456:	9f bf       	out	0x3f, r25	; 63
    5458:	cf cb       	rjmp	.-2146   	; 0x4bf8 <menuCursorSetMenu>
    545a:	08 95       	ret

0000545c <menu_ModuleTestPattern>:
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    5464:	02 c0       	rjmp	.+4      	; 0x546a <menu_ModuleTestPattern+0xe>
    5466:	88 0f       	add	r24, r24
    5468:	99 1f       	adc	r25, r25
    546a:	0a 94       	dec	r0
    546c:	e2 f7       	brpl	.-8      	; 0x5466 <menu_ModuleTestPattern+0xa>
    546e:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    5472:	8f ef       	ldi	r24, 0xFF	; 255
    5474:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5478:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    547c:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    5480:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    5484:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    5488:	13 df       	rcall	.-474    	; 0x52b0 <menu_ModuleTestExecute>
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	08 95       	ret

0000548e <menuLCDwriteOK>:
    548e:	8e ea       	ldi	r24, 0xAE	; 174
    5490:	93 e0       	ldi	r25, 0x03	; 3
    5492:	c5 ce       	rjmp	.-630    	; 0x521e <displayMenuMessage_P>
    5494:	08 95       	ret

00005496 <menuOnEnterEEBackup>:
    5496:	8e e1       	ldi	r24, 0x1E	; 30
    5498:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    549c:	81 e9       	ldi	r24, 0x91	; 145
    549e:	93 e0       	ldi	r25, 0x03	; 3
    54a0:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    54a4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <eeprom_Backup>
    54a8:	f2 df       	rcall	.-28     	; 0x548e <menuLCDwriteOK>
    54aa:	80 e0       	ldi	r24, 0x00	; 0
    54ac:	08 95       	ret

000054ae <menuOnEnterEERestore>:
    54ae:	8e e1       	ldi	r24, 0x1E	; 30
    54b0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54b4:	81 e9       	ldi	r24, 0x91	; 145
    54b6:	93 e0       	ldi	r25, 0x03	; 3
    54b8:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    54bc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <eeprom_Restore>
    54c0:	e6 df       	rcall	.-52     	; 0x548e <menuLCDwriteOK>
    54c2:	80 e0       	ldi	r24, 0x00	; 0
    54c4:	08 95       	ret

000054c6 <menuOnEnterEEUpdate>:
    54c6:	81 e9       	ldi	r24, 0x91	; 145
    54c8:	93 e0       	ldi	r25, 0x03	; 3
    54ca:	a9 de       	rcall	.-686    	; 0x521e <displayMenuMessage_P>
    54cc:	8e e1       	ldi	r24, 0x1E	; 30
    54ce:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54d2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_UpdateALL>
    54d6:	db df       	rcall	.-74     	; 0x548e <menuLCDwriteOK>
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	08 95       	ret

000054dc <menudeleteMainMessage>:
    54dc:	cf 93       	push	r28
    54de:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    54e2:	80 e4       	ldi	r24, 0x40	; 64
    54e4:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54e8:	84 e1       	ldi	r24, 0x14	; 20
    54ea:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    54ee:	8c 2f       	mov	r24, r28
    54f0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54f4:	cf 91       	pop	r28
    54f6:	08 95       	ret

000054f8 <menu_deleteMessage>:
    54f8:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    54fc:	83 30       	cpi	r24, 0x03	; 3
    54fe:	19 f4       	brne	.+6      	; 0x5506 <menu_deleteMessage+0xe>
    5500:	7f db       	rcall	.-2306   	; 0x4c00 <menuClearExtraDisp>
    5502:	83 cb       	rjmp	.-2298   	; 0x4c0a <menu_ClearDataDisp>
    5504:	08 95       	ret
    5506:	81 11       	cpse	r24, r1
    5508:	02 c0       	rjmp	.+4      	; 0x550e <menu_deleteMessage+0x16>
    550a:	7a cb       	rjmp	.-2316   	; 0x4c00 <menuClearExtraDisp>
    550c:	08 95       	ret
    550e:	81 30       	cpi	r24, 0x01	; 1
    5510:	11 f4       	brne	.+4      	; 0x5516 <menu_deleteMessage+0x1e>
    5512:	7b cb       	rjmp	.-2314   	; 0x4c0a <menu_ClearDataDisp>
    5514:	08 95       	ret
    5516:	e2 cf       	rjmp	.-60     	; 0x54dc <menudeleteMainMessage>
    5518:	08 95       	ret

0000551a <menu_DisplayMainMessage_P>:
    551a:	0f 93       	push	r16
    551c:	1f 93       	push	r17
    551e:	cf 93       	push	r28
    5520:	df 93       	push	r29
    5522:	ec 01       	movw	r28, r24
    5524:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5528:	0e 94 82 3c 	call	0x7904	; 0x7904 <get_StrLenP>
    552c:	08 2f       	mov	r16, r24
    552e:	80 e4       	ldi	r24, 0x40	; 64
    5530:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5534:	84 e1       	ldi	r24, 0x14	; 20
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	80 1b       	sub	r24, r16
    553a:	91 09       	sbc	r25, r1
    553c:	95 95       	asr	r25
    553e:	87 95       	ror	r24
    5540:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    5544:	ce 01       	movw	r24, r28
    5546:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    554a:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    554e:	84 e5       	ldi	r24, 0x54	; 84
    5550:	89 1b       	sub	r24, r25
    5552:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    5556:	81 2f       	mov	r24, r17
    5558:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    555c:	9f b7       	in	r25, 0x3f	; 63
    555e:	f8 94       	cli
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	06 c0       	rjmp	.+12     	; 0x5570 <menu_DisplayMainMessage_P+0x56>
    5564:	ef e2       	ldi	r30, 0x2F	; 47
    5566:	f2 e0       	ldi	r31, 0x02	; 2
    5568:	84 e6       	ldi	r24, 0x64	; 100
    556a:	86 87       	std	Z+14, r24	; 0x0e
    556c:	17 86       	std	Z+15, r1	; 0x0f
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	81 11       	cpse	r24, r1
    5572:	f8 cf       	rjmp	.-16     	; 0x5564 <menu_DisplayMainMessage_P+0x4a>
    5574:	9f bf       	out	0x3f, r25	; 63
    5576:	82 e0       	ldi	r24, 0x02	; 2
    5578:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	0f 91       	pop	r16
    5584:	08 95       	ret

00005586 <menu_DisplayMainMessage>:
    5586:	0f 93       	push	r16
    5588:	1f 93       	push	r17
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	ec 01       	movw	r28, r24
    5590:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5594:	0e 94 8c 3c 	call	0x7918	; 0x7918 <get_StrLen>
    5598:	08 2f       	mov	r16, r24
    559a:	80 e4       	ldi	r24, 0x40	; 64
    559c:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    55a0:	84 e1       	ldi	r24, 0x14	; 20
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	80 1b       	sub	r24, r16
    55a6:	91 09       	sbc	r25, r1
    55a8:	95 95       	asr	r25
    55aa:	87 95       	ror	r24
    55ac:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    55b0:	ce 01       	movw	r24, r28
    55b2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <lcd_puts>
    55b6:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    55ba:	84 e5       	ldi	r24, 0x54	; 84
    55bc:	89 1b       	sub	r24, r25
    55be:	0e 94 a5 3b 	call	0x774a	; 0x774a <lcd_blank>
    55c2:	81 2f       	mov	r24, r17
    55c4:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    55c8:	9f b7       	in	r25, 0x3f	; 63
    55ca:	f8 94       	cli
    55cc:	81 e0       	ldi	r24, 0x01	; 1
    55ce:	06 c0       	rjmp	.+12     	; 0x55dc <menu_DisplayMainMessage+0x56>
    55d0:	ef e2       	ldi	r30, 0x2F	; 47
    55d2:	f2 e0       	ldi	r31, 0x02	; 2
    55d4:	84 e6       	ldi	r24, 0x64	; 100
    55d6:	86 87       	std	Z+14, r24	; 0x0e
    55d8:	17 86       	std	Z+15, r1	; 0x0f
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	81 11       	cpse	r24, r1
    55de:	f8 cf       	rjmp	.-16     	; 0x55d0 <menu_DisplayMainMessage+0x4a>
    55e0:	9f bf       	out	0x3f, r25	; 63
    55e2:	82 e0       	ldi	r24, 0x02	; 2
    55e4:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	1f 91       	pop	r17
    55ee:	0f 91       	pop	r16
    55f0:	08 95       	ret

000055f2 <menuDisplaySaveMessage>:
    55f2:	cf 93       	push	r28
    55f4:	c6 2f       	mov	r28, r22
    55f6:	61 ee       	ldi	r22, 0xE1	; 225
    55f8:	78 e1       	ldi	r23, 0x18	; 24
    55fa:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_Dec>
    55fe:	bc 01       	movw	r22, r24
    5600:	8e ec       	ldi	r24, 0xCE	; 206
    5602:	93 e0       	ldi	r25, 0x03	; 3
    5604:	0e 94 03 3b 	call	0x7606	; 0x7606 <putString_P>
    5608:	6c 2f       	mov	r22, r28
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	0e 94 19 3b 	call	0x7632	; 0x7632 <putString_Prog>
    5610:	81 ee       	ldi	r24, 0xE1	; 225
    5612:	98 e1       	ldi	r25, 0x18	; 24
    5614:	b8 df       	rcall	.-144    	; 0x5586 <menu_DisplayMainMessage>
    5616:	cf 91       	pop	r28
    5618:	08 95       	ret

0000561a <softKeyPrP>:
    561a:	cf 93       	push	r28
    561c:	88 23       	and	r24, r24
    561e:	54 f4       	brge	.+20     	; 0x5634 <softKeyPrP+0x1a>
    5620:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    5624:	cf 3f       	cpi	r28, 0xFF	; 255
    5626:	d1 f0       	breq	.+52     	; 0x565c <softKeyPrP+0x42>
    5628:	6f ef       	ldi	r22, 0xFF	; 255
    562a:	8c 2f       	mov	r24, r28
    562c:	74 d4       	rcall	.+2280   	; 0x5f16 <register_toProgram>
    562e:	6c 2f       	mov	r22, r28
    5630:	e0 df       	rcall	.-64     	; 0x55f2 <menuDisplaySaveMessage>
    5632:	14 c0       	rjmp	.+40     	; 0x565c <softKeyPrP+0x42>
    5634:	88 23       	and	r24, r24
    5636:	91 f0       	breq	.+36     	; 0x565c <softKeyPrP+0x42>
    5638:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    563c:	8f 33       	cpi	r24, 0x3F	; 63
    563e:	21 f4       	brne	.+8      	; 0x5648 <softKeyPrP+0x2e>
    5640:	8f ef       	ldi	r24, 0xFF	; 255
    5642:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5646:	03 c0       	rjmp	.+6      	; 0x564e <softKeyPrP+0x34>
    5648:	8f 5f       	subi	r24, 0xFF	; 255
    564a:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    564e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    5652:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <send_progrChange_toMidiThru>
    5656:	8f ef       	ldi	r24, 0xFF	; 255
    5658:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	cf 91       	pop	r28
    5660:	08 95       	ret

00005662 <softKeyPrSet>:
    5662:	cf 93       	push	r28
    5664:	88 23       	and	r24, r24
    5666:	49 f0       	breq	.+18     	; 0x567a <softKeyPrSet+0x18>
    5668:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    566c:	cf 3f       	cpi	r28, 0xFF	; 255
    566e:	29 f0       	breq	.+10     	; 0x567a <softKeyPrSet+0x18>
    5670:	6f ef       	ldi	r22, 0xFF	; 255
    5672:	8c 2f       	mov	r24, r28
    5674:	50 d4       	rcall	.+2208   	; 0x5f16 <register_toProgram>
    5676:	6c 2f       	mov	r22, r28
    5678:	bc df       	rcall	.-136    	; 0x55f2 <menuDisplaySaveMessage>
    567a:	80 e0       	ldi	r24, 0x00	; 0
    567c:	cf 91       	pop	r28
    567e:	08 95       	ret

00005680 <menuDisplayLoadMessage>:
    5680:	0f 93       	push	r16
    5682:	1f 93       	push	r17
    5684:	cf 93       	push	r28
    5686:	c8 2f       	mov	r28, r24
    5688:	70 e0       	ldi	r23, 0x00	; 0
    568a:	81 ee       	ldi	r24, 0xE1	; 225
    568c:	98 e1       	ldi	r25, 0x18	; 24
    568e:	0e 94 19 3b 	call	0x7632	; 0x7632 <putString_Prog>
    5692:	bc 01       	movw	r22, r24
    5694:	6f 5f       	subi	r22, 0xFF	; 255
    5696:	7f 4f       	sbci	r23, 0xFF	; 255
    5698:	2e e7       	ldi	r18, 0x7E	; 126
    569a:	fc 01       	movw	r30, r24
    569c:	20 83       	st	Z, r18
    569e:	8c 2f       	mov	r24, r28
    56a0:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_Dec>
    56a4:	bc 01       	movw	r22, r24
    56a6:	89 ec       	ldi	r24, 0xC9	; 201
    56a8:	93 e0       	ldi	r25, 0x03	; 3
    56aa:	0e 94 03 3b 	call	0x7606	; 0x7606 <putString_P>
    56ae:	8c 01       	movw	r16, r24
    56b0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <module_WaitOutputInput2Cycles>
    56b4:	84 e0       	ldi	r24, 0x04	; 4
    56b6:	ca d3       	rcall	.+1940   	; 0x5e4c <count_Registers>
    56b8:	c8 2f       	mov	r28, r24
    56ba:	88 23       	and	r24, r24
    56bc:	49 f0       	breq	.+18     	; 0x56d0 <menuDisplayLoadMessage+0x50>
    56be:	b8 01       	movw	r22, r16
    56c0:	87 ec       	ldi	r24, 0xC7	; 199
    56c2:	93 e0       	ldi	r25, 0x03	; 3
    56c4:	0e 94 03 3b 	call	0x7606	; 0x7606 <putString_P>
    56c8:	bc 01       	movw	r22, r24
    56ca:	8c 2f       	mov	r24, r28
    56cc:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_Dec>
    56d0:	81 ee       	ldi	r24, 0xE1	; 225
    56d2:	98 e1       	ldi	r25, 0x18	; 24
    56d4:	58 df       	rcall	.-336    	; 0x5586 <menu_DisplayMainMessage>
    56d6:	cf 91       	pop	r28
    56d8:	1f 91       	pop	r17
    56da:	0f 91       	pop	r16
    56dc:	08 95       	ret

000056de <handle_programKey>:
    56de:	cf 93       	push	r28
    56e0:	c6 2f       	mov	r28, r22
    56e2:	88 23       	and	r24, r24
    56e4:	34 f4       	brge	.+12     	; 0x56f2 <handle_programKey+0x14>
    56e6:	6f ef       	ldi	r22, 0xFF	; 255
    56e8:	8c 2f       	mov	r24, r28
    56ea:	15 d4       	rcall	.+2090   	; 0x5f16 <register_toProgram>
    56ec:	6c 2f       	mov	r22, r28
    56ee:	81 df       	rcall	.-254    	; 0x55f2 <menuDisplaySaveMessage>
    56f0:	09 c0       	rjmp	.+18     	; 0x5704 <handle_programKey+0x26>
    56f2:	88 23       	and	r24, r24
    56f4:	39 f0       	breq	.+14     	; 0x5704 <handle_programKey+0x26>
    56f6:	86 2f       	mov	r24, r22
    56f8:	a8 d4       	rcall	.+2384   	; 0x604a <program_toRegister>
    56fa:	6c 2f       	mov	r22, r28
    56fc:	c1 df       	rcall	.-126    	; 0x5680 <menuDisplayLoadMessage>
    56fe:	8c 2f       	mov	r24, r28
    5700:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <send_progrChange_toMidiThru>
    5704:	8c 2f       	mov	r24, r28
    5706:	77 d4       	rcall	.+2286   	; 0x5ff6 <midi_CountRegisterInProgram>
    5708:	88 23       	and	r24, r24
    570a:	31 f0       	breq	.+12     	; 0x5718 <handle_programKey+0x3a>
    570c:	8c 2f       	mov	r24, r28
    570e:	38 d4       	rcall	.+2160   	; 0x5f80 <midi_RegisterMatchProgram>
    5710:	81 11       	cpse	r24, r1
    5712:	04 c0       	rjmp	.+8      	; 0x571c <handle_programKey+0x3e>
    5714:	81 e8       	ldi	r24, 0x81	; 129
    5716:	03 c0       	rjmp	.+6      	; 0x571e <handle_programKey+0x40>
    5718:	82 e8       	ldi	r24, 0x82	; 130
    571a:	01 c0       	rjmp	.+2      	; 0x571e <handle_programKey+0x40>
    571c:	82 e8       	ldi	r24, 0x82	; 130
    571e:	cf 91       	pop	r28
    5720:	08 95       	ret

00005722 <softKeyK1A>:
    5722:	60 e0       	ldi	r22, 0x00	; 0
    5724:	dc cf       	rjmp	.-72     	; 0x56de <handle_programKey>
    5726:	08 95       	ret

00005728 <softKeyK2A>:
    5728:	61 e0       	ldi	r22, 0x01	; 1
    572a:	d9 cf       	rjmp	.-78     	; 0x56de <handle_programKey>
    572c:	08 95       	ret

0000572e <softKeyK3A>:
    572e:	62 e0       	ldi	r22, 0x02	; 2
    5730:	d6 cf       	rjmp	.-84     	; 0x56de <handle_programKey>
    5732:	08 95       	ret

00005734 <softKeyK4A>:
    5734:	63 e0       	ldi	r22, 0x03	; 3
    5736:	d3 cf       	rjmp	.-90     	; 0x56de <handle_programKey>
    5738:	08 95       	ret

0000573a <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    573a:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    573c:	34 e0       	ldi	r19, 0x04	; 4
    573e:	80 37       	cpi	r24, 0x70	; 112
    5740:	93 07       	cpc	r25, r19
    5742:	49 f0       	breq	.+18     	; 0x5756 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5744:	34 e0       	ldi	r19, 0x04	; 4
    5746:	80 37       	cpi	r24, 0x70	; 112
    5748:	93 07       	cpc	r25, r19
    574a:	38 f0       	brcs	.+14     	; 0x575a <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    574c:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    574e:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5750:	a9 f7       	brne	.-22     	; 0x573c <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5752:	80 e0       	ldi	r24, 0x00	; 0
    5754:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5756:	82 2f       	mov	r24, r18
    5758:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    575a:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    575c:	08 95       	ret

0000575e <init_SoftKeys>:

void init_SoftKeys(){
    575e:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5760:	0e 94 b2 0b 	call	0x1764	; 0x1764 <eeprom_ReadSoftkeys>
    5764:	8f 3f       	cpi	r24, 0xFF	; 255
    5766:	c9 f4       	brne	.+50     	; 0x579a <init_SoftKeys+0x3c>
    5768:	0f c0       	rjmp	.+30     	; 0x5788 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    576a:	82 2f       	mov	r24, r18
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	fc 01       	movw	r30, r24
    5770:	ed 54       	subi	r30, 0x4D	; 77
    5772:	fa 4f       	sbci	r31, 0xFA	; 250
    5774:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5776:	88 0f       	add	r24, r24
    5778:	99 1f       	adc	r25, r25
    577a:	fc 01       	movw	r30, r24
    577c:	e6 54       	subi	r30, 0x46	; 70
    577e:	fa 4f       	sbci	r31, 0xFA	; 250
    5780:	11 82       	std	Z+1, r1	; 0x01
    5782:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5784:	2f 5f       	subi	r18, 0xFF	; 255
    5786:	01 c0       	rjmp	.+2      	; 0x578a <init_SoftKeys+0x2c>
    5788:	20 e0       	ldi	r18, 0x00	; 0
    578a:	24 30       	cpi	r18, 0x04	; 4
    578c:	70 f3       	brcs	.-36     	; 0x576a <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    578e:	40 e0       	ldi	r20, 0x00	; 0
    5790:	50 e0       	ldi	r21, 0x00	; 0
    5792:	67 e0       	ldi	r22, 0x07	; 7
    5794:	81 e0       	ldi	r24, 0x01	; 1
    5796:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    579a:	c0 e0       	ldi	r28, 0x00	; 0
    579c:	25 c0       	rjmp	.+74     	; 0x57e8 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    579e:	4c 2f       	mov	r20, r28
    57a0:	50 e0       	ldi	r21, 0x00	; 0
    57a2:	fa 01       	movw	r30, r20
    57a4:	ed 54       	subi	r30, 0x4D	; 77
    57a6:	fa 4f       	sbci	r31, 0xFA	; 250
    57a8:	80 81       	ld	r24, Z
    57aa:	8d 31       	cpi	r24, 0x1D	; 29
    57ac:	70 f4       	brcc	.+28     	; 0x57ca <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    57ae:	24 e1       	ldi	r18, 0x14	; 20
    57b0:	82 9f       	mul	r24, r18
    57b2:	c0 01       	movw	r24, r0
    57b4:	11 24       	eor	r1, r1
    57b6:	80 59       	subi	r24, 0x90	; 144
    57b8:	9b 4f       	sbci	r25, 0xFB	; 251
    57ba:	44 0f       	add	r20, r20
    57bc:	55 1f       	adc	r21, r21
    57be:	fa 01       	movw	r30, r20
    57c0:	e6 54       	subi	r30, 0x46	; 70
    57c2:	fa 4f       	sbci	r31, 0xFA	; 250
    57c4:	91 83       	std	Z+1, r25	; 0x01
    57c6:	80 83       	st	Z, r24
    57c8:	0e c0       	rjmp	.+28     	; 0x57e6 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    57ca:	fa 01       	movw	r30, r20
    57cc:	ee 0f       	add	r30, r30
    57ce:	ff 1f       	adc	r31, r31
    57d0:	e6 54       	subi	r30, 0x46	; 70
    57d2:	fa 4f       	sbci	r31, 0xFA	; 250
    57d4:	11 82       	std	Z+1, r1	; 0x01
    57d6:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    57d8:	4f 5f       	subi	r20, 0xFF	; 255
    57da:	5f 4f       	sbci	r21, 0xFF	; 255
    57dc:	40 61       	ori	r20, 0x10	; 16
    57de:	67 e0       	ldi	r22, 0x07	; 7
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    57e6:	cf 5f       	subi	r28, 0xFF	; 255
    57e8:	c4 30       	cpi	r28, 0x04	; 4
    57ea:	c8 f2       	brcs	.-78     	; 0x579e <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    57ec:	cf 91       	pop	r28
    57ee:	08 95       	ret

000057f0 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    57f4:	64 30       	cpi	r22, 0x04	; 4
    57f6:	28 f5       	brcc	.+74     	; 0x5842 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    57f8:	00 97       	sbiw	r24, 0x00	; 0
    57fa:	b9 f0       	breq	.+46     	; 0x582a <softKey_Set+0x3a>
    57fc:	fc 01       	movw	r30, r24
    57fe:	24 91       	lpm	r18, Z
    5800:	2f 73       	andi	r18, 0x3F	; 63
    5802:	21 30       	cpi	r18, 0x01	; 1
    5804:	91 f4       	brne	.+36     	; 0x582a <softKey_Set+0x3a>
    5806:	31 96       	adiw	r30, 0x01	; 1
    5808:	24 91       	lpm	r18, Z
    580a:	24 ff       	sbrs	r18, 4
    580c:	0e c0       	rjmp	.+28     	; 0x582a <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    580e:	c6 2f       	mov	r28, r22
    5810:	d0 e0       	ldi	r29, 0x00	; 0
    5812:	fe 01       	movw	r30, r28
    5814:	ee 0f       	add	r30, r30
    5816:	ff 1f       	adc	r31, r31
    5818:	e6 54       	subi	r30, 0x46	; 70
    581a:	fa 4f       	sbci	r31, 0xFA	; 250
    581c:	91 83       	std	Z+1, r25	; 0x01
    581e:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5820:	8c df       	rcall	.-232    	; 0x573a <getSoftKeyIndex>
    5822:	cd 54       	subi	r28, 0x4D	; 77
    5824:	da 4f       	sbci	r29, 0xFA	; 250
    5826:	88 83       	st	Y, r24
    5828:	0c c0       	rjmp	.+24     	; 0x5842 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	fb 01       	movw	r30, r22
    582e:	ee 0f       	add	r30, r30
    5830:	ff 1f       	adc	r31, r31
    5832:	e6 54       	subi	r30, 0x46	; 70
    5834:	fa 4f       	sbci	r31, 0xFA	; 250
    5836:	11 82       	std	Z+1, r1	; 0x01
    5838:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    583a:	fb 01       	movw	r30, r22
    583c:	ed 54       	subi	r30, 0x4D	; 77
    583e:	fa 4f       	sbci	r31, 0xFA	; 250
    5840:	10 82       	st	Z, r1
		}
	}
}
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	08 95       	ret

00005848 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5848:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    584c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5850:	3e 96       	adiw	r30, 0x0e	; 14
    5852:	65 91       	lpm	r22, Z+
    5854:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5856:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    585a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    585e:	c8 df       	rcall	.-112    	; 0x57f0 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5860:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <eeprom_UpdateSoftkeys>
	return 0;
}
    5864:	80 e0       	ldi	r24, 0x00	; 0
    5866:	08 95       	ret

00005868 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5868:	0f 93       	push	r16
    586a:	1f 93       	push	r17
    586c:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    586e:	c0 e0       	ldi	r28, 0x00	; 0
    5870:	32 c0       	rjmp	.+100    	; 0x58d6 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5872:	0c 2f       	mov	r16, r28
    5874:	10 e0       	ldi	r17, 0x00	; 0
    5876:	f8 01       	movw	r30, r16
    5878:	ee 0f       	add	r30, r30
    587a:	ff 1f       	adc	r31, r31
    587c:	e6 54       	subi	r30, 0x46	; 70
    587e:	fa 4f       	sbci	r31, 0xFA	; 250
    5880:	01 90       	ld	r0, Z+
    5882:	f0 81       	ld	r31, Z
    5884:	e0 2d       	mov	r30, r0
    5886:	30 97       	sbiw	r30, 0x00	; 0
    5888:	31 f0       	breq	.+12     	; 0x5896 <softKeys_toLCD+0x2e>
    588a:	3e 96       	adiw	r30, 0x0e	; 14
    588c:	65 91       	lpm	r22, Z+
    588e:	75 91       	lpm	r23, Z+
    5890:	61 15       	cp	r22, r1
    5892:	71 05       	cpc	r23, r1
    5894:	21 f4       	brne	.+8      	; 0x589e <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5896:	8c 2f       	mov	r24, r28
    5898:	0e 94 2c 3c 	call	0x7858	; 0x7858 <keylabel_clr>
    589c:	1b c0       	rjmp	.+54     	; 0x58d4 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    589e:	8c 2f       	mov	r24, r28
    58a0:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    58a4:	00 0f       	add	r16, r16
    58a6:	11 1f       	adc	r17, r17
    58a8:	f8 01       	movw	r30, r16
    58aa:	e6 54       	subi	r30, 0x46	; 70
    58ac:	fa 4f       	sbci	r31, 0xFA	; 250
    58ae:	01 90       	ld	r0, Z+
    58b0:	f0 81       	ld	r31, Z
    58b2:	e0 2d       	mov	r30, r0
    58b4:	70 96       	adiw	r30, 0x10	; 16
    58b6:	05 90       	lpm	r0, Z+
    58b8:	f4 91       	lpm	r31, Z
    58ba:	e0 2d       	mov	r30, r0
    58bc:	30 97       	sbiw	r30, 0x00	; 0
    58be:	51 f0       	breq	.+20     	; 0x58d4 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	19 95       	eicall
    58c4:	81 38       	cpi	r24, 0x81	; 129
    58c6:	11 f4       	brne	.+4      	; 0x58cc <softKeys_toLCD+0x64>
    58c8:	6f ef       	ldi	r22, 0xFF	; 255
    58ca:	01 c0       	rjmp	.+2      	; 0x58ce <softKeys_toLCD+0x66>
    58cc:	60 e0       	ldi	r22, 0x00	; 0
    58ce:	8c 2f       	mov	r24, r28
    58d0:	0e 94 5f 3c 	call	0x78be	; 0x78be <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    58d4:	cf 5f       	subi	r28, 0xFF	; 255
    58d6:	c4 30       	cpi	r28, 0x04	; 4
    58d8:	60 f2       	brcs	.-104    	; 0x5872 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    58da:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
}
    58de:	cf 91       	pop	r28
    58e0:	1f 91       	pop	r17
    58e2:	0f 91       	pop	r16
    58e4:	08 95       	ret

000058e6 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    58e6:	82 30       	cpi	r24, 0x02	; 2
    58e8:	49 f0       	breq	.+18     	; 0x58fc <softKey_MessageKey_ToSoftKeyNr+0x16>
    58ea:	18 f4       	brcc	.+6      	; 0x58f2 <softKey_MessageKey_ToSoftKeyNr+0xc>
    58ec:	81 30       	cpi	r24, 0x01	; 1
    58ee:	51 f0       	breq	.+20     	; 0x5904 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    58f0:	0b c0       	rjmp	.+22     	; 0x5908 <softKey_MessageKey_ToSoftKeyNr+0x22>
    58f2:	83 30       	cpi	r24, 0x03	; 3
    58f4:	59 f0       	breq	.+22     	; 0x590c <softKey_MessageKey_ToSoftKeyNr+0x26>
    58f6:	84 30       	cpi	r24, 0x04	; 4
    58f8:	19 f0       	breq	.+6      	; 0x5900 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    58fa:	06 c0       	rjmp	.+12     	; 0x5908 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    58fc:	80 e0       	ldi	r24, 0x00	; 0
    58fe:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5900:	82 e0       	ldi	r24, 0x02	; 2
    5902:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5904:	83 e0       	ldi	r24, 0x03	; 3
    5906:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5908:	8f ef       	ldi	r24, 0xFF	; 255
    590a:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    590c:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    590e:	08 95       	ret

00005910 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5916:	84 30       	cpi	r24, 0x04	; 4
    5918:	d0 f5       	brcc	.+116    	; 0x598e <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    591a:	e8 2f       	mov	r30, r24
    591c:	f0 e0       	ldi	r31, 0x00	; 0
    591e:	ee 0f       	add	r30, r30
    5920:	ff 1f       	adc	r31, r31
    5922:	e6 54       	subi	r30, 0x46	; 70
    5924:	fa 4f       	sbci	r31, 0xFA	; 250
    5926:	00 81       	ld	r16, Z
    5928:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    592a:	01 15       	cp	r16, r1
    592c:	11 05       	cpc	r17, r1
    592e:	89 f1       	breq	.+98     	; 0x5992 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5930:	f8 01       	movw	r30, r16
    5932:	94 91       	lpm	r25, Z
    5934:	9f 73       	andi	r25, 0x3F	; 63
    5936:	91 30       	cpi	r25, 0x01	; 1
    5938:	71 f5       	brne	.+92     	; 0x5996 <softKey_Execute+0x86>
    593a:	31 96       	adiw	r30, 0x01	; 1
    593c:	94 91       	lpm	r25, Z
    593e:	94 ff       	sbrs	r25, 4
    5940:	2c c0       	rjmp	.+88     	; 0x599a <softKey_Execute+0x8a>
    5942:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5944:	3f 96       	adiw	r30, 0x0f	; 15
    5946:	05 90       	lpm	r0, Z+
    5948:	f4 91       	lpm	r31, Z
    594a:	e0 2d       	mov	r30, r0
    594c:	30 97       	sbiw	r30, 0x00	; 0
    594e:	89 f0       	breq	.+34     	; 0x5972 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5950:	86 2f       	mov	r24, r22
    5952:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5954:	82 38       	cpi	r24, 0x82	; 130
    5956:	29 f4       	brne	.+10     	; 0x5962 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5958:	60 e0       	ldi	r22, 0x00	; 0
    595a:	8c 2f       	mov	r24, r28
    595c:	0e 94 5f 3c 	call	0x78be	; 0x78be <keylabel_statcheck>
    5960:	06 c0       	rjmp	.+12     	; 0x596e <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5962:	81 38       	cpi	r24, 0x81	; 129
    5964:	21 f4       	brne	.+8      	; 0x596e <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5966:	6f ef       	ldi	r22, 0xFF	; 255
    5968:	8c 2f       	mov	r24, r28
    596a:	0e 94 5f 3c 	call	0x78be	; 0x78be <keylabel_statcheck>
					}
					keylabel_toLCD();
    596e:	0e 94 40 3c 	call	0x7880	; 0x7880 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5972:	f8 01       	movw	r30, r16
    5974:	3c 96       	adiw	r30, 0x0c	; 12
    5976:	85 91       	lpm	r24, Z+
    5978:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    597a:	00 97       	sbiw	r24, 0x00	; 0
    597c:	81 f0       	breq	.+32     	; 0x599e <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    597e:	b8 01       	movw	r22, r16
    5980:	6e 5f       	subi	r22, 0xFE	; 254
    5982:	7f 4f       	sbci	r23, 0xFF	; 255
    5984:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <menu_Init>
					menu_InitLCD(); //display menu
    5988:	04 da       	rcall	.-3064   	; 0x4d92 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	09 c0       	rjmp	.+18     	; 0x59a0 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    598e:	8f ef       	ldi	r24, 0xFF	; 255
    5990:	07 c0       	rjmp	.+14     	; 0x59a0 <softKey_Execute+0x90>
    5992:	8f ef       	ldi	r24, 0xFF	; 255
    5994:	05 c0       	rjmp	.+10     	; 0x59a0 <softKey_Execute+0x90>
    5996:	8f ef       	ldi	r24, 0xFF	; 255
    5998:	03 c0       	rjmp	.+6      	; 0x59a0 <softKey_Execute+0x90>
    599a:	8f ef       	ldi	r24, 0xFF	; 255
    599c:	01 c0       	rjmp	.+2      	; 0x59a0 <softKey_Execute+0x90>
    599e:	8f ef       	ldi	r24, 0xFF	; 255
}
    59a0:	cf 91       	pop	r28
    59a2:	1f 91       	pop	r17
    59a4:	0f 91       	pop	r16
    59a6:	08 95       	ret

000059a8 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    59a8:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    59aa:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    59ae:	8c e0       	ldi	r24, 0x0C	; 12
    59b0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    59b4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    59b8:	84 ff       	sbrs	r24, 4
    59ba:	02 c0       	rjmp	.+4      	; 0x59c0 <menu_showPowerState+0x18>
    59bc:	80 e2       	ldi	r24, 0x20	; 32
    59be:	01 c0       	rjmp	.+2      	; 0x59c2 <menu_showPowerState+0x1a>
    59c0:	89 e0       	ldi	r24, 0x09	; 9
    59c2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
	lcd_goto(saveCursor);
    59c6:	8c 2f       	mov	r24, r28
    59c8:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>

    59cc:	cf 91       	pop	r28
    59ce:	08 95       	ret

000059d0 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    59d0:	85 b1       	in	r24, 0x05	; 5
    59d2:	80 64       	ori	r24, 0x40	; 64
    59d4:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    59d6:	83 e1       	ldi	r24, 0x13	; 19
    59d8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59dc:	e5 df       	rcall	.-54     	; 0x59a8 <menu_showPowerState>
	return 0;
}
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	08 95       	ret

000059e2 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    59e2:	85 b1       	in	r24, 0x05	; 5
    59e4:	8f 7b       	andi	r24, 0xBF	; 191
    59e6:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    59e8:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59ec:	dd df       	rcall	.-70     	; 0x59a8 <menu_showPowerState>
	return 0;
}
    59ee:	80 e0       	ldi	r24, 0x00	; 0
    59f0:	08 95       	ret

000059f2 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    59f2:	85 b1       	in	r24, 0x05	; 5
    59f4:	8f 7b       	andi	r24, 0xBF	; 191
    59f6:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    59f8:	81 e0       	ldi	r24, 0x01	; 1
    59fa:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59fe:	d4 df       	rcall	.-88     	; 0x59a8 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5a00:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5a02:	f8 94       	cli
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	06 c0       	rjmp	.+12     	; 0x5a14 <menuOnEnterPwrRest+0x22>
    5a08:	ef e2       	ldi	r30, 0x2F	; 47
    5a0a:	f2 e0       	ldi	r31, 0x02	; 2
    5a0c:	88 e2       	ldi	r24, 0x28	; 40
    5a0e:	82 83       	std	Z+2, r24	; 0x02
    5a10:	13 82       	std	Z+3, r1	; 0x03
    5a12:	80 e0       	ldi	r24, 0x00	; 0
    5a14:	81 11       	cpse	r24, r1
    5a16:	f8 cf       	rjmp	.-16     	; 0x5a08 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5a18:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5a1a:	08 95       	ret

00005a1c <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5a1c:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5a20:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    5a24:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5a28:	08 95       	ret

00005a2a <message_push>:
    5a2a:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5a2e:	e9 2f       	mov	r30, r25
    5a30:	f0 e0       	ldi	r31, 0x00	; 0
    5a32:	ed 52       	subi	r30, 0x2D	; 45
    5a34:	f8 4f       	sbci	r31, 0xF8	; 248
    5a36:	80 83       	st	Z, r24
    5a38:	9f 5f       	subi	r25, 0xFF	; 255
    5a3a:	9f 71       	andi	r25, 0x1F	; 31
    5a3c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5a40:	98 13       	cpse	r25, r24
    5a42:	04 c0       	rjmp	.+8      	; 0x5a4c <message_push+0x22>
    5a44:	8f ef       	ldi	r24, 0xFF	; 255
    5a46:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5a4a:	08 95       	ret
    5a4c:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5a50:	08 95       	ret

00005a52 <message_get>:
    5a52:	4f b7       	in	r20, 0x3f	; 63
    5a54:	f8 94       	cli
    5a56:	21 e0       	ldi	r18, 0x01	; 1
    5a58:	11 c0       	rjmp	.+34     	; 0x5a7c <message_get+0x2a>
    5a5a:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5a5e:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5a62:	8f ef       	ldi	r24, 0xFF	; 255
    5a64:	20 e0       	ldi	r18, 0x00	; 0
    5a66:	93 17       	cp	r25, r19
    5a68:	49 f0       	breq	.+18     	; 0x5a7c <message_get+0x2a>
    5a6a:	e9 2f       	mov	r30, r25
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	ed 52       	subi	r30, 0x2D	; 45
    5a70:	f8 4f       	sbci	r31, 0xF8	; 248
    5a72:	80 81       	ld	r24, Z
    5a74:	9f 5f       	subi	r25, 0xFF	; 255
    5a76:	9f 71       	andi	r25, 0x1F	; 31
    5a78:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    5a7c:	21 11       	cpse	r18, r1
    5a7e:	ed cf       	rjmp	.-38     	; 0x5a5a <message_get+0x8>
    5a80:	4f bf       	out	0x3f, r20	; 63
    5a82:	08 95       	ret

00005a84 <message_status>:
    5a84:	4f b7       	in	r20, 0x3f	; 63
    5a86:	f8 94       	cli
    5a88:	91 e0       	ldi	r25, 0x01	; 1
    5a8a:	08 c0       	rjmp	.+16     	; 0x5a9c <message_status+0x18>
    5a8c:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5a90:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	32 17       	cp	r19, r18
    5a9a:	11 f0       	breq	.+4      	; 0x5aa0 <message_status+0x1c>
    5a9c:	8f ef       	ldi	r24, 0xFF	; 255
    5a9e:	01 c0       	rjmp	.+2      	; 0x5aa2 <message_status+0x1e>
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	91 11       	cpse	r25, r1
    5aa4:	f3 cf       	rjmp	.-26     	; 0x5a8c <message_status+0x8>
    5aa6:	4f bf       	out	0x3f, r20	; 63
    5aa8:	08 95       	ret

00005aaa <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5aaa:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5aac:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    5ab0:	99 23       	and	r25, r25
    5ab2:	e1 f0       	breq	.+56     	; 0x5aec <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5ab4:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5ab8:	21 e0       	ldi	r18, 0x01	; 1
    5aba:	29 0f       	add	r18, r25
    5abc:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    5ac0:	e9 2f       	mov	r30, r25
    5ac2:	f0 e0       	ldi	r31, 0x00	; 0
    5ac4:	ee 0f       	add	r30, r30
    5ac6:	ff 1f       	adc	r31, r31
    5ac8:	e0 53       	subi	r30, 0x30	; 48
    5aca:	fa 4f       	sbci	r31, 0xFA	; 250
    5acc:	51 83       	std	Z+1, r21	; 0x01
    5ace:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5ad0:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5ad4:	28 13       	cpse	r18, r24
    5ad6:	0a c0       	rjmp	.+20     	; 0x5aec <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5ad8:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5adc:	9f 3f       	cpi	r25, 0xFF	; 255
    5ade:	19 f4       	brne	.+6      	; 0x5ae6 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5ae0:	8f ef       	ldi	r24, 0xFF	; 255
    5ae2:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5ae6:	8f ef       	ldi	r24, 0xFF	; 255
    5ae8:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5aec:	08 95       	ret

00005aee <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5aee:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5af2:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5af6:	e8 13       	cpse	r30, r24
    5af8:	03 c0       	rjmp	.+6      	; 0x5b00 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5afa:	8f ef       	ldi	r24, 0xFF	; 255
    5afc:	9f ef       	ldi	r25, 0xFF	; 255
    5afe:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	8e 0f       	add	r24, r30
    5b04:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5b08:	f0 e0       	ldi	r31, 0x00	; 0
    5b0a:	ee 0f       	add	r30, r30
    5b0c:	ff 1f       	adc	r31, r31
    5b0e:	e0 53       	subi	r30, 0x30	; 48
    5b10:	fa 4f       	sbci	r31, 0xFA	; 250
    5b12:	80 81       	ld	r24, Z
    5b14:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5b16:	08 95       	ret

00005b18 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5b18:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5b1c:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5b20:	98 13       	cpse	r25, r24
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5b24:	80 e0       	ldi	r24, 0x00	; 0
    5b26:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5b28:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5b2a:	08 95       	ret

00005b2c <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	e1 e1       	ldi	r30, 0x11	; 17
    5b30:	f8 e0       	ldi	r31, 0x08	; 8
    5b32:	03 c0       	rjmp	.+6      	; 0x5b3a <midi_CouplerReset+0xe>
    5b34:	10 82       	st	Z, r1
    5b36:	8f 5f       	subi	r24, 0xFF	; 255
    5b38:	31 96       	adiw	r30, 0x01	; 1
    5b3a:	8c 30       	cpi	r24, 0x0C	; 12
    5b3c:	d8 f3       	brcs	.-10     	; 0x5b34 <midi_CouplerReset+0x8>
    5b3e:	08 95       	ret

00005b40 <init_Midi>:
    5b40:	f5 df       	rcall	.-22     	; 0x5b2c <midi_CouplerReset>
    5b42:	8f ef       	ldi	r24, 0xFF	; 255
    5b44:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5b48:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    5b4c:	08 95       	ret

00005b4e <set_Coupler>:
    5b4e:	8c 30       	cpi	r24, 0x0C	; 12
    5b50:	e8 f4       	brcc	.+58     	; 0x5b8c <set_Coupler+0x3e>
    5b52:	e8 2f       	mov	r30, r24
    5b54:	f0 e0       	ldi	r31, 0x00	; 0
    5b56:	ef 5e       	subi	r30, 0xEF	; 239
    5b58:	f7 4f       	sbci	r31, 0xF7	; 247
    5b5a:	9f ef       	ldi	r25, 0xFF	; 255
    5b5c:	90 83       	st	Z, r25
    5b5e:	86 30       	cpi	r24, 0x06	; 6
    5b60:	10 f0       	brcs	.+4      	; 0x5b66 <set_Coupler+0x18>
    5b62:	86 50       	subi	r24, 0x06	; 6
    5b64:	01 c0       	rjmp	.+2      	; 0x5b68 <set_Coupler+0x1a>
    5b66:	8a 5f       	subi	r24, 0xFA	; 250
    5b68:	e8 2f       	mov	r30, r24
    5b6a:	f0 e0       	ldi	r31, 0x00	; 0
    5b6c:	df 01       	movw	r26, r30
    5b6e:	af 5e       	subi	r26, 0xEF	; 239
    5b70:	b7 4f       	sbci	r27, 0xF7	; 247
    5b72:	8c 91       	ld	r24, X
    5b74:	88 23       	and	r24, r24
    5b76:	59 f0       	breq	.+22     	; 0x5b8e <set_Coupler+0x40>
    5b78:	df 01       	movw	r26, r30
    5b7a:	af 5e       	subi	r26, 0xEF	; 239
    5b7c:	b7 4f       	sbci	r27, 0xF7	; 247
    5b7e:	1c 92       	st	X, r1
    5b80:	ee 0f       	add	r30, r30
    5b82:	ff 1f       	adc	r31, r31
    5b84:	ec 55       	subi	r30, 0x5C	; 92
    5b86:	fd 4e       	sbci	r31, 0xED	; 237
    5b88:	84 91       	lpm	r24, Z
    5b8a:	08 95       	ret
    5b8c:	80 e0       	ldi	r24, 0x00	; 0
    5b8e:	08 95       	ret

00005b90 <getAllCouplers>:
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	4b e0       	ldi	r20, 0x0B	; 11
    5b96:	01 c0       	rjmp	.+2      	; 0x5b9a <getAllCouplers+0xa>
    5b98:	42 2f       	mov	r20, r18
    5b9a:	28 2f       	mov	r18, r24
    5b9c:	39 2f       	mov	r19, r25
    5b9e:	22 0f       	add	r18, r18
    5ba0:	33 1f       	adc	r19, r19
    5ba2:	82 2f       	mov	r24, r18
    5ba4:	93 2f       	mov	r25, r19
    5ba6:	e4 2f       	mov	r30, r20
    5ba8:	f0 e0       	ldi	r31, 0x00	; 0
    5baa:	ef 5e       	subi	r30, 0xEF	; 239
    5bac:	f7 4f       	sbci	r31, 0xF7	; 247
    5bae:	50 81       	ld	r21, Z
    5bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb2:	09 f4       	brne	.+2      	; 0x5bb6 <getAllCouplers+0x26>
    5bb4:	81 60       	ori	r24, 0x01	; 1
    5bb6:	2f ef       	ldi	r18, 0xFF	; 255
    5bb8:	24 0f       	add	r18, r20
    5bba:	41 11       	cpse	r20, r1
    5bbc:	ed cf       	rjmp	.-38     	; 0x5b98 <getAllCouplers+0x8>
    5bbe:	08 95       	ret

00005bc0 <setAllCouplers>:
    5bc0:	40 e0       	ldi	r20, 0x00	; 0
    5bc2:	80 ff       	sbrs	r24, 0
    5bc4:	07 c0       	rjmp	.+14     	; 0x5bd4 <setAllCouplers+0x14>
    5bc6:	e4 2f       	mov	r30, r20
    5bc8:	f0 e0       	ldi	r31, 0x00	; 0
    5bca:	ef 5e       	subi	r30, 0xEF	; 239
    5bcc:	f7 4f       	sbci	r31, 0xF7	; 247
    5bce:	2f ef       	ldi	r18, 0xFF	; 255
    5bd0:	20 83       	st	Z, r18
    5bd2:	05 c0       	rjmp	.+10     	; 0x5bde <setAllCouplers+0x1e>
    5bd4:	e4 2f       	mov	r30, r20
    5bd6:	f0 e0       	ldi	r31, 0x00	; 0
    5bd8:	ef 5e       	subi	r30, 0xEF	; 239
    5bda:	f7 4f       	sbci	r31, 0xF7	; 247
    5bdc:	10 82       	st	Z, r1
    5bde:	28 2f       	mov	r18, r24
    5be0:	39 2f       	mov	r19, r25
    5be2:	36 95       	lsr	r19
    5be4:	27 95       	ror	r18
    5be6:	82 2f       	mov	r24, r18
    5be8:	93 2f       	mov	r25, r19
    5bea:	4f 5f       	subi	r20, 0xFF	; 255
    5bec:	4c 30       	cpi	r20, 0x0C	; 12
    5bee:	48 f3       	brcs	.-46     	; 0x5bc2 <setAllCouplers+0x2>
    5bf0:	08 95       	ret

00005bf2 <midiAllReset>:
    5bf2:	80 e8       	ldi	r24, 0x80	; 128
    5bf4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5bf8:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <init_Pipe>
    5bfc:	08 95       	ret

00005bfe <registers_CalcCount>:
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	12 c0       	rjmp	.+36     	; 0x5c28 <registers_CalcCount+0x2a>
    5c04:	82 2f       	mov	r24, r18
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	fc 01       	movw	r30, r24
    5c0a:	ee 0f       	add	r30, r30
    5c0c:	ff 1f       	adc	r31, r31
    5c0e:	8e 0f       	add	r24, r30
    5c10:	9f 1f       	adc	r25, r31
    5c12:	fc 01       	movw	r30, r24
    5c14:	e9 50       	subi	r30, 0x09	; 9
    5c16:	f8 4f       	sbci	r31, 0xF8	; 248
    5c18:	81 81       	ldd	r24, Z+1	; 0x01
    5c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    5c1c:	21 f0       	breq	.+8      	; 0x5c26 <registers_CalcCount+0x28>
    5c1e:	83 17       	cp	r24, r19
    5c20:	10 f0       	brcs	.+4      	; 0x5c26 <registers_CalcCount+0x28>
    5c22:	31 e0       	ldi	r19, 0x01	; 1
    5c24:	38 0f       	add	r19, r24
    5c26:	2f 5f       	subi	r18, 0xFF	; 255
    5c28:	28 30       	cpi	r18, 0x08	; 8
    5c2a:	60 f3       	brcs	.-40     	; 0x5c04 <registers_CalcCount+0x6>
    5c2c:	30 93 10 08 	sts	0x0810, r19	; 0x800810 <registerCount>
    5c30:	08 95       	ret

00005c32 <init_Registers>:
    5c32:	8f ef       	ldi	r24, 0xFF	; 255
    5c34:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
    5c38:	20 e0       	ldi	r18, 0x00	; 0
    5c3a:	0e c0       	rjmp	.+28     	; 0x5c58 <init_Registers+0x26>
    5c3c:	82 2f       	mov	r24, r18
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	fc 01       	movw	r30, r24
    5c42:	ee 0f       	add	r30, r30
    5c44:	ff 1f       	adc	r31, r31
    5c46:	e8 0f       	add	r30, r24
    5c48:	f9 1f       	adc	r31, r25
    5c4a:	e9 50       	subi	r30, 0x09	; 9
    5c4c:	f8 4f       	sbci	r31, 0xF8	; 248
    5c4e:	8f ef       	ldi	r24, 0xFF	; 255
    5c50:	80 83       	st	Z, r24
    5c52:	81 83       	std	Z+1, r24	; 0x01
    5c54:	12 82       	std	Z+2, r1	; 0x02
    5c56:	2f 5f       	subi	r18, 0xFF	; 255
    5c58:	28 30       	cpi	r18, 0x08	; 8
    5c5a:	80 f3       	brcs	.-32     	; 0x5c3c <init_Registers+0xa>
    5c5c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <eeprom_ReadReg>
    5c60:	8f 3f       	cpi	r24, 0xFF	; 255
    5c62:	49 f4       	brne	.+18     	; 0x5c76 <init_Registers+0x44>
    5c64:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <registerCount>
    5c68:	40 e0       	ldi	r20, 0x00	; 0
    5c6a:	50 e0       	ldi	r21, 0x00	; 0
    5c6c:	65 e0       	ldi	r22, 0x05	; 5
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    5c74:	01 c0       	rjmp	.+2      	; 0x5c78 <init_Registers+0x46>
    5c76:	c3 df       	rcall	.-122    	; 0x5bfe <registers_CalcCount>
    5c78:	0e 94 8a 0b 	call	0x1714	; 0x1714 <eeprom_ReadProg>
    5c7c:	8f 3f       	cpi	r24, 0xFF	; 255
    5c7e:	a1 f5       	brne	.+104    	; 0x5ce8 <init_Registers+0xb6>
    5c80:	2a c0       	rjmp	.+84     	; 0x5cd6 <init_Registers+0xa4>
    5c82:	83 2f       	mov	r24, r19
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	fc 01       	movw	r30, r24
    5c88:	ee 0f       	add	r30, r30
    5c8a:	ff 1f       	adc	r31, r31
    5c8c:	88 0f       	add	r24, r24
    5c8e:	99 1f       	adc	r25, r25
    5c90:	88 0f       	add	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	88 0f       	add	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	e8 0f       	add	r30, r24
    5c9a:	f9 1f       	adc	r31, r25
    5c9c:	ec 59       	subi	r30, 0x9C	; 156
    5c9e:	f6 4f       	sbci	r31, 0xF6	; 246
    5ca0:	e2 0f       	add	r30, r18
    5ca2:	f1 1d       	adc	r31, r1
    5ca4:	10 82       	st	Z, r1
    5ca6:	2f 5f       	subi	r18, 0xFF	; 255
    5ca8:	01 c0       	rjmp	.+2      	; 0x5cac <init_Registers+0x7a>
    5caa:	20 e0       	ldi	r18, 0x00	; 0
    5cac:	28 30       	cpi	r18, 0x08	; 8
    5cae:	48 f3       	brcs	.-46     	; 0x5c82 <init_Registers+0x50>
    5cb0:	83 2f       	mov	r24, r19
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	ee 0f       	add	r30, r30
    5cb8:	ff 1f       	adc	r31, r31
    5cba:	88 0f       	add	r24, r24
    5cbc:	99 1f       	adc	r25, r25
    5cbe:	88 0f       	add	r24, r24
    5cc0:	99 1f       	adc	r25, r25
    5cc2:	88 0f       	add	r24, r24
    5cc4:	99 1f       	adc	r25, r25
    5cc6:	e8 0f       	add	r30, r24
    5cc8:	f9 1f       	adc	r31, r25
    5cca:	ec 59       	subi	r30, 0x9C	; 156
    5ccc:	f6 4f       	sbci	r31, 0xF6	; 246
    5cce:	11 86       	std	Z+9, r1	; 0x09
    5cd0:	10 86       	std	Z+8, r1	; 0x08
    5cd2:	3f 5f       	subi	r19, 0xFF	; 255
    5cd4:	01 c0       	rjmp	.+2      	; 0x5cd8 <init_Registers+0xa6>
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	30 34       	cpi	r19, 0x40	; 64
    5cda:	38 f3       	brcs	.-50     	; 0x5caa <init_Registers+0x78>
    5cdc:	40 e0       	ldi	r20, 0x00	; 0
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	66 e0       	ldi	r22, 0x06	; 6
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    5ce8:	08 95       	ret

00005cea <regNr_to_moduleBit>:
    5cea:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5cee:	89 17       	cp	r24, r25
    5cf0:	a0 f4       	brcc	.+40     	; 0x5d1a <regNr_to_moduleBit+0x30>
    5cf2:	80 34       	cpi	r24, 0x40	; 64
    5cf4:	90 f4       	brcc	.+36     	; 0x5d1a <regNr_to_moduleBit+0x30>
    5cf6:	28 e0       	ldi	r18, 0x08	; 8
    5cf8:	e7 ef       	ldi	r30, 0xF7	; 247
    5cfa:	f7 e0       	ldi	r31, 0x07	; 7
    5cfc:	30 81       	ld	r19, Z
    5cfe:	83 17       	cp	r24, r19
    5d00:	48 f0       	brcs	.+18     	; 0x5d14 <regNr_to_moduleBit+0x2a>
    5d02:	91 81       	ldd	r25, Z+1	; 0x01
    5d04:	98 17       	cp	r25, r24
    5d06:	30 f0       	brcs	.+12     	; 0x5d14 <regNr_to_moduleBit+0x2a>
    5d08:	22 81       	ldd	r18, Z+2	; 0x02
    5d0a:	98 2f       	mov	r25, r24
    5d0c:	93 1b       	sub	r25, r19
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	92 0f       	add	r25, r18
    5d12:	08 95       	ret
    5d14:	33 96       	adiw	r30, 0x03	; 3
    5d16:	21 50       	subi	r18, 0x01	; 1
    5d18:	89 f7       	brne	.-30     	; 0x5cfc <regNr_to_moduleBit+0x12>
    5d1a:	8f ef       	ldi	r24, 0xFF	; 255
    5d1c:	90 e0       	ldi	r25, 0x00	; 0
    5d1e:	08 95       	ret

00005d20 <moduleBit_to_registerNr>:
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	16 c0       	rjmp	.+44     	; 0x5d50 <moduleBit_to_registerNr+0x30>
    5d24:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <registerMap+0x2>
    5d28:	84 17       	cp	r24, r20
    5d2a:	88 f0       	brcs	.+34     	; 0x5d4e <moduleBit_to_registerNr+0x2e>
    5d2c:	68 2f       	mov	r22, r24
    5d2e:	70 e0       	ldi	r23, 0x00	; 0
    5d30:	e7 ef       	ldi	r30, 0xF7	; 247
    5d32:	f7 e0       	ldi	r31, 0x07	; 7
    5d34:	21 81       	ldd	r18, Z+1	; 0x01
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	24 0f       	add	r18, r20
    5d3a:	31 1d       	adc	r19, r1
    5d3c:	50 81       	ld	r21, Z
    5d3e:	25 1b       	sub	r18, r21
    5d40:	31 09       	sbc	r19, r1
    5d42:	26 17       	cp	r18, r22
    5d44:	37 07       	cpc	r19, r23
    5d46:	1c f0       	brlt	.+6      	; 0x5d4e <moduleBit_to_registerNr+0x2e>
    5d48:	84 1b       	sub	r24, r20
    5d4a:	85 0f       	add	r24, r21
    5d4c:	08 95       	ret
    5d4e:	9f 5f       	subi	r25, 0xFF	; 255
    5d50:	98 30       	cpi	r25, 0x08	; 8
    5d52:	40 f3       	brcs	.-48     	; 0x5d24 <moduleBit_to_registerNr+0x4>
    5d54:	8f ef       	ldi	r24, 0xFF	; 255
    5d56:	08 95       	ret

00005d58 <read_Register>:
    5d58:	cf 93       	push	r28
    5d5a:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5d5e:	89 17       	cp	r24, r25
    5d60:	08 f0       	brcs	.+2      	; 0x5d64 <read_Register+0xc>
    5d62:	3c c0       	rjmp	.+120    	; 0x5ddc <read_Register+0x84>
    5d64:	c6 2f       	mov	r28, r22
    5d66:	c1 df       	rcall	.-126    	; 0x5cea <regNr_to_moduleBit>
    5d68:	81 11       	cpse	r24, r1
    5d6a:	30 c0       	rjmp	.+96     	; 0x5dcc <read_Register+0x74>
    5d6c:	29 2f       	mov	r18, r25
    5d6e:	2f 71       	andi	r18, 0x1F	; 31
    5d70:	92 95       	swap	r25
    5d72:	96 95       	lsr	r25
    5d74:	97 70       	andi	r25, 0x07	; 7
    5d76:	41 e0       	ldi	r20, 0x01	; 1
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	02 c0       	rjmp	.+4      	; 0x5d80 <read_Register+0x28>
    5d7c:	44 0f       	add	r20, r20
    5d7e:	55 1f       	adc	r21, r21
    5d80:	9a 95       	dec	r25
    5d82:	e2 f7       	brpl	.-8      	; 0x5d7c <read_Register+0x24>
    5d84:	30 e0       	ldi	r19, 0x00	; 0
    5d86:	f9 01       	movw	r30, r18
    5d88:	ee 0f       	add	r30, r30
    5d8a:	ff 1f       	adc	r31, r31
    5d8c:	ee 0f       	add	r30, r30
    5d8e:	ff 1f       	adc	r31, r31
    5d90:	ee 0f       	add	r30, r30
    5d92:	ff 1f       	adc	r31, r31
    5d94:	e7 5b       	subi	r30, 0xB7	; 183
    5d96:	fd 4f       	sbci	r31, 0xFD	; 253
    5d98:	91 81       	ldd	r25, Z+1	; 0x01
    5d9a:	94 23       	and	r25, r20
    5d9c:	11 f4       	brne	.+4      	; 0x5da2 <read_Register+0x4a>
    5d9e:	c1 fd       	sbrc	r28, 1
    5da0:	17 c0       	rjmp	.+46     	; 0x5dd0 <read_Register+0x78>
    5da2:	22 0f       	add	r18, r18
    5da4:	33 1f       	adc	r19, r19
    5da6:	22 0f       	add	r18, r18
    5da8:	33 1f       	adc	r19, r19
    5daa:	22 0f       	add	r18, r18
    5dac:	33 1f       	adc	r19, r19
    5dae:	f9 01       	movw	r30, r18
    5db0:	e7 5b       	subi	r30, 0xB7	; 183
    5db2:	fd 4f       	sbci	r31, 0xFD	; 253
    5db4:	26 81       	ldd	r18, Z+6	; 0x06
    5db6:	42 23       	and	r20, r18
    5db8:	11 f0       	breq	.+4      	; 0x5dbe <read_Register+0x66>
    5dba:	c0 fd       	sbrc	r28, 0
    5dbc:	0b c0       	rjmp	.+22     	; 0x5dd4 <read_Register+0x7c>
    5dbe:	99 23       	and	r25, r25
    5dc0:	71 f0       	breq	.+28     	; 0x5dde <read_Register+0x86>
    5dc2:	44 23       	and	r20, r20
    5dc4:	61 f0       	breq	.+24     	; 0x5dde <read_Register+0x86>
    5dc6:	c4 30       	cpi	r28, 0x04	; 4
    5dc8:	51 f4       	brne	.+20     	; 0x5dde <read_Register+0x86>
    5dca:	06 c0       	rjmp	.+12     	; 0x5dd8 <read_Register+0x80>
    5dcc:	80 e0       	ldi	r24, 0x00	; 0
    5dce:	07 c0       	rjmp	.+14     	; 0x5dde <read_Register+0x86>
    5dd0:	81 e0       	ldi	r24, 0x01	; 1
    5dd2:	05 c0       	rjmp	.+10     	; 0x5dde <read_Register+0x86>
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	03 c0       	rjmp	.+6      	; 0x5dde <read_Register+0x86>
    5dd8:	81 e0       	ldi	r24, 0x01	; 1
    5dda:	01 c0       	rjmp	.+2      	; 0x5dde <read_Register+0x86>
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	cf 91       	pop	r28
    5de0:	08 95       	ret

00005de2 <get_RegisterStatus>:
    5de2:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5de6:	89 17       	cp	r24, r25
    5de8:	78 f5       	brcc	.+94     	; 0x5e48 <get_RegisterStatus+0x66>
    5dea:	7f df       	rcall	.-258    	; 0x5cea <regNr_to_moduleBit>
    5dec:	81 11       	cpse	r24, r1
    5dee:	28 c0       	rjmp	.+80     	; 0x5e40 <get_RegisterStatus+0x5e>
    5df0:	29 2f       	mov	r18, r25
    5df2:	2f 71       	andi	r18, 0x1F	; 31
    5df4:	39 2f       	mov	r19, r25
    5df6:	32 95       	swap	r19
    5df8:	36 95       	lsr	r19
    5dfa:	37 70       	andi	r19, 0x07	; 7
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	02 c0       	rjmp	.+4      	; 0x5e06 <get_RegisterStatus+0x24>
    5e02:	88 0f       	add	r24, r24
    5e04:	99 1f       	adc	r25, r25
    5e06:	3a 95       	dec	r19
    5e08:	e2 f7       	brpl	.-8      	; 0x5e02 <get_RegisterStatus+0x20>
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	f9 01       	movw	r30, r18
    5e0e:	ee 0f       	add	r30, r30
    5e10:	ff 1f       	adc	r31, r31
    5e12:	ee 0f       	add	r30, r30
    5e14:	ff 1f       	adc	r31, r31
    5e16:	ee 0f       	add	r30, r30
    5e18:	ff 1f       	adc	r31, r31
    5e1a:	e7 5b       	subi	r30, 0xB7	; 183
    5e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    5e1e:	41 81       	ldd	r20, Z+1	; 0x01
    5e20:	48 23       	and	r20, r24
    5e22:	81 f0       	breq	.+32     	; 0x5e44 <get_RegisterStatus+0x62>
    5e24:	22 0f       	add	r18, r18
    5e26:	33 1f       	adc	r19, r19
    5e28:	22 0f       	add	r18, r18
    5e2a:	33 1f       	adc	r19, r19
    5e2c:	22 0f       	add	r18, r18
    5e2e:	33 1f       	adc	r19, r19
    5e30:	f9 01       	movw	r30, r18
    5e32:	e7 5b       	subi	r30, 0xB7	; 183
    5e34:	fd 4f       	sbci	r31, 0xFD	; 253
    5e36:	96 81       	ldd	r25, Z+6	; 0x06
    5e38:	89 23       	and	r24, r25
    5e3a:	39 f0       	breq	.+14     	; 0x5e4a <get_RegisterStatus+0x68>
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	08 95       	ret
    5e40:	80 e0       	ldi	r24, 0x00	; 0
    5e42:	08 95       	ret
    5e44:	82 e0       	ldi	r24, 0x02	; 2
    5e46:	08 95       	ret
    5e48:	80 e0       	ldi	r24, 0x00	; 0
    5e4a:	08 95       	ret

00005e4c <count_Registers>:
    5e4c:	1f 93       	push	r17
    5e4e:	cf 93       	push	r28
    5e50:	df 93       	push	r29
    5e52:	18 2f       	mov	r17, r24
    5e54:	c0 e0       	ldi	r28, 0x00	; 0
    5e56:	d0 e0       	ldi	r29, 0x00	; 0
    5e58:	06 c0       	rjmp	.+12     	; 0x5e66 <count_Registers+0x1a>
    5e5a:	61 2f       	mov	r22, r17
    5e5c:	8c 2f       	mov	r24, r28
    5e5e:	7c df       	rcall	.-264    	; 0x5d58 <read_Register>
    5e60:	81 11       	cpse	r24, r1
    5e62:	df 5f       	subi	r29, 0xFF	; 255
    5e64:	cf 5f       	subi	r28, 0xFF	; 255
    5e66:	c0 34       	cpi	r28, 0x40	; 64
    5e68:	c0 f3       	brcs	.-16     	; 0x5e5a <count_Registers+0xe>
    5e6a:	8d 2f       	mov	r24, r29
    5e6c:	df 91       	pop	r29
    5e6e:	cf 91       	pop	r28
    5e70:	1f 91       	pop	r17
    5e72:	08 95       	ret

00005e74 <read_allRegister>:
    5e74:	ef 92       	push	r14
    5e76:	ff 92       	push	r15
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	7c 01       	movw	r14, r24
    5e82:	c0 e0       	ldi	r28, 0x00	; 0
    5e84:	d0 e0       	ldi	r29, 0x00	; 0
    5e86:	00 e0       	ldi	r16, 0x00	; 0
    5e88:	17 c0       	rjmp	.+46     	; 0x5eb8 <read_allRegister+0x44>
    5e8a:	1c 2f       	mov	r17, r28
    5e8c:	17 70       	andi	r17, 0x07	; 7
    5e8e:	09 f4       	brne	.+2      	; 0x5e92 <read_allRegister+0x1e>
    5e90:	d0 e0       	ldi	r29, 0x00	; 0
    5e92:	d6 95       	lsr	r29
    5e94:	63 e0       	ldi	r22, 0x03	; 3
    5e96:	8c 2f       	mov	r24, r28
    5e98:	5f df       	rcall	.-322    	; 0x5d58 <read_Register>
    5e9a:	88 23       	and	r24, r24
    5e9c:	11 f0       	breq	.+4      	; 0x5ea2 <read_allRegister+0x2e>
    5e9e:	d0 68       	ori	r29, 0x80	; 128
    5ea0:	0f 5f       	subi	r16, 0xFF	; 255
    5ea2:	17 30       	cpi	r17, 0x07	; 7
    5ea4:	41 f4       	brne	.+16     	; 0x5eb6 <read_allRegister+0x42>
    5ea6:	e1 14       	cp	r14, r1
    5ea8:	f1 04       	cpc	r15, r1
    5eaa:	29 f0       	breq	.+10     	; 0x5eb6 <read_allRegister+0x42>
    5eac:	f7 01       	movw	r30, r14
    5eae:	d0 83       	st	Z, r29
    5eb0:	c7 01       	movw	r24, r14
    5eb2:	01 96       	adiw	r24, 0x01	; 1
    5eb4:	7c 01       	movw	r14, r24
    5eb6:	cf 5f       	subi	r28, 0xFF	; 255
    5eb8:	c0 34       	cpi	r28, 0x40	; 64
    5eba:	38 f3       	brcs	.-50     	; 0x5e8a <read_allRegister+0x16>
    5ebc:	80 2f       	mov	r24, r16
    5ebe:	df 91       	pop	r29
    5ec0:	cf 91       	pop	r28
    5ec2:	1f 91       	pop	r17
    5ec4:	0f 91       	pop	r16
    5ec6:	ff 90       	pop	r15
    5ec8:	ef 90       	pop	r14
    5eca:	08 95       	ret

00005ecc <register_onOff>:
    5ecc:	cf 93       	push	r28
    5ece:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5ed2:	89 17       	cp	r24, r25
    5ed4:	f0 f4       	brcc	.+60     	; 0x5f12 <register_onOff+0x46>
    5ed6:	c6 2f       	mov	r28, r22
    5ed8:	08 df       	rcall	.-496    	; 0x5cea <regNr_to_moduleBit>
    5eda:	81 11       	cpse	r24, r1
    5edc:	1a c0       	rjmp	.+52     	; 0x5f12 <register_onOff+0x46>
    5ede:	89 2f       	mov	r24, r25
    5ee0:	8f 71       	andi	r24, 0x1F	; 31
    5ee2:	92 95       	swap	r25
    5ee4:	96 95       	lsr	r25
    5ee6:	97 70       	andi	r25, 0x07	; 7
    5ee8:	c0 ff       	sbrs	r28, 0
    5eea:	0a c0       	rjmp	.+20     	; 0x5f00 <register_onOff+0x34>
    5eec:	61 e0       	ldi	r22, 0x01	; 1
    5eee:	70 e0       	ldi	r23, 0x00	; 0
    5ef0:	02 c0       	rjmp	.+4      	; 0x5ef6 <register_onOff+0x2a>
    5ef2:	66 0f       	add	r22, r22
    5ef4:	77 1f       	adc	r23, r23
    5ef6:	9a 95       	dec	r25
    5ef8:	e2 f7       	brpl	.-8      	; 0x5ef2 <register_onOff+0x26>
    5efa:	0e 94 ef 11 	call	0x23de	; 0x23de <pipe_on>
    5efe:	09 c0       	rjmp	.+18     	; 0x5f12 <register_onOff+0x46>
    5f00:	61 e0       	ldi	r22, 0x01	; 1
    5f02:	70 e0       	ldi	r23, 0x00	; 0
    5f04:	02 c0       	rjmp	.+4      	; 0x5f0a <register_onOff+0x3e>
    5f06:	66 0f       	add	r22, r22
    5f08:	77 1f       	adc	r23, r23
    5f0a:	9a 95       	dec	r25
    5f0c:	e2 f7       	brpl	.-8      	; 0x5f06 <register_onOff+0x3a>
    5f0e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <pipe_off>
    5f12:	cf 91       	pop	r28
    5f14:	08 95       	ret

00005f16 <register_toProgram>:
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5f16:	0f 93       	push	r16
    5f18:	1f 93       	push	r17
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	c8 2f       	mov	r28, r24
    5f20:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5f22:	80 34       	cpi	r24, 0x40	; 64
    5f24:	90 f4       	brcc	.+36     	; 0x5f4a <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5f26:	28 2f       	mov	r18, r24
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	c9 01       	movw	r24, r18
    5f2c:	88 0f       	add	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	22 0f       	add	r18, r18
    5f32:	33 1f       	adc	r19, r19
    5f34:	22 0f       	add	r18, r18
    5f36:	33 1f       	adc	r19, r19
    5f38:	22 0f       	add	r18, r18
    5f3a:	33 1f       	adc	r19, r19
    5f3c:	82 0f       	add	r24, r18
    5f3e:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5f40:	8c 59       	subi	r24, 0x9C	; 156
    5f42:	96 4f       	sbci	r25, 0xF6	; 246
    5f44:	97 df       	rcall	.-210    	; 0x5e74 <read_allRegister>
    5f46:	18 2f       	mov	r17, r24
    5f48:	01 c0       	rjmp	.+2      	; 0x5f4c <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5f4a:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5f4c:	d0 e0       	ldi	r29, 0x00	; 0
    5f4e:	20 de       	rcall	.-960    	; 0x5b90 <getAllCouplers>
    5f50:	9e 01       	movw	r18, r28
    5f52:	22 0f       	add	r18, r18
    5f54:	33 1f       	adc	r19, r19
    5f56:	cc 0f       	add	r28, r28
    5f58:	dd 1f       	adc	r29, r29
    5f5a:	cc 0f       	add	r28, r28
    5f5c:	dd 1f       	adc	r29, r29
    5f5e:	cc 0f       	add	r28, r28
    5f60:	dd 1f       	adc	r29, r29
    5f62:	c2 0f       	add	r28, r18
    5f64:	d3 1f       	adc	r29, r19
    5f66:	cc 59       	subi	r28, 0x9C	; 156
    5f68:	d6 4f       	sbci	r29, 0xF6	; 246
    5f6a:	99 87       	std	Y+9, r25	; 0x09
    5f6c:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5f6e:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5f70:	0e 94 ed 0c 	call	0x19da	; 0x19da <eeprom_UpdateProg>
	}
	return result;
}
    5f74:	81 2f       	mov	r24, r17
    5f76:	df 91       	pop	r29
    5f78:	cf 91       	pop	r28
    5f7a:	1f 91       	pop	r17
    5f7c:	0f 91       	pop	r16
    5f7e:	08 95       	ret

00005f80 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5f80:	ff 92       	push	r15
    5f82:	0f 93       	push	r16
    5f84:	1f 93       	push	r17
    5f86:	cf 93       	push	r28
    5f88:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5f8a:	90 e0       	ldi	r25, 0x00	; 0
    5f8c:	8c 01       	movw	r16, r24
    5f8e:	00 0f       	add	r16, r16
    5f90:	11 1f       	adc	r17, r17
    5f92:	88 0f       	add	r24, r24
    5f94:	99 1f       	adc	r25, r25
    5f96:	88 0f       	add	r24, r24
    5f98:	99 1f       	adc	r25, r25
    5f9a:	88 0f       	add	r24, r24
    5f9c:	99 1f       	adc	r25, r25
    5f9e:	08 0f       	add	r16, r24
    5fa0:	19 1f       	adc	r17, r25
    5fa2:	0c 59       	subi	r16, 0x9C	; 156
    5fa4:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fa6:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5fa8:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5faa:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fac:	15 c0       	rjmp	.+42     	; 0x5fd8 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5fae:	9c 2f       	mov	r25, r28
    5fb0:	97 70       	andi	r25, 0x07	; 7
    5fb2:	21 f4       	brne	.+8      	; 0x5fbc <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5fb4:	f8 01       	movw	r30, r16
    5fb6:	d0 81       	ld	r29, Z
    5fb8:	0f 5f       	subi	r16, 0xFF	; 255
    5fba:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5fbc:	8c 2f       	mov	r24, r28
    5fbe:	11 df       	rcall	.-478    	; 0x5de2 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5fc0:	d0 ff       	sbrs	r29, 0
    5fc2:	03 c0       	rjmp	.+6      	; 0x5fca <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5fc4:	82 30       	cpi	r24, 0x02	; 2
    5fc6:	31 f0       	breq	.+12     	; 0x5fd4 <midi_RegisterMatchProgram+0x54>
    5fc8:	0d c0       	rjmp	.+26     	; 0x5fe4 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5fca:	82 30       	cpi	r24, 0x02	; 2
    5fcc:	69 f0       	breq	.+26     	; 0x5fe8 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5fce:	81 30       	cpi	r24, 0x01	; 1
    5fd0:	09 f4       	brne	.+2      	; 0x5fd4 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5fd2:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5fd4:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fd6:	cf 5f       	subi	r28, 0xFF	; 255
    5fd8:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5fdc:	c9 17       	cp	r28, r25
    5fde:	38 f3       	brcs	.-50     	; 0x5fae <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5fe0:	8f 2d       	mov	r24, r15
    5fe2:	03 c0       	rjmp	.+6      	; 0x5fea <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5fe4:	8f ef       	ldi	r24, 0xFF	; 255
    5fe6:	01 c0       	rjmp	.+2      	; 0x5fea <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5fe8:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5fea:	df 91       	pop	r29
    5fec:	cf 91       	pop	r28
    5fee:	1f 91       	pop	r17
    5ff0:	0f 91       	pop	r16
    5ff2:	ff 90       	pop	r15
    5ff4:	08 95       	ret

00005ff6 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	ee 0f       	add	r30, r30
    5ffc:	ff 1f       	adc	r31, r31
    5ffe:	88 0f       	add	r24, r24
    6000:	99 1f       	adc	r25, r25
    6002:	88 0f       	add	r24, r24
    6004:	99 1f       	adc	r25, r25
    6006:	88 0f       	add	r24, r24
    6008:	99 1f       	adc	r25, r25
    600a:	e8 0f       	add	r30, r24
    600c:	f9 1f       	adc	r31, r25
    600e:	ec 59       	subi	r30, 0x9C	; 156
    6010:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6012:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    6014:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6016:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6018:	09 c0       	rjmp	.+18     	; 0x602c <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    601a:	39 2f       	mov	r19, r25
    601c:	37 70       	andi	r19, 0x07	; 7
    601e:	11 f4       	brne	.+4      	; 0x6024 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    6020:	20 81       	ld	r18, Z
    6022:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    6024:	20 fd       	sbrc	r18, 0
			result++;
    6026:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    6028:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    602a:	9f 5f       	subi	r25, 0xFF	; 255
    602c:	30 91 10 08 	lds	r19, 0x0810	; 0x800810 <registerCount>
    6030:	93 17       	cp	r25, r19
    6032:	98 f3       	brcs	.-26     	; 0x601a <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    6034:	08 95       	ret

00006036 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6036:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <prog_Display>
    603a:	98 17       	cp	r25, r24
    603c:	29 f0       	breq	.+10     	; 0x6048 <prog_set+0x12>
		prog_Display = prog;
    603e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
    6042:	8f ef       	ldi	r24, 0xFF	; 255
    6044:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    6048:	08 95       	ret

0000604a <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    604a:	bf 92       	push	r11
    604c:	cf 92       	push	r12
    604e:	df 92       	push	r13
    6050:	ef 92       	push	r14
    6052:	ff 92       	push	r15
    6054:	0f 93       	push	r16
    6056:	1f 93       	push	r17
    6058:	cf 93       	push	r28
    605a:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    605c:	80 34       	cpi	r24, 0x40	; 64
    605e:	08 f0       	brcs	.+2      	; 0x6062 <program_toRegister+0x18>
    6060:	41 c0       	rjmp	.+130    	; 0x60e4 <program_toRegister+0x9a>
    6062:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    6064:	e8 df       	rcall	.-48     	; 0x6036 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    6066:	f1 2c       	mov	r15, r1
    6068:	f7 01       	movw	r30, r14
    606a:	ee 0f       	add	r30, r30
    606c:	ff 1f       	adc	r31, r31
    606e:	c7 01       	movw	r24, r14
    6070:	88 0f       	add	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	88 0f       	add	r24, r24
    6076:	99 1f       	adc	r25, r25
    6078:	88 0f       	add	r24, r24
    607a:	99 1f       	adc	r25, r25
    607c:	e8 0f       	add	r30, r24
    607e:	f9 1f       	adc	r31, r25
    6080:	ec 59       	subi	r30, 0x9C	; 156
    6082:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6084:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    6086:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6088:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    608a:	18 c0       	rjmp	.+48     	; 0x60bc <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    608c:	6f 01       	movw	r12, r30
    608e:	8f ef       	ldi	r24, 0xFF	; 255
    6090:	c8 1a       	sub	r12, r24
    6092:	d8 0a       	sbc	r13, r24
    6094:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6096:	d0 e0       	ldi	r29, 0x00	; 0
    6098:	0d c0       	rjmp	.+26     	; 0x60b4 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    609a:	8c 2f       	mov	r24, r28
    609c:	81 70       	andi	r24, 0x01	; 1
    609e:	c0 fd       	sbrc	r28, 0
					result++;
    60a0:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    60a2:	61 e0       	ldi	r22, 0x01	; 1
    60a4:	81 11       	cpse	r24, r1
    60a6:	01 c0       	rjmp	.+2      	; 0x60aa <program_toRegister+0x60>
    60a8:	60 e0       	ldi	r22, 0x00	; 0
    60aa:	81 2f       	mov	r24, r17
    60ac:	0f df       	rcall	.-482    	; 0x5ecc <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    60ae:	c6 95       	lsr	r28
				regNr++;
    60b0:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    60b2:	df 5f       	subi	r29, 0xFF	; 255
    60b4:	d8 30       	cpi	r29, 0x08	; 8
    60b6:	88 f3       	brcs	.-30     	; 0x609a <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60b8:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    60ba:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60bc:	87 e0       	ldi	r24, 0x07	; 7
    60be:	8b 15       	cp	r24, r11
    60c0:	28 f7       	brcc	.-54     	; 0x608c <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    60c2:	f7 01       	movw	r30, r14
    60c4:	ee 0f       	add	r30, r30
    60c6:	ff 1f       	adc	r31, r31
    60c8:	ee 0c       	add	r14, r14
    60ca:	ff 1c       	adc	r15, r15
    60cc:	ee 0c       	add	r14, r14
    60ce:	ff 1c       	adc	r15, r15
    60d0:	ee 0c       	add	r14, r14
    60d2:	ff 1c       	adc	r15, r15
    60d4:	ee 0d       	add	r30, r14
    60d6:	ff 1d       	adc	r31, r15
    60d8:	ec 59       	subi	r30, 0x9C	; 156
    60da:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    60dc:	80 85       	ldd	r24, Z+8	; 0x08
    60de:	91 85       	ldd	r25, Z+9	; 0x09
    60e0:	6f dd       	rcall	.-1314   	; 0x5bc0 <setAllCouplers>
    60e2:	01 c0       	rjmp	.+2      	; 0x60e6 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    60e4:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    60e6:	80 2f       	mov	r24, r16
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	ff 90       	pop	r15
    60f2:	ef 90       	pop	r14
    60f4:	df 90       	pop	r13
    60f6:	cf 90       	pop	r12
    60f8:	bf 90       	pop	r11
    60fa:	08 95       	ret

000060fc <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    60fc:	cf 93       	push	r28
    60fe:	df 93       	push	r29
    6100:	c8 2f       	mov	r28, r24
    6102:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6104:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <midi_Setting+0x2>
    6108:	81 11       	cpse	r24, r1
    610a:	14 c0       	rjmp	.+40     	; 0x6134 <midi_ProgramChange+0x38>
    610c:	21 c0       	rjmp	.+66     	; 0x6150 <midi_ProgramChange+0x54>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    610e:	ec 2f       	mov	r30, r28
    6110:	f0 e0       	ldi	r31, 0x00	; 0
    6112:	ee 0f       	add	r30, r30
    6114:	ff 1f       	adc	r31, r31
    6116:	ee 0f       	add	r30, r30
    6118:	ff 1f       	adc	r31, r31
    611a:	e8 0f       	add	r30, r24
    611c:	f1 1d       	adc	r31, r1
    611e:	ee 0f       	add	r30, r30
    6120:	ff 1f       	adc	r31, r31
    6122:	ee 0f       	add	r30, r30
    6124:	ff 1f       	adc	r31, r31
    6126:	e8 5d       	subi	r30, 0xD8	; 216
    6128:	f7 4f       	sbci	r31, 0xF7	; 247
    612a:	90 81       	ld	r25, Z
    612c:	9f 3f       	cpi	r25, 0xFF	; 255
    612e:	39 f4       	brne	.+14     	; 0x613e <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    6130:	8f 5f       	subi	r24, 0xFF	; 255
    6132:	01 c0       	rjmp	.+2      	; 0x6136 <midi_ProgramChange+0x3a>
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	84 30       	cpi	r24, 0x04	; 4
    6138:	50 f3       	brcs	.-44     	; 0x610e <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	01 c0       	rjmp	.+2      	; 0x6140 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    613e:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    6140:	8f 3f       	cpi	r24, 0xFF	; 255
    6142:	31 f4       	brne	.+12     	; 0x6150 <midi_ProgramChange+0x54>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6144:	8d 2f       	mov	r24, r29
    6146:	81 df       	rcall	.-254    	; 0x604a <program_toRegister>
			prog_set(program);
    6148:	8d 2f       	mov	r24, r29
    614a:	75 df       	rcall	.-278    	; 0x6036 <prog_set>
			midiLastProgram = program;
    614c:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    6150:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    6154:	c8 13       	cpse	r28, r24
    6156:	08 c0       	rjmp	.+16     	; 0x6168 <midi_ProgramChange+0x6c>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6158:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    615c:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    615e:	21 f0       	breq	.+8      	; 0x6168 <midi_ProgramChange+0x6c>
    6160:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    6162:	32 d6       	rcall	.+3172   	; 0x6dc8 <serial1MIDISend>
    6164:	8d 2f       	mov	r24, r29
    6166:	30 d6       	rcall	.+3168   	; 0x6dc8 <serial1MIDISend>
		}
	}
}
    6168:	df 91       	pop	r29
    616a:	cf 91       	pop	r28
    616c:	08 95       	ret

0000616e <midi_resetRegisters>:


void midi_resetRegisters(){
    616e:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    6170:	c0 e0       	ldi	r28, 0x00	; 0
    6172:	06 c0       	rjmp	.+12     	; 0x6180 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    6174:	8f ef       	ldi	r24, 0xFF	; 255
    6176:	5f df       	rcall	.-322    	; 0x6036 <prog_set>
		register_onOff(i,REGISTER_OFF);
    6178:	60 e0       	ldi	r22, 0x00	; 0
    617a:	8c 2f       	mov	r24, r28
    617c:	a7 de       	rcall	.-690    	; 0x5ecc <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    617e:	cf 5f       	subi	r28, 0xFF	; 255
    6180:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <registerCount>
    6184:	c8 17       	cp	r28, r24
    6186:	b0 f3       	brcs	.-20     	; 0x6174 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    6188:	cf 91       	pop	r28
    618a:	08 95       	ret

0000618c <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    618c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    6190:	8f 3f       	cpi	r24, 0xFF	; 255
    6192:	c9 f0       	breq	.+50     	; 0x61c6 <prog_toLcd+0x3a>
		lcd_putc('P');
    6194:	80 e5       	ldi	r24, 0x50	; 80
    6196:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc('.');
    619a:	8e e2       	ldi	r24, 0x2E	; 46
    619c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    61a0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61a4:	86 95       	lsr	r24
    61a6:	86 95       	lsr	r24
    61a8:	86 95       	lsr	r24
    61aa:	87 70       	andi	r24, 0x07	; 7
    61ac:	8f 5b       	subi	r24, 0xBF	; 191
    61ae:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    61b2:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61b6:	87 70       	andi	r24, 0x07	; 7
    61b8:	8f 5c       	subi	r24, 0xCF	; 207
    61ba:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc(' ');
    61be:	80 e2       	ldi	r24, 0x20	; 32
    61c0:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    61c4:	08 95       	ret
	} else {
		lcd_blank(5);
    61c6:	85 e0       	ldi	r24, 0x05	; 5
    61c8:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <lcd_blank>
    61cc:	08 95       	ret

000061ce <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61ce:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    61d0:	e8 e2       	ldi	r30, 0x28	; 40
    61d2:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61d4:	07 c0       	rjmp	.+14     	; 0x61e4 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    61d6:	8f ef       	ldi	r24, 0xFF	; 255
    61d8:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    61da:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    61dc:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    61de:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    61e0:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61e2:	91 50       	subi	r25, 0x01	; 1
    61e4:	91 11       	cpse	r25, r1
    61e6:	f7 cf       	rjmp	.-18     	; 0x61d6 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    61e8:	0e 94 84 0a 	call	0x1508	; 0x1508 <eeprom_ReadMidiInMap>
    61ec:	8f 3f       	cpi	r24, 0xFF	; 255
    61ee:	01 f5       	brne	.+64     	; 0x6230 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    61f0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    61f4:	e8 e2       	ldi	r30, 0x28	; 40
    61f6:	f8 e0       	ldi	r31, 0x08	; 8
    61f8:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    61fa:	84 e2       	ldi	r24, 0x24	; 36
    61fc:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    61fe:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6200:	98 e3       	ldi	r25, 0x38	; 56
    6202:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6204:	21 e0       	ldi	r18, 0x01	; 1
    6206:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6208:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    620a:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    620c:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    620e:	22 e0       	ldi	r18, 0x02	; 2
    6210:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    6212:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6214:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6216:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6218:	93 e0       	ldi	r25, 0x03	; 3
    621a:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    621c:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    621e:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    6220:	8e e1       	ldi	r24, 0x1E	; 30
    6222:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	50 e0       	ldi	r21, 0x00	; 0
    6228:	61 e0       	ldi	r22, 0x01	; 1
    622a:	81 e0       	ldi	r24, 0x01	; 1
    622c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6230:	0e 94 08 0b 	call	0x1610	; 0x1610 <eeprom_ReadMidiThrough>
    6234:	8f 3f       	cpi	r24, 0xFF	; 255
    6236:	51 f4       	brne	.+20     	; 0x624c <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6238:	e6 e2       	ldi	r30, 0x26	; 38
    623a:	f8 e0       	ldi	r31, 0x08	; 8
    623c:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    623e:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6240:	40 e0       	ldi	r20, 0x00	; 0
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	61 e0       	ldi	r22, 0x01	; 1
    6246:	81 e0       	ldi	r24, 0x01	; 1
    6248:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    624c:	08 95       	ret

0000624e <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    624e:	20 e0       	ldi	r18, 0x00	; 0
    6250:	09 c0       	rjmp	.+18     	; 0x6264 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    6252:	88 0f       	add	r24, r24
    6254:	99 1f       	adc	r25, r25
    6256:	fc 01       	movw	r30, r24
    6258:	e8 5d       	subi	r30, 0xD8	; 216
    625a:	f6 4f       	sbci	r31, 0xF6	; 246
    625c:	8f ef       	ldi	r24, 0xFF	; 255
    625e:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    6260:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6262:	2f 5f       	subi	r18, 0xFF	; 255
    6264:	82 2f       	mov	r24, r18
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	00 97       	sbiw	r24, 0x00	; 0
    626a:	99 f7       	brne	.-26     	; 0x6252 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    626c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <eeprom_ReadMidiOutMap>
    6270:	8f 3f       	cpi	r24, 0xFF	; 255
    6272:	b1 f4       	brne	.+44     	; 0x62a0 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6274:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    6278:	e8 e2       	ldi	r30, 0x28	; 40
    627a:	f9 e0       	ldi	r31, 0x09	; 9
    627c:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    627e:	91 e0       	ldi	r25, 0x01	; 1
    6280:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    6282:	92 e0       	ldi	r25, 0x02	; 2
    6284:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    6286:	93 e0       	ldi	r25, 0x03	; 3
    6288:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    628a:	e0 e3       	ldi	r30, 0x30	; 48
    628c:	f9 e0       	ldi	r31, 0x09	; 9
    628e:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    6290:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    6292:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    6294:	40 e0       	ldi	r20, 0x00	; 0
    6296:	50 e0       	ldi	r21, 0x00	; 0
    6298:	62 e0       	ldi	r22, 0x02	; 2
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    62a0:	08 95       	ret

000062a2 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    62a2:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    62a4:	8f ef       	ldi	r24, 0xFF	; 255
    62a6:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    62a8:	e4 30       	cpi	r30, 0x04	; 4
    62aa:	50 f4       	brcc	.+20     	; 0x62c0 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    62ac:	f0 e0       	ldi	r31, 0x00	; 0
    62ae:	ee 0f       	add	r30, r30
    62b0:	ff 1f       	adc	r31, r31
    62b2:	e8 5d       	subi	r30, 0xD8	; 216
    62b4:	f6 4f       	sbci	r31, 0xF6	; 246
    62b6:	20 81       	ld	r18, Z
    62b8:	2f 3f       	cpi	r18, 0xFF	; 255
    62ba:	11 f0       	breq	.+4      	; 0x62c0 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    62bc:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    62be:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    62c0:	08 95       	ret

000062c2 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    62c2:	70 e0       	ldi	r23, 0x00	; 0
    62c4:	52 c0       	rjmp	.+164    	; 0x636a <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    62c6:	87 2f       	mov	r24, r23
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	24 2f       	mov	r18, r20
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	f9 01       	movw	r30, r18
    62d0:	ee 0f       	add	r30, r30
    62d2:	ff 1f       	adc	r31, r31
    62d4:	df 01       	movw	r26, r30
    62d6:	a2 0f       	add	r26, r18
    62d8:	b3 1f       	adc	r27, r19
    62da:	fc 01       	movw	r30, r24
    62dc:	ee 0f       	add	r30, r30
    62de:	ff 1f       	adc	r31, r31
    62e0:	e8 0f       	add	r30, r24
    62e2:	f9 1f       	adc	r31, r25
    62e4:	ee 0f       	add	r30, r30
    62e6:	ff 1f       	adc	r31, r31
    62e8:	ee 0f       	add	r30, r30
    62ea:	ff 1f       	adc	r31, r31
    62ec:	ea 0f       	add	r30, r26
    62ee:	fb 1f       	adc	r31, r27
    62f0:	ec 5c       	subi	r30, 0xCC	; 204
    62f2:	f6 4f       	sbci	r31, 0xF6	; 246
    62f4:	a0 81       	ld	r26, Z
    62f6:	af 3f       	cpi	r26, 0xFF	; 255
    62f8:	d9 f0       	breq	.+54     	; 0x6330 <Midi_updateManualRange+0x6e>
    62fa:	f9 01       	movw	r30, r18
    62fc:	ee 0f       	add	r30, r30
    62fe:	ff 1f       	adc	r31, r31
    6300:	e2 0f       	add	r30, r18
    6302:	f3 1f       	adc	r31, r19
    6304:	9c 01       	movw	r18, r24
    6306:	22 0f       	add	r18, r18
    6308:	33 1f       	adc	r19, r19
    630a:	28 0f       	add	r18, r24
    630c:	39 1f       	adc	r19, r25
    630e:	22 0f       	add	r18, r18
    6310:	33 1f       	adc	r19, r19
    6312:	22 0f       	add	r18, r18
    6314:	33 1f       	adc	r19, r19
    6316:	e2 0f       	add	r30, r18
    6318:	f3 1f       	adc	r31, r19
    631a:	ec 5c       	subi	r30, 0xCC	; 204
    631c:	f6 4f       	sbci	r31, 0xF6	; 246
    631e:	21 81       	ldd	r18, Z+1	; 0x01
    6320:	2f 3f       	cpi	r18, 0xFF	; 255
    6322:	31 f0       	breq	.+12     	; 0x6330 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6324:	a6 17       	cp	r26, r22
    6326:	08 f4       	brcc	.+2      	; 0x632a <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6328:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    632a:	52 17       	cp	r21, r18
    632c:	08 f4       	brcc	.+2      	; 0x6330 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    632e:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6330:	55 23       	and	r21, r21
    6332:	11 f0       	breq	.+4      	; 0x6338 <Midi_updateManualRange+0x76>
    6334:	6f 3f       	cpi	r22, 0xFF	; 255
    6336:	49 f4       	brne	.+18     	; 0x634a <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6338:	88 0f       	add	r24, r24
    633a:	99 1f       	adc	r25, r25
    633c:	fc 01       	movw	r30, r24
    633e:	e2 5e       	subi	r30, 0xE2	; 226
    6340:	f7 4f       	sbci	r31, 0xF7	; 247
    6342:	8f ef       	ldi	r24, 0xFF	; 255
    6344:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6346:	81 83       	std	Z+1, r24	; 0x01
    6348:	07 c0       	rjmp	.+14     	; 0x6358 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    634a:	88 0f       	add	r24, r24
    634c:	99 1f       	adc	r25, r25
    634e:	fc 01       	movw	r30, r24
    6350:	e2 5e       	subi	r30, 0xE2	; 226
    6352:	f7 4f       	sbci	r31, 0xF7	; 247
    6354:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6356:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6358:	4f 5f       	subi	r20, 0xFF	; 255
    635a:	03 c0       	rjmp	.+6      	; 0x6362 <Midi_updateManualRange+0xa0>
    635c:	40 e0       	ldi	r20, 0x00	; 0
    635e:	6f ef       	ldi	r22, 0xFF	; 255
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	44 30       	cpi	r20, 0x04	; 4
    6364:	08 f4       	brcc	.+2      	; 0x6368 <Midi_updateManualRange+0xa6>
    6366:	af cf       	rjmp	.-162    	; 0x62c6 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6368:	7f 5f       	subi	r23, 0xFF	; 255
    636a:	74 30       	cpi	r23, 0x04	; 4
    636c:	b8 f3       	brcs	.-18     	; 0x635c <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    636e:	08 95       	ret

00006370 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6370:	63 e0       	ldi	r22, 0x03	; 3
    6372:	28 c0       	rjmp	.+80     	; 0x63c4 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6374:	86 2f       	mov	r24, r22
    6376:	06 2e       	mov	r0, r22
    6378:	00 0c       	add	r0, r0
    637a:	99 0b       	sbc	r25, r25
    637c:	42 2f       	mov	r20, r18
    637e:	02 2e       	mov	r0, r18
    6380:	00 0c       	add	r0, r0
    6382:	55 0b       	sbc	r21, r21
    6384:	fa 01       	movw	r30, r20
    6386:	ee 0f       	add	r30, r30
    6388:	ff 1f       	adc	r31, r31
    638a:	e4 0f       	add	r30, r20
    638c:	f5 1f       	adc	r31, r21
    638e:	ac 01       	movw	r20, r24
    6390:	44 0f       	add	r20, r20
    6392:	55 1f       	adc	r21, r21
    6394:	da 01       	movw	r26, r20
    6396:	a8 0f       	add	r26, r24
    6398:	b9 1f       	adc	r27, r25
    639a:	aa 0f       	add	r26, r26
    639c:	bb 1f       	adc	r27, r27
    639e:	aa 0f       	add	r26, r26
    63a0:	bb 1f       	adc	r27, r27
    63a2:	ae 0f       	add	r26, r30
    63a4:	bf 1f       	adc	r27, r31
    63a6:	ac 5c       	subi	r26, 0xCC	; 204
    63a8:	b6 4f       	sbci	r27, 0xF6	; 246
    63aa:	3f ef       	ldi	r19, 0xFF	; 255
    63ac:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    63ae:	11 96       	adiw	r26, 0x01	; 1
    63b0:	3c 93       	st	X, r19
    63b2:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    63b4:	fd 01       	movw	r30, r26
    63b6:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    63b8:	21 50       	subi	r18, 0x01	; 1
    63ba:	01 c0       	rjmp	.+2      	; 0x63be <init_Manual2Module+0x4e>
    63bc:	23 e0       	ldi	r18, 0x03	; 3
    63be:	22 23       	and	r18, r18
    63c0:	cc f6       	brge	.-78     	; 0x6374 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    63c2:	61 50       	subi	r22, 0x01	; 1
    63c4:	66 23       	and	r22, r22
    63c6:	d4 f7       	brge	.-12     	; 0x63bc <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    63c8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <eeprom_ReadManualMap>
    63cc:	8f 3f       	cpi	r24, 0xFF	; 255
    63ce:	79 f5       	brne	.+94     	; 0x642e <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    63d0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    63d4:	40 e0       	ldi	r20, 0x00	; 0
    63d6:	50 e0       	ldi	r21, 0x00	; 0
    63d8:	63 e0       	ldi	r22, 0x03	; 3
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    63e0:	e4 e3       	ldi	r30, 0x34	; 52
    63e2:	f9 e0       	ldi	r31, 0x09	; 9
    63e4:	84 e2       	ldi	r24, 0x24	; 36
    63e6:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    63e8:	33 e4       	ldi	r19, 0x43	; 67
    63ea:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    63ec:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    63ee:	24 e4       	ldi	r18, 0x44	; 68
    63f0:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    63f2:	9b e5       	ldi	r25, 0x5B	; 91
    63f4:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    63f6:	40 e2       	ldi	r20, 0x20	; 32
    63f8:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    63fa:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    63fc:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    63fe:	40 e4       	ldi	r20, 0x40	; 64
    6400:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6402:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6404:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6406:	40 e6       	ldi	r20, 0x60	; 96
    6408:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    640a:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    640c:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    640e:	30 e8       	ldi	r19, 0x80	; 128
    6410:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6412:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6414:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6416:	90 ea       	ldi	r25, 0xA0	; 160
    6418:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    641a:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    641c:	81 e4       	ldi	r24, 0x41	; 65
    641e:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6420:	80 ec       	ldi	r24, 0xC0	; 192
    6422:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6424:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6426:	8d e1       	ldi	r24, 0x1D	; 29
    6428:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    642a:	80 ee       	ldi	r24, 0xE0	; 224
    642c:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    642e:	49 cf       	rjmp	.-366    	; 0x62c2 <Midi_updateManualRange>
    6430:	08 95       	ret

00006432 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6432:	84 30       	cpi	r24, 0x04	; 4
    6434:	d8 f4       	brcc	.+54     	; 0x646c <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	fc 01       	movw	r30, r24
    643a:	ee 0f       	add	r30, r30
    643c:	ff 1f       	adc	r31, r31
    643e:	e8 0f       	add	r30, r24
    6440:	f9 1f       	adc	r31, r25
    6442:	ee 0f       	add	r30, r30
    6444:	ff 1f       	adc	r31, r31
    6446:	ee 0f       	add	r30, r30
    6448:	ff 1f       	adc	r31, r31
    644a:	ec 5c       	subi	r30, 0xCC	; 204
    644c:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    644e:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6450:	20 81       	ld	r18, Z
    6452:	62 17       	cp	r22, r18
    6454:	40 f0       	brcs	.+16     	; 0x6466 <manualNote_to_moduleBit+0x34>
    6456:	91 81       	ldd	r25, Z+1	; 0x01
    6458:	96 17       	cp	r25, r22
    645a:	28 f0       	brcs	.+10     	; 0x6466 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    645c:	92 81       	ldd	r25, Z+2	; 0x02
    645e:	62 1b       	sub	r22, r18
				return (result);
    6460:	80 e0       	ldi	r24, 0x00	; 0
    6462:	96 0f       	add	r25, r22
    6464:	08 95       	ret
			}
			pRange++;
    6466:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6468:	81 50       	subi	r24, 0x01	; 1
    646a:	91 f7       	brne	.-28     	; 0x6450 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    646c:	8f ef       	ldi	r24, 0xFF	; 255
    646e:	90 e0       	ldi	r25, 0x00	; 0
}
    6470:	08 95       	ret

00006472 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6472:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6474:	e4 e3       	ldi	r30, 0x34	; 52
    6476:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6478:	44 e0       	ldi	r20, 0x04	; 4
    647a:	16 c0       	rjmp	.+44     	; 0x64a8 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    647c:	52 81       	ldd	r21, Z+2	; 0x02
    647e:	85 17       	cp	r24, r21
    6480:	88 f0       	brcs	.+34     	; 0x64a4 <moduleBit_to_manualNote+0x32>
    6482:	68 2f       	mov	r22, r24
    6484:	70 e0       	ldi	r23, 0x00	; 0
    6486:	21 81       	ldd	r18, Z+1	; 0x01
    6488:	a0 81       	ld	r26, Z
    648a:	30 e0       	ldi	r19, 0x00	; 0
    648c:	2a 1b       	sub	r18, r26
    648e:	31 09       	sbc	r19, r1
    6490:	25 0f       	add	r18, r21
    6492:	31 1d       	adc	r19, r1
    6494:	26 17       	cp	r18, r22
    6496:	37 07       	cpc	r19, r23
    6498:	2c f0       	brlt	.+10     	; 0x64a4 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    649a:	98 2f       	mov	r25, r24
    649c:	95 1b       	sub	r25, r21
				return(result);
    649e:	8b 2f       	mov	r24, r27
    64a0:	9a 0f       	add	r25, r26
    64a2:	08 95       	ret
			}
			pRange++;
    64a4:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    64a6:	41 50       	subi	r20, 0x01	; 1
    64a8:	41 11       	cpse	r20, r1
    64aa:	e8 cf       	rjmp	.-48     	; 0x647c <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    64ac:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    64ae:	b5 30       	cpi	r27, 0x05	; 5
    64b0:	18 f3       	brcs	.-58     	; 0x6478 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    64b2:	8f ef       	ldi	r24, 0xFF	; 255
    64b4:	90 e0       	ldi	r25, 0x00	; 0
}
    64b6:	08 95       	ret

000064b8 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    64b8:	ef 92       	push	r14
    64ba:	ff 92       	push	r15
    64bc:	0f 93       	push	r16
    64be:	1f 93       	push	r17
    64c0:	cf 93       	push	r28
    64c2:	df 93       	push	r29
    64c4:	c8 2f       	mov	r28, r24
    64c6:	06 2f       	mov	r16, r22
    64c8:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    64ca:	b3 df       	rcall	.-154    	; 0x6432 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    64cc:	49 2f       	mov	r20, r25
    64ce:	42 95       	swap	r20
    64d0:	46 95       	lsr	r20
    64d2:	47 70       	andi	r20, 0x07	; 7
    64d4:	21 e0       	ldi	r18, 0x01	; 1
    64d6:	30 e0       	ldi	r19, 0x00	; 0
    64d8:	79 01       	movw	r14, r18
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <manual_NoteOnOff+0x28>
    64dc:	ee 0c       	add	r14, r14
    64de:	ff 1c       	adc	r15, r15
    64e0:	4a 95       	dec	r20
    64e2:	e2 f7       	brpl	.-8      	; 0x64dc <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    64e4:	19 2f       	mov	r17, r25
    64e6:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    64e8:	81 11       	cpse	r24, r1
    64ea:	1a c0       	rjmp	.+52     	; 0x6520 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    64ec:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    64f0:	8e 21       	and	r24, r14
    64f2:	59 f4       	brne	.+22     	; 0x650a <manual_NoteOnOff+0x52>
    64f4:	dd 23       	and	r29, r29
    64f6:	4c f0       	brlt	.+18     	; 0x650a <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    64f8:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    64fa:	d1 30       	cpi	r29, 0x01	; 1
    64fc:	11 f4       	brne	.+4      	; 0x6502 <manual_NoteOnOff+0x4a>
    64fe:	90 e2       	ldi	r25, 0x20	; 32
    6500:	01 c0       	rjmp	.+2      	; 0x6504 <manual_NoteOnOff+0x4c>
    6502:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6504:	8e 2d       	mov	r24, r14
    6506:	91 2b       	or	r25, r17
    6508:	d0 da       	rcall	.-2656   	; 0x5aaa <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    650a:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    650c:	29 f4       	brne	.+10     	; 0x6518 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    650e:	6e 2d       	mov	r22, r14
    6510:	81 2f       	mov	r24, r17
    6512:	0e 94 fe 11 	call	0x23fc	; 0x23fc <pipe_off>
    6516:	04 c0       	rjmp	.+8      	; 0x6520 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6518:	6e 2d       	mov	r22, r14
    651a:	81 2f       	mov	r24, r17
    651c:	0e 94 ef 11 	call	0x23de	; 0x23de <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6520:	ec 2f       	mov	r30, r28
    6522:	f0 e0       	ldi	r31, 0x00	; 0
    6524:	ee 0f       	add	r30, r30
    6526:	ff 1f       	adc	r31, r31
    6528:	e8 5d       	subi	r30, 0xD8	; 216
    652a:	f6 4f       	sbci	r31, 0xF6	; 246
    652c:	81 81       	ldd	r24, Z+1	; 0x01
    652e:	8f 3f       	cpi	r24, 0xFF	; 255
    6530:	a9 f0       	breq	.+42     	; 0x655c <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    6532:	d1 30       	cpi	r29, 0x01	; 1
    6534:	31 f0       	breq	.+12     	; 0x6542 <manual_NoteOnOff+0x8a>
    6536:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    653a:	99 23       	and	r25, r25
    653c:	21 f0       	breq	.+8      	; 0x6546 <manual_NoteOnOff+0x8e>
    653e:	90 e9       	ldi	r25, 0x90	; 144
    6540:	03 c0       	rjmp	.+6      	; 0x6548 <manual_NoteOnOff+0x90>
    6542:	90 e9       	ldi	r25, 0x90	; 144
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <manual_NoteOnOff+0x90>
    6546:	90 e8       	ldi	r25, 0x80	; 128
    6548:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    654a:	3e d4       	rcall	.+2172   	; 0x6dc8 <serial1MIDISend>
    654c:	80 2f       	mov	r24, r16
    654e:	3c d4       	rcall	.+2168   	; 0x6dc8 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6550:	d1 11       	cpse	r29, r1
    6552:	02 c0       	rjmp	.+4      	; 0x6558 <manual_NoteOnOff+0xa0>
    6554:	80 e0       	ldi	r24, 0x00	; 0
    6556:	01 c0       	rjmp	.+2      	; 0x655a <manual_NoteOnOff+0xa2>
    6558:	80 e4       	ldi	r24, 0x40	; 64
    655a:	36 d4       	rcall	.+2156   	; 0x6dc8 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	1f 91       	pop	r17
    6562:	0f 91       	pop	r16
    6564:	ff 90       	pop	r15
    6566:	ef 90       	pop	r14
    6568:	08 95       	ret

0000656a <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    656a:	bf 92       	push	r11
    656c:	cf 92       	push	r12
    656e:	df 92       	push	r13
    6570:	ef 92       	push	r14
    6572:	ff 92       	push	r15
    6574:	0f 93       	push	r16
    6576:	1f 93       	push	r17
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    657e:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6580:	4c c0       	rjmp	.+152    	; 0x661a <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6582:	0c 2d       	mov	r16, r12
    6584:	10 e0       	ldi	r17, 0x00	; 0
    6586:	cd 2d       	mov	r28, r13
    6588:	d0 e0       	ldi	r29, 0x00	; 0
    658a:	f8 01       	movw	r30, r16
    658c:	ee 0f       	add	r30, r30
    658e:	ff 1f       	adc	r31, r31
    6590:	ee 0f       	add	r30, r30
    6592:	ff 1f       	adc	r31, r31
    6594:	ec 0f       	add	r30, r28
    6596:	fd 1f       	adc	r31, r29
    6598:	ee 0f       	add	r30, r30
    659a:	ff 1f       	adc	r31, r31
    659c:	ee 0f       	add	r30, r30
    659e:	ff 1f       	adc	r31, r31
    65a0:	e8 5d       	subi	r30, 0xD8	; 216
    65a2:	f7 4f       	sbci	r31, 0xF7	; 247
    65a4:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    65a6:	83 e0       	ldi	r24, 0x03	; 3
    65a8:	8b 15       	cp	r24, r11
    65aa:	b0 f1       	brcs	.+108    	; 0x6618 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    65ac:	f8 01       	movw	r30, r16
    65ae:	ee 0f       	add	r30, r30
    65b0:	ff 1f       	adc	r31, r31
    65b2:	ee 0f       	add	r30, r30
    65b4:	ff 1f       	adc	r31, r31
    65b6:	ec 0f       	add	r30, r28
    65b8:	fd 1f       	adc	r31, r29
    65ba:	ee 0f       	add	r30, r30
    65bc:	ff 1f       	adc	r31, r31
    65be:	ee 0f       	add	r30, r30
    65c0:	ff 1f       	adc	r31, r31
    65c2:	e8 5d       	subi	r30, 0xD8	; 216
    65c4:	f7 4f       	sbci	r31, 0xF7	; 247
    65c6:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65c8:	f2 80       	ldd	r15, Z+2	; 0x02
    65ca:	15 c0       	rjmp	.+42     	; 0x65f6 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    65cc:	ee 24       	eor	r14, r14
    65ce:	e3 94       	inc	r14
    65d0:	e6 0e       	add	r14, r22
    65d2:	f8 01       	movw	r30, r16
    65d4:	ee 0f       	add	r30, r30
    65d6:	ff 1f       	adc	r31, r31
    65d8:	ee 0f       	add	r30, r30
    65da:	ff 1f       	adc	r31, r31
    65dc:	ec 0f       	add	r30, r28
    65de:	fd 1f       	adc	r31, r29
    65e0:	ee 0f       	add	r30, r30
    65e2:	ff 1f       	adc	r31, r31
    65e4:	ee 0f       	add	r30, r30
    65e6:	ff 1f       	adc	r31, r31
    65e8:	e8 5d       	subi	r30, 0xD8	; 216
    65ea:	f7 4f       	sbci	r31, 0xF7	; 247
    65ec:	40 e8       	ldi	r20, 0x80	; 128
    65ee:	80 81       	ld	r24, Z
    65f0:	63 df       	rcall	.-314    	; 0x64b8 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65f2:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    65f4:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65f6:	f1 10       	cpse	r15, r1
    65f8:	e9 cf       	rjmp	.-46     	; 0x65cc <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    65fa:	eb 2d       	mov	r30, r11
    65fc:	f0 e0       	ldi	r31, 0x00	; 0
    65fe:	ee 0f       	add	r30, r30
    6600:	ff 1f       	adc	r31, r31
    6602:	e8 5d       	subi	r30, 0xD8	; 216
    6604:	f6 4f       	sbci	r31, 0xF6	; 246
    6606:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6608:	80 31       	cpi	r24, 0x10	; 16
    660a:	30 f4       	brcc	.+12     	; 0x6618 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    660c:	80 6b       	ori	r24, 0xB0	; 176
    660e:	dc d3       	rcall	.+1976   	; 0x6dc8 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6610:	8b e7       	ldi	r24, 0x7B	; 123
    6612:	da d3       	rcall	.+1972   	; 0x6dc8 <serial1MIDISend>
				serial1MIDISend(0);
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	d8 d3       	rcall	.+1968   	; 0x6dc8 <serial1MIDISend>
    6618:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    661a:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    661c:	8d 15       	cp	r24, r13
    661e:	08 f0       	brcs	.+2      	; 0x6622 <midiAllNotesOff+0xb8>
    6620:	b0 cf       	rjmp	.-160    	; 0x6582 <midiAllNotesOff+0x18>
    6622:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6624:	cf 91       	pop	r28
    6626:	1f 91       	pop	r17
    6628:	0f 91       	pop	r16
    662a:	ff 90       	pop	r15
    662c:	ef 90       	pop	r14
    662e:	df 90       	pop	r13
    6630:	cf 90       	pop	r12
    6632:	bf 90       	pop	r11
    6634:	08 95       	ret

00006636 <midi_ManualOff>:
    6636:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6638:	1f 93       	push	r17
    663a:	cf 93       	push	r28
    663c:	df 93       	push	r29
    663e:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    6640:	84 30       	cpi	r24, 0x04	; 4
    6642:	00 f5       	brcc	.+64     	; 0x6684 <midi_ManualOff+0x4e>
    6644:	08 2f       	mov	r16, r24
    6646:	10 e0       	ldi	r17, 0x00	; 0
    6648:	f8 01       	movw	r30, r16
    664a:	ee 0f       	add	r30, r30
    664c:	ff 1f       	adc	r31, r31
    664e:	e2 5e       	subi	r30, 0xE2	; 226
    6650:	f7 4f       	sbci	r31, 0xF7	; 247
    6652:	d0 81       	ld	r29, Z
    6654:	df 3f       	cpi	r29, 0xFF	; 255
    6656:	b1 f0       	breq	.+44     	; 0x6684 <midi_ManualOff+0x4e>
    6658:	f8 01       	movw	r30, r16
    665a:	ee 0f       	add	r30, r30
    665c:	ff 1f       	adc	r31, r31
    665e:	e2 5e       	subi	r30, 0xE2	; 226
    6660:	f7 4f       	sbci	r31, 0xF7	; 247
    6662:	81 81       	ldd	r24, Z+1	; 0x01
    6664:	8f 3f       	cpi	r24, 0xFF	; 255
    6666:	31 f4       	brne	.+12     	; 0x6674 <midi_ManualOff+0x3e>
    6668:	0d c0       	rjmp	.+26     	; 0x6684 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    666a:	40 e8       	ldi	r20, 0x80	; 128
    666c:	6d 2f       	mov	r22, r29
    666e:	8c 2f       	mov	r24, r28
    6670:	23 df       	rcall	.-442    	; 0x64b8 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6672:	df 5f       	subi	r29, 0xFF	; 255
    6674:	f8 01       	movw	r30, r16
    6676:	ee 0f       	add	r30, r30
    6678:	ff 1f       	adc	r31, r31
    667a:	e2 5e       	subi	r30, 0xE2	; 226
    667c:	f7 4f       	sbci	r31, 0xF7	; 247
    667e:	81 81       	ldd	r24, Z+1	; 0x01
    6680:	8d 17       	cp	r24, r29
    6682:	98 f7       	brcc	.-26     	; 0x666a <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6684:	ec 2f       	mov	r30, r28
    6686:	f0 e0       	ldi	r31, 0x00	; 0
    6688:	ee 0f       	add	r30, r30
    668a:	ff 1f       	adc	r31, r31
    668c:	e8 5d       	subi	r30, 0xD8	; 216
    668e:	f6 4f       	sbci	r31, 0xF6	; 246
    6690:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6692:	80 31       	cpi	r24, 0x10	; 16
    6694:	30 f4       	brcc	.+12     	; 0x66a2 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6696:	80 6b       	ori	r24, 0xB0	; 176
    6698:	97 d3       	rcall	.+1838   	; 0x6dc8 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    669a:	8b e7       	ldi	r24, 0x7B	; 123
    669c:	95 d3       	rcall	.+1834   	; 0x6dc8 <serial1MIDISend>
		serial1MIDISend(0);
    669e:	80 e0       	ldi	r24, 0x00	; 0
    66a0:	93 d3       	rcall	.+1830   	; 0x6dc8 <serial1MIDISend>
    66a2:	df 91       	pop	r29

	}
}
    66a4:	cf 91       	pop	r28
    66a6:	1f 91       	pop	r17
    66a8:	0f 91       	pop	r16
    66aa:	08 95       	ret

000066ac <midi_AllManualsOff>:
    66ac:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    66ae:	c0 e0       	ldi	r28, 0x00	; 0
    66b0:	03 c0       	rjmp	.+6      	; 0x66b8 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    66b2:	8c 2f       	mov	r24, r28
    66b4:	c0 df       	rcall	.-128    	; 0x6636 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    66b6:	cf 5f       	subi	r28, 0xFF	; 255
    66b8:	c4 30       	cpi	r28, 0x04	; 4
    66ba:	d8 f3       	brcs	.-10     	; 0x66b2 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    66bc:	cf 91       	pop	r28
    66be:	08 95       	ret

000066c0 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    66c0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    66c4:	88 23       	and	r24, r24
    66c6:	39 f0       	breq	.+14     	; 0x66d6 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    66c8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    66cc:	81 11       	cpse	r24, r1
    66ce:	03 c0       	rjmp	.+6      	; 0x66d6 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    66d0:	ed df       	rcall	.-38     	; 0x66ac <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    66d2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    66d6:	08 95       	ret

000066d8 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    66d8:	0f 93       	push	r16
    66da:	1f 93       	push	r17
    66dc:	cf 93       	push	r28
    66de:	df 93       	push	r29
    66e0:	06 2f       	mov	r16, r22
    66e2:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    66e4:	d8 2f       	mov	r29, r24
    66e6:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    66e8:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    66ea:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    66ec:	3c c0       	rjmp	.+120    	; 0x6766 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    66ee:	4d 2f       	mov	r20, r29
    66f0:	50 e0       	ldi	r21, 0x00	; 0
    66f2:	2c 2f       	mov	r18, r28
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	fa 01       	movw	r30, r20
    66f8:	ee 0f       	add	r30, r30
    66fa:	ff 1f       	adc	r31, r31
    66fc:	ee 0f       	add	r30, r30
    66fe:	ff 1f       	adc	r31, r31
    6700:	e2 0f       	add	r30, r18
    6702:	f3 1f       	adc	r31, r19
    6704:	ee 0f       	add	r30, r30
    6706:	ff 1f       	adc	r31, r31
    6708:	ee 0f       	add	r30, r30
    670a:	ff 1f       	adc	r31, r31
    670c:	e8 5d       	subi	r30, 0xD8	; 216
    670e:	f7 4f       	sbci	r31, 0xF7	; 247
    6710:	80 81       	ld	r24, Z
    6712:	84 30       	cpi	r24, 0x04	; 4
    6714:	38 f5       	brcc	.+78     	; 0x6764 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6716:	df 01       	movw	r26, r30
    6718:	61 81       	ldd	r22, Z+1	; 0x01
    671a:	70 2f       	mov	r23, r16
    671c:	76 1b       	sub	r23, r22
    671e:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6720:	0a f1       	brmi	.+66     	; 0x6764 <midiNote_to_Manual+0x8c>
    6722:	fd 01       	movw	r30, r26
    6724:	e2 81       	ldd	r30, Z+2	; 0x02
    6726:	f0 e0       	ldi	r31, 0x00	; 0
    6728:	a7 2f       	mov	r26, r23
    672a:	77 0f       	add	r23, r23
    672c:	bb 0b       	sbc	r27, r27
    672e:	ae 17       	cp	r26, r30
    6730:	bf 07       	cpc	r27, r31
    6732:	c4 f4       	brge	.+48     	; 0x6764 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6734:	fa 01       	movw	r30, r20
    6736:	ee 0f       	add	r30, r30
    6738:	ff 1f       	adc	r31, r31
    673a:	ee 0f       	add	r30, r30
    673c:	ff 1f       	adc	r31, r31
    673e:	e2 0f       	add	r30, r18
    6740:	f3 1f       	adc	r31, r19
    6742:	ee 0f       	add	r30, r30
    6744:	ff 1f       	adc	r31, r31
    6746:	ee 0f       	add	r30, r30
    6748:	ff 1f       	adc	r31, r31
    674a:	e8 5d       	subi	r30, 0xD8	; 216
    674c:	f7 4f       	sbci	r31, 0xF7	; 247
    674e:	93 81       	ldd	r25, Z+3	; 0x03
    6750:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6752:	11 30       	cpi	r17, 0x01	; 1
    6754:	21 f4       	brne	.+8      	; 0x675e <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6756:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    675a:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    675e:	41 2f       	mov	r20, r17
    6760:	ab de       	rcall	.-682    	; 0x64b8 <manual_NoteOnOff>
				found |= 0xFF;
    6762:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6764:	cf 5f       	subi	r28, 0xFF	; 255
    6766:	c4 30       	cpi	r28, 0x04	; 4
    6768:	08 f4       	brcc	.+2      	; 0x676c <midiNote_to_Manual+0x94>
    676a:	c1 cf       	rjmp	.-126    	; 0x66ee <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    676c:	11 30       	cpi	r17, 0x01	; 1
    676e:	49 f4       	brne	.+18     	; 0x6782 <midiNote_to_Manual+0xaa>
    6770:	91 11       	cpse	r25, r1
    6772:	07 c0       	rjmp	.+14     	; 0x6782 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6774:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    6778:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    677c:	8f ef       	ldi	r24, 0xFF	; 255
    677e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6782:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    6786:	d8 13       	cpse	r29, r24
    6788:	1f c0       	rjmp	.+62     	; 0x67c8 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    678a:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    678e:	8f 3f       	cpi	r24, 0xFF	; 255
    6790:	d9 f0       	breq	.+54     	; 0x67c8 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6792:	11 30       	cpi	r17, 0x01	; 1
    6794:	31 f0       	breq	.+12     	; 0x67a2 <midiNote_to_Manual+0xca>
    6796:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    679a:	99 23       	and	r25, r25
    679c:	21 f0       	breq	.+8      	; 0x67a6 <midiNote_to_Manual+0xce>
    679e:	90 e9       	ldi	r25, 0x90	; 144
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <midiNote_to_Manual+0xd0>
    67a2:	90 e9       	ldi	r25, 0x90	; 144
    67a4:	01 c0       	rjmp	.+2      	; 0x67a8 <midiNote_to_Manual+0xd0>
    67a6:	90 e8       	ldi	r25, 0x80	; 128
    67a8:	89 2b       	or	r24, r25
    67aa:	0e d3       	rcall	.+1564   	; 0x6dc8 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    67ac:	80 2f       	mov	r24, r16
    67ae:	0c d3       	rcall	.+1560   	; 0x6dc8 <serial1MIDISend>
    67b0:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    67b2:	06 c0       	rjmp	.+12     	; 0x67c0 <midiNote_to_Manual+0xe8>
    67b4:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    67b8:	81 11       	cpse	r24, r1
    67ba:	04 c0       	rjmp	.+8      	; 0x67c4 <midiNote_to_Manual+0xec>
    67bc:	80 e4       	ldi	r24, 0x40	; 64
    67be:	03 c0       	rjmp	.+6      	; 0x67c6 <midiNote_to_Manual+0xee>
    67c0:	80 e4       	ldi	r24, 0x40	; 64
    67c2:	01 c0       	rjmp	.+2      	; 0x67c6 <midiNote_to_Manual+0xee>
    67c4:	80 e0       	ldi	r24, 0x00	; 0
    67c6:	00 d3       	rcall	.+1536   	; 0x6dc8 <serial1MIDISend>
    67c8:	df 91       	pop	r29
		}
	}
}
    67ca:	cf 91       	pop	r28
    67cc:	1f 91       	pop	r17
    67ce:	0f 91       	pop	r16
    67d0:	08 95       	ret

000067d2 <midiIn_Process>:
    67d2:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    67d4:	0c f0       	brlt	.+2      	; 0x67d8 <midiIn_Process+0x6>
    67d6:	4f c0       	rjmp	.+158    	; 0x6876 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    67d8:	88 3f       	cpi	r24, 0xF8	; 248
    67da:	b8 f0       	brcs	.+46     	; 0x680a <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    67dc:	8e 3f       	cpi	r24, 0xFE	; 254
    67de:	81 f4       	brne	.+32     	; 0x6800 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    67e0:	81 e0       	ldi	r24, 0x01	; 1
    67e2:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    67e6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    67e8:	f8 94       	cli
    67ea:	06 c0       	rjmp	.+12     	; 0x67f8 <midiIn_Process+0x26>
    67ec:	ef e2       	ldi	r30, 0x2F	; 47
    67ee:	f2 e0       	ldi	r31, 0x02	; 2
    67f0:	89 e1       	ldi	r24, 0x19	; 25
    67f2:	86 83       	std	Z+6, r24	; 0x06
    67f4:	17 82       	std	Z+7, r1	; 0x07
    67f6:	80 e0       	ldi	r24, 0x00	; 0
    67f8:	81 11       	cpse	r24, r1
    67fa:	f8 cf       	rjmp	.-16     	; 0x67ec <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    67fc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    67fe:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6800:	8f 3f       	cpi	r24, 0xFF	; 255
    6802:	09 f0       	breq	.+2      	; 0x6806 <midiIn_Process+0x34>
    6804:	79 c0       	rjmp	.+242    	; 0x68f8 <midiIn_Process+0x126>
				midiAllReset();
    6806:	f5 c9       	rjmp	.-3094   	; 0x5bf2 <midiAllReset>
    6808:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    680a:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    680e:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6812:	90 e8       	ldi	r25, 0x80	; 128
    6814:	98 0f       	add	r25, r24
    6816:	90 34       	cpi	r25, 0x40	; 64
    6818:	20 f4       	brcc	.+8      	; 0x6822 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    681a:	82 e0       	ldi	r24, 0x02	; 2
    681c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6820:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6822:	90 e2       	ldi	r25, 0x20	; 32
    6824:	98 0f       	add	r25, r24
    6826:	90 31       	cpi	r25, 0x10	; 16
    6828:	20 f4       	brcc	.+8      	; 0x6832 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    682a:	82 e0       	ldi	r24, 0x02	; 2
    682c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6830:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6832:	82 3f       	cpi	r24, 0xF2	; 242
    6834:	21 f4       	brne	.+8      	; 0x683e <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6836:	82 e0       	ldi	r24, 0x02	; 2
    6838:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    683c:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    683e:	80 3f       	cpi	r24, 0xF0	; 240
    6840:	21 f4       	brne	.+8      	; 0x684a <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6842:	8f ef       	ldi	r24, 0xFF	; 255
    6844:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6848:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    684a:	90 e4       	ldi	r25, 0x40	; 64
    684c:	98 0f       	add	r25, r24
    684e:	90 32       	cpi	r25, 0x20	; 32
    6850:	20 f4       	brcc	.+8      	; 0x685a <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6852:	81 e0       	ldi	r24, 0x01	; 1
    6854:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6858:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    685a:	81 3f       	cpi	r24, 0xF1	; 241
    685c:	11 f0       	breq	.+4      	; 0x6862 <midiIn_Process+0x90>
    685e:	83 3f       	cpi	r24, 0xF3	; 243
    6860:	21 f4       	brne	.+8      	; 0x686a <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6862:	81 e0       	ldi	r24, 0x01	; 1
    6864:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6868:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    686a:	87 3f       	cpi	r24, 0xF7	; 247
    686c:	09 f4       	brne	.+2      	; 0x6870 <midiIn_Process+0x9e>
    686e:	44 c0       	rjmp	.+136    	; 0x68f8 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    6870:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    6874:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6876:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <midiDataByteCount>
    687a:	e8 30       	cpi	r30, 0x08	; 8
    687c:	40 f4       	brcc	.+16     	; 0x688e <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    687e:	91 e0       	ldi	r25, 0x01	; 1
    6880:	9e 0f       	add	r25, r30
    6882:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <midiDataByteCount>
    6886:	f0 e0       	ldi	r31, 0x00	; 0
    6888:	ec 51       	subi	r30, 0x1C	; 28
    688a:	f4 4f       	sbci	r31, 0xF4	; 244
    688c:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    688e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    6892:	8f 3f       	cpi	r24, 0xFF	; 255
    6894:	89 f1       	breq	.+98     	; 0x68f8 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6896:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <midiDataByteCount>
    689a:	98 17       	cp	r25, r24
    689c:	68 f1       	brcs	.+90     	; 0x68f8 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    689e:	90 91 ec 0b 	lds	r25, 0x0BEC	; 0x800bec <midiLastCommand>
    68a2:	90 3f       	cpi	r25, 0xF0	; 240
    68a4:	38 f5       	brcc	.+78     	; 0x68f4 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    68a6:	89 2f       	mov	r24, r25
    68a8:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    68aa:	90 7f       	andi	r25, 0xF0	; 240
    68ac:	90 39       	cpi	r25, 0x90	; 144
    68ae:	71 f0       	breq	.+28     	; 0x68cc <midiIn_Process+0xfa>
    68b0:	18 f4       	brcc	.+6      	; 0x68b8 <midiIn_Process+0xe6>
    68b2:	90 38       	cpi	r25, 0x80	; 128
    68b4:	31 f0       	breq	.+12     	; 0x68c2 <midiIn_Process+0xf0>
    68b6:	1e c0       	rjmp	.+60     	; 0x68f4 <midiIn_Process+0x122>
    68b8:	90 3b       	cpi	r25, 0xB0	; 176
    68ba:	99 f0       	breq	.+38     	; 0x68e2 <midiIn_Process+0x110>
    68bc:	90 3c       	cpi	r25, 0xC0	; 192
    68be:	b9 f0       	breq	.+46     	; 0x68ee <midiIn_Process+0x11c>
    68c0:	19 c0       	rjmp	.+50     	; 0x68f4 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    68c2:	40 e0       	ldi	r20, 0x00	; 0
    68c4:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68c8:	07 df       	rcall	.-498    	; 0x66d8 <midiNote_to_Manual>
						break;
    68ca:	14 c0       	rjmp	.+40     	; 0x68f4 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    68cc:	90 91 e5 0b 	lds	r25, 0x0BE5	; 0x800be5 <midiDataByte+0x1>
    68d0:	91 11       	cpse	r25, r1
    68d2:	02 c0       	rjmp	.+4      	; 0x68d8 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    68d4:	40 e0       	ldi	r20, 0x00	; 0
    68d6:	01 c0       	rjmp	.+2      	; 0x68da <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    68d8:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    68da:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68de:	fc de       	rcall	.-520    	; 0x66d8 <midiNote_to_Manual>
						break;
    68e0:	09 c0       	rjmp	.+18     	; 0x68f4 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    68e2:	90 91 e4 0b 	lds	r25, 0x0BE4	; 0x800be4 <midiDataByte>
    68e6:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    68e8:	29 f4       	brne	.+10     	; 0x68f4 <midiIn_Process+0x122>
    68ea:	3f de       	rcall	.-898    	; 0x656a <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    68ec:	03 c0       	rjmp	.+6      	; 0x68f4 <midiIn_Process+0x122>
    68ee:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68f2:	04 dc       	rcall	.-2040   	; 0x60fc <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    68f4:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
    68f8:	08 95       	ret

000068fa <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    68fa:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <serESPMidiTmp+0x2>
    68fe:	89 2f       	mov	r24, r25
    6900:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6902:	90 7f       	andi	r25, 0xF0	; 240
    6904:	90 38       	cpi	r25, 0x80	; 128
    6906:	49 f0       	breq	.+18     	; 0x691a <proc_ESPmidi+0x20>
    6908:	18 f4       	brcc	.+6      	; 0x6910 <proc_ESPmidi+0x16>
    690a:	99 23       	and	r25, r25
    690c:	e1 f0       	breq	.+56     	; 0x6946 <proc_ESPmidi+0x4c>
    690e:	08 95       	ret
    6910:	90 39       	cpi	r25, 0x90	; 144
    6912:	41 f0       	breq	.+16     	; 0x6924 <proc_ESPmidi+0x2a>
    6914:	90 3b       	cpi	r25, 0xB0	; 176
    6916:	89 f0       	breq	.+34     	; 0x693a <proc_ESPmidi+0x40>
    6918:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    691a:	40 e0       	ldi	r20, 0x00	; 0
    691c:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6920:	db ce       	rjmp	.-586    	; 0x66d8 <midiNote_to_Manual>
		break;
    6922:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6924:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <serESPMidiTmp>
    6928:	91 11       	cpse	r25, r1
    692a:	02 c0       	rjmp	.+4      	; 0x6930 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    692c:	40 e0       	ldi	r20, 0x00	; 0
    692e:	01 c0       	rjmp	.+2      	; 0x6932 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6930:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6932:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6936:	d0 ce       	rjmp	.-608    	; 0x66d8 <midiNote_to_Manual>
		break;
    6938:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    693a:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    693e:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6940:	61 f4       	brne	.+24     	; 0x695a <proc_ESPmidi+0x60>
    6942:	13 ce       	rjmp	.-986    	; 0x656a <midiAllNotesOff>
    6944:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6946:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    694a:	89 2f       	mov	r24, r25
    694c:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    694e:	90 7f       	andi	r25, 0xF0	; 240
    6950:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6952:	19 f4       	brne	.+6      	; 0x695a <proc_ESPmidi+0x60>
    6954:	60 91 4b 16 	lds	r22, 0x164B	; 0x80164b <serESPMidiTmp>
    6958:	d1 cb       	rjmp	.-2142   	; 0x60fc <midi_ProgramChange>
    695a:	08 95       	ret

0000695c <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    695c:	bf 92       	push	r11
    695e:	cf 92       	push	r12
    6960:	df 92       	push	r13
    6962:	ef 92       	push	r14
    6964:	ff 92       	push	r15
    6966:	0f 93       	push	r16
    6968:	1f 93       	push	r17
    696a:	cf 93       	push	r28
    696c:	df 93       	push	r29
    696e:	d8 2f       	mov	r29, r24
    6970:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6972:	8d d2       	rcall	.+1306   	; 0x6e8e <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6974:	0c 2f       	mov	r16, r28
    6976:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6978:	cf 71       	andi	r28, 0x1F	; 31
    697a:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    697c:	00 32       	cpi	r16, 0x20	; 32
    697e:	09 f4       	brne	.+2      	; 0x6982 <midiKeyPress_Process+0x26>
    6980:	b5 c0       	rjmp	.+362    	; 0x6aec <midiKeyPress_Process+0x190>
    6982:	00 23       	and	r16, r16
    6984:	09 f4       	brne	.+2      	; 0x6988 <midiKeyPress_Process+0x2c>
    6986:	b4 c0       	rjmp	.+360    	; 0x6af0 <midiKeyPress_Process+0x194>
    6988:	b7 c0       	rjmp	.+366    	; 0x6af8 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    698a:	d0 ff       	sbrs	r29, 0
    698c:	ac c0       	rjmp	.+344    	; 0x6ae6 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    698e:	20 e2       	ldi	r18, 0x20	; 32
    6990:	c2 9f       	mul	r28, r18
    6992:	c0 01       	movw	r24, r0
    6994:	11 24       	eor	r1, r1
    6996:	fb 2c       	mov	r15, r11
    6998:	f8 2a       	or	r15, r24
    699a:	8f 2d       	mov	r24, r15
    699c:	6a dd       	rcall	.-1324   	; 0x6472 <moduleBit_to_manualNote>
    699e:	c8 2e       	mov	r12, r24
    69a0:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    69a2:	18 2f       	mov	r17, r24
    69a4:	8f 3f       	cpi	r24, 0xFF	; 255
    69a6:	09 f4       	brne	.+2      	; 0x69aa <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    69a8:	94 c0       	rjmp	.+296    	; 0x6ad2 <midiKeyPress_Process+0x176>
    69aa:	69 2f       	mov	r22, r25
    69ac:	7a dc       	rcall	.-1804   	; 0x62a2 <Manual_to_MidiNote>
    69ae:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    69b0:	8f 3f       	cpi	r24, 0xFF	; 255
    69b2:	09 f1       	breq	.+66     	; 0x69f6 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    69b4:	00 32       	cpi	r16, 0x20	; 32
    69b6:	31 f0       	breq	.+12     	; 0x69c4 <midiKeyPress_Process+0x68>
    69b8:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    69bc:	99 23       	and	r25, r25
    69be:	21 f0       	breq	.+8      	; 0x69c8 <midiKeyPress_Process+0x6c>
    69c0:	90 e9       	ldi	r25, 0x90	; 144
    69c2:	03 c0       	rjmp	.+6      	; 0x69ca <midiKeyPress_Process+0x6e>
    69c4:	90 e9       	ldi	r25, 0x90	; 144
    69c6:	01 c0       	rjmp	.+2      	; 0x69ca <midiKeyPress_Process+0x6e>
    69c8:	90 e8       	ldi	r25, 0x80	; 128
    69ca:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    69cc:	fd d1       	rcall	.+1018   	; 0x6dc8 <serial1MIDISend>
    69ce:	8d 2d       	mov	r24, r13
    69d0:	fb d1       	rcall	.+1014   	; 0x6dc8 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    69d2:	01 11       	cpse	r16, r1
    69d4:	06 c0       	rjmp	.+12     	; 0x69e2 <midiKeyPress_Process+0x86>
    69d6:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    69da:	81 11       	cpse	r24, r1
    69dc:	04 c0       	rjmp	.+8      	; 0x69e6 <midiKeyPress_Process+0x8a>
    69de:	80 e4       	ldi	r24, 0x40	; 64
    69e0:	03 c0       	rjmp	.+6      	; 0x69e8 <midiKeyPress_Process+0x8c>
    69e2:	80 e4       	ldi	r24, 0x40	; 64
    69e4:	01 c0       	rjmp	.+2      	; 0x69e8 <midiKeyPress_Process+0x8c>
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	ef d1       	rcall	.+990    	; 0x6dc8 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    69ea:	00 32       	cpi	r16, 0x20	; 32
    69ec:	21 f4       	brne	.+8      	; 0x69f6 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    69ee:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    69f2:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    69f6:	41 e0       	ldi	r20, 0x01	; 1
    69f8:	00 32       	cpi	r16, 0x20	; 32
    69fa:	09 f0       	breq	.+2      	; 0x69fe <midiKeyPress_Process+0xa2>
    69fc:	40 e0       	ldi	r20, 0x00	; 0
    69fe:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    6a00:	11 11       	cpse	r17, r1
    6a02:	19 c0       	rjmp	.+50     	; 0x6a36 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6a04:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers>
    6a08:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a0a:	19 f4       	brne	.+6      	; 0x6a12 <midiKeyPress_Process+0xb6>
    6a0c:	6e 2d       	mov	r22, r14
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	53 dd       	rcall	.-1370   	; 0x64b8 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6a12:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x1>
    6a16:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6a18:	21 f4       	brne	.+8      	; 0x6a22 <midiKeyPress_Process+0xc6>
    6a1a:	4d 2d       	mov	r20, r13
    6a1c:	6e 2d       	mov	r22, r14
    6a1e:	82 e0       	ldi	r24, 0x02	; 2
    6a20:	4b dd       	rcall	.-1386   	; 0x64b8 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6a22:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x3>
    6a26:	8f 3f       	cpi	r24, 0xFF	; 255
    6a28:	09 f0       	breq	.+2      	; 0x6a2c <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a2a:	53 c0       	rjmp	.+166    	; 0x6ad2 <midiKeyPress_Process+0x176>
    6a2c:	4d 2d       	mov	r20, r13
    6a2e:	6e 2d       	mov	r22, r14
    6a30:	83 e0       	ldi	r24, 0x03	; 3
    6a32:	42 dd       	rcall	.-1404   	; 0x64b8 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6a34:	4e c0       	rjmp	.+156    	; 0x6ad2 <midiKeyPress_Process+0x176>
    6a36:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6a38:	c9 f4       	brne	.+50     	; 0x6a6c <midiKeyPress_Process+0x110>
    6a3a:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x2>
    6a3e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6a40:	19 f4       	brne	.+6      	; 0x6a48 <midiKeyPress_Process+0xec>
    6a42:	6e 2d       	mov	r22, r14
    6a44:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6a46:	38 dd       	rcall	.-1424   	; 0x64b8 <manual_NoteOnOff>
    6a48:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x4>
    6a4c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a4e:	21 f4       	brne	.+8      	; 0x6a58 <midiKeyPress_Process+0xfc>
    6a50:	4d 2d       	mov	r20, r13
    6a52:	6e 2d       	mov	r22, r14
    6a54:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6a56:	30 dd       	rcall	.-1440   	; 0x64b8 <manual_NoteOnOff>
    6a58:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x6>
    6a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    6a5e:	09 f0       	breq	.+2      	; 0x6a62 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a60:	38 c0       	rjmp	.+112    	; 0x6ad2 <midiKeyPress_Process+0x176>
    6a62:	4d 2d       	mov	r20, r13
    6a64:	6e 2d       	mov	r22, r14
    6a66:	80 e0       	ldi	r24, 0x00	; 0
    6a68:	27 dd       	rcall	.-1458   	; 0x64b8 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6a6a:	33 c0       	rjmp	.+102    	; 0x6ad2 <midiKeyPress_Process+0x176>
    6a6c:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6a6e:	c1 f4       	brne	.+48     	; 0x6aa0 <midiKeyPress_Process+0x144>
    6a70:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a74:	8f 3f       	cpi	r24, 0xFF	; 255
    6a76:	19 f4       	brne	.+6      	; 0x6a7e <midiKeyPress_Process+0x122>
    6a78:	6e 2d       	mov	r22, r14
    6a7a:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6a7c:	1d dd       	rcall	.-1478   	; 0x64b8 <manual_NoteOnOff>
    6a7e:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a82:	8f 3f       	cpi	r24, 0xFF	; 255
    6a84:	21 f4       	brne	.+8      	; 0x6a8e <midiKeyPress_Process+0x132>
    6a86:	4d 2d       	mov	r20, r13
    6a88:	6e 2d       	mov	r22, r14
    6a8a:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6a8c:	15 dd       	rcall	.-1494   	; 0x64b8 <manual_NoteOnOff>
    6a8e:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a92:	8f 3f       	cpi	r24, 0xFF	; 255
    6a94:	f1 f4       	brne	.+60     	; 0x6ad2 <midiKeyPress_Process+0x176>
    6a96:	4d 2d       	mov	r20, r13
    6a98:	6e 2d       	mov	r22, r14
    6a9a:	81 e0       	ldi	r24, 0x01	; 1
    6a9c:	0d dd       	rcall	.-1510   	; 0x64b8 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6a9e:	19 c0       	rjmp	.+50     	; 0x6ad2 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6aa0:	13 30       	cpi	r17, 0x03	; 3
    6aa2:	b9 f4       	brne	.+46     	; 0x6ad2 <midiKeyPress_Process+0x176>
    6aa4:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    6aaa:	19 f4       	brne	.+6      	; 0x6ab2 <midiKeyPress_Process+0x156>
    6aac:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6aae:	80 e0       	ldi	r24, 0x00	; 0
    6ab0:	03 dd       	rcall	.-1530   	; 0x64b8 <manual_NoteOnOff>
    6ab2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    6ab8:	21 f4       	brne	.+8      	; 0x6ac2 <midiKeyPress_Process+0x166>
    6aba:	4d 2d       	mov	r20, r13
    6abc:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6abe:	81 e0       	ldi	r24, 0x01	; 1
    6ac0:	fb dc       	rcall	.-1546   	; 0x64b8 <manual_NoteOnOff>
    6ac2:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    6ac8:	21 f4       	brne	.+8      	; 0x6ad2 <midiKeyPress_Process+0x176>
    6aca:	4d 2d       	mov	r20, r13
    6acc:	6e 2d       	mov	r22, r14
    6ace:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6ad0:	f3 dc       	rcall	.-1562   	; 0x64b8 <manual_NoteOnOff>
    6ad2:	8f 2d       	mov	r24, r15
    6ad4:	25 d9       	rcall	.-3510   	; 0x5d20 <moduleBit_to_registerNr>
    6ad6:	00 32       	cpi	r16, 0x20	; 32
    6ad8:	11 f4       	brne	.+4      	; 0x6ade <midiKeyPress_Process+0x182>
    6ada:	20 e8       	ldi	r18, 0x80	; 128
    6adc:	01 c0       	rjmp	.+2      	; 0x6ae0 <midiKeyPress_Process+0x184>
    6ade:	20 e0       	ldi	r18, 0x00	; 0
    6ae0:	82 2b       	or	r24, r18
    6ae2:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6ae6:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6ae8:	cf 5f       	subi	r28, 0xFF	; 255
    6aea:	03 c0       	rjmp	.+6      	; 0x6af2 <midiKeyPress_Process+0x196>
    6aec:	c0 e0       	ldi	r28, 0x00	; 0
    6aee:	01 c0       	rjmp	.+2      	; 0x6af2 <midiKeyPress_Process+0x196>
    6af0:	c0 e0       	ldi	r28, 0x00	; 0
    6af2:	c8 30       	cpi	r28, 0x08	; 8
    6af4:	08 f4       	brcc	.+2      	; 0x6af8 <midiKeyPress_Process+0x19c>
    6af6:	49 cf       	rjmp	.-366    	; 0x698a <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6af8:	df 91       	pop	r29
    6afa:	cf 91       	pop	r28
    6afc:	1f 91       	pop	r17
    6afe:	0f 91       	pop	r16
    6b00:	ff 90       	pop	r15
    6b02:	ef 90       	pop	r14
    6b04:	df 90       	pop	r13
    6b06:	cf 90       	pop	r12
    6b08:	bf 90       	pop	r11
    6b0a:	08 95       	ret

00006b0c <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    6b0c:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6b0e:	c0 e0       	ldi	r28, 0x00	; 0
    6b10:	10 c0       	rjmp	.+32     	; 0x6b32 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    6b12:	ec 2f       	mov	r30, r28
    6b14:	f0 e0       	ldi	r31, 0x00	; 0
    6b16:	ee 0f       	add	r30, r30
    6b18:	ff 1f       	adc	r31, r31
    6b1a:	e8 5d       	subi	r30, 0xD8	; 216
    6b1c:	f6 4f       	sbci	r31, 0xF6	; 246
    6b1e:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    6b20:	80 31       	cpi	r24, 0x10	; 16
    6b22:	30 f4       	brcc	.+12     	; 0x6b30 <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6b24:	80 6b       	ori	r24, 0xB0	; 176
    6b26:	50 d1       	rcall	.+672    	; 0x6dc8 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6b28:	8b e7       	ldi	r24, 0x7B	; 123
    6b2a:	4e d1       	rcall	.+668    	; 0x6dc8 <serial1MIDISend>
			serial1MIDISend(0);
    6b2c:	80 e0       	ldi	r24, 0x00	; 0
    6b2e:	4c d1       	rcall	.+664    	; 0x6dc8 <serial1MIDISend>
    6b30:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6b32:	c4 30       	cpi	r28, 0x04	; 4
    6b34:	70 f3       	brcs	.-36     	; 0x6b12 <midiSendAllNotesOff+0x6>
    6b36:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6b38:	08 95       	ret

00006b3a <midi_SendActiveSense>:
    6b3a:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6b3c:	45 c1       	rjmp	.+650    	; 0x6dc8 <serial1MIDISend>
    6b3e:	08 95       	ret

00006b40 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6b40:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6b44:	88 23       	and	r24, r24
    6b46:	21 f0       	breq	.+8      	; 0x6b50 <midi_CheckTxActiveSense+0x10>
    6b48:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    6b4e:	99 f4       	brne	.+38     	; 0x6b76 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6b50:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b52:	f8 94       	cli
    6b54:	81 e0       	ldi	r24, 0x01	; 1
    6b56:	06 c0       	rjmp	.+12     	; 0x6b64 <midi_CheckTxActiveSense+0x24>
    6b58:	ef e2       	ldi	r30, 0x2F	; 47
    6b5a:	f2 e0       	ldi	r31, 0x02	; 2
    6b5c:	8a e0       	ldi	r24, 0x0A	; 10
    6b5e:	80 8b       	std	Z+16, r24	; 0x10
    6b60:	11 8a       	std	Z+17, r1	; 0x11
    6b62:	80 e0       	ldi	r24, 0x00	; 0
    6b64:	81 11       	cpse	r24, r1
    6b66:	f8 cf       	rjmp	.-16     	; 0x6b58 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b68:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6b6a:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting>
    6b6e:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    6b70:	e4 df       	rcall	.-56     	; 0x6b3a <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6b72:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6b76:	08 95       	ret

00006b78 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6b78:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6b7c:	8f e1       	ldi	r24, 0x1F	; 31
    6b7e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6b82:	e9 ec       	ldi	r30, 0xC9	; 201
    6b84:	f0 e0       	ldi	r31, 0x00	; 0
    6b86:	80 81       	ld	r24, Z
    6b88:	88 69       	ori	r24, 0x98	; 152
    6b8a:	80 83       	st	Z, r24
    6b8c:	ea ec       	ldi	r30, 0xCA	; 202
    6b8e:	f0 e0       	ldi	r31, 0x00	; 0
    6b90:	80 81       	ld	r24, Z
    6b92:	86 60       	ori	r24, 0x06	; 6
    6b94:	80 83       	st	Z, r24
    6b96:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <midiRxInIndex>
    6b9a:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <midiRxOutIndex>
    6b9e:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <midiTxInIndex>
    6ba2:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <midiTxOutIndex>
    6ba6:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiRxOvfl>
    6baa:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <midiTxOvfl>
    6bae:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
    6bb2:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
    6bb6:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
    6bba:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
    6bbe:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6bc2:	08 95       	ret

00006bc4 <__vector_36>:
    6bc4:	1f 92       	push	r1
    6bc6:	0f 92       	push	r0
    6bc8:	0f b6       	in	r0, 0x3f	; 63
    6bca:	0f 92       	push	r0
    6bcc:	11 24       	eor	r1, r1
    6bce:	0b b6       	in	r0, 0x3b	; 59
    6bd0:	0f 92       	push	r0
    6bd2:	8f 93       	push	r24
    6bd4:	9f 93       	push	r25
    6bd6:	ef 93       	push	r30
    6bd8:	ff 93       	push	r31
    6bda:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6bde:	e0 91 44 16 	lds	r30, 0x1644	; 0x801644 <midiRxInIndex>
    6be2:	f0 e0       	ldi	r31, 0x00	; 0
    6be4:	ef 5b       	subi	r30, 0xBF	; 191
    6be6:	fb 4e       	sbci	r31, 0xEB	; 235
    6be8:	80 83       	st	Z, r24
    6bea:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6bee:	8f 5f       	subi	r24, 0xFF	; 255
    6bf0:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6bf4:	89 13       	cpse	r24, r25
    6bf6:	0e c0       	rjmp	.+28     	; 0x6c14 <__vector_36+0x50>
    6bf8:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOvflCount>
    6bfc:	88 23       	and	r24, r24
    6bfe:	31 f0       	breq	.+12     	; 0x6c0c <__vector_36+0x48>
    6c00:	8f 3f       	cpi	r24, 0xFF	; 255
    6c02:	51 f0       	breq	.+20     	; 0x6c18 <__vector_36+0x54>
    6c04:	8f 5f       	subi	r24, 0xFF	; 255
    6c06:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6c0a:	06 c0       	rjmp	.+12     	; 0x6c18 <__vector_36+0x54>
    6c0c:	81 e0       	ldi	r24, 0x01	; 1
    6c0e:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6c12:	02 c0       	rjmp	.+4      	; 0x6c18 <__vector_36+0x54>
    6c14:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <midiRxInIndex>
    6c18:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6c1c:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6c20:	89 17       	cp	r24, r25
    6c22:	30 f4       	brcc	.+12     	; 0x6c30 <__vector_36+0x6c>
    6c24:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6c28:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6c2c:	89 1b       	sub	r24, r25
    6c2e:	05 c0       	rjmp	.+10     	; 0x6c3a <__vector_36+0x76>
    6c30:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6c34:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6c38:	89 1b       	sub	r24, r25
    6c3a:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <midiRxBuffUsage>
    6c3e:	98 17       	cp	r25, r24
    6c40:	10 f4       	brcc	.+4      	; 0x6c46 <__vector_36+0x82>
    6c42:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <midiRxBuffUsage>
    6c46:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    6c4a:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    6c4e:	01 96       	adiw	r24, 0x01	; 1
    6c50:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <midiRxBytesCount+0x1>
    6c54:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <midiRxBytesCount>
    6c58:	ff 91       	pop	r31
    6c5a:	ef 91       	pop	r30
    6c5c:	9f 91       	pop	r25
    6c5e:	8f 91       	pop	r24
    6c60:	0f 90       	pop	r0
    6c62:	0b be       	out	0x3b, r0	; 59
    6c64:	0f 90       	pop	r0
    6c66:	0f be       	out	0x3f, r0	; 63
    6c68:	0f 90       	pop	r0
    6c6a:	1f 90       	pop	r1
    6c6c:	18 95       	reti

00006c6e <__vector_37>:
    6c6e:	1f 92       	push	r1
    6c70:	0f 92       	push	r0
    6c72:	0f b6       	in	r0, 0x3f	; 63
    6c74:	0f 92       	push	r0
    6c76:	11 24       	eor	r1, r1
    6c78:	0b b6       	in	r0, 0x3b	; 59
    6c7a:	0f 92       	push	r0
    6c7c:	8f 93       	push	r24
    6c7e:	9f 93       	push	r25
    6c80:	ef 93       	push	r30
    6c82:	ff 93       	push	r31
    6c84:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c88:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c8c:	98 17       	cp	r25, r24
    6c8e:	b9 f0       	breq	.+46     	; 0x6cbe <__vector_37+0x50>
    6c90:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c94:	f0 e0       	ldi	r31, 0x00	; 0
    6c96:	ee 5b       	subi	r30, 0xBE	; 190
    6c98:	fa 4e       	sbci	r31, 0xEA	; 234
    6c9a:	80 81       	ld	r24, Z
    6c9c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6ca0:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6ca4:	8f 5f       	subi	r24, 0xFF	; 255
    6ca6:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <midiTxOutIndex>
    6caa:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    6cae:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    6cb2:	01 96       	adiw	r24, 0x01	; 1
    6cb4:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <midiTxBytesCount+0x1>
    6cb8:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <midiTxBytesCount>
    6cbc:	05 c0       	rjmp	.+10     	; 0x6cc8 <__vector_37+0x5a>
    6cbe:	e9 ec       	ldi	r30, 0xC9	; 201
    6cc0:	f0 e0       	ldi	r31, 0x00	; 0
    6cc2:	80 81       	ld	r24, Z
    6cc4:	8f 7d       	andi	r24, 0xDF	; 223
    6cc6:	80 83       	st	Z, r24
    6cc8:	ff 91       	pop	r31
    6cca:	ef 91       	pop	r30
    6ccc:	9f 91       	pop	r25
    6cce:	8f 91       	pop	r24
    6cd0:	0f 90       	pop	r0
    6cd2:	0b be       	out	0x3b, r0	; 59
    6cd4:	0f 90       	pop	r0
    6cd6:	0f be       	out	0x3f, r0	; 63
    6cd8:	0f 90       	pop	r0
    6cda:	1f 90       	pop	r1
    6cdc:	18 95       	reti

00006cde <serial0SER_USBSend>:
    6cde:	e0 91 d7 18 	lds	r30, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6ce2:	f0 91 d8 18 	lds	r31, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6ce6:	a1 ec       	ldi	r26, 0xC1	; 193
    6ce8:	b0 e0       	ldi	r27, 0x00	; 0
    6cea:	9c 91       	ld	r25, X
    6cec:	9f 7d       	andi	r25, 0xDF	; 223
    6cee:	9c 93       	st	X, r25
    6cf0:	af 01       	movw	r20, r30
    6cf2:	4f 5f       	subi	r20, 0xFF	; 255
    6cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    6cf6:	80 83       	st	Z, r24
    6cf8:	83 e1       	ldi	r24, 0x13	; 19
    6cfa:	4c 3e       	cpi	r20, 0xEC	; 236
    6cfc:	58 07       	cpc	r21, r24
    6cfe:	19 f0       	breq	.+6      	; 0x6d06 <serial0SER_USBSend+0x28>
    6d00:	10 f0       	brcs	.+4      	; 0x6d06 <serial0SER_USBSend+0x28>
    6d02:	4d ee       	ldi	r20, 0xED	; 237
    6d04:	5b e0       	ldi	r21, 0x0B	; 11
    6d06:	9f b7       	in	r25, 0x3f	; 63
    6d08:	f8 94       	cli
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	05 c0       	rjmp	.+10     	; 0x6d18 <serial0SER_USBSend+0x3a>
    6d0e:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6d12:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6d16:	80 e0       	ldi	r24, 0x00	; 0
    6d18:	81 11       	cpse	r24, r1
    6d1a:	f9 cf       	rjmp	.-14     	; 0x6d0e <serial0SER_USBSend+0x30>
    6d1c:	9f bf       	out	0x3f, r25	; 63
    6d1e:	42 17       	cp	r20, r18
    6d20:	53 07       	cpc	r21, r19
    6d22:	49 f4       	brne	.+18     	; 0x6d36 <serial0SER_USBSend+0x58>
    6d24:	8f ef       	ldi	r24, 0xFF	; 255
    6d26:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6d2a:	e1 ec       	ldi	r30, 0xC1	; 193
    6d2c:	f0 e0       	ldi	r31, 0x00	; 0
    6d2e:	80 81       	ld	r24, Z
    6d30:	80 62       	ori	r24, 0x20	; 32
    6d32:	80 83       	st	Z, r24
    6d34:	08 95       	ret
    6d36:	50 93 d8 18 	sts	0x18D8, r21	; 0x8018d8 <serUSBTxInIndex+0x1>
    6d3a:	40 93 d7 18 	sts	0x18D7, r20	; 0x8018d7 <serUSBTxInIndex>
    6d3e:	e1 ec       	ldi	r30, 0xC1	; 193
    6d40:	f0 e0       	ldi	r31, 0x00	; 0
    6d42:	80 81       	ld	r24, Z
    6d44:	80 62       	ori	r24, 0x20	; 32
    6d46:	80 83       	st	Z, r24
    6d48:	08 95       	ret

00006d4a <serial0USB_logMIDIin>:
    6d4a:	cf 93       	push	r28
    6d4c:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6d50:	99 23       	and	r25, r25
    6d52:	61 f0       	breq	.+24     	; 0x6d6c <serial0USB_logMIDIin+0x22>
    6d54:	c8 2f       	mov	r28, r24
    6d56:	89 e6       	ldi	r24, 0x69	; 105
    6d58:	c2 df       	rcall	.-124    	; 0x6cde <serial0SER_USBSend>
    6d5a:	8c 2f       	mov	r24, r28
    6d5c:	82 95       	swap	r24
    6d5e:	8f 70       	andi	r24, 0x0F	; 15
    6d60:	b5 d2       	rcall	.+1386   	; 0x72cc <nibbleToChr>
    6d62:	bd df       	rcall	.-134    	; 0x6cde <serial0SER_USBSend>
    6d64:	8c 2f       	mov	r24, r28
    6d66:	8f 70       	andi	r24, 0x0F	; 15
    6d68:	b1 d2       	rcall	.+1378   	; 0x72cc <nibbleToChr>
    6d6a:	b9 df       	rcall	.-142    	; 0x6cde <serial0SER_USBSend>
    6d6c:	cf 91       	pop	r28
    6d6e:	08 95       	ret

00006d70 <serial1MIDIReadRx>:
    6d70:	cf 93       	push	r28
    6d72:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6d76:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d7a:	98 17       	cp	r25, r24
    6d7c:	71 f0       	breq	.+28     	; 0x6d9a <serial1MIDIReadRx+0x2a>
    6d7e:	e0 91 53 16 	lds	r30, 0x1653	; 0x801653 <midiRxOutIndex>
    6d82:	f0 e0       	ldi	r31, 0x00	; 0
    6d84:	ef 5b       	subi	r30, 0xBF	; 191
    6d86:	fb 4e       	sbci	r31, 0xEB	; 235
    6d88:	c0 81       	ld	r28, Z
    6d8a:	8c 2f       	mov	r24, r28
    6d8c:	de df       	rcall	.-68     	; 0x6d4a <serial0USB_logMIDIin>
    6d8e:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d92:	8f 5f       	subi	r24, 0xFF	; 255
    6d94:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <midiRxOutIndex>
    6d98:	01 c0       	rjmp	.+2      	; 0x6d9c <serial1MIDIReadRx+0x2c>
    6d9a:	cd ef       	ldi	r28, 0xFD	; 253
    6d9c:	8c 2f       	mov	r24, r28
    6d9e:	cf 91       	pop	r28
    6da0:	08 95       	ret

00006da2 <serial0USB_logMIDIout>:
    6da2:	cf 93       	push	r28
    6da4:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6da8:	99 23       	and	r25, r25
    6daa:	61 f0       	breq	.+24     	; 0x6dc4 <serial0USB_logMIDIout+0x22>
    6dac:	c8 2f       	mov	r28, r24
    6dae:	8f e6       	ldi	r24, 0x6F	; 111
    6db0:	96 df       	rcall	.-212    	; 0x6cde <serial0SER_USBSend>
    6db2:	8c 2f       	mov	r24, r28
    6db4:	82 95       	swap	r24
    6db6:	8f 70       	andi	r24, 0x0F	; 15
    6db8:	89 d2       	rcall	.+1298   	; 0x72cc <nibbleToChr>
    6dba:	91 df       	rcall	.-222    	; 0x6cde <serial0SER_USBSend>
    6dbc:	8c 2f       	mov	r24, r28
    6dbe:	8f 70       	andi	r24, 0x0F	; 15
    6dc0:	85 d2       	rcall	.+1290   	; 0x72cc <nibbleToChr>
    6dc2:	8d df       	rcall	.-230    	; 0x6cde <serial0SER_USBSend>
    6dc4:	cf 91       	pop	r28
    6dc6:	08 95       	ret

00006dc8 <serial1MIDISend>:
    6dc8:	cf 93       	push	r28
    6dca:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6dce:	99 23       	and	r25, r25
    6dd0:	71 f0       	breq	.+28     	; 0x6dee <serial1MIDISend+0x26>
    6dd2:	88 23       	and	r24, r24
    6dd4:	64 f4       	brge	.+24     	; 0x6dee <serial1MIDISend+0x26>
    6dd6:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <midiTxLastCmd>
    6dda:	89 17       	cp	r24, r25
    6ddc:	09 f4       	brne	.+2      	; 0x6de0 <serial1MIDISend+0x18>
    6dde:	55 c0       	rjmp	.+170    	; 0x6e8a <serial1MIDISend+0xc2>
    6de0:	80 3a       	cpi	r24, 0xA0	; 160
    6de2:	18 f4       	brcc	.+6      	; 0x6dea <serial1MIDISend+0x22>
    6de4:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <midiTxLastCmd>
    6de8:	02 c0       	rjmp	.+4      	; 0x6dee <serial1MIDISend+0x26>
    6dea:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6dee:	2f b7       	in	r18, 0x3f	; 63
    6df0:	f8 94       	cli
    6df2:	91 e0       	ldi	r25, 0x01	; 1
    6df4:	06 c0       	rjmp	.+12     	; 0x6e02 <serial1MIDISend+0x3a>
    6df6:	ef e2       	ldi	r30, 0x2F	; 47
    6df8:	f2 e0       	ldi	r31, 0x02	; 2
    6dfa:	9a e0       	ldi	r25, 0x0A	; 10
    6dfc:	90 8b       	std	Z+16, r25	; 0x10
    6dfe:	11 8a       	std	Z+17, r1	; 0x11
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	91 11       	cpse	r25, r1
    6e04:	f8 cf       	rjmp	.-16     	; 0x6df6 <serial1MIDISend+0x2e>
    6e06:	c8 2f       	mov	r28, r24
    6e08:	2f bf       	out	0x3f, r18	; 63
    6e0a:	e9 ec       	ldi	r30, 0xC9	; 201
    6e0c:	f0 e0       	ldi	r31, 0x00	; 0
    6e0e:	80 81       	ld	r24, Z
    6e10:	8f 7d       	andi	r24, 0xDF	; 223
    6e12:	80 83       	st	Z, r24
    6e14:	8c 2f       	mov	r24, r28
    6e16:	c5 df       	rcall	.-118    	; 0x6da2 <serial0USB_logMIDIout>
    6e18:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e1c:	f0 e0       	ldi	r31, 0x00	; 0
    6e1e:	ee 5b       	subi	r30, 0xBE	; 190
    6e20:	fa 4e       	sbci	r31, 0xEA	; 234
    6e22:	c0 83       	st	Z, r28
    6e24:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e28:	8f 5f       	subi	r24, 0xFF	; 255
    6e2a:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e2e:	89 13       	cpse	r24, r25
    6e30:	0e c0       	rjmp	.+28     	; 0x6e4e <serial1MIDISend+0x86>
    6e32:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <midiTxOvflCount>
    6e36:	88 23       	and	r24, r24
    6e38:	31 f0       	breq	.+12     	; 0x6e46 <serial1MIDISend+0x7e>
    6e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    6e3c:	51 f0       	breq	.+20     	; 0x6e52 <serial1MIDISend+0x8a>
    6e3e:	8f 5f       	subi	r24, 0xFF	; 255
    6e40:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6e44:	06 c0       	rjmp	.+12     	; 0x6e52 <serial1MIDISend+0x8a>
    6e46:	81 e0       	ldi	r24, 0x01	; 1
    6e48:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6e4c:	02 c0       	rjmp	.+4      	; 0x6e52 <serial1MIDISend+0x8a>
    6e4e:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <midiTxInIndex>
    6e52:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e56:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e5a:	89 17       	cp	r24, r25
    6e5c:	30 f4       	brcc	.+12     	; 0x6e6a <serial1MIDISend+0xa2>
    6e5e:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e62:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e66:	89 1b       	sub	r24, r25
    6e68:	05 c0       	rjmp	.+10     	; 0x6e74 <serial1MIDISend+0xac>
    6e6a:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e6e:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e72:	89 1b       	sub	r24, r25
    6e74:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <midiTxBuffUsage>
    6e78:	98 17       	cp	r25, r24
    6e7a:	10 f4       	brcc	.+4      	; 0x6e80 <serial1MIDISend+0xb8>
    6e7c:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <midiTxBuffUsage>
    6e80:	e9 ec       	ldi	r30, 0xC9	; 201
    6e82:	f0 e0       	ldi	r31, 0x00	; 0
    6e84:	80 81       	ld	r24, Z
    6e86:	80 62       	ori	r24, 0x20	; 32
    6e88:	80 83       	st	Z, r24
    6e8a:	cf 91       	pop	r28
    6e8c:	08 95       	ret

00006e8e <serial0USB_logPipeIn>:
    6e8e:	cf 93       	push	r28
    6e90:	df 93       	push	r29
    6e92:	20 91 52 16 	lds	r18, 0x1652	; 0x801652 <serUSB_Active>
    6e96:	22 23       	and	r18, r18
    6e98:	a9 f0       	breq	.+42     	; 0x6ec4 <serial0USB_logPipeIn+0x36>
    6e9a:	c9 2f       	mov	r28, r25
    6e9c:	d8 2f       	mov	r29, r24
    6e9e:	8b e6       	ldi	r24, 0x6B	; 107
    6ea0:	1e df       	rcall	.-452    	; 0x6cde <serial0SER_USBSend>
    6ea2:	8c 2f       	mov	r24, r28
    6ea4:	82 95       	swap	r24
    6ea6:	8f 70       	andi	r24, 0x0F	; 15
    6ea8:	11 d2       	rcall	.+1058   	; 0x72cc <nibbleToChr>
    6eaa:	19 df       	rcall	.-462    	; 0x6cde <serial0SER_USBSend>
    6eac:	cf 70       	andi	r28, 0x0F	; 15
    6eae:	8c 2f       	mov	r24, r28
    6eb0:	0d d2       	rcall	.+1050   	; 0x72cc <nibbleToChr>
    6eb2:	15 df       	rcall	.-470    	; 0x6cde <serial0SER_USBSend>
    6eb4:	8d 2f       	mov	r24, r29
    6eb6:	82 95       	swap	r24
    6eb8:	8f 70       	andi	r24, 0x0F	; 15
    6eba:	08 d2       	rcall	.+1040   	; 0x72cc <nibbleToChr>
    6ebc:	10 df       	rcall	.-480    	; 0x6cde <serial0SER_USBSend>
    6ebe:	8c 2f       	mov	r24, r28
    6ec0:	05 d2       	rcall	.+1034   	; 0x72cc <nibbleToChr>
    6ec2:	0d df       	rcall	.-486    	; 0x6cde <serial0SER_USBSend>
    6ec4:	df 91       	pop	r29
    6ec6:	cf 91       	pop	r28
    6ec8:	08 95       	ret

00006eca <serial0SER_USB_sendStringP>:
    6eca:	cf 93       	push	r28
    6ecc:	df 93       	push	r29
    6ece:	fc 01       	movw	r30, r24
    6ed0:	02 c0       	rjmp	.+4      	; 0x6ed6 <serial0SER_USB_sendStringP+0xc>
    6ed2:	05 df       	rcall	.-502    	; 0x6cde <serial0SER_USBSend>
    6ed4:	fe 01       	movw	r30, r28
    6ed6:	ef 01       	movw	r28, r30
    6ed8:	21 96       	adiw	r28, 0x01	; 1
    6eda:	84 91       	lpm	r24, Z
    6edc:	88 23       	and	r24, r24
    6ede:	21 f0       	breq	.+8      	; 0x6ee8 <serial0SER_USB_sendStringP+0x1e>
    6ee0:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6ee4:	9f 3f       	cpi	r25, 0xFF	; 255
    6ee6:	a9 f7       	brne	.-22     	; 0x6ed2 <serial0SER_USB_sendStringP+0x8>
    6ee8:	df 91       	pop	r29
    6eea:	cf 91       	pop	r28
    6eec:	08 95       	ret

00006eee <serial0SER_USB_sendCRLF>:
    6eee:	8e ef       	ldi	r24, 0xFE	; 254
    6ef0:	92 e1       	ldi	r25, 0x12	; 18
    6ef2:	eb cf       	rjmp	.-42     	; 0x6eca <serial0SER_USB_sendStringP>
    6ef4:	08 95       	ret

00006ef6 <init_Serial0SerUSB>:
    6ef6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6efa:	88 e0       	ldi	r24, 0x08	; 8
    6efc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6f00:	e1 ec       	ldi	r30, 0xC1	; 193
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	80 81       	ld	r24, Z
    6f06:	88 69       	ori	r24, 0x98	; 152
    6f08:	80 83       	st	Z, r24
    6f0a:	e2 ec       	ldi	r30, 0xC2	; 194
    6f0c:	f0 e0       	ldi	r31, 0x00	; 0
    6f0e:	80 81       	ld	r24, Z
    6f10:	86 60       	ori	r24, 0x06	; 6
    6f12:	80 83       	st	Z, r24
    6f14:	81 e0       	ldi	r24, 0x01	; 1
    6f16:	94 e1       	ldi	r25, 0x14	; 20
    6f18:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <serUSBRxInIndex+0x1>
    6f1c:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <serUSBRxInIndex>
    6f20:	90 93 48 16 	sts	0x1648, r25	; 0x801648 <serUSBRxOutIndex+0x1>
    6f24:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <serUSBRxOutIndex>
    6f28:	8d ee       	ldi	r24, 0xED	; 237
    6f2a:	9b e0       	ldi	r25, 0x0B	; 11
    6f2c:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6f30:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6f34:	90 93 d8 18 	sts	0x18D8, r25	; 0x8018d8 <serUSBTxInIndex+0x1>
    6f38:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <serUSBTxInIndex>
    6f3c:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <serUSBOvflFlag>
    6f40:	0e 94 30 0b 	call	0x1660	; 0x1660 <eeprom_ReadUSB>
    6f44:	8f 3f       	cpi	r24, 0xFF	; 255
    6f46:	41 f4       	brne	.+16     	; 0x6f58 <init_Serial0SerUSB+0x62>
    6f48:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <serUSB_Active>
    6f4c:	40 e0       	ldi	r20, 0x00	; 0
    6f4e:	50 e0       	ldi	r21, 0x00	; 0
    6f50:	64 e0       	ldi	r22, 0x04	; 4
    6f52:	81 e0       	ldi	r24, 0x01	; 1
    6f54:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    6f58:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    6f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f5e:	41 f4       	brne	.+16     	; 0x6f70 <init_Serial0SerUSB+0x7a>
    6f60:	8a e6       	ldi	r24, 0x6A	; 106
    6f62:	93 e0       	ldi	r25, 0x03	; 3
    6f64:	b2 df       	rcall	.-156    	; 0x6eca <serial0SER_USB_sendStringP>
    6f66:	8e e9       	ldi	r24, 0x9E	; 158
    6f68:	92 e1       	ldi	r25, 0x12	; 18
    6f6a:	af df       	rcall	.-162    	; 0x6eca <serial0SER_USB_sendStringP>
    6f6c:	c0 df       	rcall	.-128    	; 0x6eee <serial0SER_USB_sendCRLF>
    6f6e:	bf cf       	rjmp	.-130    	; 0x6eee <serial0SER_USB_sendCRLF>
    6f70:	08 95       	ret

00006f72 <serial0SER_USB_sendString>:
    6f72:	1f 93       	push	r17
    6f74:	cf 93       	push	r28
    6f76:	df 93       	push	r29
    6f78:	ec 01       	movw	r28, r24
    6f7a:	10 e5       	ldi	r17, 0x50	; 80
    6f7c:	03 c0       	rjmp	.+6      	; 0x6f84 <serial0SER_USB_sendString+0x12>
    6f7e:	21 96       	adiw	r28, 0x01	; 1
    6f80:	ae de       	rcall	.-676    	; 0x6cde <serial0SER_USBSend>
    6f82:	11 50       	subi	r17, 0x01	; 1
    6f84:	88 81       	ld	r24, Y
    6f86:	88 23       	and	r24, r24
    6f88:	31 f0       	breq	.+12     	; 0x6f96 <serial0SER_USB_sendString+0x24>
    6f8a:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6f8e:	9f 3f       	cpi	r25, 0xFF	; 255
    6f90:	11 f0       	breq	.+4      	; 0x6f96 <serial0SER_USB_sendString+0x24>
    6f92:	11 11       	cpse	r17, r1
    6f94:	f4 cf       	rjmp	.-24     	; 0x6f7e <serial0SER_USB_sendString+0xc>
    6f96:	df 91       	pop	r29
    6f98:	cf 91       	pop	r28
    6f9a:	1f 91       	pop	r17
    6f9c:	08 95       	ret

00006f9e <__vector_25>:
    6f9e:	1f 92       	push	r1
    6fa0:	0f 92       	push	r0
    6fa2:	0f b6       	in	r0, 0x3f	; 63
    6fa4:	0f 92       	push	r0
    6fa6:	11 24       	eor	r1, r1
    6fa8:	0b b6       	in	r0, 0x3b	; 59
    6faa:	0f 92       	push	r0
    6fac:	2f 93       	push	r18
    6fae:	3f 93       	push	r19
    6fb0:	4f 93       	push	r20
    6fb2:	5f 93       	push	r21
    6fb4:	8f 93       	push	r24
    6fb6:	9f 93       	push	r25
    6fb8:	ef 93       	push	r30
    6fba:	ff 93       	push	r31
    6fbc:	e0 91 54 16 	lds	r30, 0x1654	; 0x801654 <serUSBRxInIndex>
    6fc0:	f0 91 55 16 	lds	r31, 0x1655	; 0x801655 <serUSBRxInIndex+0x1>
    6fc4:	af 01       	movw	r20, r30
    6fc6:	4f 5f       	subi	r20, 0xFF	; 255
    6fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    6fca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6fce:	80 83       	st	Z, r24
    6fd0:	84 e1       	ldi	r24, 0x14	; 20
    6fd2:	40 34       	cpi	r20, 0x40	; 64
    6fd4:	58 07       	cpc	r21, r24
    6fd6:	19 f0       	breq	.+6      	; 0x6fde <__vector_25+0x40>
    6fd8:	10 f0       	brcs	.+4      	; 0x6fde <__vector_25+0x40>
    6fda:	41 e0       	ldi	r20, 0x01	; 1
    6fdc:	54 e1       	ldi	r21, 0x14	; 20
    6fde:	9f b7       	in	r25, 0x3f	; 63
    6fe0:	f8 94       	cli
    6fe2:	81 e0       	ldi	r24, 0x01	; 1
    6fe4:	05 c0       	rjmp	.+10     	; 0x6ff0 <__vector_25+0x52>
    6fe6:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <serUSBRxOutIndex>
    6fea:	30 91 48 16 	lds	r19, 0x1648	; 0x801648 <serUSBRxOutIndex+0x1>
    6fee:	80 e0       	ldi	r24, 0x00	; 0
    6ff0:	81 11       	cpse	r24, r1
    6ff2:	f9 cf       	rjmp	.-14     	; 0x6fe6 <__vector_25+0x48>
    6ff4:	9f bf       	out	0x3f, r25	; 63
    6ff6:	42 17       	cp	r20, r18
    6ff8:	53 07       	cpc	r21, r19
    6ffa:	21 f4       	brne	.+8      	; 0x7004 <__vector_25+0x66>
    6ffc:	8f ef       	ldi	r24, 0xFF	; 255
    6ffe:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    7002:	04 c0       	rjmp	.+8      	; 0x700c <__vector_25+0x6e>
    7004:	50 93 55 16 	sts	0x1655, r21	; 0x801655 <serUSBRxInIndex+0x1>
    7008:	40 93 54 16 	sts	0x1654, r20	; 0x801654 <serUSBRxInIndex>
    700c:	ff 91       	pop	r31
    700e:	ef 91       	pop	r30
    7010:	9f 91       	pop	r25
    7012:	8f 91       	pop	r24
    7014:	5f 91       	pop	r21
    7016:	4f 91       	pop	r20
    7018:	3f 91       	pop	r19
    701a:	2f 91       	pop	r18
    701c:	0f 90       	pop	r0
    701e:	0b be       	out	0x3b, r0	; 59
    7020:	0f 90       	pop	r0
    7022:	0f be       	out	0x3f, r0	; 63
    7024:	0f 90       	pop	r0
    7026:	1f 90       	pop	r1
    7028:	18 95       	reti

0000702a <__vector_26>:
    702a:	1f 92       	push	r1
    702c:	0f 92       	push	r0
    702e:	0f b6       	in	r0, 0x3f	; 63
    7030:	0f 92       	push	r0
    7032:	11 24       	eor	r1, r1
    7034:	0b b6       	in	r0, 0x3b	; 59
    7036:	0f 92       	push	r0
    7038:	2f 93       	push	r18
    703a:	8f 93       	push	r24
    703c:	9f 93       	push	r25
    703e:	ef 93       	push	r30
    7040:	ff 93       	push	r31
    7042:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    7046:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    704a:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    704e:	90 91 d8 18 	lds	r25, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    7052:	e8 17       	cp	r30, r24
    7054:	f9 07       	cpc	r31, r25
    7056:	89 f0       	breq	.+34     	; 0x707a <__vector_26+0x50>
    7058:	cf 01       	movw	r24, r30
    705a:	01 96       	adiw	r24, 0x01	; 1
    705c:	20 81       	ld	r18, Z
    705e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7062:	23 e1       	ldi	r18, 0x13	; 19
    7064:	8c 3e       	cpi	r24, 0xEC	; 236
    7066:	92 07       	cpc	r25, r18
    7068:	19 f0       	breq	.+6      	; 0x7070 <__vector_26+0x46>
    706a:	10 f0       	brcs	.+4      	; 0x7070 <__vector_26+0x46>
    706c:	8d ee       	ldi	r24, 0xED	; 237
    706e:	9b e0       	ldi	r25, 0x0B	; 11
    7070:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    7074:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    7078:	05 c0       	rjmp	.+10     	; 0x7084 <__vector_26+0x5a>
    707a:	e1 ec       	ldi	r30, 0xC1	; 193
    707c:	f0 e0       	ldi	r31, 0x00	; 0
    707e:	80 81       	ld	r24, Z
    7080:	8f 7d       	andi	r24, 0xDF	; 223
    7082:	80 83       	st	Z, r24
    7084:	ff 91       	pop	r31
    7086:	ef 91       	pop	r30
    7088:	9f 91       	pop	r25
    708a:	8f 91       	pop	r24
    708c:	2f 91       	pop	r18
    708e:	0f 90       	pop	r0
    7090:	0b be       	out	0x3b, r0	; 59
    7092:	0f 90       	pop	r0
    7094:	0f be       	out	0x3f, r0	; 63
    7096:	0f 90       	pop	r0
    7098:	1f 90       	pop	r1
    709a:	18 95       	reti

0000709c <init_Serial3SerESP>:
    709c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    70a0:	88 e0       	ldi	r24, 0x08	; 8
    70a2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    70a6:	e1 e3       	ldi	r30, 0x31	; 49
    70a8:	f1 e0       	ldi	r31, 0x01	; 1
    70aa:	80 81       	ld	r24, Z
    70ac:	88 69       	ori	r24, 0x98	; 152
    70ae:	80 83       	st	Z, r24
    70b0:	e2 e3       	ldi	r30, 0x32	; 50
    70b2:	f1 e0       	ldi	r31, 0x01	; 1
    70b4:	80 81       	ld	r24, Z
    70b6:	86 60       	ori	r24, 0x06	; 6
    70b8:	80 83       	st	Z, r24
    70ba:	87 e5       	ldi	r24, 0x57	; 87
    70bc:	96 e1       	ldi	r25, 0x16	; 22
    70be:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <serESPRxInIndex+0x1>
    70c2:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <serESPRxInIndex>
    70c6:	90 93 fa 13 	sts	0x13FA, r25	; 0x8013fa <serESPRxOutIndex+0x1>
    70ca:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <serESPRxOutIndex>
    70ce:	87 ed       	ldi	r24, 0xD7	; 215
    70d0:	96 e1       	ldi	r25, 0x16	; 22
    70d2:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    70d6:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    70da:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <serESPTxInIndex+0x1>
    70de:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <serESPTxInIndex>
    70e2:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <serESPOvflFlag>
    70e6:	8f ef       	ldi	r24, 0xFF	; 255
    70e8:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serESP_Active>
    70ec:	80 e0       	ldi	r24, 0x00	; 0
    70ee:	07 c0       	rjmp	.+14     	; 0x70fe <init_Serial3SerESP+0x62>
    70f0:	e8 2f       	mov	r30, r24
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	ef 50       	subi	r30, 0x0F	; 15
    70f6:	fc 4e       	sbci	r31, 0xEC	; 236
    70f8:	9f ef       	ldi	r25, 0xFF	; 255
    70fa:	90 83       	st	Z, r25
    70fc:	8f 5f       	subi	r24, 0xFF	; 255
    70fe:	88 30       	cpi	r24, 0x08	; 8
    7100:	b8 f3       	brcs	.-18     	; 0x70f0 <init_Serial3SerESP+0x54>
    7102:	08 95       	ret

00007104 <serial3SER_ESPSend>:
    7104:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <serESPTxInIndex>
    7108:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    710c:	a1 e3       	ldi	r26, 0x31	; 49
    710e:	b1 e0       	ldi	r27, 0x01	; 1
    7110:	9c 91       	ld	r25, X
    7112:	9f 7d       	andi	r25, 0xDF	; 223
    7114:	9c 93       	st	X, r25
    7116:	af 01       	movw	r20, r30
    7118:	4f 5f       	subi	r20, 0xFF	; 255
    711a:	5f 4f       	sbci	r21, 0xFF	; 255
    711c:	80 83       	st	Z, r24
    711e:	88 e1       	ldi	r24, 0x18	; 24
    7120:	46 3d       	cpi	r20, 0xD6	; 214
    7122:	58 07       	cpc	r21, r24
    7124:	19 f0       	breq	.+6      	; 0x712c <serial3SER_ESPSend+0x28>
    7126:	10 f0       	brcs	.+4      	; 0x712c <serial3SER_ESPSend+0x28>
    7128:	47 ed       	ldi	r20, 0xD7	; 215
    712a:	56 e1       	ldi	r21, 0x16	; 22
    712c:	9f b7       	in	r25, 0x3f	; 63
    712e:	f8 94       	cli
    7130:	81 e0       	ldi	r24, 0x01	; 1
    7132:	05 c0       	rjmp	.+10     	; 0x713e <serial3SER_ESPSend+0x3a>
    7134:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <serESPTxOutIndex>
    7138:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
    713c:	80 e0       	ldi	r24, 0x00	; 0
    713e:	81 11       	cpse	r24, r1
    7140:	f9 cf       	rjmp	.-14     	; 0x7134 <serial3SER_ESPSend+0x30>
    7142:	9f bf       	out	0x3f, r25	; 63
    7144:	42 17       	cp	r20, r18
    7146:	53 07       	cpc	r21, r19
    7148:	49 f4       	brne	.+18     	; 0x715c <serial3SER_ESPSend+0x58>
    714a:	8f ef       	ldi	r24, 0xFF	; 255
    714c:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
    7150:	e1 e3       	ldi	r30, 0x31	; 49
    7152:	f1 e0       	ldi	r31, 0x01	; 1
    7154:	80 81       	ld	r24, Z
    7156:	80 62       	ori	r24, 0x20	; 32
    7158:	80 83       	st	Z, r24
    715a:	08 95       	ret
    715c:	50 93 46 16 	sts	0x1646, r21	; 0x801646 <serESPTxInIndex+0x1>
    7160:	40 93 45 16 	sts	0x1645, r20	; 0x801645 <serESPTxInIndex>
    7164:	e1 e3       	ldi	r30, 0x31	; 49
    7166:	f1 e0       	ldi	r31, 0x01	; 1
    7168:	80 81       	ld	r24, Z
    716a:	80 62       	ori	r24, 0x20	; 32
    716c:	80 83       	st	Z, r24
    716e:	08 95       	ret

00007170 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    7170:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    7174:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    7178:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <serESPRxInIndex>
    717c:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
    7180:	e8 17       	cp	r30, r24
    7182:	f9 07       	cpc	r31, r25
    7184:	81 f0       	breq	.+32     	; 0x71a6 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    7186:	9f 01       	movw	r18, r30
    7188:	2f 5f       	subi	r18, 0xFF	; 255
    718a:	3f 4f       	sbci	r19, 0xFF	; 255
    718c:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    718e:	96 e1       	ldi	r25, 0x16	; 22
    7190:	26 3d       	cpi	r18, 0xD6	; 214
    7192:	39 07       	cpc	r19, r25
    7194:	19 f0       	breq	.+6      	; 0x719c <serial3SER_ESPReadRx+0x2c>
    7196:	10 f0       	brcs	.+4      	; 0x719c <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    7198:	27 e5       	ldi	r18, 0x57	; 87
    719a:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    719c:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <serESPRxOutIndex+0x1>
    71a0:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <serESPRxOutIndex>
    71a4:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    71a6:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    71a8:	08 95       	ret

000071aa <__vector_54>:

ISR(USART3_RX_vect) {
    71aa:	1f 92       	push	r1
    71ac:	0f 92       	push	r0
    71ae:	0f b6       	in	r0, 0x3f	; 63
    71b0:	0f 92       	push	r0
    71b2:	11 24       	eor	r1, r1
    71b4:	0b b6       	in	r0, 0x3b	; 59
    71b6:	0f 92       	push	r0
    71b8:	2f 93       	push	r18
    71ba:	3f 93       	push	r19
    71bc:	4f 93       	push	r20
    71be:	5f 93       	push	r21
    71c0:	6f 93       	push	r22
    71c2:	8f 93       	push	r24
    71c4:	9f 93       	push	r25
    71c6:	af 93       	push	r26
    71c8:	bf 93       	push	r27
    71ca:	ef 93       	push	r30
    71cc:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    71ce:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <serESPRxInIndex>
    71d2:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    71d6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    71da:	af 01       	movw	r20, r30
    71dc:	4f 5f       	subi	r20, 0xFF	; 255
    71de:	5f 4f       	sbci	r21, 0xFF	; 255
    71e0:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    71e2:	86 e1       	ldi	r24, 0x16	; 22
    71e4:	46 3d       	cpi	r20, 0xD6	; 214
    71e6:	58 07       	cpc	r21, r24
    71e8:	19 f0       	breq	.+6      	; 0x71f0 <__vector_54+0x46>
    71ea:	10 f0       	brcs	.+4      	; 0x71f0 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    71ec:	47 e5       	ldi	r20, 0x57	; 87
    71ee:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    71f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    71f2:	f8 94       	cli
    71f4:	81 e0       	ldi	r24, 0x01	; 1
    71f6:	05 c0       	rjmp	.+10     	; 0x7202 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    71f8:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    71fc:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7200:	80 e0       	ldi	r24, 0x00	; 0
    7202:	81 11       	cpse	r24, r1
    7204:	f9 cf       	rjmp	.-14     	; 0x71f8 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7206:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7208:	42 17       	cp	r20, r18
    720a:	53 07       	cpc	r21, r19
    720c:	39 f4       	brne	.+14     	; 0x721c <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    720e:	8f ef       	ldi	r24, 0xFF	; 255
    7210:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7214:	80 e0       	ldi	r24, 0x00	; 0
    7216:	a8 ef       	ldi	r26, 0xF8	; 248
    7218:	b3 e1       	ldi	r27, 0x13	; 19
    721a:	0a c0       	rjmp	.+20     	; 0x7230 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    721c:	50 93 ff 13 	sts	0x13FF, r21	; 0x8013ff <serESPRxInIndex+0x1>
    7220:	40 93 fe 13 	sts	0x13FE, r20	; 0x8013fe <serESPRxInIndex>
    7224:	f7 cf       	rjmp	.-18     	; 0x7214 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7226:	fd 01       	movw	r30, r26
    7228:	92 91       	ld	r25, -Z
    722a:	9c 93       	st	X, r25
		inpBufferPtr--;
    722c:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    722e:	8f 5f       	subi	r24, 0xFF	; 255
    7230:	87 30       	cpi	r24, 0x07	; 7
    7232:	c8 f3       	brcs	.-14     	; 0x7226 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7234:	6c 93       	st	X, r22
}
    7236:	ff 91       	pop	r31
    7238:	ef 91       	pop	r30
    723a:	bf 91       	pop	r27
    723c:	af 91       	pop	r26
    723e:	9f 91       	pop	r25
    7240:	8f 91       	pop	r24
    7242:	6f 91       	pop	r22
    7244:	5f 91       	pop	r21
    7246:	4f 91       	pop	r20
    7248:	3f 91       	pop	r19
    724a:	2f 91       	pop	r18
    724c:	0f 90       	pop	r0
    724e:	0b be       	out	0x3b, r0	; 59
    7250:	0f 90       	pop	r0
    7252:	0f be       	out	0x3f, r0	; 63
    7254:	0f 90       	pop	r0
    7256:	1f 90       	pop	r1
    7258:	18 95       	reti

0000725a <__vector_55>:

ISR(USART3_UDRE_vect) {
    725a:	1f 92       	push	r1
    725c:	0f 92       	push	r0
    725e:	0f b6       	in	r0, 0x3f	; 63
    7260:	0f 92       	push	r0
    7262:	11 24       	eor	r1, r1
    7264:	0b b6       	in	r0, 0x3b	; 59
    7266:	0f 92       	push	r0
    7268:	2f 93       	push	r18
    726a:	8f 93       	push	r24
    726c:	9f 93       	push	r25
    726e:	ef 93       	push	r30
    7270:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    7272:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxOutIndex>
    7276:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    727a:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <serESPTxInIndex>
    727e:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    7282:	e8 17       	cp	r30, r24
    7284:	f9 07       	cpc	r31, r25
    7286:	89 f0       	breq	.+34     	; 0x72aa <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    7288:	cf 01       	movw	r24, r30
    728a:	01 96       	adiw	r24, 0x01	; 1
    728c:	20 81       	ld	r18, Z
    728e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    7292:	28 e1       	ldi	r18, 0x18	; 24
    7294:	86 3d       	cpi	r24, 0xD6	; 214
    7296:	92 07       	cpc	r25, r18
    7298:	19 f0       	breq	.+6      	; 0x72a0 <__vector_55+0x46>
    729a:	10 f0       	brcs	.+4      	; 0x72a0 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    729c:	87 ed       	ldi	r24, 0xD7	; 215
    729e:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    72a0:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    72a4:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    72a8:	05 c0       	rjmp	.+10     	; 0x72b4 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    72aa:	e1 e3       	ldi	r30, 0x31	; 49
    72ac:	f1 e0       	ldi	r31, 0x01	; 1
    72ae:	80 81       	ld	r24, Z
    72b0:	8f 7d       	andi	r24, 0xDF	; 223
    72b2:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    72b4:	ff 91       	pop	r31
    72b6:	ef 91       	pop	r30
    72b8:	9f 91       	pop	r25
    72ba:	8f 91       	pop	r24
    72bc:	2f 91       	pop	r18
    72be:	0f 90       	pop	r0
    72c0:	0b be       	out	0x3b, r0	; 59
    72c2:	0f 90       	pop	r0
    72c4:	0f be       	out	0x3f, r0	; 63
    72c6:	0f 90       	pop	r0
    72c8:	1f 90       	pop	r1
    72ca:	18 95       	reti

000072cc <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    72cc:	8a 30       	cpi	r24, 0x0A	; 10
    72ce:	10 f0       	brcs	.+4      	; 0x72d4 <nibbleToChr+0x8>
    72d0:	89 5c       	subi	r24, 0xC9	; 201
    72d2:	08 95       	ret
    72d4:	80 5d       	subi	r24, 0xD0	; 208
    72d6:	08 95       	ret

000072d8 <lcd_setCG>:
    72d8:	ef 92       	push	r14
    72da:	ff 92       	push	r15
    72dc:	1f 93       	push	r17
    72de:	cf 93       	push	r28
    72e0:	df 93       	push	r29
    72e2:	eb 01       	movw	r28, r22
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	88 0f       	add	r24, r24
    72e8:	99 1f       	adc	r25, r25
    72ea:	88 0f       	add	r24, r24
    72ec:	99 1f       	adc	r25, r25
    72ee:	88 0f       	add	r24, r24
    72f0:	99 1f       	adc	r25, r25
    72f2:	80 64       	ori	r24, 0x40	; 64
    72f4:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    72f8:	10 e0       	ldi	r17, 0x00	; 0
    72fa:	0a c0       	rjmp	.+20     	; 0x7310 <lcd_setCG+0x38>
    72fc:	7e 01       	movw	r14, r28
    72fe:	8f ef       	ldi	r24, 0xFF	; 255
    7300:	e8 1a       	sub	r14, r24
    7302:	f8 0a       	sbc	r15, r24
    7304:	fe 01       	movw	r30, r28
    7306:	84 91       	lpm	r24, Z
    7308:	0e 94 69 12 	call	0x24d2	; 0x24d2 <lcd_write_character>
    730c:	1f 5f       	subi	r17, 0xFF	; 255
    730e:	e7 01       	movw	r28, r14
    7310:	18 30       	cpi	r17, 0x08	; 8
    7312:	a0 f3       	brcs	.-24     	; 0x72fc <lcd_setCG+0x24>
    7314:	df 91       	pop	r29
    7316:	cf 91       	pop	r28
    7318:	1f 91       	pop	r17
    731a:	ff 90       	pop	r15
    731c:	ef 90       	pop	r14
    731e:	08 95       	ret

00007320 <lcd_initCG>:
    7320:	66 ef       	ldi	r22, 0xF6	; 246
    7322:	72 e1       	ldi	r23, 0x12	; 18
    7324:	80 e0       	ldi	r24, 0x00	; 0
    7326:	d8 df       	rcall	.-80     	; 0x72d8 <lcd_setCG>
    7328:	6e ee       	ldi	r22, 0xEE	; 238
    732a:	72 e1       	ldi	r23, 0x12	; 18
    732c:	81 e0       	ldi	r24, 0x01	; 1
    732e:	d4 df       	rcall	.-88     	; 0x72d8 <lcd_setCG>
    7330:	66 ee       	ldi	r22, 0xE6	; 230
    7332:	72 e1       	ldi	r23, 0x12	; 18
    7334:	82 e0       	ldi	r24, 0x02	; 2
    7336:	d0 cf       	rjmp	.-96     	; 0x72d8 <lcd_setCG>
    7338:	08 95       	ret

0000733a <lcd_hexout>:
    733a:	cf 93       	push	r28
    733c:	c8 2f       	mov	r28, r24
    733e:	82 95       	swap	r24
    7340:	8f 70       	andi	r24, 0x0F	; 15
    7342:	8a 30       	cpi	r24, 0x0A	; 10
    7344:	10 f0       	brcs	.+4      	; 0x734a <lcd_hexout+0x10>
    7346:	89 5c       	subi	r24, 0xC9	; 201
    7348:	01 c0       	rjmp	.+2      	; 0x734c <lcd_hexout+0x12>
    734a:	80 5d       	subi	r24, 0xD0	; 208
    734c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7350:	cf 70       	andi	r28, 0x0F	; 15
    7352:	ca 30       	cpi	r28, 0x0A	; 10
    7354:	18 f0       	brcs	.+6      	; 0x735c <lcd_hexout+0x22>
    7356:	87 e3       	ldi	r24, 0x37	; 55
    7358:	8c 0f       	add	r24, r28
    735a:	02 c0       	rjmp	.+4      	; 0x7360 <lcd_hexout+0x26>
    735c:	80 e3       	ldi	r24, 0x30	; 48
    735e:	8c 0f       	add	r24, r28
    7360:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7364:	cf 91       	pop	r28
    7366:	08 95       	ret

00007368 <lcd_longout>:
    7368:	cf 93       	push	r28
    736a:	df 93       	push	r29
    736c:	d3 e0       	ldi	r29, 0x03	; 3
    736e:	1c c0       	rjmp	.+56     	; 0x73a8 <lcd_longout+0x40>
    7370:	ed 2f       	mov	r30, r29
    7372:	0d 2e       	mov	r0, r29
    7374:	00 0c       	add	r0, r0
    7376:	ff 0b       	sbc	r31, r31
    7378:	e3 52       	subi	r30, 0x23	; 35
    737a:	f7 4e       	sbci	r31, 0xE7	; 231
    737c:	c0 81       	ld	r28, Z
    737e:	8c 2f       	mov	r24, r28
    7380:	82 95       	swap	r24
    7382:	8f 70       	andi	r24, 0x0F	; 15
    7384:	8a 30       	cpi	r24, 0x0A	; 10
    7386:	10 f0       	brcs	.+4      	; 0x738c <lcd_longout+0x24>
    7388:	89 5c       	subi	r24, 0xC9	; 201
    738a:	01 c0       	rjmp	.+2      	; 0x738e <lcd_longout+0x26>
    738c:	80 5d       	subi	r24, 0xD0	; 208
    738e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7392:	cf 70       	andi	r28, 0x0F	; 15
    7394:	ca 30       	cpi	r28, 0x0A	; 10
    7396:	18 f0       	brcs	.+6      	; 0x739e <lcd_longout+0x36>
    7398:	87 e3       	ldi	r24, 0x37	; 55
    739a:	8c 0f       	add	r24, r28
    739c:	02 c0       	rjmp	.+4      	; 0x73a2 <lcd_longout+0x3a>
    739e:	80 e3       	ldi	r24, 0x30	; 48
    73a0:	8c 0f       	add	r24, r28
    73a2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73a6:	d1 50       	subi	r29, 0x01	; 1
    73a8:	dd 23       	and	r29, r29
    73aa:	14 f7       	brge	.-60     	; 0x7370 <lcd_longout+0x8>
    73ac:	df 91       	pop	r29
    73ae:	cf 91       	pop	r28
    73b0:	08 95       	ret

000073b2 <lcd_dec2out>:
    73b2:	cf 93       	push	r28
    73b4:	c8 2f       	mov	r28, r24
    73b6:	84 36       	cpi	r24, 0x64	; 100
    73b8:	50 f0       	brcs	.+20     	; 0x73ce <lcd_dec2out+0x1c>
    73ba:	8d e2       	ldi	r24, 0x2D	; 45
    73bc:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73c0:	8d e2       	ldi	r24, 0x2D	; 45
    73c2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73c6:	0d c0       	rjmp	.+26     	; 0x73e2 <lcd_dec2out+0x30>
    73c8:	ca 50       	subi	r28, 0x0A	; 10
    73ca:	8f 5f       	subi	r24, 0xFF	; 255
    73cc:	01 c0       	rjmp	.+2      	; 0x73d0 <lcd_dec2out+0x1e>
    73ce:	80 e0       	ldi	r24, 0x00	; 0
    73d0:	ca 30       	cpi	r28, 0x0A	; 10
    73d2:	d0 f7       	brcc	.-12     	; 0x73c8 <lcd_dec2out+0x16>
    73d4:	80 5d       	subi	r24, 0xD0	; 208
    73d6:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73da:	80 e3       	ldi	r24, 0x30	; 48
    73dc:	8c 0f       	add	r24, r28
    73de:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73e2:	cf 91       	pop	r28
    73e4:	08 95       	ret

000073e6 <putChar_Dec2>:
    73e6:	84 36       	cpi	r24, 0x64	; 100
    73e8:	58 f0       	brcs	.+22     	; 0x7400 <putChar_Dec2+0x1a>
    73ea:	8d e2       	ldi	r24, 0x2D	; 45
    73ec:	db 01       	movw	r26, r22
    73ee:	8c 93       	st	X, r24
    73f0:	fb 01       	movw	r30, r22
    73f2:	32 96       	adiw	r30, 0x02	; 2
    73f4:	11 96       	adiw	r26, 0x01	; 1
    73f6:	8c 93       	st	X, r24
    73f8:	0f c0       	rjmp	.+30     	; 0x7418 <putChar_Dec2+0x32>
    73fa:	8a 50       	subi	r24, 0x0A	; 10
    73fc:	9f 5f       	subi	r25, 0xFF	; 255
    73fe:	01 c0       	rjmp	.+2      	; 0x7402 <putChar_Dec2+0x1c>
    7400:	90 e0       	ldi	r25, 0x00	; 0
    7402:	8a 30       	cpi	r24, 0x0A	; 10
    7404:	d0 f7       	brcc	.-12     	; 0x73fa <putChar_Dec2+0x14>
    7406:	90 5d       	subi	r25, 0xD0	; 208
    7408:	fb 01       	movw	r30, r22
    740a:	90 83       	st	Z, r25
    740c:	32 96       	adiw	r30, 0x02	; 2
    740e:	90 e3       	ldi	r25, 0x30	; 48
    7410:	98 0f       	add	r25, r24
    7412:	db 01       	movw	r26, r22
    7414:	11 96       	adiw	r26, 0x01	; 1
    7416:	9c 93       	st	X, r25
    7418:	10 82       	st	Z, r1
    741a:	cf 01       	movw	r24, r30
    741c:	08 95       	ret

0000741e <putChar_Dec>:
    741e:	90 e0       	ldi	r25, 0x00	; 0
    7420:	02 c0       	rjmp	.+4      	; 0x7426 <putChar_Dec+0x8>
    7422:	84 56       	subi	r24, 0x64	; 100
    7424:	9f 5f       	subi	r25, 0xFF	; 255
    7426:	84 36       	cpi	r24, 0x64	; 100
    7428:	e0 f7       	brcc	.-8      	; 0x7422 <putChar_Dec+0x4>
    742a:	99 23       	and	r25, r25
    742c:	39 f0       	breq	.+14     	; 0x743c <putChar_Dec+0x1e>
    742e:	90 5d       	subi	r25, 0xD0	; 208
    7430:	db 01       	movw	r26, r22
    7432:	9c 93       	st	X, r25
    7434:	6f 5f       	subi	r22, 0xFF	; 255
    7436:	7f 4f       	sbci	r23, 0xFF	; 255
    7438:	2f ef       	ldi	r18, 0xFF	; 255
    743a:	01 c0       	rjmp	.+2      	; 0x743e <putChar_Dec+0x20>
    743c:	20 e0       	ldi	r18, 0x00	; 0
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	02 c0       	rjmp	.+4      	; 0x7446 <putChar_Dec+0x28>
    7442:	8a 50       	subi	r24, 0x0A	; 10
    7444:	9f 5f       	subi	r25, 0xFF	; 255
    7446:	8a 30       	cpi	r24, 0x0A	; 10
    7448:	e0 f7       	brcc	.-8      	; 0x7442 <putChar_Dec+0x24>
    744a:	91 11       	cpse	r25, r1
    744c:	02 c0       	rjmp	.+4      	; 0x7452 <putChar_Dec+0x34>
    744e:	2f 3f       	cpi	r18, 0xFF	; 255
    7450:	31 f4       	brne	.+12     	; 0x745e <putChar_Dec+0x40>
    7452:	fb 01       	movw	r30, r22
    7454:	31 96       	adiw	r30, 0x01	; 1
    7456:	90 5d       	subi	r25, 0xD0	; 208
    7458:	db 01       	movw	r26, r22
    745a:	9c 93       	st	X, r25
    745c:	01 c0       	rjmp	.+2      	; 0x7460 <putChar_Dec+0x42>
    745e:	fb 01       	movw	r30, r22
    7460:	80 5d       	subi	r24, 0xD0	; 208
    7462:	80 83       	st	Z, r24
    7464:	11 82       	std	Z+1, r1	; 0x01
    7466:	cf 01       	movw	r24, r30
    7468:	01 96       	adiw	r24, 0x01	; 1
    746a:	08 95       	ret

0000746c <putChar_hex>:
    746c:	fb 01       	movw	r30, r22
    746e:	98 2f       	mov	r25, r24
    7470:	92 95       	swap	r25
    7472:	9f 70       	andi	r25, 0x0F	; 15
    7474:	9a 30       	cpi	r25, 0x0A	; 10
    7476:	10 f0       	brcs	.+4      	; 0x747c <putChar_hex+0x10>
    7478:	99 5c       	subi	r25, 0xC9	; 201
    747a:	01 c0       	rjmp	.+2      	; 0x747e <putChar_hex+0x12>
    747c:	90 5d       	subi	r25, 0xD0	; 208
    747e:	90 83       	st	Z, r25
    7480:	98 2f       	mov	r25, r24
    7482:	9f 70       	andi	r25, 0x0F	; 15
    7484:	9f 01       	movw	r18, r30
    7486:	2e 5f       	subi	r18, 0xFE	; 254
    7488:	3f 4f       	sbci	r19, 0xFF	; 255
    748a:	9a 30       	cpi	r25, 0x0A	; 10
    748c:	10 f0       	brcs	.+4      	; 0x7492 <putChar_hex+0x26>
    748e:	99 5c       	subi	r25, 0xC9	; 201
    7490:	01 c0       	rjmp	.+2      	; 0x7494 <putChar_hex+0x28>
    7492:	90 5d       	subi	r25, 0xD0	; 208
    7494:	91 83       	std	Z+1, r25	; 0x01
    7496:	12 82       	std	Z+2, r1	; 0x02
    7498:	c9 01       	movw	r24, r18
    749a:	08 95       	ret

0000749c <putChar_MidiChan>:
    749c:	80 31       	cpi	r24, 0x10	; 16
    749e:	48 f0       	brcs	.+18     	; 0x74b2 <putChar_MidiChan+0x16>
    74a0:	8e e6       	ldi	r24, 0x6E	; 110
    74a2:	db 01       	movw	r26, r22
    74a4:	8c 93       	st	X, r24
    74a6:	fb 01       	movw	r30, r22
    74a8:	32 96       	adiw	r30, 0x02	; 2
    74aa:	8f e6       	ldi	r24, 0x6F	; 111
    74ac:	11 96       	adiw	r26, 0x01	; 1
    74ae:	8c 93       	st	X, r24
    74b0:	15 c0       	rjmp	.+42     	; 0x74dc <putChar_MidiChan+0x40>
    74b2:	91 e0       	ldi	r25, 0x01	; 1
    74b4:	98 0f       	add	r25, r24
    74b6:	9a 30       	cpi	r25, 0x0A	; 10
    74b8:	40 f0       	brcs	.+16     	; 0x74ca <putChar_MidiChan+0x2e>
    74ba:	db 01       	movw	r26, r22
    74bc:	11 96       	adiw	r26, 0x01	; 1
    74be:	91 e3       	ldi	r25, 0x31	; 49
    74c0:	fb 01       	movw	r30, r22
    74c2:	90 83       	st	Z, r25
    74c4:	97 ef       	ldi	r25, 0xF7	; 247
    74c6:	98 0f       	add	r25, r24
    74c8:	05 c0       	rjmp	.+10     	; 0x74d4 <putChar_MidiChan+0x38>
    74ca:	db 01       	movw	r26, r22
    74cc:	11 96       	adiw	r26, 0x01	; 1
    74ce:	80 e2       	ldi	r24, 0x20	; 32
    74d0:	fb 01       	movw	r30, r22
    74d2:	80 83       	st	Z, r24
    74d4:	fd 01       	movw	r30, r26
    74d6:	31 96       	adiw	r30, 0x01	; 1
    74d8:	90 5d       	subi	r25, 0xD0	; 208
    74da:	9c 93       	st	X, r25
    74dc:	10 82       	st	Z, r1
    74de:	cf 01       	movw	r24, r30
    74e0:	08 95       	ret

000074e2 <putChar_long>:
    74e2:	ac 01       	movw	r20, r24
    74e4:	fb 01       	movw	r30, r22
    74e6:	34 96       	adiw	r30, 0x04	; 4
    74e8:	db 01       	movw	r26, r22
    74ea:	14 96       	adiw	r26, 0x04	; 4
    74ec:	1c 92       	st	X, r1
    74ee:	20 e0       	ldi	r18, 0x00	; 0
    74f0:	10 c0       	rjmp	.+32     	; 0x7512 <putChar_long+0x30>
    74f2:	94 2f       	mov	r25, r20
    74f4:	9f 70       	andi	r25, 0x0F	; 15
    74f6:	31 97       	sbiw	r30, 0x01	; 1
    74f8:	9a 30       	cpi	r25, 0x0A	; 10
    74fa:	10 f0       	brcs	.+4      	; 0x7500 <putChar_long+0x1e>
    74fc:	99 5c       	subi	r25, 0xC9	; 201
    74fe:	01 c0       	rjmp	.+2      	; 0x7502 <putChar_long+0x20>
    7500:	90 5d       	subi	r25, 0xD0	; 208
    7502:	90 83       	st	Z, r25
    7504:	52 95       	swap	r21
    7506:	42 95       	swap	r20
    7508:	4f 70       	andi	r20, 0x0F	; 15
    750a:	45 27       	eor	r20, r21
    750c:	5f 70       	andi	r21, 0x0F	; 15
    750e:	45 27       	eor	r20, r21
    7510:	2f 5f       	subi	r18, 0xFF	; 255
    7512:	24 30       	cpi	r18, 0x04	; 4
    7514:	70 f3       	brcs	.-36     	; 0x74f2 <putChar_long+0x10>
    7516:	cf 01       	movw	r24, r30
    7518:	04 96       	adiw	r24, 0x04	; 4
    751a:	08 95       	ret

0000751c <putChar_Note>:
    751c:	88 23       	and	r24, r24
    751e:	8c f4       	brge	.+34     	; 0x7542 <putChar_Note+0x26>
    7520:	8d e2       	ldi	r24, 0x2D	; 45
    7522:	db 01       	movw	r26, r22
    7524:	8c 93       	st	X, r24
    7526:	9e e6       	ldi	r25, 0x6E	; 110
    7528:	11 96       	adiw	r26, 0x01	; 1
    752a:	9c 93       	st	X, r25
    752c:	11 97       	sbiw	r26, 0x01	; 1
    752e:	12 96       	adiw	r26, 0x02	; 2
    7530:	8c 93       	st	X, r24
    7532:	12 97       	sbiw	r26, 0x02	; 2
    7534:	14 96       	adiw	r26, 0x04	; 4
    7536:	fb 01       	movw	r30, r22
    7538:	13 82       	std	Z+3, r1	; 0x03
    753a:	49 c0       	rjmp	.+146    	; 0x75ce <putChar_Note+0xb2>
    753c:	8c 50       	subi	r24, 0x0C	; 12
    753e:	9f 5f       	subi	r25, 0xFF	; 255
    7540:	01 c0       	rjmp	.+2      	; 0x7544 <putChar_Note+0x28>
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	8c 30       	cpi	r24, 0x0C	; 12
    7546:	d0 f7       	brcc	.-12     	; 0x753c <putChar_Note+0x20>
    7548:	8b 30       	cpi	r24, 0x0B	; 11
    754a:	39 f4       	brne	.+14     	; 0x755a <putChar_Note+0x3e>
    754c:	fb 01       	movw	r30, r22
    754e:	31 96       	adiw	r30, 0x01	; 1
    7550:	88 e4       	ldi	r24, 0x48	; 72
    7552:	db 01       	movw	r26, r22
    7554:	8c 93       	st	X, r24
    7556:	8f e5       	ldi	r24, 0x5F	; 95
    7558:	27 c0       	rjmp	.+78     	; 0x75a8 <putChar_Note+0x8c>
    755a:	85 30       	cpi	r24, 0x05	; 5
    755c:	58 f4       	brcc	.+22     	; 0x7574 <putChar_Note+0x58>
    755e:	fb 01       	movw	r30, r22
    7560:	31 96       	adiw	r30, 0x01	; 1
    7562:	28 2f       	mov	r18, r24
    7564:	26 95       	lsr	r18
    7566:	2d 5b       	subi	r18, 0xBD	; 189
    7568:	db 01       	movw	r26, r22
    756a:	2c 93       	st	X, r18
    756c:	80 fd       	sbrc	r24, 0
    756e:	19 c0       	rjmp	.+50     	; 0x75a2 <putChar_Note+0x86>
    7570:	8f e5       	ldi	r24, 0x5F	; 95
    7572:	1a c0       	rjmp	.+52     	; 0x75a8 <putChar_Note+0x8c>
    7574:	89 30       	cpi	r24, 0x09	; 9
    7576:	30 f0       	brcs	.+12     	; 0x7584 <putChar_Note+0x68>
    7578:	fb 01       	movw	r30, r22
    757a:	31 96       	adiw	r30, 0x01	; 1
    757c:	21 e4       	ldi	r18, 0x41	; 65
    757e:	db 01       	movw	r26, r22
    7580:	2c 93       	st	X, r18
    7582:	0b c0       	rjmp	.+22     	; 0x759a <putChar_Note+0x7e>
    7584:	fb 01       	movw	r30, r22
    7586:	31 96       	adiw	r30, 0x01	; 1
    7588:	28 2f       	mov	r18, r24
    758a:	30 e0       	ldi	r19, 0x00	; 0
    758c:	25 50       	subi	r18, 0x05	; 5
    758e:	31 09       	sbc	r19, r1
    7590:	35 95       	asr	r19
    7592:	27 95       	ror	r18
    7594:	2a 5b       	subi	r18, 0xBA	; 186
    7596:	db 01       	movw	r26, r22
    7598:	2c 93       	st	X, r18
    759a:	80 ff       	sbrs	r24, 0
    759c:	04 c0       	rjmp	.+8      	; 0x75a6 <putChar_Note+0x8a>
    759e:	8f e5       	ldi	r24, 0x5F	; 95
    75a0:	03 c0       	rjmp	.+6      	; 0x75a8 <putChar_Note+0x8c>
    75a2:	83 e2       	ldi	r24, 0x23	; 35
    75a4:	01 c0       	rjmp	.+2      	; 0x75a8 <putChar_Note+0x8c>
    75a6:	83 e2       	ldi	r24, 0x23	; 35
    75a8:	80 83       	st	Z, r24
    75aa:	91 11       	cpse	r25, r1
    75ac:	05 c0       	rjmp	.+10     	; 0x75b8 <putChar_Note+0x9c>
    75ae:	df 01       	movw	r26, r30
    75b0:	12 96       	adiw	r26, 0x02	; 2
    75b2:	8d e6       	ldi	r24, 0x6D	; 109
    75b4:	81 83       	std	Z+1, r24	; 0x01
    75b6:	0b c0       	rjmp	.+22     	; 0x75ce <putChar_Note+0xb2>
    75b8:	9c 30       	cpi	r25, 0x0C	; 12
    75ba:	28 f4       	brcc	.+10     	; 0x75c6 <putChar_Note+0xaa>
    75bc:	df 01       	movw	r26, r30
    75be:	12 96       	adiw	r26, 0x02	; 2
    75c0:	91 5d       	subi	r25, 0xD1	; 209
    75c2:	91 83       	std	Z+1, r25	; 0x01
    75c4:	04 c0       	rjmp	.+8      	; 0x75ce <putChar_Note+0xb2>
    75c6:	df 01       	movw	r26, r30
    75c8:	12 96       	adiw	r26, 0x02	; 2
    75ca:	8d e2       	ldi	r24, 0x2D	; 45
    75cc:	81 83       	std	Z+1, r24	; 0x01
    75ce:	1c 92       	st	X, r1
    75d0:	cd 01       	movw	r24, r26
    75d2:	08 95       	ret

000075d4 <putChar_Manual>:
    75d4:	83 30       	cpi	r24, 0x03	; 3
    75d6:	38 f4       	brcc	.+14     	; 0x75e6 <putChar_Manual+0x12>
    75d8:	fb 01       	movw	r30, r22
    75da:	31 96       	adiw	r30, 0x01	; 1
    75dc:	93 e3       	ldi	r25, 0x33	; 51
    75de:	98 1b       	sub	r25, r24
    75e0:	db 01       	movw	r26, r22
    75e2:	9c 93       	st	X, r25
    75e4:	0d c0       	rjmp	.+26     	; 0x7600 <putChar_Manual+0x2c>
    75e6:	83 30       	cpi	r24, 0x03	; 3
    75e8:	31 f4       	brne	.+12     	; 0x75f6 <putChar_Manual+0x22>
    75ea:	fb 01       	movw	r30, r22
    75ec:	31 96       	adiw	r30, 0x01	; 1
    75ee:	80 e5       	ldi	r24, 0x50	; 80
    75f0:	db 01       	movw	r26, r22
    75f2:	8c 93       	st	X, r24
    75f4:	05 c0       	rjmp	.+10     	; 0x7600 <putChar_Manual+0x2c>
    75f6:	fb 01       	movw	r30, r22
    75f8:	31 96       	adiw	r30, 0x01	; 1
    75fa:	8d e2       	ldi	r24, 0x2D	; 45
    75fc:	db 01       	movw	r26, r22
    75fe:	8c 93       	st	X, r24
    7600:	10 82       	st	Z, r1
    7602:	cf 01       	movw	r24, r30
    7604:	08 95       	ret

00007606 <putString_P>:
    7606:	fc 01       	movw	r30, r24
    7608:	db 01       	movw	r26, r22
    760a:	20 e0       	ldi	r18, 0x00	; 0
    760c:	02 c0       	rjmp	.+4      	; 0x7612 <putString_P+0xc>
    760e:	28 2f       	mov	r18, r24
    7610:	da 01       	movw	r26, r20
    7612:	94 91       	lpm	r25, Z
    7614:	99 23       	and	r25, r25
    7616:	51 f0       	breq	.+20     	; 0x762c <putString_P+0x26>
    7618:	ad 01       	movw	r20, r26
    761a:	4f 5f       	subi	r20, 0xFF	; 255
    761c:	5f 4f       	sbci	r21, 0xFF	; 255
    761e:	31 96       	adiw	r30, 0x01	; 1
    7620:	9c 93       	st	X, r25
    7622:	81 e0       	ldi	r24, 0x01	; 1
    7624:	82 0f       	add	r24, r18
    7626:	24 31       	cpi	r18, 0x14	; 20
    7628:	90 f3       	brcs	.-28     	; 0x760e <putString_P+0x8>
    762a:	01 c0       	rjmp	.+2      	; 0x762e <putString_P+0x28>
    762c:	ad 01       	movw	r20, r26
    762e:	ca 01       	movw	r24, r20
    7630:	08 95       	ret

00007632 <putString_Prog>:
    7632:	fc 01       	movw	r30, r24
    7634:	80 e5       	ldi	r24, 0x50	; 80
    7636:	80 83       	st	Z, r24
    7638:	96 2f       	mov	r25, r22
    763a:	96 95       	lsr	r25
    763c:	96 95       	lsr	r25
    763e:	96 95       	lsr	r25
    7640:	97 70       	andi	r25, 0x07	; 7
    7642:	9f 5b       	subi	r25, 0xBF	; 191
    7644:	91 83       	std	Z+1, r25	; 0x01
    7646:	67 70       	andi	r22, 0x07	; 7
    7648:	6f 5c       	subi	r22, 0xCF	; 207
    764a:	62 83       	std	Z+2, r22	; 0x02
    764c:	cf 01       	movw	r24, r30
    764e:	03 96       	adiw	r24, 0x03	; 3
    7650:	08 95       	ret

00007652 <lcd_wordout>:
    7652:	cf 93       	push	r28
    7654:	c8 2f       	mov	r28, r24
    7656:	89 2f       	mov	r24, r25
    7658:	70 de       	rcall	.-800    	; 0x733a <lcd_hexout>
    765a:	8c 2f       	mov	r24, r28
    765c:	6e de       	rcall	.-804    	; 0x733a <lcd_hexout>
    765e:	cf 91       	pop	r28
    7660:	08 95       	ret

00007662 <lcd_noteOut>:
    7662:	cf 93       	push	r28
    7664:	df 93       	push	r29
    7666:	88 23       	and	r24, r24
    7668:	e4 f1       	brlt	.+120    	; 0x76e2 <lcd_noteOut+0x80>
    766a:	90 e0       	ldi	r25, 0x00	; 0
    766c:	02 c0       	rjmp	.+4      	; 0x7672 <lcd_noteOut+0x10>
    766e:	9f 5f       	subi	r25, 0xFF	; 255
    7670:	8c 50       	subi	r24, 0x0C	; 12
    7672:	8c 30       	cpi	r24, 0x0C	; 12
    7674:	e0 f7       	brcc	.-8      	; 0x766e <lcd_noteOut+0xc>
    7676:	48 2f       	mov	r20, r24
    7678:	50 e0       	ldi	r21, 0x00	; 0
    767a:	4c 30       	cpi	r20, 0x0C	; 12
    767c:	51 05       	cpc	r21, r1
    767e:	30 f4       	brcc	.+12     	; 0x768c <lcd_noteOut+0x2a>
    7680:	fa 01       	movw	r30, r20
    7682:	88 27       	eor	r24, r24
    7684:	ea 55       	subi	r30, 0x5A	; 90
    7686:	ff 4f       	sbci	r31, 0xFF	; 255
    7688:	8f 4f       	sbci	r24, 0xFF	; 255
    768a:	5d c1       	rjmp	.+698    	; 0x7946 <__tablejump2__>
    768c:	d3 e2       	ldi	r29, 0x23	; 35
    768e:	80 e2       	ldi	r24, 0x20	; 32
    7690:	23 c0       	rjmp	.+70     	; 0x76d8 <lcd_noteOut+0x76>
    7692:	d3 e2       	ldi	r29, 0x23	; 35
    7694:	84 e4       	ldi	r24, 0x44	; 68
    7696:	20 c0       	rjmp	.+64     	; 0x76d8 <lcd_noteOut+0x76>
    7698:	d3 e2       	ldi	r29, 0x23	; 35
    769a:	86 e4       	ldi	r24, 0x46	; 70
    769c:	1d c0       	rjmp	.+58     	; 0x76d8 <lcd_noteOut+0x76>
    769e:	d3 e2       	ldi	r29, 0x23	; 35
    76a0:	87 e4       	ldi	r24, 0x47	; 71
    76a2:	1a c0       	rjmp	.+52     	; 0x76d8 <lcd_noteOut+0x76>
    76a4:	d3 e2       	ldi	r29, 0x23	; 35
    76a6:	81 e4       	ldi	r24, 0x41	; 65
    76a8:	17 c0       	rjmp	.+46     	; 0x76d8 <lcd_noteOut+0x76>
    76aa:	d5 ea       	ldi	r29, 0xA5	; 165
    76ac:	83 e4       	ldi	r24, 0x43	; 67
    76ae:	14 c0       	rjmp	.+40     	; 0x76d8 <lcd_noteOut+0x76>
    76b0:	d5 ea       	ldi	r29, 0xA5	; 165
    76b2:	84 e4       	ldi	r24, 0x44	; 68
    76b4:	11 c0       	rjmp	.+34     	; 0x76d8 <lcd_noteOut+0x76>
    76b6:	d5 ea       	ldi	r29, 0xA5	; 165
    76b8:	85 e4       	ldi	r24, 0x45	; 69
    76ba:	0e c0       	rjmp	.+28     	; 0x76d8 <lcd_noteOut+0x76>
    76bc:	d5 ea       	ldi	r29, 0xA5	; 165
    76be:	86 e4       	ldi	r24, 0x46	; 70
    76c0:	0b c0       	rjmp	.+22     	; 0x76d8 <lcd_noteOut+0x76>
    76c2:	d5 ea       	ldi	r29, 0xA5	; 165
    76c4:	87 e4       	ldi	r24, 0x47	; 71
    76c6:	08 c0       	rjmp	.+16     	; 0x76d8 <lcd_noteOut+0x76>
    76c8:	d5 ea       	ldi	r29, 0xA5	; 165
    76ca:	81 e4       	ldi	r24, 0x41	; 65
    76cc:	05 c0       	rjmp	.+10     	; 0x76d8 <lcd_noteOut+0x76>
    76ce:	d5 ea       	ldi	r29, 0xA5	; 165
    76d0:	88 e4       	ldi	r24, 0x48	; 72
    76d2:	02 c0       	rjmp	.+4      	; 0x76d8 <lcd_noteOut+0x76>
    76d4:	d3 e2       	ldi	r29, 0x23	; 35
    76d6:	83 e4       	ldi	r24, 0x43	; 67
    76d8:	99 23       	and	r25, r25
    76da:	39 f0       	breq	.+14     	; 0x76ea <lcd_noteOut+0x88>
    76dc:	cf e2       	ldi	r28, 0x2F	; 47
    76de:	c9 0f       	add	r28, r25
    76e0:	05 c0       	rjmp	.+10     	; 0x76ec <lcd_noteOut+0x8a>
    76e2:	cd e2       	ldi	r28, 0x2D	; 45
    76e4:	dd e2       	ldi	r29, 0x2D	; 45
    76e6:	8d e2       	ldi	r24, 0x2D	; 45
    76e8:	01 c0       	rjmp	.+2      	; 0x76ec <lcd_noteOut+0x8a>
    76ea:	cd e2       	ldi	r28, 0x2D	; 45
    76ec:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76f0:	8d 2f       	mov	r24, r29
    76f2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76f6:	8c 2f       	mov	r24, r28
    76f8:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76fc:	83 e0       	ldi	r24, 0x03	; 3
    76fe:	df 91       	pop	r29
    7700:	cf 91       	pop	r28
    7702:	08 95       	ret

00007704 <lcd_ChannelOut>:
    7704:	cf 93       	push	r28
    7706:	c8 2f       	mov	r28, r24
    7708:	cf 70       	andi	r28, 0x0F	; 15
    770a:	81 e0       	ldi	r24, 0x01	; 1
    770c:	8c 0f       	add	r24, r28
    770e:	8a 30       	cpi	r24, 0x0A	; 10
    7710:	28 f0       	brcs	.+10     	; 0x771c <lcd_ChannelOut+0x18>
    7712:	81 e3       	ldi	r24, 0x31	; 49
    7714:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7718:	87 ef       	ldi	r24, 0xF7	; 247
    771a:	8c 0f       	add	r24, r28
    771c:	80 5d       	subi	r24, 0xD0	; 208
    771e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7722:	cf 91       	pop	r28
    7724:	08 95       	ret

00007726 <lcd_ManualOutDec>:
    7726:	84 30       	cpi	r24, 0x04	; 4
    7728:	20 f0       	brcs	.+8      	; 0x7732 <lcd_ManualOutDec+0xc>
    772a:	8d e2       	ldi	r24, 0x2D	; 45
    772c:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    7730:	08 95       	ret
    7732:	83 30       	cpi	r24, 0x03	; 3
    7734:	21 f4       	brne	.+8      	; 0x773e <lcd_ManualOutDec+0x18>
    7736:	80 e5       	ldi	r24, 0x50	; 80
    7738:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    773c:	08 95       	ret
    773e:	93 e3       	ldi	r25, 0x33	; 51
    7740:	98 1b       	sub	r25, r24
    7742:	89 2f       	mov	r24, r25
    7744:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    7748:	08 95       	ret

0000774a <lcd_blank>:
    774a:	cf 93       	push	r28
    774c:	04 c0       	rjmp	.+8      	; 0x7756 <lcd_blank+0xc>
    774e:	80 e2       	ldi	r24, 0x20	; 32
    7750:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7754:	8c 2f       	mov	r24, r28
    7756:	cf ef       	ldi	r28, 0xFF	; 255
    7758:	c8 0f       	add	r28, r24
    775a:	81 11       	cpse	r24, r1
    775c:	f8 cf       	rjmp	.-16     	; 0x774e <lcd_blank+0x4>
    775e:	cf 91       	pop	r28
    7760:	08 95       	ret

00007762 <lcd_clrEol>:
    7762:	cf 93       	push	r28
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	04 c0       	rjmp	.+8      	; 0x7770 <lcd_clrEol+0xe>
    7768:	80 e2       	ldi	r24, 0x20	; 32
    776a:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    776e:	9c 2f       	mov	r25, r28
    7770:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7774:	84 31       	cpi	r24, 0x14	; 20
    7776:	51 f0       	breq	.+20     	; 0x778c <lcd_clrEol+0x2a>
    7778:	84 35       	cpi	r24, 0x54	; 84
    777a:	41 f0       	breq	.+16     	; 0x778c <lcd_clrEol+0x2a>
    777c:	88 32       	cpi	r24, 0x28	; 40
    777e:	31 f0       	breq	.+12     	; 0x778c <lcd_clrEol+0x2a>
    7780:	88 36       	cpi	r24, 0x68	; 104
    7782:	21 f0       	breq	.+8      	; 0x778c <lcd_clrEol+0x2a>
    7784:	c1 e0       	ldi	r28, 0x01	; 1
    7786:	c9 0f       	add	r28, r25
    7788:	94 31       	cpi	r25, 0x14	; 20
    778a:	70 f3       	brcs	.-36     	; 0x7768 <lcd_clrEol+0x6>
    778c:	cf 91       	pop	r28
    778e:	08 95       	ret

00007790 <lcd_cursosblink>:
    7790:	8d e0       	ldi	r24, 0x0D	; 13
    7792:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    7796:	8f ef       	ldi	r24, 0xFF	; 255
    7798:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <lcd_cursorIsOn>
    779c:	08 95       	ret

0000779e <lcd_cursoroff>:
    779e:	8c e0       	ldi	r24, 0x0C	; 12
    77a0:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    77a4:	10 92 db 18 	sts	0x18DB, r1	; 0x8018db <lcd_cursorIsOn>
    77a8:	08 95       	ret

000077aa <lcd_waitSymbolOn>:
    77aa:	cf 93       	push	r28
    77ac:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    77b0:	8c e0       	ldi	r24, 0x0C	; 12
    77b2:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77b6:	81 ea       	ldi	r24, 0xA1	; 161
    77b8:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    77bc:	8c 2f       	mov	r24, r28
    77be:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77c2:	cf 91       	pop	r28
    77c4:	08 95       	ret

000077c6 <lcd_waitSymbolOff>:
    77c6:	cf 93       	push	r28
    77c8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    77cc:	8c e0       	ldi	r24, 0x0C	; 12
    77ce:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77d2:	80 e2       	ldi	r24, 0x20	; 32
    77d4:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    77d8:	8c 2f       	mov	r24, r28
    77da:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77de:	cf 91       	pop	r28
    77e0:	08 95       	ret

000077e2 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    77e2:	84 30       	cpi	r24, 0x04	; 4
    77e4:	28 f0       	brcs	.+10     	; 0x77f0 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    77e6:	20 e0       	ldi	r18, 0x00	; 0
    77e8:	0d c0       	rjmp	.+26     	; 0x7804 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    77ea:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    77ec:	fa 01       	movw	r30, r20
    77ee:	02 c0       	rjmp	.+4      	; 0x77f4 <keylabel_set+0x12>
    77f0:	fb 01       	movw	r30, r22
    77f2:	20 e0       	ldi	r18, 0x00	; 0
    77f4:	af 01       	movw	r20, r30
    77f6:	4f 5f       	subi	r20, 0xFF	; 255
    77f8:	5f 4f       	sbci	r21, 0xFF	; 255
    77fa:	94 91       	lpm	r25, Z
    77fc:	99 23       	and	r25, r25
    77fe:	11 f0       	breq	.+4      	; 0x7804 <keylabel_set+0x22>
    7800:	25 30       	cpi	r18, 0x05	; 5
    7802:	98 f3       	brcs	.-26     	; 0x77ea <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	dc 01       	movw	r26, r24
    7808:	aa 0f       	add	r26, r26
    780a:	bb 1f       	adc	r27, r27
    780c:	aa 0f       	add	r26, r26
    780e:	bb 1f       	adc	r27, r27
    7810:	8a 0f       	add	r24, r26
    7812:	9b 1f       	adc	r25, r27
    7814:	dc 01       	movw	r26, r24
    7816:	af 5e       	subi	r26, 0xEF	; 239
    7818:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    781a:	45 e0       	ldi	r20, 0x05	; 5
    781c:	50 e0       	ldi	r21, 0x00	; 0
    781e:	42 1b       	sub	r20, r18
    7820:	51 09       	sbc	r21, r1
    7822:	ca 01       	movw	r24, r20
    7824:	99 23       	and	r25, r25
    7826:	0c f4       	brge	.+2      	; 0x782a <keylabel_set+0x48>
    7828:	01 96       	adiw	r24, 0x01	; 1
    782a:	95 95       	asr	r25
    782c:	87 95       	ror	r24
    782e:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7830:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7832:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7834:	0e c0       	rjmp	.+28     	; 0x7852 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7836:	93 17       	cp	r25, r19
    7838:	10 f0       	brcs	.+4      	; 0x783e <keylabel_set+0x5c>
    783a:	98 17       	cp	r25, r24
    783c:	18 f0       	brcs	.+6      	; 0x7844 <keylabel_set+0x62>
			*charBufPtr = ' ';
    783e:	20 e2       	ldi	r18, 0x20	; 32
    7840:	2c 93       	st	X, r18
    7842:	05 c0       	rjmp	.+10     	; 0x784e <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7844:	fb 01       	movw	r30, r22
    7846:	24 91       	lpm	r18, Z
    7848:	2c 93       	st	X, r18
    784a:	6f 5f       	subi	r22, 0xFF	; 255
    784c:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    784e:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7850:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7852:	95 30       	cpi	r25, 0x05	; 5
    7854:	80 f3       	brcs	.-32     	; 0x7836 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7856:	08 95       	ret

00007858 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	fc 01       	movw	r30, r24
    785c:	ee 0f       	add	r30, r30
    785e:	ff 1f       	adc	r31, r31
    7860:	ee 0f       	add	r30, r30
    7862:	ff 1f       	adc	r31, r31
    7864:	8e 0f       	add	r24, r30
    7866:	9f 1f       	adc	r25, r31
    7868:	fc 01       	movw	r30, r24
    786a:	ef 5e       	subi	r30, 0xEF	; 239
    786c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    786e:	80 e0       	ldi	r24, 0x00	; 0
    7870:	04 c0       	rjmp	.+8      	; 0x787a <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7872:	90 e2       	ldi	r25, 0x20	; 32
    7874:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7876:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7878:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    787a:	85 30       	cpi	r24, 0x05	; 5
    787c:	d0 f3       	brcs	.-12     	; 0x7872 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    787e:	08 95       	ret

00007880 <keylabel_toLCD>:

void keylabel_toLCD(){
    7880:	0f 93       	push	r16
    7882:	1f 93       	push	r17
    7884:	cf 93       	push	r28
    7886:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7888:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    788c:	84 e5       	ldi	r24, 0x54	; 84
    788e:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7892:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7894:	e1 e1       	ldi	r30, 0x11	; 17
    7896:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7898:	08 c0       	rjmp	.+16     	; 0x78aa <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    789a:	8f 01       	movw	r16, r30
    789c:	0f 5f       	subi	r16, 0xFF	; 255
    789e:	1f 4f       	sbci	r17, 0xFF	; 255
    78a0:	80 81       	ld	r24, Z
    78a2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    78a6:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    78a8:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    78aa:	c4 31       	cpi	r28, 0x14	; 20
    78ac:	b0 f3       	brcs	.-20     	; 0x789a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    78ae:	8d 2f       	mov	r24, r29
    78b0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
}
    78b4:	df 91       	pop	r29
    78b6:	cf 91       	pop	r28
    78b8:	1f 91       	pop	r17
    78ba:	0f 91       	pop	r16
    78bc:	08 95       	ret

000078be <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    78be:	90 e0       	ldi	r25, 0x00	; 0
    78c0:	fc 01       	movw	r30, r24
    78c2:	ee 0f       	add	r30, r30
    78c4:	ff 1f       	adc	r31, r31
    78c6:	ee 0f       	add	r30, r30
    78c8:	ff 1f       	adc	r31, r31
    78ca:	8e 0f       	add	r24, r30
    78cc:	9f 1f       	adc	r25, r31
    78ce:	fc 01       	movw	r30, r24
    78d0:	ef 5e       	subi	r30, 0xEF	; 239
    78d2:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78d4:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    78d6:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78d8:	12 c0       	rjmp	.+36     	; 0x78fe <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    78da:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    78dc:	61 11       	cpse	r22, r1
    78de:	06 c0       	rjmp	.+12     	; 0x78ec <keylabel_statcheck+0x2e>
    78e0:	2a 30       	cpi	r18, 0x0A	; 10
    78e2:	21 f4       	brne	.+8      	; 0x78ec <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    78e4:	80 e8       	ldi	r24, 0x80	; 128
    78e6:	80 83       	st	Z, r24
			result = 0xFF;
    78e8:	8f ef       	ldi	r24, 0xFF	; 255
    78ea:	07 c0       	rjmp	.+14     	; 0x78fa <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    78ec:	66 23       	and	r22, r22
    78ee:	29 f0       	breq	.+10     	; 0x78fa <keylabel_statcheck+0x3c>
    78f0:	20 38       	cpi	r18, 0x80	; 128
    78f2:	19 f4       	brne	.+6      	; 0x78fa <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    78f4:	8a e0       	ldi	r24, 0x0A	; 10
    78f6:	80 83       	st	Z, r24
			result = 0xFF;
    78f8:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    78fa:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78fc:	9f 5f       	subi	r25, 0xFF	; 255
    78fe:	95 30       	cpi	r25, 0x05	; 5
    7900:	60 f3       	brcs	.-40     	; 0x78da <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7902:	08 95       	ret

00007904 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7904:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7906:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7908:	94 91       	lpm	r25, Z
    790a:	99 23       	and	r25, r25
    790c:	21 f0       	breq	.+8      	; 0x7916 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    790e:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7910:	8f 5f       	subi	r24, 0xFF	; 255
    7912:	80 32       	cpi	r24, 0x20	; 32
    7914:	c8 f3       	brcs	.-14     	; 0x7908 <get_StrLenP+0x4>
	return result;
}
    7916:	08 95       	ret

00007918 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7918:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    791a:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    791c:	90 81       	ld	r25, Z
    791e:	99 23       	and	r25, r25
    7920:	21 f0       	breq	.+8      	; 0x792a <get_StrLen+0x12>
			return result;
		}
		pString++;
    7922:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7924:	8f 5f       	subi	r24, 0xFF	; 255
    7926:	80 32       	cpi	r24, 0x20	; 32
    7928:	c8 f3       	brcs	.-14     	; 0x791c <get_StrLen+0x4>
	return result;
}
    792a:	08 95       	ret

0000792c <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    792c:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    792e:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7930:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7932:	06 c0       	rjmp	.+12     	; 0x7940 <reverse_Bits+0x14>
		result = result << 1;
    7934:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7936:	32 2f       	mov	r19, r18
    7938:	31 70       	andi	r19, 0x01	; 1
    793a:	83 2b       	or	r24, r19
		val = val >> 1;
    793c:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    793e:	9f 5f       	subi	r25, 0xFF	; 255
    7940:	98 30       	cpi	r25, 0x08	; 8
    7942:	c0 f3       	brcs	.-16     	; 0x7934 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7944:	08 95       	ret

00007946 <__tablejump2__>:
    7946:	ee 0f       	add	r30, r30
    7948:	ff 1f       	adc	r31, r31
    794a:	88 1f       	adc	r24, r24
    794c:	8b bf       	out	0x3b, r24	; 59
    794e:	07 90       	elpm	r0, Z+
    7950:	f6 91       	elpm	r31, Z
    7952:	e0 2d       	mov	r30, r0
    7954:	19 94       	eijmp

00007956 <eeprom_read_block>:
    7956:	dc 01       	movw	r26, r24
    7958:	cb 01       	movw	r24, r22

0000795a <eeprom_read_blraw>:
    795a:	fc 01       	movw	r30, r24
    795c:	f9 99       	sbic	0x1f, 1	; 31
    795e:	fe cf       	rjmp	.-4      	; 0x795c <eeprom_read_blraw+0x2>
    7960:	06 c0       	rjmp	.+12     	; 0x796e <eeprom_read_blraw+0x14>
    7962:	f2 bd       	out	0x22, r31	; 34
    7964:	e1 bd       	out	0x21, r30	; 33
    7966:	f8 9a       	sbi	0x1f, 0	; 31
    7968:	31 96       	adiw	r30, 0x01	; 1
    796a:	00 b4       	in	r0, 0x20	; 32
    796c:	0d 92       	st	X+, r0
    796e:	41 50       	subi	r20, 0x01	; 1
    7970:	50 40       	sbci	r21, 0x00	; 0
    7972:	b8 f7       	brcc	.-18     	; 0x7962 <eeprom_read_blraw+0x8>
    7974:	08 95       	ret

00007976 <eeprom_read_byte>:
    7976:	f9 99       	sbic	0x1f, 1	; 31
    7978:	fe cf       	rjmp	.-4      	; 0x7976 <eeprom_read_byte>
    797a:	92 bd       	out	0x22, r25	; 34
    797c:	81 bd       	out	0x21, r24	; 33
    797e:	f8 9a       	sbi	0x1f, 0	; 31
    7980:	99 27       	eor	r25, r25
    7982:	80 b5       	in	r24, 0x20	; 32
    7984:	08 95       	ret

00007986 <eeprom_read_word>:
    7986:	a8 e1       	ldi	r26, 0x18	; 24
    7988:	b0 e0       	ldi	r27, 0x00	; 0
    798a:	42 e0       	ldi	r20, 0x02	; 2
    798c:	50 e0       	ldi	r21, 0x00	; 0
    798e:	e5 cf       	rjmp	.-54     	; 0x795a <eeprom_read_blraw>

00007990 <eeprom_update_block>:
    7990:	dc 01       	movw	r26, r24
    7992:	a4 0f       	add	r26, r20
    7994:	b5 1f       	adc	r27, r21
    7996:	41 50       	subi	r20, 0x01	; 1
    7998:	50 40       	sbci	r21, 0x00	; 0
    799a:	40 f0       	brcs	.+16     	; 0x79ac <eeprom_update_block+0x1c>
    799c:	cb 01       	movw	r24, r22
    799e:	84 0f       	add	r24, r20
    79a0:	95 1f       	adc	r25, r21
    79a2:	2e 91       	ld	r18, -X
    79a4:	05 d0       	rcall	.+10     	; 0x79b0 <eeprom_update_r18>
    79a6:	41 50       	subi	r20, 0x01	; 1
    79a8:	50 40       	sbci	r21, 0x00	; 0
    79aa:	d8 f7       	brcc	.-10     	; 0x79a2 <eeprom_update_block+0x12>
    79ac:	08 95       	ret

000079ae <eeprom_update_byte>:
    79ae:	26 2f       	mov	r18, r22

000079b0 <eeprom_update_r18>:
    79b0:	f9 99       	sbic	0x1f, 1	; 31
    79b2:	fe cf       	rjmp	.-4      	; 0x79b0 <eeprom_update_r18>
    79b4:	92 bd       	out	0x22, r25	; 34
    79b6:	81 bd       	out	0x21, r24	; 33
    79b8:	f8 9a       	sbi	0x1f, 0	; 31
    79ba:	01 97       	sbiw	r24, 0x01	; 1
    79bc:	00 b4       	in	r0, 0x20	; 32
    79be:	02 16       	cp	r0, r18
    79c0:	39 f0       	breq	.+14     	; 0x79d0 <eeprom_update_r18+0x20>
    79c2:	1f ba       	out	0x1f, r1	; 31
    79c4:	20 bd       	out	0x20, r18	; 32
    79c6:	0f b6       	in	r0, 0x3f	; 63
    79c8:	f8 94       	cli
    79ca:	fa 9a       	sbi	0x1f, 2	; 31
    79cc:	f9 9a       	sbi	0x1f, 1	; 31
    79ce:	0f be       	out	0x3f, r0	; 63
    79d0:	08 95       	ret

000079d2 <eeprom_update_word>:
    79d2:	01 96       	adiw	r24, 0x01	; 1
    79d4:	27 2f       	mov	r18, r23
    79d6:	ec df       	rcall	.-40     	; 0x79b0 <eeprom_update_r18>
    79d8:	ea cf       	rjmp	.-44     	; 0x79ae <eeprom_update_byte>

000079da <_exit>:
    79da:	f8 94       	cli

000079dc <__stop_program>:
    79dc:	ff cf       	rjmp	.-2      	; 0x79dc <__stop_program>
