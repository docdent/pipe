
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00007fae  00008062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007fae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001722  00800228  00800228  0000808a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  0000808a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000908a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000090bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000ba0  00000000  00000000  00009100  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fc1c  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026eb  00000000  00000000  000198bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000924f  00000000  00000000  0001bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d2c  00000000  00000000  000251f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000036ac  00000000  00000000  00026f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a055  00000000  00000000  0002a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f88  00000000  00000000  00034625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__ctors_end>
       4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
       8:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
       c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      10:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      14:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      18:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      1c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      20:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      24:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      28:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      2c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      30:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      34:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      38:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      3c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      40:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      44:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      48:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      4c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      50:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      54:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_21>
      58:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      5c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      60:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      64:	0c 94 d1 3a 	jmp	0x75a2	; 0x75a2 <__vector_25>
      68:	0c 94 17 3b 	jmp	0x762e	; 0x762e <__vector_26>
      6c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      70:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      74:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      78:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      7c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      80:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      84:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      88:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      8c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      90:	0c 94 e4 38 	jmp	0x71c8	; 0x71c8 <__vector_36>
      94:	0c 94 39 39 	jmp	0x7272	; 0x7272 <__vector_37>
      98:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      9c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      a0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      a4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      a8:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      ac:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      b0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      b4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      b8:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      bc:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      c0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      c4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      c8:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      cc:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      d0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      d4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      d8:	0c 94 d7 3b 	jmp	0x77ae	; 0x77ae <__vector_54>
      dc:	0c 94 2f 3c 	jmp	0x785e	; 0x785e <__vector_55>
      e0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__bad_interrupt>
      e4:	47 23       	and	r20, r23
      e6:	52 23       	and	r21, r18
      e8:	5e 23       	and	r21, r30
      ea:	7a 23       	and	r23, r26
      ec:	97 23       	and	r25, r23
      ee:	b8 23       	and	r27, r24
      f0:	c3 23       	and	r28, r19
      f2:	ce 23       	and	r28, r30
      f4:	e3 23       	and	r30, r19
      f6:	f9 23       	and	r31, r25
      f8:	01 24       	eor	r0, r1
      fa:	0f 24       	eor	r0, r15
      fc:	e3 23       	and	r30, r19
      fe:	3c 24       	eor	r3, r12
     100:	4c 24       	eor	r4, r12
     102:	70 24       	eor	r7, r0
     104:	c2 24       	eor	r12, r2
     106:	db 24       	eor	r13, r11
     108:	f0 24       	eor	r15, r0
     10a:	09 25       	eor	r16, r9
     10c:	11 25       	eor	r17, r1
     10e:	36 25       	eor	r19, r6
     110:	36 25       	eor	r19, r6
     112:	4f 25       	eor	r20, r15
     114:	5c 25       	eor	r21, r12
     116:	4b 25       	eor	r20, r11
     118:	b7 25       	eor	r27, r7
     11a:	bf 25       	eor	r27, r15
     11c:	0a 26       	eor	r0, r26
     11e:	6c 26       	eor	r6, r28
     120:	96 26       	eor	r9, r22
     122:	c2 26       	eor	r12, r18
     124:	f1 26       	eor	r15, r17
     126:	f9 26       	eor	r15, r25
     128:	ff 26       	eor	r15, r31
     12a:	b7 25       	eor	r27, r7
     12c:	07 27       	eor	r16, r23
     12e:	1b 27       	eor	r17, r27
     130:	ff 26       	eor	r15, r31
     132:	59 27       	eor	r21, r25
     134:	66 27       	eor	r22, r22
     136:	72 27       	eor	r23, r18
     138:	87 27       	eor	r24, r23
     13a:	a0 27       	eor	r26, r16
     13c:	c3 27       	eor	r28, r19
     13e:	ce 27       	eor	r28, r30
     140:	d4 27       	eor	r29, r20
     142:	d9 27       	eor	r29, r25
     144:	ec 27       	eor	r30, r28
     146:	0d 28       	or	r0, r13
     148:	20 28       	or	r2, r0
     14a:	d9 27       	eor	r29, r25
     14c:	4a 3e       	cpi	r20, 0xEA	; 234
     14e:	5f 3e       	cpi	r21, 0xEF	; 239
     150:	4d 3e       	cpi	r20, 0xED	; 237
     152:	3e 3e       	cpi	r19, 0xEE	; 238
     154:	50 3e       	cpi	r21, 0xE0	; 224
     156:	53 3e       	cpi	r21, 0xE3	; 227
     158:	41 3e       	cpi	r20, 0xE1	; 225
     15a:	56 3e       	cpi	r21, 0xE6	; 230
     15c:	44 3e       	cpi	r20, 0xE4	; 228
     15e:	59 3e       	cpi	r21, 0xE9	; 233
     160:	47 3e       	cpi	r20, 0xE7	; 231
     162:	5c 3e       	cpi	r21, 0xEC	; 236

00000164 <__trampolines_end>:
     164:	1b 1b       	sub	r17, r27
     166:	1b 1b       	sub	r17, r27
     168:	1b 1b       	sub	r17, r27
     16a:	1b 00       	.word	0x001b	; ????

0000016c <cgPattern_RegOnOff>:
     16c:	1b 1b 18 18 18 18 18 00                             ........

00000174 <cgPattern_RegOffOn>:
     174:	1b 1b 03 03 03 03 03 00                             ........

0000017c <cgPattern_RegOffOff>:
     17c:	1b 1b 00 00 00 00 00 00                             ........

00000184 <cgPattern_RegOn>:
     184:	18 18 18 18 18 18 18 00                             ........

0000018c <cgPattern_RegOff>:
     18c:	18 18 00 00 00 00 00 00                             ........

00000194 <cgPattern_Down>:
     194:	04 04 04 04 15 0e 04 00                             ........

0000019c <cgPattern_Up>:
     19c:	04 0e 15 04 04 04 04 00                             ........

000001a4 <stringLog>:
     1a4:	4c 6f 67 3a 20 00                                   Log: .

000001aa <ErrorText>:
     1aa:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     1ba:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     1ca:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     1da:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1ea:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1fa:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     20a:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     21a:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     22a:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     23a:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     24a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     25a:	00 00 00 00 01 09 45 45 3a 52 65 67 4f 75 74 00     ......EE:RegOut.
     26a:	00 00 00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c     ........Mod:Fail
	...
     282:	02 01 4d 6f 64 3a 55 6e 6b 6e 6f 77 49 6e 70 00     ..Mod:UnknowInp.
     292:	00 00 03 00 4f 56 46 4c 3a 4d 69 64 69 49 6e 00     ....OVFL:MidiIn.
     2a2:	00 00 00 00 03 01 4f 56 46 4c 3a 4d 69 64 69 4f     ......OVFL:MidiO
     2b2:	75 74 00 00 00 00 04 00 4f 56 46 4c 3a 50 69 70     ut......OVFL:Pip
     2c2:	65 4d 73 67 00 00 00 00 05 00 50 77 72 3a 4f 75     eMsg......Pwr:Ou
     2d2:	70 74 75 74 4f 6e 00 00 00 00                       ptutOn....

000002dc <panicString>:
     2dc:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

000002e5 <releaseKeyString>:
     2e5:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2f5:	6e 00                                               n.

000002f7 <prog_name>:
     2f7:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000306 <usbHWnone>:
     306:	6e 6f 6e 65 00                                      none.

0000030b <usbHWmidiThru>:
     30b:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

00000317 <usbHWmidiOut>:
     317:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

00000321 <usbHWmidiIn>:
     321:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

0000032a <usbHWmidichanSW>:
     32a:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     33a:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     34a:	20 00                                                .

0000034c <usbHWBits>:
     34c:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000354 <usbHWmodule>:
     354:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000035c <usbHWempty>:
     35c:	65 6d 70 74 79 00                                   empty.

00000362 <usbHWRegister>:
     362:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000036e <usbHWRange>:
     36e:	52 61 6e 67 65 20 00                                Range .

00000375 <usbHWManual>:
     375:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000037e <usbHWmodulCheck>:
     37e:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     38e:	20 00                                                .

00000390 <usbHWmodulInst>:
     390:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     3a0:	3a 20 00                                            : .

000003a3 <usbHWtitel>:
     3a3:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     3b3:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000003bc <HelloMsg>:
     3bc:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     3cc:	65 72 66 61 63 65 0d 0a 00                          erface...

000003d5 <usbLog>:
     3d5:	4c 6f 67 0d 0a 00                                   Log...

000003db <usbEmpty>:
     3db:	65 6d 70 74 79 0d 0a 00                             empty...

000003e3 <msg_programming1>:
     3e3:	73 61 76 65 2e 2e 2e 00                             save....

000003eb <logNone>:
     3eb:	3c 6e 6f 6e 65 3e 00                                <none>.

000003f2 <stringNotAssigen>:
     3f2:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003fd <menuMessageE>:
     3fd:	45 3a 00                                            E:.

00000400 <menuMessageOK>:
     400:	6f 6b 20 00                                         ok .

00000404 <menuMessageAbort>:
     404:	61 62 6f 72 74 00                                   abort.

0000040a <menuMessageMIDIpanic>:
     40a:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

00000419 <messageRegisterMan>:
     419:	2b 00                                               +.

0000041b <messageLoaded>:
     41b:	20 52 65 67 00                                       Reg.

00000420 <messageSaved>:
     420:	20 52 65 67 20 7e 20 00                              Reg ~ .

00000428 <MenuMIDIOutText>:
     428:	4f 75 74 3a 00                                      Out:.

0000042d <MenuMIDIInText>:
     42d:	49 6e 3a 00                                         In:.

00000431 <initMenuText>:
     431:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

0000043b <nibbleInfo>:
	...
     443:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     453:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     463:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     473:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     483:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     493:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     4a3:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     4b3:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

000004c2 <menu_selFunc>:
     4c2:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 1e 08     ..<none>........
     4d2:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     4e2:	28 08 14 08 00 00 00 00 01 10 53 74 69 6d 6d 65     (.........Stimme
     4f2:	6e 00 00 00 f0 0d 0a 08 00 00 00 00 01 10 4b 6f     n.............Ko
     502:	70 70 65 6c 32 3c 33 00 00 00 ec 07 40 21 00 00     ppel2<3.....@!..
     512:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 e2 07     ..Koppel1<3.....
     522:	43 21 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     C!....KoppelP<3.
     532:	00 00 d8 07 46 21 00 00 01 10 4b 6f 70 70 65 6c     ....F!....Koppel
     542:	31 3c 32 00 00 00 ce 07 49 21 00 00 01 10 4b 6f     1<2.....I!....Ko
     552:	70 70 65 6c 50 3c 32 00 00 00 c4 07 4c 21 00 00     ppelP<2.....L!..
     562:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 ba 07     ..KoppelP<1.....
     572:	4f 21 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     O!....Koppel3<2.
     582:	00 00 b0 07 52 21 00 00 01 10 4b 6f 70 70 65 6c     ....R!....Koppel
     592:	33 3c 31 00 00 00 a6 07 55 21 00 00 01 10 4b 6f     3<1.....U!....Ko
     5a2:	70 70 65 6c 33 3c 50 00 00 00 9c 07 58 21 00 00     ppel3<P.....X!..
     5b2:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 92 07     ..Koppel2<1.....
     5c2:	5b 21 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     [!....Koppel2<P.
     5d2:	00 00 88 07 5e 21 00 00 01 10 4b 6f 70 70 65 6c     ....^!....Koppel
     5e2:	31 3c 50 00 00 00 7e 07 61 21 00 00 01 10 50 72     1<P...~.a!....Pr
     5f2:	2e 2b 2f 73 65 74 00 00 00 00 4c 07 74 22 00 00     .+/set....L.t"..
     602:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 42 07     ..Pr.-/clr....B.
     612:	39 22 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     9"....Prog. 1A..
     622:	00 00 74 07 f5 21 00 00 01 10 50 72 6f 67 2e 20     ..t..!....Prog. 
     632:	32 41 00 00 00 00 6a 07 f8 21 00 00 01 10 50 72     2A....j..!....Pr
     642:	6f 67 2e 20 33 41 00 00 00 00 60 07 fb 21 00 00     og. 3A....`..!..
     652:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 56 07     ..Prog. 4A....V.
     662:	fe 21 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     .!....Prog.clr..
     672:	00 00 06 07 71 1c 00 00 01 10 50 72 6f 67 2e 73     ....q.....Prog.s
     682:	65 74 00 00 00 00 10 07 78 21 00 00 01 10 50 72     et......x!....Pr
     692:	6f 67 2e 2b 00 00 00 00 00 00 38 07 90 22 00 00     og.+......8.."..
     6a2:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 2e 07     ..Prog.-........
     6b2:	4c 22 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     L"....PrBank+...
     6c2:	00 00 24 07 11 22 00 00 01 10 50 72 42 61 6e 6b     ..$.."....PrBank
     6d2:	2e 2d 00 00 00 00 1a 07 1c 22 00 00 01 10 4d 49     .-......."....MI
     6e2:	44 49 20 4f 66 66 00 00 00 00 f6 07 c6 29 00 00     DI Off.......)..
     6f2:	c1 10 53 65 74 75 70 00 00 00 00 00 e0 0e 00 08     ..Setup.........
     702:	00 00 00 00                                         ....

00000706 <shortKeyTextRegOff>:
     706:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

00000710 <shortKeyTextPRS>:
     710:	50 73 65 74 00 00 00 00 00 00                       Pset......

0000071a <shortKeyTextPBD>:
     71a:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

00000724 <shortKeyTextPBI>:
     724:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

0000072e <shortKeyTextPRD>:
     72e:	50 2d 00 00 00 00 00 00 00 00                       P-........

00000738 <shortKeyTextPRI>:
     738:	50 2b 00 00 00 00 00 00 00 00                       P+........

00000742 <shortKeyTextPRM>:
     742:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

0000074c <shortKeyTextPRP>:
     74c:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000756 <shortKeyTextK4A>:
     756:	50 41 34 00 00 00 00 00 00 00                       PA4.......

00000760 <shortKeyTextK3A>:
     760:	50 41 33 00 00 00 00 00 00 00                       PA3.......

0000076a <shortKeyTextK2A>:
     76a:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000774 <shortKeyTextK1A>:
     774:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000077e <shortKeyTextCpl1P>:
     77e:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000788 <shortKeyTextCpl2P>:
     788:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000792 <shortKeyTextCpl21>:
     792:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000079c <shortKeyTextCpl3P>:
     79c:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

000007a6 <shortKeyTextCpl31>:
     7a6:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

000007b0 <shortKeyTextCpl32>:
     7b0:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000007ba <shortKeyTextCplP1>:
     7ba:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000007c4 <shortKeyTextCplP2>:
     7c4:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000007ce <shortKeyTextCpl12>:
     7ce:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000007d8 <shortKeyTextCplP3>:
     7d8:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000007e2 <shortKeyTextCpl13>:
     7e2:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000007ec <shortKeyTextCpl23>:
     7ec:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007f6 <shortKeyTextMIDIoff>:
     7f6:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

00000800 <shortKeyTextSetup>:
     800:	53 65 74 75 00 00 00 00 00 00                       Setu......

0000080a <shortKeyTextStim>:
     80a:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000814 <shortKeyTextMenu>:
     814:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

0000081e <shortKeyTextNone>:
	...

00000828 <menu_main>:
     828:	81 00 4d 61 6e 75 61 6c 00 00 00 00 a0 08 00 00     ..Manual........
     838:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     848:	c8 08 00 00 fc 20 00 00 01 00 4d 49 44 49 00 00     ..... ....MIDI..
     858:	00 00 00 00 94 0a 00 00 00 00 00 00 01 00 54 61     ..............Ta
     868:	73 74 65 6e 00 00 00 00 a0 0d 00 00 00 00 94 1c     sten............
     878:	01 00 53 74 61 74 75 73 00 00 00 00 cc 13 00 00     ..Status........
     888:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     898:	e0 0e 00 00 00 00 00 00                             ........

000008a0 <menu_manual>:
     8a0:	81 00 4b 6f 70 70 65 6c 00 00 00 00 a4 09 00 00     ..Koppel........
     8b0:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     8c0:	f0 0d 00 00 00 00 00 00                             ........

000008c8 <menu_register>:
     8c8:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 ce 05     ..Prog.lad......
     8d8:	00 00 09 21 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ...!..Prog.sp...
     8e8:	00 00 ce 05 00 00 89 1c 01 00 61 75 73 00 00 00     ..........aus...
	...
     900:	03 21 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     .!....Reg.1-8...
     910:	00 00 93 05 00 00 49 1c 0e 00 52 65 67 2e 39 2d     ......I...Reg.9-
     920:	31 36 00 00 00 00 94 05 00 00 49 1c 0e 00 52 65     16........I...Re
     930:	67 2e 31 37 2d 32 34 00 00 00 95 05 00 00 49 1c     g.17-24.......I.
     940:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 96 05     ..Reg.25-32.....
     950:	00 00 49 1c 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..I...Reg.33-40.
     960:	00 00 97 05 00 00 49 1c 0e 00 52 65 67 2e 34 31     ......I...Reg.41
     970:	2d 34 38 00 00 00 98 05 00 00 49 1c 0e 00 52 65     -48.......I...Re
     980:	67 2e 34 39 2d 35 34 00 00 00 99 05 00 00 49 1c     g.49-54.......I.
     990:	ce 00 52 65 67 2e 35 35 2d 36 34 00 00 00 9a 05     ..Reg.55-64.....
     9a0:	00 00 49 1c                                         ..I.

000009a4 <menu_coupler>:
     9a4:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 37 08     ..2<3.........7.
     9b4:	00 00 76 1c 09 00 31 3c 33 00 00 00 00 00 00 00     ..v...1<3.......
     9c4:	00 00 38 08 00 00 76 1c 09 00 31 3c 32 00 00 00     ..8...v...1<2...
     9d4:	00 00 00 00 00 00 39 08 00 00 76 1c 09 00 50 3c     ......9...v...P<
     9e4:	33 00 00 00 00 00 00 00 00 00 3a 08 00 00 76 1c     3.........:...v.
     9f4:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 3b 08     ..P<2.........;.
     a04:	00 00 76 1c 09 00 50 3c 31 00 00 00 00 00 00 00     ..v...P<1.......
     a14:	00 00 3c 08 00 00 76 1c 09 00 33 3c 32 00 00 00     ..<...v...3<2...
     a24:	00 00 00 00 00 00 3d 08 00 00 76 1c 09 00 33 3c     ......=...v...3<
     a34:	31 00 00 00 00 00 00 00 00 00 3e 08 00 00 76 1c     1.........>...v.
     a44:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 3f 08     ..3<P.........?.
     a54:	00 00 76 1c 09 00 32 3c 31 00 00 00 00 00 00 00     ..v...2<1.......
     a64:	00 00 40 08 00 00 76 1c 09 00 32 3c 50 00 00 00     ..@...v...2<P...
     a74:	00 00 00 00 00 00 41 08 00 00 76 1c c9 00 31 3c     ......A...v...1<
     a84:	50 00 00 00 00 00 00 00 00 00 42 08 00 00 76 1c     P.........B...v.

00000a94 <menu_midi>:
     a94:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     aa4:	c6 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .)....MIDIin....
     ab4:	70 0b 00 00 00 00 0f 1e 01 00 4d 49 44 49 6f 75     p.........MIDIou
     ac4:	74 00 00 00 40 0e 00 00 00 00 0b 1e 03 10 54 68     t...@.........Th
     ad4:	72 75 2d 49 6e 00 00 00 00 00 4c 08 00 00 45 1c     ru-In.....L...E.
     ae4:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 4d 08     ..Thru-Out....M.
     af4:	00 00 45 1c 09 00 41 63 63 65 70 74 20 50 43 00     ..E...Accept PC.
     b04:	00 00 58 09 00 00 07 1e 09 00 41 63 74 2e 53 65     ..X.......Act.Se
     b14:	6e 73 65 00 00 00 56 09 00 00 07 1e 09 00 56 65     nse...V.......Ve
     b24:	6c 5a 34 4f 66 66 00 00 00 00 57 09 00 00 07 1e     lZ4Off....W.....
     b34:	01 00 4d 49 44 49 2d 43 43 00 00 00 50 0d 00 00     ..MIDI-CC...P...
     b44:	00 00 3d 1c 06 08 52 78 42 75 66 55 73 65 00 00     ..=...RxBufUse..
     b54:	00 00 6b 15 00 00 00 00 c6 08 54 78 42 75 66 55     ..k.......TxBufU
     b64:	73 65 00 00 00 00 74 16 00 00 00 00                 se....t.....

00000b70 <menu_midiIn>:
     b70:	81 00 43 68 2e 31 00 00 00 00 00 00 b0 0c 00 00     ..Ch.1..........
     b80:	a2 1b 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     b90:	b0 0c 01 00 a2 1b 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     ba0:	00 00 00 00 b0 0c 02 00 a2 1b 00 00 01 00 43 68     ..............Ch
     bb0:	2e 34 00 00 00 00 00 00 b0 0c 03 00 a2 1b 00 00     .4..............
     bc0:	01 00 43 68 2e 35 00 00 00 00 00 00 b0 0c 04 00     ..Ch.5..........
     bd0:	a2 1b 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     be0:	b0 0c 05 00 a2 1b 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     bf0:	00 00 00 00 b0 0c 06 00 a2 1b 00 00 01 00 43 68     ..............Ch
     c00:	2e 38 00 00 00 00 00 00 b0 0c 07 00 a2 1b 00 00     .8..............
     c10:	01 00 43 68 2e 39 00 00 00 00 00 00 b0 0c 08 00     ..Ch.9..........
     c20:	a2 1b 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     c30:	b0 0c 09 00 a2 1b 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     c40:	00 00 00 00 b0 0c 0a 00 a2 1b 00 00 01 00 43 68     ..............Ch
     c50:	2e 31 32 00 00 00 00 00 b0 0c 0b 00 a2 1b 00 00     .12.............
     c60:	01 00 43 68 2e 31 33 00 00 00 00 00 b0 0c 0c 00     ..Ch.13.........
     c70:	a2 1b 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c80:	b0 0c 0d 00 a2 1b 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     c90:	00 00 00 00 b0 0c 0e 00 a2 1b 00 00 c1 00 43 68     ..............Ch
     ca0:	2e 31 36 00 00 00 00 00 b0 0c 0f 00 a2 1b 00 00     .16.............

00000cb0 <menu_midiInSec>:
     cb0:	81 00 53 65 63 74 2e 31 00 00 00 00 00 0d 00 00     ..Sect.1........
     cc0:	ad 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     cd0:	00 0d 01 00 ad 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     ce0:	00 00 00 00 00 0d 02 00 ad 1b 00 00 c1 00 53 65     ..............Se
     cf0:	63 74 2e 34 00 00 00 00 00 0d 03 00 ad 1b 00 00     ct.4............

00000d00 <menu_midiInVar>:
     d00:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 4e 08     ..Manual......N.
     d10:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     d20:	00 00 4f 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..O.......Range.
     d30:	00 00 00 00 00 00 50 08 00 00 00 00 c4 90 4d 61     ......P.......Ma
     d40:	6e 4e 6f 74 65 00 00 00 00 00 51 08 00 00 00 00     nNote.....Q.....

00000d50 <menu_midiCCreg>:
     d50:	82 00 52 65 67 4f 6e 5f 49 00 00 00 00 00 5a 09     ..RegOn_I.....Z.
     d60:	00 00 00 00 02 00 52 65 67 4f 66 66 5f 49 00 00     ......RegOff_I..
     d70:	00 00 5b 09 00 00 00 00 02 00 52 65 67 4f 6e 5f     ..[.......RegOn_
     d80:	4f 00 00 00 00 00 5c 09 00 00 00 00 c2 00 52 65     O.....\.......Re
     d90:	67 4f 66 66 5f 4f 00 00 00 00 5d 09 00 00 00 00     gOff_O....].....

00000da0 <menu_key>:
     da0:	81 08 54 61 73 74 65 31 00 00 00 00 c2 04 00 00     ..Taste1........
     db0:	26 1c 69 2e 01 08 54 61 73 74 65 32 00 00 00 00     &.i...Taste2....
     dc0:	c2 04 01 00 26 1c 69 2e 01 08 54 61 73 74 65 33     ....&.i...Taste3
     dd0:	00 00 00 00 c2 04 02 00 26 1c 69 2e c1 08 54 61     ........&.i...Ta
     de0:	73 74 65 34 00 00 00 00 c2 04 03 00 26 1c 69 2e     ste4........&.i.

00000df0 <menu_tune>:
     df0:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     e00:	e0 1c 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     e10:	00 00 01 00 e0 1c 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     e20:	00 00 00 00 00 00 02 00 e0 1c 00 00 c1 20 50 65     ............. Pe
     e30:	64 61 6c 00 00 00 00 00 00 00 03 00 e0 1c 00 00     dal.............

00000e40 <menu_midiOut>:
     e40:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 4e 09     ..III.........N.
     e50:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     e60:	00 00 50 09 00 00 00 00 03 10 49 00 00 00 00 00     ..P.......I.....
     e70:	00 00 00 00 00 00 52 09 00 00 00 00 03 10 50 00     ......R.......P.
	...
     e88:	00 00 54 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..T.......III(in
     e98:	74 29 00 00 00 00 4f 09 00 00 00 00 03 10 49 49     t)....O.......II
     ea8:	28 69 6e 74 29 00 00 00 00 00 51 09 00 00 00 00     (int).....Q.....
     eb8:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 53 09     ..I(int)......S.
     ec8:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     ed8:	00 00 55 09 00 00 00 00                             ..U.....

00000ee0 <menu_setup>:
     ee0:	81 00 4d 6f 64 75 6c 65 00 00 00 00 ac 10 00 00     ..Module........
     ef0:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     f00:	44 0f 00 00 00 00 41 1c 01 00 55 53 42 00 00 00     D.....A...USB...
     f10:	00 00 00 00 1c 14 00 00 00 00 00 00 01 00 50 6f     ..............Po
     f20:	77 65 72 00 00 00 00 00 70 10 00 00 00 00 00 00     wer.....p.......
     f30:	c1 00 45 45 70 72 6f 6d 00 00 00 00 34 10 00 00     ..EEprom....4...
     f40:	00 00 00 00                                         ....

00000f44 <menu_regout>:
     f44:	81 00 53 65 63 74 2e 31 00 00 00 00 e4 0f 00 00     ..Sect.1........
     f54:	11 1c 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     f64:	e4 0f 01 00 11 1c 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     f74:	00 00 00 00 e4 0f 02 00 11 1c 00 00 01 00 53 65     ..............Se
     f84:	63 74 2e 34 00 00 00 00 e4 0f 03 00 11 1c 00 00     ct.4............
     f94:	01 00 53 65 63 74 2e 35 00 00 00 00 e4 0f 04 00     ..Sect.5........
     fa4:	11 1c 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
     fb4:	e4 0f 05 00 11 1c 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
     fc4:	00 00 00 00 e4 0f 06 00 11 1c 00 00 c1 00 53 65     ..............Se
     fd4:	63 74 2e 38 00 00 00 00 e4 0f 07 00 11 1c 00 00     ct.8............

00000fe4 <menu_regoutSec>:
     fe4:	82 80 43 75 72 73 6f 72 00 00 00 00 00 00 00 02     ..Cursor........
     ff4:	00 00 00 00 02 80 43 68 61 72 00 00 00 00 00 00     ......Char......
    1004:	00 00 01 02 00 00 00 00 0d 80 52 65 67 42 65 67     ..........RegBeg
    1014:	00 00 00 00 00 00 02 02 00 00 00 00 cd 80 52 65     ..............Re
    1024:	67 45 6e 64 00 00 00 00 00 00 03 02 00 00 00 00     gEnd............

00001034 <menu_eeprom>:
    1034:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
    1044:	be 22 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     ."....EEBackup..
    1054:	00 00 00 00 a6 22 00 00 c1 00 45 45 52 65 73 74     ....."....EERest
    1064:	6f 72 65 00 00 00 00 00 b2 22 00 00                 ore......"..

00001070 <menu_Power>:
    1070:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
    1080:	2d 2f 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     -/....PowerOff..
    1090:	00 00 00 00 36 2f 00 00 c1 00 50 2e 52 65 73 74     ....6/....P.Rest
    10a0:	61 72 74 00 00 00 00 00 3e 2f 00 00                 art.....>/..

000010ac <menu_module>:
    10ac:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 78 03     ..ModRead.....x.
    10bc:	00 00 1d 1e 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
    10cc:	00 00 79 03 00 00 1d 1e 0a 08 4d 6f 64 4f 4b 00     ..y.......ModOK.
    10dc:	00 00 00 00 00 00 6b 02 00 00 00 00 01 00 4d 6f     ......k.......Mo
    10ec:	64 54 65 73 74 00 00 00 10 11 00 00 00 00 00 00     dTest...........
    10fc:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 00 12 00 00     ..ModAssign.....
    110c:	00 00 13 1e                                         ....

00001110 <menu_ModeSel>:
    1110:	81 00 4d 6f 64 2e 30 00 00 00 00 00 b0 11 00 00     ..Mod.0.........
    1120:	97 1b 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
    1130:	b0 11 01 00 97 1b 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
    1140:	00 00 00 00 b0 11 02 00 97 1b 00 00 01 00 4d 6f     ..............Mo
    1150:	64 2e 33 00 00 00 00 00 b0 11 03 00 97 1b 00 00     d.3.............
    1160:	01 00 4d 6f 64 2e 34 00 00 00 00 00 b0 11 04 00     ..Mod.4.........
    1170:	97 1b 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
    1180:	b0 11 05 00 97 1b 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
    1190:	00 00 00 00 b0 11 06 00 97 1b 00 00 c1 00 4d 6f     ..............Mo
    11a0:	64 2e 37 00 00 00 00 00 b0 11 07 00 97 1b 00 00     d.7.............

000011b0 <menu_ModTestSelcted>:
    11b0:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    11c0:	98 1c 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    11d0:	00 00 d3 05 2e 1b 6a 1b 01 00 54 65 73 74 50 74     ......j...TestPt
    11e0:	72 6e 00 00 00 00 00 00 c4 2a 00 00 c1 00 4c 6f     rn.......*....Lo
    11f0:	6f 70 54 73 74 00 00 00 00 00 00 00 cd 1c 00 00     opTst...........

00001200 <menu_modAssign>:
    1200:	81 00 4d 61 6e 2e 33 00 00 00 00 00 04 13 00 00     ..Man.3.........
    1210:	cb 1b 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    1220:	04 13 01 00 cb 1b 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
    1230:	00 00 00 00 04 13 02 00 cb 1b 00 00 01 00 50 65     ..............Pe
    1240:	64 61 6c 00 00 00 00 00 04 13 03 00 cb 1b 00 00     dal.............
    1250:	c1 00 52 65 67 69 73 74 65 72 00 00 64 12 04 00     ..Register..d...
    1260:	00 00 00 00                                         ....

00001264 <menu_modSection8>:
    1264:	81 00 53 65 63 74 2e 31 00 00 00 00 54 13 00 00     ..Sect.1....T...
    1274:	fb 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1284:	54 13 01 00 fb 1b 00 00 01 00 53 65 63 74 2e 33     T.........Sect.3
    1294:	00 00 00 00 54 13 02 00 fb 1b 00 00 01 00 53 65     ....T.........Se
    12a4:	63 74 2e 34 00 00 00 00 54 13 03 00 fb 1b 00 00     ct.4....T.......
    12b4:	01 00 53 65 63 74 2e 35 00 00 00 00 54 13 04 00     ..Sect.5....T...
    12c4:	fb 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    12d4:	54 13 05 00 fb 1b 00 00 01 00 53 65 63 74 2e 37     T.........Sect.7
    12e4:	00 00 00 00 54 13 06 00 fb 1b 00 00 c1 00 53 65     ....T.........Se
    12f4:	63 74 2e 38 00 00 00 00 54 13 07 00 fb 1b 00 00     ct.8....T.......

00001304 <menu_modSection>:
    1304:	81 00 53 65 63 74 2e 31 00 00 00 00 90 13 00 00     ..Sect.1........
    1314:	d6 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1324:	90 13 01 00 d6 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    1334:	00 00 00 00 90 13 02 00 d6 1b 00 00 c1 00 53 65     ..............Se
    1344:	63 74 2e 34 00 00 00 00 90 13 03 00 d6 1b 00 00     ct.4............

00001354 <menu_modDefineReg>:
    1354:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 1d 08     ..RegBeg........
    1364:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    1374:	00 00 1e 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    1384:	2f 42 69 74 00 00 1f 08 00 00 00 00                 /Bit........

00001390 <menu_modDefine>:
    1390:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 5e 09     ..NoteBeg.....^.
    13a0:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    13b0:	00 00 5f 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     .._.......Module
    13c0:	2f 42 69 74 00 00 60 09 00 00 00 00                 /Bit..`.....

000013cc <menu_status>:
    13cc:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    13dc:	1d 29 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .)....USB.......
    13ec:	1c 14 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     .........@MIDI-I
    13fc:	6e 00 00 00 00 00 00 00 a1 28 00 00 c2 40 4d 49     n........(...@MI
    140c:	44 49 2d 4f 75 74 00 00 00 00 00 00 df 28 00 00     DI-Out.......(..

0000141c <menu_USBser>:
    141c:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 7c 16     ..EventLog....|.
    142c:	00 00 47 1e 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..G...SendLog...
    143c:	00 00 00 00 21 1e 00 00 c1 00 53 6e 64 48 57 43     ....!.....SndHWC
    144c:	66 67 00 00 00 00 00 00 5b 1e 00 00                 fg......[...

00001458 <sw_version>:
    1458:	56 30 2e 38 32 00                                   V0.82.

0000145e <cplInfo>:
    145e:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    146e:	01 02 00 03 01 03 02 03                             ........

00001476 <keylabel_1>:
    1476:	31 00                                               1.

00001478 <keylabel_0>:
    1478:	30 00                                               0.

0000147a <keylabel_text>:
    147a:	54 65 78 74 80 00                                   Text..

00001480 <keylabel_exit>:
    1480:	45 78 69 74 00                                      Exit.

00001485 <keylabel_off>:
    1485:	7e 61 75 73 00                                      ~aus.

0000148a <keylabel_on>:
    148a:	7e 65 69 6e 00                                      ~ein.

0000148f <keylabel_onoff>:
    148f:	45 69 6e 80 00                                      Ein..

00001494 <keylabel_minus>:
    1494:	2d 00                                               -.

00001496 <keylabel_plus>:
    1496:	2b 00                                               +.

00001498 <keylabel_left>:
    1498:	7f 00                                               ..

0000149a <keylabel_right>:
    149a:	7e 00                                               ~.

0000149c <keylabel_down>:
    149c:	09 00                                               ..

0000149e <keylabel_up>:
    149e:	08 00                                               ..

000014a0 <cr_lf>:
    14a0:	0d 0a 00 00                                         ....

000014a4 <__ctors_end>:
    14a4:	11 24       	eor	r1, r1
    14a6:	1f be       	out	0x3f, r1	; 63
    14a8:	cf ef       	ldi	r28, 0xFF	; 255
    14aa:	d1 e2       	ldi	r29, 0x21	; 33
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	0c bf       	out	0x3c, r16	; 60

000014b4 <__do_copy_data>:
    14b4:	12 e0       	ldi	r17, 0x02	; 2
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b2 e0       	ldi	r27, 0x02	; 2
    14ba:	ee ea       	ldi	r30, 0xAE	; 174
    14bc:	ff e7       	ldi	r31, 0x7F	; 127
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	0b bf       	out	0x3b, r16	; 59
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <__do_copy_data+0x14>
    14c4:	07 90       	elpm	r0, Z+
    14c6:	0d 92       	st	X+, r0
    14c8:	a8 32       	cpi	r26, 0x28	; 40
    14ca:	b1 07       	cpc	r27, r17
    14cc:	d9 f7       	brne	.-10     	; 0x14c4 <__do_copy_data+0x10>

000014ce <__do_clear_bss>:
    14ce:	29 e1       	ldi	r18, 0x19	; 25
    14d0:	a8 e2       	ldi	r26, 0x28	; 40
    14d2:	b2 e0       	ldi	r27, 0x02	; 2
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <.do_clear_bss_start>

000014d6 <.do_clear_bss_loop>:
    14d6:	1d 92       	st	X+, r1

000014d8 <.do_clear_bss_start>:
    14d8:	aa 34       	cpi	r26, 0x4A	; 74
    14da:	b2 07       	cpc	r27, r18
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <.do_clear_bss_loop>
    14de:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <main>
    14e2:	0c 94 d5 3f 	jmp	0x7faa	; 0x7faa <_exit>

000014e6 <__bad_interrupt>:
    14e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000014ea <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    14ea:	fc 01       	movw	r30, r24
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	1c c0       	rjmp	.+56     	; 0x152a <crc16_ram+0x40>
    14f2:	df 01       	movw	r26, r30
    14f4:	11 96       	adiw	r26, 0x01	; 1
    14f6:	20 81       	ld	r18, Z
    14f8:	82 27       	eor	r24, r18
    14fa:	28 2f       	mov	r18, r24
    14fc:	22 95       	swap	r18
    14fe:	28 27       	eor	r18, r24
    1500:	02 2e       	mov	r0, r18
    1502:	26 95       	lsr	r18
    1504:	26 95       	lsr	r18
    1506:	20 25       	eor	r18, r0
    1508:	02 2e       	mov	r0, r18
    150a:	26 95       	lsr	r18
    150c:	20 25       	eor	r18, r0
    150e:	27 70       	andi	r18, 0x07	; 7
    1510:	08 2e       	mov	r0, r24
    1512:	89 2f       	mov	r24, r25
    1514:	26 95       	lsr	r18
    1516:	07 94       	ror	r0
    1518:	27 95       	ror	r18
    151a:	90 2d       	mov	r25, r0
    151c:	82 27       	eor	r24, r18
    151e:	06 94       	lsr	r0
    1520:	27 95       	ror	r18
    1522:	90 25       	eor	r25, r0
    1524:	82 27       	eor	r24, r18
    1526:	ba 01       	movw	r22, r20
    1528:	fd 01       	movw	r30, r26
    152a:	ab 01       	movw	r20, r22
    152c:	41 50       	subi	r20, 0x01	; 1
    152e:	51 09       	sbc	r21, r1
    1530:	67 2b       	or	r22, r23
    1532:	f9 f6       	brne	.-66     	; 0x14f2 <crc16_ram+0x8>
    1534:	08 95       	ret

00001536 <crc16_eeprom>:
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cf ef       	ldi	r28, 0xFF	; 255
    1544:	df ef       	ldi	r29, 0xFF	; 255
    1546:	21 c0       	rjmp	.+66     	; 0x158a <crc16_eeprom+0x54>
    1548:	7c 01       	movw	r14, r24
    154a:	2f ef       	ldi	r18, 0xFF	; 255
    154c:	e2 1a       	sub	r14, r18
    154e:	f2 0a       	sbc	r15, r18
    1550:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1554:	9e 01       	movw	r18, r28
    1556:	28 27       	eor	r18, r24
    1558:	82 2f       	mov	r24, r18
    155a:	82 95       	swap	r24
    155c:	82 27       	eor	r24, r18
    155e:	08 2e       	mov	r0, r24
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	80 25       	eor	r24, r0
    1566:	08 2e       	mov	r0, r24
    1568:	86 95       	lsr	r24
    156a:	80 25       	eor	r24, r0
    156c:	87 70       	andi	r24, 0x07	; 7
    156e:	02 2e       	mov	r0, r18
    1570:	23 2f       	mov	r18, r19
    1572:	86 95       	lsr	r24
    1574:	07 94       	ror	r0
    1576:	87 95       	ror	r24
    1578:	30 2d       	mov	r19, r0
    157a:	28 27       	eor	r18, r24
    157c:	06 94       	lsr	r0
    157e:	87 95       	ror	r24
    1580:	30 25       	eor	r19, r0
    1582:	28 27       	eor	r18, r24
    1584:	e9 01       	movw	r28, r18
    1586:	b8 01       	movw	r22, r16
    1588:	c7 01       	movw	r24, r14
    158a:	8b 01       	movw	r16, r22
    158c:	01 50       	subi	r16, 0x01	; 1
    158e:	11 09       	sbc	r17, r1
    1590:	67 2b       	or	r22, r23
    1592:	d1 f6       	brne	.-76     	; 0x1548 <crc16_eeprom+0x12>
    1594:	ce 01       	movw	r24, r28
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	08 95       	ret

000015a4 <crc16_ram_startVal>:
    15a4:	fc 01       	movw	r30, r24
    15a6:	ca 01       	movw	r24, r20
    15a8:	1c c0       	rjmp	.+56     	; 0x15e2 <crc16_ram_startVal+0x3e>
    15aa:	df 01       	movw	r26, r30
    15ac:	11 96       	adiw	r26, 0x01	; 1
    15ae:	20 81       	ld	r18, Z
    15b0:	82 27       	eor	r24, r18
    15b2:	28 2f       	mov	r18, r24
    15b4:	22 95       	swap	r18
    15b6:	28 27       	eor	r18, r24
    15b8:	02 2e       	mov	r0, r18
    15ba:	26 95       	lsr	r18
    15bc:	26 95       	lsr	r18
    15be:	20 25       	eor	r18, r0
    15c0:	02 2e       	mov	r0, r18
    15c2:	26 95       	lsr	r18
    15c4:	20 25       	eor	r18, r0
    15c6:	27 70       	andi	r18, 0x07	; 7
    15c8:	08 2e       	mov	r0, r24
    15ca:	89 2f       	mov	r24, r25
    15cc:	26 95       	lsr	r18
    15ce:	07 94       	ror	r0
    15d0:	27 95       	ror	r18
    15d2:	90 2d       	mov	r25, r0
    15d4:	82 27       	eor	r24, r18
    15d6:	06 94       	lsr	r0
    15d8:	27 95       	ror	r18
    15da:	90 25       	eor	r25, r0
    15dc:	82 27       	eor	r24, r18
    15de:	ba 01       	movw	r22, r20
    15e0:	fd 01       	movw	r30, r26
    15e2:	ab 01       	movw	r20, r22
    15e4:	41 50       	subi	r20, 0x01	; 1
    15e6:	51 09       	sbc	r21, r1
    15e8:	67 2b       	or	r22, r23
    15ea:	f9 f6       	brne	.-66     	; 0x15aa <crc16_ram_startVal+0x6>
    15ec:	08 95       	ret

000015ee <crc16_eeprom_startVal>:
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ea 01       	movw	r28, r20
    15fc:	21 c0       	rjmp	.+66     	; 0x1640 <crc16_eeprom_startVal+0x52>
    15fe:	7c 01       	movw	r14, r24
    1600:	2f ef       	ldi	r18, 0xFF	; 255
    1602:	e2 1a       	sub	r14, r18
    1604:	f2 0a       	sbc	r15, r18
    1606:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    160a:	ae 01       	movw	r20, r28
    160c:	48 27       	eor	r20, r24
    160e:	84 2f       	mov	r24, r20
    1610:	82 95       	swap	r24
    1612:	84 27       	eor	r24, r20
    1614:	08 2e       	mov	r0, r24
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	80 25       	eor	r24, r0
    161c:	08 2e       	mov	r0, r24
    161e:	86 95       	lsr	r24
    1620:	80 25       	eor	r24, r0
    1622:	87 70       	andi	r24, 0x07	; 7
    1624:	04 2e       	mov	r0, r20
    1626:	45 2f       	mov	r20, r21
    1628:	86 95       	lsr	r24
    162a:	07 94       	ror	r0
    162c:	87 95       	ror	r24
    162e:	50 2d       	mov	r21, r0
    1630:	48 27       	eor	r20, r24
    1632:	06 94       	lsr	r0
    1634:	87 95       	ror	r24
    1636:	50 25       	eor	r21, r0
    1638:	48 27       	eor	r20, r24
    163a:	ea 01       	movw	r28, r20
    163c:	b8 01       	movw	r22, r16
    163e:	c7 01       	movw	r24, r14
    1640:	8b 01       	movw	r16, r22
    1642:	01 50       	subi	r16, 0x01	; 1
    1644:	11 09       	sbc	r17, r1
    1646:	67 2b       	or	r22, r23
    1648:	d1 f6       	brne	.-76     	; 0x15fe <crc16_eeprom_startVal+0x10>
    164a:	ce 01       	movw	r24, r28
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	08 95       	ret

0000165a <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    165e:	82 e3       	ldi	r24, 0x32	; 50
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1666:	ec 01       	movw	r28, r24
    1668:	60 e3       	ldi	r22, 0x30	; 48
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	62 df       	rcall	.-316    	; 0x1536 <crc16_eeprom>
    1672:	c8 17       	cp	r28, r24
    1674:	d9 07       	cpc	r29, r25
    1676:	81 f4       	brne	.+32     	; 0x1698 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1680:	8d 34       	cpi	r24, 0x4D	; 77
    1682:	51 f4       	brne	.+20     	; 0x1698 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    1684:	40 e3       	ldi	r20, 0x30	; 48
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	8e e5       	ldi	r24, 0x5E	; 94
    168e:	99 e0       	ldi	r25, 0x09	; 9
    1690:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return (EE_LOAD_OK);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1698:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    169c:	81 60       	ori	r24, 0x01	; 1
    169e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    16ae:	85 e3       	ldi	r24, 0x35	; 53
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    16b6:	ec 01       	movw	r28, r24
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	85 e3       	ldi	r24, 0x35	; 53
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	3a df       	rcall	.-396    	; 0x1536 <crc16_eeprom>
    16c2:	c8 17       	cp	r28, r24
    16c4:	d9 07       	cpc	r29, r25
    16c6:	81 f4       	brne	.+32     	; 0x16e8 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    16c8:	84 e3       	ldi	r24, 0x34	; 52
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    16d0:	89 34       	cpi	r24, 0x49	; 73
    16d2:	51 f4       	brne	.+20     	; 0x16e8 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	51 e0       	ldi	r21, 0x01	; 1
    16d8:	65 e3       	ldi	r22, 0x35	; 53
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	8e e4       	ldi	r24, 0x4E	; 78
    16de:	98 e0       	ldi	r25, 0x08	; 8
    16e0:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return (EE_LOAD_OK);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	06 c0       	rjmp	.+12     	; 0x16f4 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    16e8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16ec:	82 60       	ori	r24, 0x02	; 2
    16ee:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    16fe:	83 e4       	ldi	r24, 0x43	; 67
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1706:	ec 01       	movw	r28, r24
    1708:	6b e0       	ldi	r22, 0x0B	; 11
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	88 e3       	ldi	r24, 0x38	; 56
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	12 df       	rcall	.-476    	; 0x1536 <crc16_eeprom>
    1712:	c8 17       	cp	r28, r24
    1714:	d9 07       	cpc	r29, r25
    1716:	c1 f4       	brne	.+48     	; 0x1748 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    1718:	87 e3       	ldi	r24, 0x37	; 55
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1720:	8f 34       	cpi	r24, 0x4F	; 79
    1722:	91 f4       	brne	.+36     	; 0x1748 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1724:	48 e0       	ldi	r20, 0x08	; 8
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	68 e3       	ldi	r22, 0x38	; 56
    172a:	71 e0       	ldi	r23, 0x01	; 1
    172c:	8e e4       	ldi	r24, 0x4E	; 78
    172e:	99 e0       	ldi	r25, 0x09	; 9
    1730:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1734:	43 e0       	ldi	r20, 0x03	; 3
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	60 e4       	ldi	r22, 0x40	; 64
    173a:	71 e0       	ldi	r23, 0x01	; 1
    173c:	86 e5       	ldi	r24, 0x56	; 86
    173e:	99 e0       	ldi	r25, 0x09	; 9
    1740:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return (EE_LOAD_OK);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    1748:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    174c:	84 60       	ori	r24, 0x04	; 4
    174e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1752:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    175e:	88 e4       	ldi	r24, 0x48	; 72
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1766:	ec 01       	movw	r28, r24
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	86 e4       	ldi	r24, 0x46	; 70
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	e2 de       	rcall	.-572    	; 0x1536 <crc16_eeprom>
    1772:	c8 17       	cp	r28, r24
    1774:	d9 07       	cpc	r29, r25
    1776:	a1 f4       	brne	.+40     	; 0x17a0 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1778:	85 e4       	ldi	r24, 0x45	; 69
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	71 f4       	brne	.+28     	; 0x17a0 <eeprom_ReadModules+0x46>
		// flaw: crc ist for moduleAssignRead only ?
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    1784:	86 e4       	ldi	r24, 0x46	; 70
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    178c:	c8 e7       	ldi	r28, 0x78	; 120
    178e:	d3 e0       	ldi	r29, 0x03	; 3
    1790:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    1792:	87 e4       	ldi	r24, 0x47	; 71
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    179a:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    17a0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17a4:	88 60       	ori	r24, 0x08	; 8
    17a6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    17b6:	87 ef       	ldi	r24, 0xF7	; 247
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    17be:	ec 01       	movw	r28, r24
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	85 ef       	ldi	r24, 0xF5	; 245
    17c6:	93 e0       	ldi	r25, 0x03	; 3
    17c8:	b6 de       	rcall	.-660    	; 0x1536 <crc16_eeprom>
    17ca:	c8 17       	cp	r28, r24
    17cc:	d9 07       	cpc	r29, r25
    17ce:	81 f4       	brne	.+32     	; 0x17f0 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    17d0:	84 ef       	ldi	r24, 0xF4	; 244
    17d2:	93 e0       	ldi	r25, 0x03	; 3
    17d4:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    17d8:	84 35       	cpi	r24, 0x54	; 84
    17da:	51 f4       	brne	.+20     	; 0x17f0 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    17dc:	42 e0       	ldi	r20, 0x02	; 2
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	65 ef       	ldi	r22, 0xF5	; 245
    17e2:	73 e0       	ldi	r23, 0x03	; 3
    17e4:	8c e4       	ldi	r24, 0x4C	; 76
    17e6:	98 e0       	ldi	r25, 0x08	; 8
    17e8:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return (EE_LOAD_OK);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    17f0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17f4:	82 60       	ori	r24, 0x02	; 2
    17f6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1806:	8c e4       	ldi	r24, 0x4C	; 76
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    180e:	ec 01       	movw	r28, r24
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	8b e4       	ldi	r24, 0x4B	; 75
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	8e de       	rcall	.-740    	; 0x1536 <crc16_eeprom>
    181a:	c8 17       	cp	r28, r24
    181c:	d9 07       	cpc	r29, r25
    181e:	71 f4       	brne	.+28     	; 0x183c <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1820:	8a e4       	ldi	r24, 0x4A	; 74
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1828:	85 35       	cpi	r24, 0x55	; 85
    182a:	41 f4       	brne	.+16     	; 0x183c <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    182c:	8b e4       	ldi	r24, 0x4B	; 75
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1834:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <serUSB_Active>
		return (EE_LOAD_OK);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    183c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1846:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	8f e4       	ldi	r24, 0x4F	; 79
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	6d de       	rcall	.-806    	; 0x1536 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    185c:	ac 01       	movw	r20, r24
    185e:	68 e1       	ldi	r22, 0x18	; 24
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	80 e5       	ldi	r24, 0x50	; 80
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	c3 de       	rcall	.-634    	; 0x15ee <crc16_eeprom_startVal>
    1868:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    186a:	88 e6       	ldi	r24, 0x68	; 104
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1872:	c8 17       	cp	r28, r24
    1874:	d9 07       	cpc	r29, r25
    1876:	b1 f4       	brne	.+44     	; 0x18a4 <eeprom_ReadReg+0x56>
    1878:	8e e4       	ldi	r24, 0x4E	; 78
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1880:	82 35       	cpi	r24, 0x52	; 82
    1882:	81 f4       	brne	.+32     	; 0x18a4 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    1884:	8f e4       	ldi	r24, 0x4F	; 79
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    188c:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    1890:	48 e1       	ldi	r20, 0x18	; 24
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	60 e5       	ldi	r22, 0x50	; 80
    1896:	71 e0       	ldi	r23, 0x01	; 1
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	98 e0       	ldi	r25, 0x08	; 8
    189c:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return(EE_LOAD_OK);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    18a4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18a8:	80 62       	ori	r24, 0x20	; 32
    18aa:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    18ba:	8b ee       	ldi	r24, 0xEB	; 235
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    18c2:	ec 01       	movw	r28, r24
    18c4:	60 e8       	ldi	r22, 0x80	; 128
    18c6:	72 e0       	ldi	r23, 0x02	; 2
    18c8:	8b e6       	ldi	r24, 0x6B	; 107
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	34 de       	rcall	.-920    	; 0x1536 <crc16_eeprom>
    18ce:	c8 17       	cp	r28, r24
    18d0:	d9 07       	cpc	r29, r25
    18d2:	81 f4       	brne	.+32     	; 0x18f4 <eeprom_ReadProg+0x3e>
    18d4:	8a e6       	ldi	r24, 0x6A	; 106
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    18dc:	80 35       	cpi	r24, 0x50	; 80
    18de:	51 f4       	brne	.+20     	; 0x18f4 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	52 e0       	ldi	r21, 0x02	; 2
    18e4:	6b e6       	ldi	r22, 0x6B	; 107
    18e6:	71 e0       	ldi	r23, 0x01	; 1
    18e8:	8e e8       	ldi	r24, 0x8E	; 142
    18ea:	99 e0       	ldi	r25, 0x09	; 9
    18ec:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return(EE_LOAD_OK);
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    18f4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    190a:	82 ef       	ldi	r24, 0xF2	; 242
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1912:	ec 01       	movw	r28, r24
    1914:	64 e0       	ldi	r22, 0x04	; 4
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	8e ee       	ldi	r24, 0xEE	; 238
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0c de       	rcall	.-1000   	; 0x1536 <crc16_eeprom>
    191e:	c8 17       	cp	r28, r24
    1920:	d9 07       	cpc	r29, r25
    1922:	51 f4       	brne	.+20     	; 0x1938 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1924:	44 e0       	ldi	r20, 0x04	; 4
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	6e ee       	ldi	r22, 0xEE	; 238
    192a:	73 e0       	ldi	r23, 0x03	; 3
    192c:	89 ed       	ldi	r24, 0xD9	; 217
    192e:	95 e0       	ldi	r25, 0x05	; 5
    1930:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return(EE_LOAD_OK);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1938:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    193c:	80 68       	ori	r24, 0x80	; 128
    193e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1942:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <eeprom_ReadRegOut>:

uint8_t eeprom_ReadRegOut(){
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.regOut_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.reg_Out, sizeof (reg_Out)))){
    194e:	8a e1       	ldi	r24, 0x1A	; 26
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    1956:	ec 01       	movw	r28, r24
    1958:	60 e2       	ldi	r22, 0x20	; 32
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	8a ef       	ldi	r24, 0xFA	; 250
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	ea dd       	rcall	.-1068   	; 0x1536 <crc16_eeprom>
    1962:	c8 17       	cp	r28, r24
    1964:	d9 07       	cpc	r29, r25
    1966:	51 f4       	brne	.+20     	; 0x197c <eeprom_ReadRegOut+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof (ee.eeData.ee.reg_Out));
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	6a ef       	ldi	r22, 0xFA	; 250
    196e:	73 e0       	ldi	r23, 0x03	; 3
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	92 e0       	ldi	r25, 0x02	; 2
    1974:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return(EE_LOAD_OK);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <eeprom_ReadRegOut+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    197c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1980:	80 62       	ori	r24, 0x20	; 32
    1982:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1986:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <eeprom_ReadCCreg>:

uint8_t eeprom_ReadCCreg(){
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiCCreg_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (midi_ccReg)))){
    1992:	81 e2       	ldi	r24, 0x21	; 33
    1994:	94 e0       	ldi	r25, 0x04	; 4
    1996:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <eeprom_read_word>
    199a:	ec 01       	movw	r28, r24
    199c:	64 e0       	ldi	r22, 0x04	; 4
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	8d e1       	ldi	r24, 0x1D	; 29
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	c8 dd       	rcall	.-1136   	; 0x1536 <crc16_eeprom>
    19a6:	c8 17       	cp	r28, r24
    19a8:	d9 07       	cpc	r29, r25
    19aa:	51 f4       	brne	.+20     	; 0x19c0 <eeprom_ReadCCreg+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (ee.eeData.ee.midi_CCreg));
    19ac:	44 e0       	ldi	r20, 0x04	; 4
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	6d e1       	ldi	r22, 0x1D	; 29
    19b2:	74 e0       	ldi	r23, 0x04	; 4
    19b4:	8a e5       	ldi	r24, 0x5A	; 90
    19b6:	99 e0       	ldi	r25, 0x09	; 9
    19b8:	0e 94 93 3f 	call	0x7f26	; 0x7f26 <eeprom_read_block>
		return(EE_LOAD_OK);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <eeprom_ReadCCreg+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    19c0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    19c4:	80 62       	ori	r24, 0x20	; 32
    19c6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	08 95       	ret

000019d2 <eepromWriteSignature>:


void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    19dc:	65 e6       	ldi	r22, 0x65	; 101
    19de:	83 e2       	ldi	r24, 0x23	; 35
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	0c 94 bf 3f 	jmp	0x7f7e	; 0x7f7e <eeprom_update_byte>
    19e6:	08 95       	ret

000019e8 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    19ec:	60 e3       	ldi	r22, 0x30	; 48
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	8e e5       	ldi	r24, 0x5E	; 94
    19f2:	99 e0       	ldi	r25, 0x09	; 9
    19f4:	7a dd       	rcall	.-1292   	; 0x14ea <crc16_ram>
    19f6:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19f8:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    19fc:	6d e4       	ldi	r22, 0x4D	; 77
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    1a06:	40 e3       	ldi	r20, 0x30	; 48
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	8e e5       	ldi	r24, 0x5E	; 94
    1a10:	99 e0       	ldi	r25, 0x09	; 9
    1a12:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1a16:	be 01       	movw	r22, r28
    1a18:	82 e3       	ldi	r24, 0x32	; 50
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1a20:	d8 df       	rcall	.-80     	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a22:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	71 e0       	ldi	r23, 0x01	; 1
    1a34:	8e e4       	ldi	r24, 0x4E	; 78
    1a36:	98 e0       	ldi	r25, 0x08	; 8
    1a38:	58 dd       	rcall	.-1360   	; 0x14ea <crc16_ram>
    1a3a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a3c:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1a40:	69 e4       	ldi	r22, 0x49	; 73
    1a42:	84 e3       	ldi	r24, 0x34	; 52
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	51 e0       	ldi	r21, 0x01	; 1
    1a4e:	65 e3       	ldi	r22, 0x35	; 53
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	8e e4       	ldi	r24, 0x4E	; 78
    1a54:	98 e0       	ldi	r25, 0x08	; 8
    1a56:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1a5a:	be 01       	movw	r22, r28
    1a5c:	85 e3       	ldi	r24, 0x35	; 53
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1a64:	b6 df       	rcall	.-148    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a66:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    1a74:	68 e0       	ldi	r22, 0x08	; 8
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	8e e4       	ldi	r24, 0x4E	; 78
    1a7a:	99 e0       	ldi	r25, 0x09	; 9
    1a7c:	36 dd       	rcall	.-1428   	; 0x14ea <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1a7e:	ac 01       	movw	r20, r24
    1a80:	63 e0       	ldi	r22, 0x03	; 3
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	86 e5       	ldi	r24, 0x56	; 86
    1a86:	99 e0       	ldi	r25, 0x09	; 9
    1a88:	8d dd       	rcall	.-1254   	; 0x15a4 <crc16_ram_startVal>
    1a8a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a8c:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1a90:	6f e4       	ldi	r22, 0x4F	; 79
    1a92:	87 e3       	ldi	r24, 0x37	; 55
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1a9a:	48 e0       	ldi	r20, 0x08	; 8
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	68 e3       	ldi	r22, 0x38	; 56
    1aa0:	71 e0       	ldi	r23, 0x01	; 1
    1aa2:	8e e4       	ldi	r24, 0x4E	; 78
    1aa4:	99 e0       	ldi	r25, 0x09	; 9
    1aa6:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1aaa:	43 e0       	ldi	r20, 0x03	; 3
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	60 e4       	ldi	r22, 0x40	; 64
    1ab0:	71 e0       	ldi	r23, 0x01	; 1
    1ab2:	86 e5       	ldi	r24, 0x56	; 86
    1ab4:	99 e0       	ldi	r25, 0x09	; 9
    1ab6:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1aba:	be 01       	movw	r22, r28
    1abc:	83 e4       	ldi	r24, 0x43	; 67
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1ac4:	86 df       	rcall	.-244    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1ac6:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	88 e7       	ldi	r24, 0x78	; 120
    1ade:	93 e0       	ldi	r25, 0x03	; 3
    1ae0:	04 dd       	rcall	.-1528   	; 0x14ea <crc16_ram>
    1ae2:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1ae4:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1ae8:	69 e6       	ldi	r22, 0x69	; 105
    1aea:	85 e4       	ldi	r24, 0x45	; 69
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1af2:	c8 e7       	ldi	r28, 0x78	; 120
    1af4:	d3 e0       	ldi	r29, 0x03	; 3
    1af6:	68 81       	ld	r22, Y
    1af8:	86 e4       	ldi	r24, 0x46	; 70
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1b00:	69 81       	ldd	r22, Y+1	; 0x01
    1b02:	87 e4       	ldi	r24, 0x47	; 71
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1b0a:	b8 01       	movw	r22, r16
    1b0c:	88 e4       	ldi	r24, 0x48	; 72
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1b14:	5e df       	rcall	.-324    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b16:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	8c e7       	ldi	r24, 0x7C	; 124
    1b2e:	96 e1       	ldi	r25, 0x16	; 22
    1b30:	dc dc       	rcall	.-1608   	; 0x14ea <crc16_ram>
    1b32:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b34:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1b38:	65 e5       	ldi	r22, 0x55	; 85
    1b3a:	8a e4       	ldi	r24, 0x4A	; 74
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1b42:	60 91 7c 16 	lds	r22, 0x167C	; 0x80167c <serUSB_Active>
    1b46:	8b e4       	ldi	r24, 0x4B	; 75
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1b4e:	be 01       	movw	r22, r28
    1b50:	8c e4       	ldi	r24, 0x4C	; 76
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1b58:	3c df       	rcall	.-392    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b5a:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	8c e4       	ldi	r24, 0x4C	; 76
    1b6e:	98 e0       	ldi	r25, 0x08	; 8
    1b70:	bc dc       	rcall	.-1672   	; 0x14ea <crc16_ram>
    1b72:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b74:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1b78:	64 e5       	ldi	r22, 0x54	; 84
    1b7a:	84 ef       	ldi	r24, 0xF4	; 244
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1b82:	42 e0       	ldi	r20, 0x02	; 2
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	65 ef       	ldi	r22, 0xF5	; 245
    1b88:	73 e0       	ldi	r23, 0x03	; 3
    1b8a:	8c e4       	ldi	r24, 0x4C	; 76
    1b8c:	98 e0       	ldi	r25, 0x08	; 8
    1b8e:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1b92:	be 01       	movw	r22, r28
    1b94:	87 ef       	ldi	r24, 0xF7	; 247
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1b9c:	1a df       	rcall	.-460    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b9e:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	86 e3       	ldi	r24, 0x36	; 54
    1bb2:	98 e0       	ldi	r25, 0x08	; 8
    1bb4:	9a dc       	rcall	.-1740   	; 0x14ea <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	68 e1       	ldi	r22, 0x18	; 24
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	8d e1       	ldi	r24, 0x1D	; 29
    1bbe:	98 e0       	ldi	r25, 0x08	; 8
    1bc0:	f1 dc       	rcall	.-1566   	; 0x15a4 <crc16_ram_startVal>
    1bc2:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1bc4:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1bc8:	62 e5       	ldi	r22, 0x52	; 82
    1bca:	8e e4       	ldi	r24, 0x4E	; 78
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1bd2:	60 91 36 08 	lds	r22, 0x0836	; 0x800836 <registerCount>
    1bd6:	8f e4       	ldi	r24, 0x4F	; 79
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1bde:	48 e1       	ldi	r20, 0x18	; 24
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	60 e5       	ldi	r22, 0x50	; 80
    1be4:	71 e0       	ldi	r23, 0x01	; 1
    1be6:	8d e1       	ldi	r24, 0x1D	; 29
    1be8:	98 e0       	ldi	r25, 0x08	; 8
    1bea:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1bee:	be 01       	movw	r22, r28
    1bf0:	88 e6       	ldi	r24, 0x68	; 104
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1bf8:	ec de       	rcall	.-552    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bfa:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1c08:	60 e8       	ldi	r22, 0x80	; 128
    1c0a:	72 e0       	ldi	r23, 0x02	; 2
    1c0c:	8e e8       	ldi	r24, 0x8E	; 142
    1c0e:	99 e0       	ldi	r25, 0x09	; 9
    1c10:	6c dc       	rcall	.-1832   	; 0x14ea <crc16_ram>
    1c12:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c14:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1c18:	60 e5       	ldi	r22, 0x50	; 80
    1c1a:	8a e6       	ldi	r24, 0x6A	; 106
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	52 e0       	ldi	r21, 0x02	; 2
    1c26:	6b e6       	ldi	r22, 0x6B	; 107
    1c28:	71 e0       	ldi	r23, 0x01	; 1
    1c2a:	8e e8       	ldi	r24, 0x8E	; 142
    1c2c:	99 e0       	ldi	r25, 0x09	; 9
    1c2e:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1c32:	be 01       	movw	r22, r28
    1c34:	8b ee       	ldi	r24, 0xEB	; 235
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1c3c:	ca de       	rcall	.-620    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c3e:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1c4c:	64 e0       	ldi	r22, 0x04	; 4
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	89 ed       	ldi	r24, 0xD9	; 217
    1c52:	95 e0       	ldi	r25, 0x05	; 5
    1c54:	4a dc       	rcall	.-1900   	; 0x14ea <crc16_ram>
    1c56:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c58:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1c5c:	6b e4       	ldi	r22, 0x4B	; 75
    1c5e:	8d ee       	ldi	r24, 0xED	; 237
    1c60:	93 e0       	ldi	r25, 0x03	; 3
    1c62:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1c66:	44 e0       	ldi	r20, 0x04	; 4
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	6e ee       	ldi	r22, 0xEE	; 238
    1c6c:	73 e0       	ldi	r23, 0x03	; 3
    1c6e:	89 ed       	ldi	r24, 0xD9	; 217
    1c70:	95 e0       	ldi	r25, 0x05	; 5
    1c72:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1c76:	be 01       	movw	r22, r28
    1c78:	82 ef       	ldi	r24, 0xF2	; 242
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1c80:	a8 de       	rcall	.-688    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c82:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <eeprom_UpdateRegOut>:

void eeprom_UpdateRegOut(){
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) reg_Out, sizeof(reg_Out));
    1c90:	60 e2       	ldi	r22, 0x20	; 32
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	28 dc       	rcall	.-1968   	; 0x14ea <crc16_ram>
    1c9a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c9c:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charRegOut), EE_CHAR_REGOUT);
    1ca0:	62 e7       	ldi	r22, 0x72	; 114
    1ca2:	89 ef       	ldi	r24, 0xF9	; 249
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof(reg_Out));
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	6a ef       	ldi	r22, 0xFA	; 250
    1cb0:	73 e0       	ldi	r23, 0x03	; 3
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	92 e0       	ldi	r25, 0x02	; 2
    1cb6:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.regOut_crc), crc);
    1cba:	be 01       	movw	r22, r28
    1cbc:	8a e1       	ldi	r24, 0x1A	; 26
    1cbe:	94 e0       	ldi	r25, 0x04	; 4
    1cc0:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1cc4:	86 de       	rcall	.-756    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1cc6:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <eeprom_UpdateCCreg>:

void eeprom_UpdateCCreg(){
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midi_ccReg, sizeof(midi_ccReg));
    1cd4:	64 e0       	ldi	r22, 0x04	; 4
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	8a e5       	ldi	r24, 0x5A	; 90
    1cda:	99 e0       	ldi	r25, 0x09	; 9
    1cdc:	06 dc       	rcall	.-2036   	; 0x14ea <crc16_ram>
    1cde:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1ce0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiCCreg), EE_CHAR_CC);
    1ce4:	63 e4       	ldi	r22, 0x43	; 67
    1ce6:	8c e1       	ldi	r24, 0x1C	; 28
    1ce8:	94 e0       	ldi	r25, 0x04	; 4
    1cea:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof(midi_ccReg));
    1cee:	44 e0       	ldi	r20, 0x04	; 4
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	6d e1       	ldi	r22, 0x1D	; 29
    1cf4:	74 e0       	ldi	r23, 0x04	; 4
    1cf6:	8a e5       	ldi	r24, 0x5A	; 90
    1cf8:	99 e0       	ldi	r25, 0x09	; 9
    1cfa:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiCCreg_crc), crc);
    1cfe:	be 01       	movw	r22, r28
    1d00:	81 e2       	ldi	r24, 0x21	; 33
    1d02:	94 e0       	ldi	r25, 0x04	; 4
    1d04:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <eeprom_update_word>
	eepromWriteSignature();
    1d08:	64 de       	rcall	.-824    	; 0x19d2 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1d0a:	0e 94 cb 3e 	call	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <eeprom_UpdateALL>:


void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1d14:	69 de       	rcall	.-814    	; 0x19e8 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1d16:	8a de       	rcall	.-748    	; 0x1a2c <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1d18:	ab de       	rcall	.-682    	; 0x1a70 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1d1a:	da de       	rcall	.-588    	; 0x1ad0 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1d1c:	03 df       	rcall	.-506    	; 0x1b24 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1d1e:	44 df       	rcall	.-376    	; 0x1ba8 <eeprom_UpdateReg>
	eeprom_UpdateProg();
    1d20:	71 df       	rcall	.-286    	; 0x1c04 <eeprom_UpdateProg>
    1d22:	92 df       	rcall	.-220    	; 0x1c48 <eeprom_UpdateSoftkeys>
	eeprom_UpdateSoftkeys();
    1d24:	1f df       	rcall	.-450    	; 0x1b64 <eeprom_UpdateMidiThrough>
    1d26:	b2 df       	rcall	.-156    	; 0x1c8c <eeprom_UpdateRegOut>
	eeprom_UpdateMidiThrough();
    1d28:	d3 cf       	rjmp	.-90     	; 0x1cd0 <eeprom_UpdateCCreg>
    1d2a:	08 95       	ret

00001d2c <eepromCopy>:
	eeprom_UpdateRegOut();
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
	eeprom_UpdateCCreg();
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1d3e:	11 c0       	rjmp	.+34     	; 0x1d62 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1d40:	7c 01       	movw	r14, r24
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	e2 1a       	sub	r14, r18
    1d46:	f2 0a       	sbc	r15, r18
    1d48:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <eeprom_read_byte>
    1d4c:	6e 01       	movw	r12, r28
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	c9 1a       	sub	r12, r25
    1d52:	d9 0a       	sbc	r13, r25
    1d54:	68 2f       	mov	r22, r24
    1d56:	ce 01       	movw	r24, r28
    1d58:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <eeprom_update_byte>
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1d5c:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1d5e:	e6 01       	movw	r28, r12
    1d60:	c7 01       	movw	r24, r14
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1d62:	8a 01       	movw	r16, r20
    1d64:	01 50       	subi	r16, 0x01	; 1
    1d66:	11 09       	sbc	r17, r1
    1d68:	45 2b       	or	r20, r21
    1d6a:	51 f7       	brne	.-44     	; 0x1d40 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	cf 90       	pop	r12
    1d7c:	08 95       	ret

00001d7e <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1d7e:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	58 e0       	ldi	r21, 0x08	; 8
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	78 e0       	ldi	r23, 0x08	; 8
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	ce df       	rcall	.-100    	; 0x1d2c <eepromCopy>
	lcd_waitSymbolOff();
    1d90:	0c 94 cb 3e 	jmp	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
    1d94:	08 95       	ret

00001d96 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1d96:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	58 e0       	ldi	r21, 0x08	; 8
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	98 e0       	ldi	r25, 0x08	; 8
    1da6:	c2 df       	rcall	.-124    	; 0x1d2c <eepromCopy>
	lcd_waitSymbolOff();
    1da8:	0c 94 cb 3e 	jmp	0x7d96	; 0x7d96 <lcd_waitSymbolOff>
    1dac:	08 95       	ret

00001dae <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <init_Timers+0x18>
    1db2:	e8 2f       	mov	r30, r24
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	e0 5b       	subi	r30, 0xB0	; 176
    1dbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	90 83       	st	Z, r25
    1dc2:	11 82       	std	Z+1, r1	; 0x01
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	8a 30       	cpi	r24, 0x0A	; 10
    1dc8:	a0 f3       	brcs	.-24     	; 0x1db2 <init_Timers+0x4>
    1dca:	e4 e6       	ldi	r30, 0x64	; 100
    1dcc:	f2 e0       	ldi	r31, 0x02	; 2
    1dce:	10 82       	st	Z, r1
    1dd0:	11 82       	std	Z+1, r1	; 0x01
    1dd2:	12 82       	std	Z+2, r1	; 0x02
    1dd4:	13 82       	std	Z+3, r1	; 0x03
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
    1ddc:	08 95       	ret

00001dde <init_HwTimer>:
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	84 bd       	out	0x24, r24	; 36
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	95 bd       	out	0x25, r25	; 37
    1de6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1dea:	89 ef       	ldi	r24, 0xF9	; 249
    1dec:	87 bd       	out	0x27, r24	; 39
    1dee:	85 b1       	in	r24, 0x05	; 5
    1df0:	8f 77       	andi	r24, 0x7F	; 127
    1df2:	85 b9       	out	0x05, r24	; 5
    1df4:	84 b1       	in	r24, 0x04	; 4
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	84 b9       	out	0x04, r24	; 4
    1dfa:	08 95       	ret

00001dfc <init_ADC>:
    1dfc:	87 e8       	ldi	r24, 0x87	; 135
    1dfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1e02:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1e06:	8f e7       	ldi	r24, 0x7F	; 127
    1e08:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1e12:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1e16:	ec e6       	ldi	r30, 0x6C	; 108
    1e18:	f3 e0       	ldi	r31, 0x03	; 3
    1e1a:	10 82       	st	Z, r1
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	81 83       	std	Z+1, r24	; 0x01
    1e20:	82 83       	std	Z+2, r24	; 0x02
    1e22:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	10 c0       	rjmp	.+32     	; 0x1e4a <init_ADC+0x4e>
    1e2a:	85 30       	cpi	r24, 0x05	; 5
    1e2c:	39 f4       	brne	.+14     	; 0x1e3c <init_ADC+0x40>
    1e2e:	e8 2f       	mov	r30, r24
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	ee 58       	subi	r30, 0x8E	; 142
    1e34:	fc 4f       	sbci	r31, 0xFC	; 252
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	90 83       	st	Z, r25
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <init_ADC+0x4c>
    1e3c:	e8 2f       	mov	r30, r24
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	ee 58       	subi	r30, 0x8E	; 142
    1e42:	fc 4f       	sbci	r31, 0xFC	; 252
    1e44:	9a e0       	ldi	r25, 0x0A	; 10
    1e46:	90 83       	st	Z, r25
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	86 30       	cpi	r24, 0x06	; 6
    1e4c:	70 f3       	brcs	.-36     	; 0x1e2a <init_ADC+0x2e>
    1e4e:	08 95       	ret

00001e50 <init_Pipe>:
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	88 b9       	out	0x08, r24	; 8
    1e54:	87 b9       	out	0x07, r24	; 7
    1e56:	82 b9       	out	0x02, r24	; 2
    1e58:	11 b8       	out	0x01, r1	; 1
    1e5a:	84 b3       	in	r24, 0x14	; 20
    1e5c:	87 60       	ori	r24, 0x07	; 7
    1e5e:	84 bb       	out	0x14, r24	; 20
    1e60:	83 b3       	in	r24, 0x13	; 19
    1e62:	87 60       	ori	r24, 0x07	; 7
    1e64:	83 bb       	out	0x13, r24	; 19
    1e66:	8b b1       	in	r24, 0x0b	; 11
    1e68:	8f 77       	andi	r24, 0x7F	; 127
    1e6a:	8b b9       	out	0x0b, r24	; 11
    1e6c:	8a b1       	in	r24, 0x0a	; 10
    1e6e:	80 68       	ori	r24, 0x80	; 128
    1e70:	8a b9       	out	0x0a, r24	; 10
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <init_Pipe+0x42>
    1e76:	e8 2f       	mov	r30, r24
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	ee 0f       	add	r30, r30
    1e80:	ff 1f       	adc	r31, r31
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	e4 59       	subi	r30, 0x94	; 148
    1e88:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8a:	9f ef       	ldi	r25, 0xFF	; 255
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	90 83       	st	Z, r25
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	80 32       	cpi	r24, 0x20	; 32
    1e94:	80 f3       	brcs	.-32     	; 0x1e76 <init_Pipe+0x26>
    1e96:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    1e9a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
    1e9e:	08 95       	ret

00001ea0 <init_PipeModules>:
    1ea0:	5c dc       	rcall	.-1864   	; 0x175a <eeprom_ReadModules>
    1ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea4:	59 f4       	brne	.+22     	; 0x1ebc <init_PipeModules+0x1c>
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
    1eb2:	e8 e7       	ldi	r30, 0x78	; 120
    1eb4:	f3 e0       	ldi	r31, 0x03	; 3
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	80 83       	st	Z, r24
    1eba:	81 83       	std	Z+1, r24	; 0x01
    1ebc:	8b b1       	in	r24, 0x0b	; 11
    1ebe:	8f 77       	andi	r24, 0x7F	; 127
    1ec0:	8b b9       	out	0x0b, r24	; 11
    1ec2:	84 b3       	in	r24, 0x14	; 20
    1ec4:	87 60       	ori	r24, 0x07	; 7
    1ec6:	84 bb       	out	0x14, r24	; 20
    1ec8:	84 b3       	in	r24, 0x14	; 20
    1eca:	8b 7f       	andi	r24, 0xFB	; 251
    1ecc:	84 bb       	out	0x14, r24	; 20
    1ece:	85 e0       	ldi	r24, 0x05	; 5
    1ed0:	8a 95       	dec	r24
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <init_PipeModules+0x30>
    1ed4:	00 00       	nop
    1ed6:	84 b3       	in	r24, 0x14	; 20
    1ed8:	84 60       	ori	r24, 0x04	; 4
    1eda:	84 bb       	out	0x14, r24	; 20
    1edc:	90 e2       	ldi	r25, 0x20	; 32
    1ede:	84 b3       	in	r24, 0x14	; 20
    1ee0:	81 60       	ori	r24, 0x01	; 1
    1ee2:	84 bb       	out	0x14, r24	; 20
    1ee4:	90 fd       	sbrc	r25, 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <init_PipeModules+0x4c>
    1ee8:	85 e5       	ldi	r24, 0x55	; 85
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <init_PipeModules+0x4e>
    1eec:	8a ea       	ldi	r24, 0xAA	; 170
    1eee:	88 b9       	out	0x08, r24	; 8
    1ef0:	80 b1       	in	r24, 0x00	; 0
    1ef2:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <pipe+0xff>
    1ef6:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <pipe+0xfe>
    1efa:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pipe+0xfd>
    1efe:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pipe+0xfc>
    1f02:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pipe+0xfb>
    1f06:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <pipe+0xfa>
    1f0a:	84 b3       	in	r24, 0x14	; 20
    1f0c:	8e 7f       	andi	r24, 0xFE	; 254
    1f0e:	84 bb       	out	0x14, r24	; 20
    1f10:	85 e0       	ldi	r24, 0x05	; 5
    1f12:	8a 95       	dec	r24
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <init_PipeModules+0x72>
    1f16:	00 00       	nop
    1f18:	91 50       	subi	r25, 0x01	; 1
    1f1a:	09 f7       	brne	.-62     	; 0x1ede <init_PipeModules+0x3e>
    1f1c:	90 e2       	ldi	r25, 0x20	; 32
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <init_PipeModules+0x9e>
    1f20:	84 b3       	in	r24, 0x14	; 20
    1f22:	81 60       	ori	r24, 0x01	; 1
    1f24:	84 bb       	out	0x14, r24	; 20
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	8a 95       	dec	r24
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <init_PipeModules+0x88>
    1f2c:	00 c0       	rjmp	.+0      	; 0x1f2e <init_PipeModules+0x8e>
    1f2e:	84 b3       	in	r24, 0x14	; 20
    1f30:	8e 7f       	andi	r24, 0xFE	; 254
    1f32:	84 bb       	out	0x14, r24	; 20
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	8a 95       	dec	r24
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <init_PipeModules+0x96>
    1f3a:	00 c0       	rjmp	.+0      	; 0x1f3c <init_PipeModules+0x9c>
    1f3c:	91 50       	subi	r25, 0x01	; 1
    1f3e:	91 11       	cpse	r25, r1
    1f40:	ef cf       	rjmp	.-34     	; 0x1f20 <init_PipeModules+0x80>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1f48:	90 e2       	ldi	r25, 0x20	; 32
    1f4a:	84 b3       	in	r24, 0x14	; 20
    1f4c:	81 60       	ori	r24, 0x01	; 1
    1f4e:	84 bb       	out	0x14, r24	; 20
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	88 b9       	out	0x08, r24	; 8
    1f54:	20 b1       	in	r18, 0x00	; 0
    1f56:	90 fd       	sbrc	r25, 0
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <init_PipeModules+0xbe>
    1f5a:	8a ea       	ldi	r24, 0xAA	; 170
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <init_PipeModules+0xc0>
    1f5e:	85 e5       	ldi	r24, 0x55	; 85
    1f60:	82 27       	eor	r24, r18
    1f62:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <pipe_ModuleTested>
    1f66:	82 23       	and	r24, r18
    1f68:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1f6c:	84 b3       	in	r24, 0x14	; 20
    1f6e:	8e 7f       	andi	r24, 0xFE	; 254
    1f70:	84 bb       	out	0x14, r24	; 20
    1f72:	85 e0       	ldi	r24, 0x05	; 5
    1f74:	8a 95       	dec	r24
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <init_PipeModules+0xd4>
    1f78:	00 00       	nop
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	31 f7       	brne	.-52     	; 0x1f4a <init_PipeModules+0xaa>
    1f7e:	00 00       	nop
    1f80:	00 00       	nop
    1f82:	84 b3       	in	r24, 0x14	; 20
    1f84:	81 60       	ori	r24, 0x01	; 1
    1f86:	84 bb       	out	0x14, r24	; 20
    1f88:	84 b3       	in	r24, 0x14	; 20
    1f8a:	87 60       	ori	r24, 0x07	; 7
    1f8c:	84 bb       	out	0x14, r24	; 20
    1f8e:	84 b3       	in	r24, 0x14	; 20
    1f90:	8b 7f       	andi	r24, 0xFB	; 251
    1f92:	84 bb       	out	0x14, r24	; 20
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	8a 95       	dec	r24
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <init_PipeModules+0xf6>
    1f9a:	00 c0       	rjmp	.+0      	; 0x1f9c <init_PipeModules+0xfc>
    1f9c:	84 b3       	in	r24, 0x14	; 20
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	84 bb       	out	0x14, r24	; 20
    1fa2:	90 e2       	ldi	r25, 0x20	; 32
    1fa4:	e4 e6       	ldi	r30, 0x64	; 100
    1fa6:	f3 e0       	ldi	r31, 0x03	; 3
    1fa8:	83 81       	ldd	r24, Z+3	; 0x03
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	84 81       	ldd	r24, Z+4	; 0x04
    1fae:	83 83       	std	Z+3, r24	; 0x03
    1fb0:	84 b3       	in	r24, 0x14	; 20
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	84 bb       	out	0x14, r24	; 20
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	81 83       	std	Z+1, r24	; 0x01
    1fba:	88 b9       	out	0x08, r24	; 8
    1fbc:	85 81       	ldd	r24, Z+5	; 0x05
    1fbe:	84 83       	std	Z+4, r24	; 0x04
    1fc0:	86 81       	ldd	r24, Z+6	; 0x06
    1fc2:	85 83       	std	Z+5, r24	; 0x05
    1fc4:	80 b1       	in	r24, 0x00	; 0
    1fc6:	86 83       	std	Z+6, r24	; 0x06
    1fc8:	82 83       	std	Z+2, r24	; 0x02
    1fca:	83 83       	std	Z+3, r24	; 0x03
    1fcc:	84 83       	std	Z+4, r24	; 0x04
    1fce:	85 83       	std	Z+5, r24	; 0x05
    1fd0:	87 83       	std	Z+7, r24	; 0x07
    1fd2:	84 b3       	in	r24, 0x14	; 20
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	84 bb       	out	0x14, r24	; 20
    1fd8:	38 97       	sbiw	r30, 0x08	; 8
    1fda:	91 50       	subi	r25, 0x01	; 1
    1fdc:	29 f7       	brne	.-54     	; 0x1fa8 <init_PipeModules+0x108>
    1fde:	00 00       	nop
    1fe0:	00 00       	nop
    1fe2:	84 b3       	in	r24, 0x14	; 20
    1fe4:	81 60       	ori	r24, 0x01	; 1
    1fe6:	84 bb       	out	0x14, r24	; 20
    1fe8:	84 b3       	in	r24, 0x14	; 20
    1fea:	8d 7f       	andi	r24, 0xFD	; 253
    1fec:	84 bb       	out	0x14, r24	; 20
    1fee:	18 b8       	out	0x08, r1	; 8
    1ff0:	85 e0       	ldi	r24, 0x05	; 5
    1ff2:	8a 95       	dec	r24
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <init_PipeModules+0x152>
    1ff6:	00 00       	nop
    1ff8:	84 b3       	in	r24, 0x14	; 20
    1ffa:	82 60       	ori	r24, 0x02	; 2
    1ffc:	84 bb       	out	0x14, r24	; 20
    1ffe:	08 95       	ret

00002000 <test_PipeModule>:
    2000:	88 30       	cpi	r24, 0x08	; 8
    2002:	08 f0       	brcs	.+2      	; 0x2006 <test_PipeModule+0x6>
    2004:	6a c0       	rjmp	.+212    	; 0x20da <test_PipeModule+0xda>
    2006:	31 e0       	ldi	r19, 0x01	; 1
    2008:	01 c0       	rjmp	.+2      	; 0x200c <test_PipeModule+0xc>
    200a:	33 0f       	add	r19, r19
    200c:	8a 95       	dec	r24
    200e:	ea f7       	brpl	.-6      	; 0x200a <test_PipeModule+0xa>
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    2016:	8b b1       	in	r24, 0x0b	; 11
    2018:	8f 77       	andi	r24, 0x7F	; 127
    201a:	8b b9       	out	0x0b, r24	; 11
    201c:	84 b3       	in	r24, 0x14	; 20
    201e:	87 60       	ori	r24, 0x07	; 7
    2020:	84 bb       	out	0x14, r24	; 20
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	1d c0       	rjmp	.+58     	; 0x2060 <test_PipeModule+0x60>
    2026:	20 fd       	sbrc	r18, 0
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <test_PipeModule+0x30>
    202a:	83 2f       	mov	r24, r19
    202c:	80 95       	com	r24
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <test_PipeModule+0x32>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	88 b9       	out	0x08, r24	; 8
    2034:	26 95       	lsr	r18
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	8a 95       	dec	r24
    203a:	f1 f7       	brne	.-4      	; 0x2038 <test_PipeModule+0x38>
    203c:	00 c0       	rjmp	.+0      	; 0x203e <test_PipeModule+0x3e>
    203e:	84 b3       	in	r24, 0x14	; 20
    2040:	8e 7f       	andi	r24, 0xFE	; 254
    2042:	84 bb       	out	0x14, r24	; 20
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	8a 95       	dec	r24
    2048:	f1 f7       	brne	.-4      	; 0x2046 <test_PipeModule+0x46>
    204a:	00 c0       	rjmp	.+0      	; 0x204c <test_PipeModule+0x4c>
    204c:	84 b3       	in	r24, 0x14	; 20
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	84 bb       	out	0x14, r24	; 20
    2052:	9f 5f       	subi	r25, 0xFF	; 255
    2054:	02 c0       	rjmp	.+4      	; 0x205a <test_PipeModule+0x5a>
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	25 ea       	ldi	r18, 0xA5	; 165
    205a:	98 30       	cpi	r25, 0x08	; 8
    205c:	20 f3       	brcs	.-56     	; 0x2026 <test_PipeModule+0x26>
    205e:	4f 5f       	subi	r20, 0xFF	; 255
    2060:	44 30       	cpi	r20, 0x04	; 4
    2062:	c8 f3       	brcs	.-14     	; 0x2056 <test_PipeModule+0x56>
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <test_PipeModule+0x86>
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	8a 95       	dec	r24
    206c:	f1 f7       	brne	.-4      	; 0x206a <test_PipeModule+0x6a>
    206e:	00 c0       	rjmp	.+0      	; 0x2070 <test_PipeModule+0x70>
    2070:	84 b3       	in	r24, 0x14	; 20
    2072:	8e 7f       	andi	r24, 0xFE	; 254
    2074:	84 bb       	out	0x14, r24	; 20
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	8a 95       	dec	r24
    207a:	f1 f7       	brne	.-4      	; 0x2078 <test_PipeModule+0x78>
    207c:	00 c0       	rjmp	.+0      	; 0x207e <test_PipeModule+0x7e>
    207e:	84 b3       	in	r24, 0x14	; 20
    2080:	81 60       	ori	r24, 0x01	; 1
    2082:	84 bb       	out	0x14, r24	; 20
    2084:	9f 5f       	subi	r25, 0xFF	; 255
    2086:	90 32       	cpi	r25, 0x20	; 32
    2088:	78 f3       	brcs	.-34     	; 0x2068 <test_PipeModule+0x68>
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	ba 01       	movw	r22, r20
    2092:	17 c0       	rjmp	.+46     	; 0x20c2 <test_PipeModule+0xc2>
    2094:	44 0f       	add	r20, r20
    2096:	55 1f       	adc	r21, r21
    2098:	66 1f       	adc	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	8a 95       	dec	r24
    20a0:	f1 f7       	brne	.-4      	; 0x209e <test_PipeModule+0x9e>
    20a2:	00 c0       	rjmp	.+0      	; 0x20a4 <test_PipeModule+0xa4>
    20a4:	84 b3       	in	r24, 0x14	; 20
    20a6:	8e 7f       	andi	r24, 0xFE	; 254
    20a8:	84 bb       	out	0x14, r24	; 20
    20aa:	80 b1       	in	r24, 0x00	; 0
    20ac:	83 23       	and	r24, r19
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <test_PipeModule+0xb2>
    20b0:	41 60       	ori	r20, 0x01	; 1
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	8a 95       	dec	r24
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <test_PipeModule+0xb4>
    20b8:	00 c0       	rjmp	.+0      	; 0x20ba <test_PipeModule+0xba>
    20ba:	84 b3       	in	r24, 0x14	; 20
    20bc:	81 60       	ori	r24, 0x01	; 1
    20be:	84 bb       	out	0x14, r24	; 20
    20c0:	9f 5f       	subi	r25, 0xFF	; 255
    20c2:	90 32       	cpi	r25, 0x20	; 32
    20c4:	38 f3       	brcs	.-50     	; 0x2094 <test_PipeModule+0x94>
    20c6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    20ca:	8b b1       	in	r24, 0x0b	; 11
    20cc:	80 68       	ori	r24, 0x80	; 128
    20ce:	8b b9       	out	0x0b, r24	; 11
    20d0:	34 2f       	mov	r19, r20
    20d2:	25 2f       	mov	r18, r21
    20d4:	86 2f       	mov	r24, r22
    20d6:	97 2f       	mov	r25, r23
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <test_PipeModule+0xe2>
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	63 2f       	mov	r22, r19
    20e4:	72 2f       	mov	r23, r18
    20e6:	08 95       	ret

000020e8 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    20e8:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    20ea:	ec e6       	ldi	r30, 0x6C	; 108
    20ec:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    20f2:	2f ef       	ldi	r18, 0xFF	; 255
    20f4:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    20f6:	26 81       	ldd	r18, Z+6	; 0x06
    20f8:	82 2b       	or	r24, r18
		pPipe++;
    20fa:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    20fc:	9f 5f       	subi	r25, 0xFF	; 255
    20fe:	90 32       	cpi	r25, 0x20	; 32
    2100:	c0 f3       	brcs	.-16     	; 0x20f2 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    2102:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    2106:	89 23       	and	r24, r25
    2108:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <pipe_ModuleTested>
}
    210c:	89 23       	and	r24, r25
    210e:	08 95       	ret

00002110 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    2110:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2114:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2118:	81 ff       	sbrs	r24, 1
    211a:	fc cf       	rjmp	.-8      	; 0x2114 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    211c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2120:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2124:	81 ff       	sbrs	r24, 1
    2126:	fc cf       	rjmp	.-8      	; 0x2120 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    2128:	08 95       	ret

0000212a <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    2130:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2132:	f8 94       	cli
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <module_StartPowerOn+0x18>
    2136:	e0 e5       	ldi	r30, 0x50	; 80
    2138:	f2 e0       	ldi	r31, 0x02	; 2
    213a:	88 e2       	ldi	r24, 0x28	; 40
    213c:	82 83       	std	Z+2, r24	; 0x02
    213e:	13 82       	std	Z+3, r1	; 0x03
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	81 11       	cpse	r24, r1
    2144:	f8 cf       	rjmp	.-16     	; 0x2136 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2146:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2148:	08 95       	ret

0000214a <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    214a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	31 f5       	brne	.+76     	; 0x219e <module_PowerControl+0x54>
		// part1: now check inputs
		if (module_TestAllInputs() == 0){
    2152:	ca df       	rcall	.-108    	; 0x20e8 <module_TestAllInputs>
    2154:	81 11       	cpse	r24, r1
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <module_PowerControl+0x36>
			// all inputs are low, no key is pressed, no register active, start power on and wait a little bit
			POWER_ON
    2158:	85 b1       	in	r24, 0x05	; 5
    215a:	80 64       	ori	r24, 0x40	; 64
    215c:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    215e:	82 e1       	ldi	r24, 0x12	; 18
    2160:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    2164:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2166:	f8 94       	cli
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <module_PowerControl+0x2e>
    216c:	e0 e5       	ldi	r30, 0x50	; 80
    216e:	f2 e0       	ldi	r31, 0x02	; 2
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	82 83       	std	Z+2, r24	; 0x02
    2174:	13 82       	std	Z+3, r1	; 0x03
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	81 11       	cpse	r24, r1
    217a:	f8 cf       	rjmp	.-16     	; 0x216c <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    217c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    217e:	08 95       	ret
		} else {
			// keys are not released: wait some time and then test again
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    2180:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2182:	f8 94       	cli
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	07 c0       	rjmp	.+14     	; 0x2196 <module_PowerControl+0x4c>
    2188:	e0 e5       	ldi	r30, 0x50	; 80
    218a:	f2 e0       	ldi	r31, 0x02	; 2
    218c:	8c e0       	ldi	r24, 0x0C	; 12
    218e:	82 83       	std	Z+2, r24	; 0x02
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	83 83       	std	Z+3, r24	; 0x03
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	81 11       	cpse	r24, r1
    2198:	f7 cf       	rjmp	.-18     	; 0x2188 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    219a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    219c:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    219e:	82 31       	cpi	r24, 0x12	; 18
		// part2: power is on for some time, test if every input is still inactive
		uint8_t testResult = module_TestAllInputs();
    21a0:	b1 f4       	brne	.+44     	; 0x21ce <module_PowerControl+0x84>
    21a2:	a2 df       	rcall	.-188    	; 0x20e8 <module_TestAllInputs>
		if (testResult == 0){
    21a4:	81 11       	cpse	r24, r1
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    21a8:	84 e1       	ldi	r24, 0x14	; 20
    21aa:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
    21ae:	0b c0       	rjmp	.+22     	; 0x21c6 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    21b0:	48 2f       	mov	r20, r24
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	85 e0       	ldi	r24, 0x05	; 5
    21b8:	f1 d6       	rcall	.+3554   	; 0x2f9c <log_putError>
			POWER_OFF
    21ba:	85 b1       	in	r24, 0x05	; 5
    21bc:	8f 7b       	andi	r24, 0xBF	; 191
    21be:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    21c0:	80 e8       	ldi	r24, 0x80	; 128
    21c2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    21cc:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    21d4:	08 95       	ret

000021d6 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    21da:	94 30       	cpi	r25, 0x04	; 4
    21dc:	50 f4       	brcc	.+20     	; 0x21f2 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    21de:	e9 2f       	mov	r30, r25
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	81 11       	cpse	r24, r1
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <softKey_WantLong+0x14>
    21e6:	2a e0       	ldi	r18, 0x0A	; 10
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <softKey_WantLong+0x16>
    21ea:	26 e0       	ldi	r18, 0x06	; 6
    21ec:	ee 58       	subi	r30, 0x8E	; 142
    21ee:	fc 4f       	sbci	r31, 0xFC	; 252
    21f0:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	96 30       	cpi	r25, 0x06	; 6
    21f6:	88 f3       	brcs	.-30     	; 0x21da <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    21f8:	08 95       	ret

000021fa <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	0b b6       	in	r0, 0x3b	; 59
    2206:	0f 92       	push	r0
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	ef 93       	push	r30
    222a:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    222c:	85 b1       	in	r24, 0x05	; 5
    222e:	80 68       	ori	r24, 0x80	; 128
    2230:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    2232:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <msecCtr>
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <msecCtr>
    223c:	83 70       	andi	r24, 0x03	; 3
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	09 f4       	brne	.+2      	; 0x2244 <__stack+0x45>
    2242:	58 c1       	rjmp	.+688    	; 0x24f4 <__stack+0x2f5>
    2244:	38 f0       	brcs	.+14     	; 0x2254 <__stack+0x55>
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	09 f4       	brne	.+2      	; 0x224c <__stack+0x4d>
    224a:	a5 c1       	rjmp	.+842    	; 0x2596 <__stack+0x397>
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	09 f4       	brne	.+2      	; 0x2252 <__stack+0x53>
    2250:	ca c1       	rjmp	.+916    	; 0x25e6 <__stack+0x3e7>
    2252:	05 c2       	rjmp	.+1034   	; 0x265e <__stack+0x45f>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    2254:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2258:	81 11       	cpse	r24, r1
    225a:	1a c1       	rjmp	.+564    	; 0x2490 <__stack+0x291>
    225c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2260:	96 fd       	sbrc	r25, 6
    2262:	16 c1       	rjmp	.+556    	; 0x2490 <__stack+0x291>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	f9 01       	movw	r30, r18
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	e2 0f       	add	r30, r18
    2270:	f3 1f       	adc	r31, r19
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	e4 59       	subi	r30, 0x94	; 148
    2278:	fc 4f       	sbci	r31, 0xFC	; 252
    227a:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    227c:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    2280:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    2282:	49 17       	cp	r20, r25
    2284:	10 f4       	brcc	.+4      	; 0x228a <__stack+0x8b>
		return data1-data2;
    2286:	94 1b       	sub	r25, r20
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <__stack+0x91>
	} else {
		return data2-data1;
    228a:	54 2f       	mov	r21, r20
    228c:	59 1b       	sub	r21, r25
    228e:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    2290:	94 30       	cpi	r25, 0x04	; 4
    2292:	08 f0       	brcs	.+2      	; 0x2296 <__stack+0x97>
    2294:	fd c0       	rjmp	.+506    	; 0x2490 <__stack+0x291>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    2296:	81 11       	cpse	r24, r1
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__stack+0xb7>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    229a:	42 32       	cpi	r20, 0x22	; 34
    229c:	70 f0       	brcs	.+28     	; 0x22ba <__stack+0xbb>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    229e:	4f 33       	cpi	r20, 0x3F	; 63
    22a0:	70 f0       	brcs	.+28     	; 0x22be <__stack+0xbf>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    22a2:	48 36       	cpi	r20, 0x68	; 104
    22a4:	70 f0       	brcs	.+28     	; 0x22c2 <__stack+0xc3>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    22a6:	46 39       	cpi	r20, 0x96	; 150
    22a8:	70 f0       	brcs	.+28     	; 0x22c6 <__stack+0xc7>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    22aa:	4f 3b       	cpi	r20, 0xBF	; 191
    22ac:	70 f0       	brcs	.+28     	; 0x22ca <__stack+0xcb>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    22ae:	48 3e       	cpi	r20, 0xE8	; 232
    22b0:	70 f4       	brcc	.+28     	; 0x22ce <__stack+0xcf>
					newKey = ADC_KEY0_FUNC;
    22b2:	c6 e0       	ldi	r28, 0x06	; 6
    22b4:	0d c0       	rjmp	.+26     	; 0x22d0 <__stack+0xd1>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    22b6:	cf ef       	ldi	r28, 0xFF	; 255
    22b8:	0b c0       	rjmp	.+22     	; 0x22d0 <__stack+0xd1>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    22ba:	c4 e0       	ldi	r28, 0x04	; 4
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <__stack+0xd1>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    22be:	c3 e0       	ldi	r28, 0x03	; 3
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <__stack+0xd1>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    22c2:	c5 e0       	ldi	r28, 0x05	; 5
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <__stack+0xd1>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    22c6:	c1 e0       	ldi	r28, 0x01	; 1
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <__stack+0xd1>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    22ca:	c2 e0       	ldi	r28, 0x02	; 2
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <__stack+0xd1>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    22ce:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    22d0:	f9 01       	movw	r30, r18
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	e2 0f       	add	r30, r18
    22d8:	f3 1f       	adc	r31, r19
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e4 59       	subi	r30, 0x94	; 148
    22e0:	fc 4f       	sbci	r31, 0xFC	; 252
    22e2:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    22e4:	dc 17       	cp	r29, r28
    22e6:	09 f4       	brne	.+2      	; 0x22ea <__stack+0xeb>
    22e8:	48 c0       	rjmp	.+144    	; 0x237a <__stack+0x17b>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    22ea:	df 3f       	cpi	r29, 0xFF	; 255
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <__stack+0xf5>
    22ee:	cf 3f       	cpi	r28, 0xFF	; 255
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <__stack+0xf5>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    22f2:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    22f4:	f9 01       	movw	r30, r18
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	e4 59       	subi	r30, 0x94	; 148
    2304:	fc 4f       	sbci	r31, 0xFC	; 252
    2306:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2308:	df 3f       	cpi	r29, 0xFF	; 255
    230a:	f9 f4       	brne	.+62     	; 0x234a <__stack+0x14b>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    230c:	c9 01       	movw	r24, r18
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	fc 01       	movw	r30, r24
    2314:	e2 0f       	add	r30, r18
    2316:	f3 1f       	adc	r31, r19
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	e4 59       	subi	r30, 0x94	; 148
    231e:	fc 4f       	sbci	r31, 0xFC	; 252
    2320:	15 82       	std	Z+5, r1	; 0x05
    2322:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e4 59       	subi	r30, 0x94	; 148
    2330:	fc 4f       	sbci	r31, 0xFC	; 252
    2332:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    2334:	ec 2f       	mov	r30, r28
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	ef 58       	subi	r30, 0x8F	; 143
    233a:	fc 4f       	sbci	r31, 0xFC	; 252
    233c:	80 81       	ld	r24, Z
    233e:	80 ff       	sbrs	r24, 0
    2340:	a7 c0       	rjmp	.+334    	; 0x2490 <__stack+0x291>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    2342:	8c 2f       	mov	r24, r28
    2344:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
    2348:	a3 c0       	rjmp	.+326    	; 0x2490 <__stack+0x291>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    234a:	ed 2f       	mov	r30, r29
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ef 58       	subi	r30, 0x8F	; 143
    2350:	fc 4f       	sbci	r31, 0xFC	; 252
    2352:	80 81       	ld	r24, Z
    2354:	81 ff       	sbrs	r24, 1
    2356:	9c c0       	rjmp	.+312    	; 0x2490 <__stack+0x291>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    2358:	f9 01       	movw	r30, r18
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	e2 0f       	add	r30, r18
    2360:	f3 1f       	adc	r31, r19
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	e4 59       	subi	r30, 0x94	; 148
    2368:	fc 4f       	sbci	r31, 0xFC	; 252
    236a:	83 81       	ldd	r24, Z+3	; 0x03
    236c:	83 70       	andi	r24, 0x03	; 3
    236e:	09 f0       	breq	.+2      	; 0x2372 <__stack+0x173>
    2370:	8f c0       	rjmp	.+286    	; 0x2490 <__stack+0x291>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    2372:	8d 2f       	mov	r24, r29
    2374:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
    2378:	8b c0       	rjmp	.+278    	; 0x2490 <__stack+0x291>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    237a:	cf 3f       	cpi	r28, 0xFF	; 255
    237c:	09 f4       	brne	.+2      	; 0x2380 <__stack+0x181>
    237e:	88 c0       	rjmp	.+272    	; 0x2490 <__stack+0x291>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    2380:	f9 01       	movw	r30, r18
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	df 01       	movw	r26, r30
    2388:	a2 0f       	add	r26, r18
    238a:	b3 1f       	adc	r27, r19
    238c:	aa 0f       	add	r26, r26
    238e:	bb 1f       	adc	r27, r27
    2390:	a4 59       	subi	r26, 0x94	; 148
    2392:	bc 4f       	sbci	r27, 0xFC	; 252
    2394:	14 96       	adiw	r26, 0x04	; 4
    2396:	8d 91       	ld	r24, X+
    2398:	9c 91       	ld	r25, X
    239a:	15 97       	sbiw	r26, 0x05	; 5
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	15 96       	adiw	r26, 0x05	; 5
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
    23a4:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    23a6:	fd 01       	movw	r30, r26
    23a8:	84 81       	ldd	r24, Z+4	; 0x04
    23aa:	95 81       	ldd	r25, Z+5	; 0x05
    23ac:	8b 34       	cpi	r24, 0x4B	; 75
    23ae:	91 05       	cpc	r25, r1
    23b0:	a9 f4       	brne	.+42     	; 0x23dc <__stack+0x1dd>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    23b2:	ed 2f       	mov	r30, r29
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	ef 58       	subi	r30, 0x8F	; 143
    23b8:	fc 4f       	sbci	r31, 0xFC	; 252
    23ba:	80 81       	ld	r24, Z
    23bc:	82 ff       	sbrs	r24, 2
    23be:	0e c0       	rjmp	.+28     	; 0x23dc <__stack+0x1dd>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    23c0:	8c 2f       	mov	r24, r28
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    23c8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <adcNr>
    23cc:	86 e0       	ldi	r24, 0x06	; 6
    23ce:	e8 9f       	mul	r30, r24
    23d0:	f0 01       	movw	r30, r0
    23d2:	11 24       	eor	r1, r1
    23d4:	e4 59       	subi	r30, 0x94	; 148
    23d6:	fc 4f       	sbci	r31, 0xFC	; 252
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    23dc:	ed 2f       	mov	r30, r29
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	ef 58       	subi	r30, 0x8F	; 143
    23e2:	fc 4f       	sbci	r31, 0xFC	; 252
    23e4:	80 81       	ld	r24, Z
    23e6:	83 ff       	sbrs	r24, 3
    23e8:	53 c0       	rjmp	.+166    	; 0x2490 <__stack+0x291>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    23ea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e8 0f       	add	r30, r24
    23f8:	f9 1f       	adc	r31, r25
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	e4 59       	subi	r30, 0x94	; 148
    2400:	fc 4f       	sbci	r31, 0xFC	; 252
    2402:	23 81       	ldd	r18, Z+3	; 0x03
    2404:	21 11       	cpse	r18, r1
    2406:	1e c0       	rjmp	.+60     	; 0x2444 <__stack+0x245>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2408:	fc 01       	movw	r30, r24
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	e8 0f       	add	r30, r24
    2410:	f9 1f       	adc	r31, r25
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	e4 59       	subi	r30, 0x94	; 148
    2418:	fc 4f       	sbci	r31, 0xFC	; 252
    241a:	24 81       	ldd	r18, Z+4	; 0x04
    241c:	35 81       	ldd	r19, Z+5	; 0x05
    241e:	22 33       	cpi	r18, 0x32	; 50
    2420:	31 05       	cpc	r19, r1
    2422:	b1 f5       	brne	.+108    	; 0x2490 <__stack+0x291>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2424:	26 e0       	ldi	r18, 0x06	; 6
    2426:	28 9f       	mul	r18, r24
    2428:	f0 01       	movw	r30, r0
    242a:	29 9f       	mul	r18, r25
    242c:	f0 0d       	add	r31, r0
    242e:	11 24       	eor	r1, r1
    2430:	e4 59       	subi	r30, 0x94	; 148
    2432:	fc 4f       	sbci	r31, 0xFC	; 252
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2438:	15 82       	std	Z+5, r1	; 0x05
    243a:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    243c:	8c 2f       	mov	r24, r28
    243e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
    2442:	26 c0       	rjmp	.+76     	; 0x2490 <__stack+0x291>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2444:	fc 01       	movw	r30, r24
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	e8 0f       	add	r30, r24
    244c:	f9 1f       	adc	r31, r25
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	e4 59       	subi	r30, 0x94	; 148
    2454:	fc 4f       	sbci	r31, 0xFC	; 252
    2456:	23 81       	ldd	r18, Z+3	; 0x03
    2458:	21 30       	cpi	r18, 0x01	; 1
    245a:	d1 f4       	brne	.+52     	; 0x2490 <__stack+0x291>
    245c:	26 e0       	ldi	r18, 0x06	; 6
    245e:	28 9f       	mul	r18, r24
    2460:	f0 01       	movw	r30, r0
    2462:	29 9f       	mul	r18, r25
    2464:	f0 0d       	add	r31, r0
    2466:	11 24       	eor	r1, r1
    2468:	e4 59       	subi	r30, 0x94	; 148
    246a:	fc 4f       	sbci	r31, 0xFC	; 252
    246c:	24 81       	ldd	r18, Z+4	; 0x04
    246e:	35 81       	ldd	r19, Z+5	; 0x05
    2470:	2c 30       	cpi	r18, 0x0C	; 12
    2472:	31 05       	cpc	r19, r1
    2474:	69 f4       	brne	.+26     	; 0x2490 <__stack+0x291>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    2476:	26 e0       	ldi	r18, 0x06	; 6
    2478:	28 9f       	mul	r18, r24
    247a:	f0 01       	movw	r30, r0
    247c:	29 9f       	mul	r18, r25
    247e:	f0 0d       	add	r31, r0
    2480:	11 24       	eor	r1, r1
    2482:	e4 59       	subi	r30, 0x94	; 148
    2484:	fc 4f       	sbci	r31, 0xFC	; 252
    2486:	15 82       	std	Z+5, r1	; 0x05
    2488:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    248a:	8c 2f       	mov	r24, r28
    248c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2490:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    249a:	84 30       	cpi	r24, 0x04	; 4
    249c:	10 f0       	brcs	.+4      	; 0x24a2 <__stack+0x2a3>
		adcNr = 0;
    249e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    24a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    24a6:	81 11       	cpse	r24, r1
    24a8:	0c c0       	rjmp	.+24     	; 0x24c2 <__stack+0x2c3>
		newMux = adcKeys[adcNr].mux;
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	fc 01       	movw	r30, r24
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	e8 0f       	add	r30, r24
    24b4:	f9 1f       	adc	r31, r25
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	e4 59       	subi	r30, 0x94	; 148
    24bc:	fc 4f       	sbci	r31, 0xFC	; 252
    24be:	80 81       	ld	r24, Z
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <__stack+0x2c5>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    24c2:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    24c4:	98 2f       	mov	r25, r24
    24c6:	9f 71       	andi	r25, 0x1F	; 31
    24c8:	90 66       	ori	r25, 0x60	; 96
    24ca:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    24ce:	eb e7       	ldi	r30, 0x7B	; 123
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	20 81       	ld	r18, Z
    24d4:	80 72       	andi	r24, 0x20	; 32
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	95 95       	asr	r25
    24de:	87 95       	ror	r24
    24e0:	92 2f       	mov	r25, r18
    24e2:	9f 7d       	andi	r25, 0xDF	; 223
    24e4:	89 2b       	or	r24, r25
    24e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    24e8:	ea e7       	ldi	r30, 0x7A	; 122
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 64       	ori	r24, 0x40	; 64
    24f0:	80 83       	st	Z, r24
    24f2:	b5 c0       	rjmp	.+362    	; 0x265e <__stack+0x45f>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    24f4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    24f8:	80 38       	cpi	r24, 0x80	; 128
    24fa:	09 f4       	brne	.+2      	; 0x24fe <__stack+0x2ff>
    24fc:	b0 c0       	rjmp	.+352    	; 0x265e <__stack+0x45f>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    24fe:	84 b3       	in	r24, 0x14	; 20
    2500:	87 60       	ori	r24, 0x07	; 7
    2502:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2504:	84 b3       	in	r24, 0x14	; 20
    2506:	8b 7f       	andi	r24, 0xFB	; 251
    2508:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    250a:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <pipe_Module+0x1>
    250e:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2510:	e2 e0       	ldi	r30, 0x02	; 2
    2512:	ea 95       	dec	r30
    2514:	f1 f7       	brne	.-4      	; 0x2512 <__stack+0x313>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <__stack+0x319>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2518:	84 b3       	in	r24, 0x14	; 20
    251a:	84 60       	ori	r24, 0x04	; 4
    251c:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    251e:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2520:	e4 e6       	ldi	r30, 0x64	; 100
    2522:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2524:	83 81       	ldd	r24, Z+3	; 0x03
    2526:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2528:	84 81       	ldd	r24, Z+4	; 0x04
    252a:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    252c:	84 b3       	in	r24, 0x14	; 20
    252e:	81 60       	ori	r24, 0x01	; 1
    2530:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	82 2b       	or	r24, r18
    2536:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2538:	85 81       	ldd	r24, Z+5	; 0x05
    253a:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    253c:	86 81       	ldd	r24, Z+6	; 0x06
    253e:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2540:	80 b1       	in	r24, 0x00	; 0
    2542:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2544:	84 b3       	in	r24, 0x14	; 20
    2546:	8e 7f       	andi	r24, 0xFE	; 254
    2548:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    254a:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    254c:	91 50       	subi	r25, 0x01	; 1
    254e:	51 f7       	brne	.-44     	; 0x2524 <__stack+0x325>
	asm("nop");
    2550:	00 00       	nop
	asm("nop");
    2552:	00 00       	nop
	PIPE_CLOCK_H
    2554:	84 b3       	in	r24, 0x14	; 20
    2556:	81 60       	ori	r24, 0x01	; 1
    2558:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    255a:	84 b3       	in	r24, 0x14	; 20
    255c:	8d 7f       	andi	r24, 0xFD	; 253
    255e:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    2560:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2564:	82 60       	ori	r24, 0x02	; 2
    2566:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    256a:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    256c:	8b b1       	in	r24, 0x0b	; 11
    256e:	80 68       	ori	r24, 0x80	; 128
    2570:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    2572:	84 b3       	in	r24, 0x14	; 20
    2574:	82 60       	ori	r24, 0x02	; 2
    2576:	84 bb       	out	0x14, r24	; 20
    2578:	72 c0       	rjmp	.+228    	; 0x265e <__stack+0x45f>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    257a:	80 81       	ld	r24, Z
    257c:	81 50       	subi	r24, 0x01	; 1
    257e:	8e 3f       	cpi	r24, 0xFE	; 254
    2580:	38 f4       	brcc	.+14     	; 0x2590 <__stack+0x391>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    2582:	21 81       	ldd	r18, Z+1	; 0x01
    2584:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    2586:	25 30       	cpi	r18, 0x05	; 5
    2588:	10 f0       	brcs	.+4      	; 0x258e <__stack+0x38f>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    258a:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    258c:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    258e:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2590:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2592:	9f 5f       	subi	r25, 0xFF	; 255
    2594:	03 c0       	rjmp	.+6      	; 0x259c <__stack+0x39d>
    2596:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    2598:	e0 e5       	ldi	r30, 0x50	; 80
    259a:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    259c:	9a 30       	cpi	r25, 0x0A	; 10
    259e:	68 f3       	brcs	.-38     	; 0x257a <__stack+0x37b>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    25a0:	e4 e6       	ldi	r30, 0x64	; 100
    25a2:	f2 e0       	ldi	r31, 0x02	; 2
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 5f       	subi	r24, 0xFF	; 255
    25a8:	80 83       	st	Z, r24
    25aa:	8a 3f       	cpi	r24, 0xFA	; 250
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__stack+0x3b1>
    25ae:	57 c0       	rjmp	.+174    	; 0x265e <__stack+0x45f>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    25b6:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	81 83       	std	Z+1, r24	; 0x01
    25be:	8c 33       	cpi	r24, 0x3C	; 60
    25c0:	08 f4       	brcc	.+2      	; 0x25c4 <__stack+0x3c5>
    25c2:	4d c0       	rjmp	.+154    	; 0x265e <__stack+0x45f>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    25c4:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	82 83       	std	Z+2, r24	; 0x02
    25cc:	8c 33       	cpi	r24, 0x3C	; 60
    25ce:	08 f4       	brcc	.+2      	; 0x25d2 <__stack+0x3d3>
    25d0:	46 c0       	rjmp	.+140    	; 0x265e <__stack+0x45f>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    25d2:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    25d4:	83 81       	ldd	r24, Z+3	; 0x03
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	83 83       	std	Z+3, r24	; 0x03
    25da:	84 36       	cpi	r24, 0x64	; 100
    25dc:	08 f4       	brcc	.+2      	; 0x25e0 <__stack+0x3e1>
    25de:	3f c0       	rjmp	.+126    	; 0x265e <__stack+0x45f>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    25e0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <time_Uptime+0x3>
    25e4:	3c c0       	rjmp	.+120    	; 0x265e <__stack+0x45f>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    25e6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    25ea:	80 38       	cpi	r24, 0x80	; 128
    25ec:	c1 f1       	breq	.+112    	; 0x265e <__stack+0x45f>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    25ee:	e0 90 78 03 	lds	r14, 0x0378	; 0x800378 <pipe_Module>
    25f2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    25f6:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    25f8:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    25fa:	0c e6       	ldi	r16, 0x6C	; 108
    25fc:	12 e0       	ldi	r17, 0x02	; 2
    25fe:	2c c0       	rjmp	.+88     	; 0x2658 <__stack+0x459>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2600:	f8 01       	movw	r30, r16
    2602:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2604:	83 81       	ldd	r24, Z+3	; 0x03
    2606:	9c 2f       	mov	r25, r28
    2608:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    260a:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2610:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2612:	25 81       	ldd	r18, Z+5	; 0x05
    2614:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2616:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2618:	86 81       	ldd	r24, Z+6	; 0x06
    261a:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    261c:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    261e:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2620:	cd 23       	and	r28, r29
    2622:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2624:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2626:	8d 2f       	mov	r24, r29
    2628:	80 95       	com	r24
    262a:	8c 23       	and	r24, r28
    262c:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    262e:	21 f0       	breq	.+8      	; 0x2638 <__stack+0x439>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2630:	9f 2d       	mov	r25, r15
    2632:	90 62       	ori	r25, 0x20	; 32
    2634:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2638:	c0 95       	com	r28
    263a:	cd 23       	and	r28, r29
    263c:	8c 2f       	mov	r24, r28
    263e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2640:	19 f0       	breq	.+6      	; 0x2648 <__stack+0x449>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2642:	9f 2d       	mov	r25, r15
    2644:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <pipeMsgPush>
		}
		curPipe++;
    2648:	08 5f       	subi	r16, 0xF8	; 248
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    264c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2650:	81 60       	ori	r24, 0x01	; 1
    2652:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2656:	f3 94       	inc	r15
    2658:	ff e1       	ldi	r31, 0x1F	; 31
    265a:	ff 15       	cp	r31, r15
    265c:	88 f6       	brcc	.-94     	; 0x2600 <__stack+0x401>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    265e:	85 b1       	in	r24, 0x05	; 5
    2660:	8f 77       	andi	r24, 0x7F	; 127
    2662:	85 b9       	out	0x05, r24	; 5

}
    2664:	ff 91       	pop	r31
    2666:	ef 91       	pop	r30
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	bf 91       	pop	r27
    266e:	af 91       	pop	r26
    2670:	9f 91       	pop	r25
    2672:	8f 91       	pop	r24
    2674:	7f 91       	pop	r23
    2676:	6f 91       	pop	r22
    2678:	5f 91       	pop	r21
    267a:	4f 91       	pop	r20
    267c:	3f 91       	pop	r19
    267e:	2f 91       	pop	r18
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	0f 90       	pop	r0
    268a:	0b be       	out	0x3b, r0	; 59
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

00002696 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    2696:	e8 2f       	mov	r30, r24
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e4 59       	subi	r30, 0x94	; 148
    26a8:	fd 4f       	sbci	r31, 0xFD	; 253
    26aa:	60 95       	com	r22
    26ac:	81 81       	ldd	r24, Z+1	; 0x01
    26ae:	68 23       	and	r22, r24
    26b0:	61 83       	std	Z+1, r22	; 0x01
    26b2:	08 95       	ret

000026b4 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    26b4:	e8 2f       	mov	r30, r24
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	e4 59       	subi	r30, 0x94	; 148
    26c6:	fd 4f       	sbci	r31, 0xFD	; 253
    26c8:	81 81       	ldd	r24, Z+1	; 0x01
    26ca:	68 2b       	or	r22, r24
    26cc:	61 83       	std	Z+1, r22	; 0x01
    26ce:	08 95       	ret

000026d0 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    26d4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    26d6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    26d8:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    26da:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    26dc:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    26de:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    26e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    26e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    26e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    26ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    26f0:	8a b1       	in	r24, 0x0a	; 10
    26f2:	80 68       	ori	r24, 0x80	; 128
    26f4:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    26f6:	8b b1       	in	r24, 0x0b	; 11
    26f8:	8f 77       	andi	r24, 0x7F	; 127
    26fa:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    26fc:	84 b1       	in	r24, 0x04	; 4
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2702:	85 b1       	in	r24, 0x05	; 5
    2704:	8f 7b       	andi	r24, 0xBF	; 191
    2706:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2708:	84 b1       	in	r24, 0x04	; 4
    270a:	80 63       	ori	r24, 0x30	; 48
    270c:	84 b9       	out	0x04, r24	; 4
    270e:	08 95       	ret

00002710 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2710:	88 23       	and	r24, r24
    2712:	34 f4       	brge	.+12     	; 0x2720 <lcd_write_nibble+0x10>
    2714:	e2 e0       	ldi	r30, 0x02	; 2
    2716:	f1 e0       	ldi	r31, 0x01	; 1
    2718:	90 81       	ld	r25, Z
    271a:	90 61       	ori	r25, 0x10	; 16
    271c:	90 83       	st	Z, r25
    271e:	05 c0       	rjmp	.+10     	; 0x272a <lcd_write_nibble+0x1a>
    2720:	e2 e0       	ldi	r30, 0x02	; 2
    2722:	f1 e0       	ldi	r31, 0x01	; 1
    2724:	90 81       	ld	r25, Z
    2726:	9f 7e       	andi	r25, 0xEF	; 239
    2728:	90 83       	st	Z, r25
    272a:	86 ff       	sbrs	r24, 6
    272c:	06 c0       	rjmp	.+12     	; 0x273a <lcd_write_nibble+0x2a>
    272e:	e2 e0       	ldi	r30, 0x02	; 2
    2730:	f1 e0       	ldi	r31, 0x01	; 1
    2732:	90 81       	ld	r25, Z
    2734:	98 60       	ori	r25, 0x08	; 8
    2736:	90 83       	st	Z, r25
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <lcd_write_nibble+0x34>
    273a:	e2 e0       	ldi	r30, 0x02	; 2
    273c:	f1 e0       	ldi	r31, 0x01	; 1
    273e:	90 81       	ld	r25, Z
    2740:	97 7f       	andi	r25, 0xF7	; 247
    2742:	90 83       	st	Z, r25
    2744:	85 ff       	sbrs	r24, 5
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <lcd_write_nibble+0x40>
    2748:	9e b1       	in	r25, 0x0e	; 14
    274a:	98 60       	ori	r25, 0x08	; 8
    274c:	9e b9       	out	0x0e, r25	; 14
    274e:	03 c0       	rjmp	.+6      	; 0x2756 <lcd_write_nibble+0x46>
    2750:	9e b1       	in	r25, 0x0e	; 14
    2752:	97 7f       	andi	r25, 0xF7	; 247
    2754:	9e b9       	out	0x0e, r25	; 14
    2756:	84 ff       	sbrs	r24, 4
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <lcd_write_nibble+0x52>
    275a:	84 b3       	in	r24, 0x14	; 20
    275c:	80 62       	ori	r24, 0x20	; 32
    275e:	84 bb       	out	0x14, r24	; 20
    2760:	03 c0       	rjmp	.+6      	; 0x2768 <lcd_write_nibble+0x58>
    2762:	84 b3       	in	r24, 0x14	; 20
    2764:	8f 7d       	andi	r24, 0xDF	; 223
    2766:	84 bb       	out	0x14, r24	; 20
    2768:	e2 e0       	ldi	r30, 0x02	; 2
    276a:	f1 e0       	ldi	r31, 0x01	; 1
    276c:	80 81       	ld	r24, Z
    276e:	80 64       	ori	r24, 0x40	; 64
    2770:	80 83       	st	Z, r24
    2772:	85 e0       	ldi	r24, 0x05	; 5
    2774:	8a 95       	dec	r24
    2776:	f1 f7       	brne	.-4      	; 0x2774 <lcd_write_nibble+0x64>
    2778:	00 00       	nop
    277a:	80 81       	ld	r24, Z
    277c:	8f 7b       	andi	r24, 0xBF	; 191
    277e:	80 83       	st	Z, r24
    2780:	85 e0       	ldi	r24, 0x05	; 5
    2782:	8a 95       	dec	r24
    2784:	f1 f7       	brne	.-4      	; 0x2782 <lcd_write_nibble+0x72>
    2786:	00 00       	nop
    2788:	08 95       	ret

0000278a <lcd_write_character>:
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	d8 2f       	mov	r29, r24
    2790:	c5 b1       	in	r28, 0x05	; 5
    2792:	c0 73       	andi	r28, 0x30	; 48
    2794:	85 b1       	in	r24, 0x05	; 5
    2796:	8f 7c       	andi	r24, 0xCF	; 207
    2798:	80 61       	ori	r24, 0x10	; 16
    279a:	85 b9       	out	0x05, r24	; 5
    279c:	e2 e0       	ldi	r30, 0x02	; 2
    279e:	f1 e0       	ldi	r31, 0x01	; 1
    27a0:	80 81       	ld	r24, Z
    27a2:	80 62       	ori	r24, 0x20	; 32
    27a4:	80 83       	st	Z, r24
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7b       	andi	r24, 0xBF	; 191
    27aa:	80 83       	st	Z, r24
    27ac:	8d 2f       	mov	r24, r29
    27ae:	b0 df       	rcall	.-160    	; 0x2710 <lcd_write_nibble>
    27b0:	8d 2f       	mov	r24, r29
    27b2:	82 95       	swap	r24
    27b4:	80 7f       	andi	r24, 0xF0	; 240
    27b6:	ac df       	rcall	.-168    	; 0x2710 <lcd_write_nibble>
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <lcd_write_character+0x32>
    27c0:	00 c0       	rjmp	.+0      	; 0x27c2 <lcd_write_character+0x38>
    27c2:	00 00       	nop
    27c4:	85 b1       	in	r24, 0x05	; 5
    27c6:	8f 7c       	andi	r24, 0xCF	; 207
    27c8:	c8 2b       	or	r28, r24
    27ca:	c5 b9       	out	0x05, r28	; 5
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <lcd_write_command>:
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	d8 2f       	mov	r29, r24
    27d8:	c5 b1       	in	r28, 0x05	; 5
    27da:	c0 73       	andi	r28, 0x30	; 48
    27dc:	85 b1       	in	r24, 0x05	; 5
    27de:	8f 7c       	andi	r24, 0xCF	; 207
    27e0:	80 61       	ori	r24, 0x10	; 16
    27e2:	85 b9       	out	0x05, r24	; 5
    27e4:	e2 e0       	ldi	r30, 0x02	; 2
    27e6:	f1 e0       	ldi	r31, 0x01	; 1
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 7d       	andi	r24, 0xDF	; 223
    27ec:	80 83       	st	Z, r24
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7b       	andi	r24, 0xBF	; 191
    27f2:	80 83       	st	Z, r24
    27f4:	8d 2f       	mov	r24, r29
    27f6:	8c df       	rcall	.-232    	; 0x2710 <lcd_write_nibble>
    27f8:	8d 2f       	mov	r24, r29
    27fa:	82 95       	swap	r24
    27fc:	80 7f       	andi	r24, 0xF0	; 240
    27fe:	88 df       	rcall	.-240    	; 0x2710 <lcd_write_nibble>
    2800:	d1 50       	subi	r29, 0x01	; 1
    2802:	d2 30       	cpi	r29, 0x02	; 2
    2804:	38 f4       	brcc	.+14     	; 0x2814 <lcd_write_command+0x42>
    2806:	8f e0       	ldi	r24, 0x0F	; 15
    2808:	97 e2       	ldi	r25, 0x27	; 39
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <lcd_write_command+0x38>
    280e:	00 c0       	rjmp	.+0      	; 0x2810 <lcd_write_command+0x3e>
    2810:	00 00       	nop
    2812:	06 c0       	rjmp	.+12     	; 0x2820 <lcd_write_command+0x4e>
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <lcd_write_command+0x46>
    281c:	00 c0       	rjmp	.+0      	; 0x281e <lcd_write_command+0x4c>
    281e:	00 00       	nop
    2820:	85 b1       	in	r24, 0x05	; 5
    2822:	8f 7c       	andi	r24, 0xCF	; 207
    2824:	c8 2b       	or	r28, r24
    2826:	c5 b9       	out	0x05, r28	; 5
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <lcd_init>:
    282e:	cf 93       	push	r28
    2830:	c5 b1       	in	r28, 0x05	; 5
    2832:	c0 73       	andi	r28, 0x30	; 48
    2834:	85 b1       	in	r24, 0x05	; 5
    2836:	8f 7c       	andi	r24, 0xCF	; 207
    2838:	80 61       	ori	r24, 0x10	; 16
    283a:	85 b9       	out	0x05, r24	; 5
    283c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
    2840:	e1 e0       	ldi	r30, 0x01	; 1
    2842:	f1 e0       	ldi	r31, 0x01	; 1
    2844:	80 81       	ld	r24, Z
    2846:	80 61       	ori	r24, 0x10	; 16
    2848:	80 83       	st	Z, r24
    284a:	80 81       	ld	r24, Z
    284c:	88 60       	ori	r24, 0x08	; 8
    284e:	80 83       	st	Z, r24
    2850:	8d b1       	in	r24, 0x0d	; 13
    2852:	88 60       	ori	r24, 0x08	; 8
    2854:	8d b9       	out	0x0d, r24	; 13
    2856:	83 b3       	in	r24, 0x13	; 19
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	83 bb       	out	0x13, r24	; 19
    285c:	80 81       	ld	r24, Z
    285e:	80 64       	ori	r24, 0x40	; 64
    2860:	80 83       	st	Z, r24
    2862:	80 81       	ld	r24, Z
    2864:	80 62       	ori	r24, 0x20	; 32
    2866:	80 83       	st	Z, r24
    2868:	2f ef       	ldi	r18, 0xFF	; 255
    286a:	81 ee       	ldi	r24, 0xE1	; 225
    286c:	94 e0       	ldi	r25, 0x04	; 4
    286e:	21 50       	subi	r18, 0x01	; 1
    2870:	80 40       	sbci	r24, 0x00	; 0
    2872:	90 40       	sbci	r25, 0x00	; 0
    2874:	e1 f7       	brne	.-8      	; 0x286e <lcd_init+0x40>
    2876:	00 c0       	rjmp	.+0      	; 0x2878 <lcd_init+0x4a>
    2878:	00 00       	nop
    287a:	e2 e0       	ldi	r30, 0x02	; 2
    287c:	f1 e0       	ldi	r31, 0x01	; 1
    287e:	80 81       	ld	r24, Z
    2880:	8f 7d       	andi	r24, 0xDF	; 223
    2882:	80 83       	st	Z, r24
    2884:	80 81       	ld	r24, Z
    2886:	8f 7b       	andi	r24, 0xBF	; 191
    2888:	80 83       	st	Z, r24
    288a:	80 e3       	ldi	r24, 0x30	; 48
    288c:	41 df       	rcall	.-382    	; 0x2710 <lcd_write_nibble>
    288e:	8f e1       	ldi	r24, 0x1F	; 31
    2890:	9e e4       	ldi	r25, 0x4E	; 78
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <lcd_init+0x64>
    2896:	00 c0       	rjmp	.+0      	; 0x2898 <lcd_init+0x6a>
    2898:	00 00       	nop
    289a:	80 e3       	ldi	r24, 0x30	; 48
    289c:	39 df       	rcall	.-398    	; 0x2710 <lcd_write_nibble>
    289e:	8f e1       	ldi	r24, 0x1F	; 31
    28a0:	9e e4       	ldi	r25, 0x4E	; 78
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <lcd_init+0x74>
    28a6:	00 c0       	rjmp	.+0      	; 0x28a8 <lcd_init+0x7a>
    28a8:	00 00       	nop
    28aa:	80 e3       	ldi	r24, 0x30	; 48
    28ac:	31 df       	rcall	.-414    	; 0x2710 <lcd_write_nibble>
    28ae:	8f e1       	ldi	r24, 0x1F	; 31
    28b0:	9e e4       	ldi	r25, 0x4E	; 78
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <lcd_init+0x84>
    28b6:	00 c0       	rjmp	.+0      	; 0x28b8 <lcd_init+0x8a>
    28b8:	00 00       	nop
    28ba:	88 e2       	ldi	r24, 0x28	; 40
    28bc:	29 df       	rcall	.-430    	; 0x2710 <lcd_write_nibble>
    28be:	8f ef       	ldi	r24, 0xFF	; 255
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <lcd_init+0x94>
    28c6:	00 c0       	rjmp	.+0      	; 0x28c8 <lcd_init+0x9a>
    28c8:	00 00       	nop
    28ca:	88 e2       	ldi	r24, 0x28	; 40
    28cc:	82 df       	rcall	.-252    	; 0x27d2 <lcd_write_command>
    28ce:	88 e0       	ldi	r24, 0x08	; 8
    28d0:	80 df       	rcall	.-256    	; 0x27d2 <lcd_write_command>
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	7e df       	rcall	.-260    	; 0x27d2 <lcd_write_command>
    28d6:	86 e0       	ldi	r24, 0x06	; 6
    28d8:	7c df       	rcall	.-264    	; 0x27d2 <lcd_write_command>
    28da:	8c e0       	ldi	r24, 0x0C	; 12
    28dc:	7a df       	rcall	.-268    	; 0x27d2 <lcd_write_command>
    28de:	85 b1       	in	r24, 0x05	; 5
    28e0:	8f 7c       	andi	r24, 0xCF	; 207
    28e2:	c8 2b       	or	r28, r24
    28e4:	c5 b9       	out	0x05, r28	; 5
    28e6:	cf 91       	pop	r28
    28e8:	08 95       	ret

000028ea <lcd_goto>:
    28ea:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <lcd_cursorPos>
    28ee:	80 58       	subi	r24, 0x80	; 128
    28f0:	70 cf       	rjmp	.-288    	; 0x27d2 <lcd_write_command>
    28f2:	08 95       	ret

000028f4 <lcd_clrscr>:
    28f4:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <lcd_cursorPos>
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	6b df       	rcall	.-298    	; 0x27d2 <lcd_write_command>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	ec e7       	ldi	r30, 0x7C	; 124
    2900:	f3 e0       	ldi	r31, 0x03	; 3
    2902:	04 c0       	rjmp	.+8      	; 0x290c <lcd_clrscr+0x18>
    2904:	90 e2       	ldi	r25, 0x20	; 32
    2906:	90 83       	st	Z, r25
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	31 96       	adiw	r30, 0x01	; 1
    290c:	80 35       	cpi	r24, 0x50	; 80
    290e:	d0 f3       	brcs	.-12     	; 0x2904 <lcd_clrscr+0x10>
    2910:	08 95       	ret

00002912 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	// convert non linear LCD-Cursor to linear Cursor 0..19 = line 0, 20..39 = line 1... for buffer
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2912:	84 31       	cpi	r24, 0x14	; 20
    2914:	98 f0       	brcs	.+38     	; 0x293c <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    2916:	90 ec       	ldi	r25, 0xC0	; 192
    2918:	98 0f       	add	r25, r24
    291a:	94 31       	cpi	r25, 0x14	; 20
    291c:	10 f4       	brcc	.+4      	; 0x2922 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    291e:	8c 52       	subi	r24, 0x2C	; 44
    2920:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2922:	9c ee       	ldi	r25, 0xEC	; 236
    2924:	98 0f       	add	r25, r24
    2926:	94 31       	cpi	r25, 0x14	; 20
    2928:	10 f4       	brcc	.+4      	; 0x292e <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    292a:	8c 5e       	subi	r24, 0xEC	; 236
    292c:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    292e:	9c ea       	ldi	r25, 0xAC	; 172
    2930:	98 0f       	add	r25, r24
    2932:	94 31       	cpi	r25, 0x14	; 20
    2934:	10 f4       	brcc	.+4      	; 0x293a <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    2936:	88 51       	subi	r24, 0x18	; 24
    2938:	08 95       	ret
	}
	return 0xFF; // default should not occure
    293a:	8f ef       	ldi	r24, 0xFF	; 255

}
    293c:	08 95       	ret

0000293e <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	d8 2f       	mov	r29, r24
	// V 0.76 no output if displaying message
	if ((lcd_displayingMessage == FALSE) || (lcd_cursorPos < MENU_LCD_CURSOR_MAINMESSAGE)
    2944:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
    2948:	88 23       	and	r24, r24
    294a:	31 f0       	breq	.+12     	; 0x2958 <lcd_putc+0x1a>
    294c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2950:	80 34       	cpi	r24, 0x40	; 64
    2952:	10 f0       	brcs	.+4      	; 0x2958 <lcd_putc+0x1a>
		|| (lcd_cursorPos >= MENU_LCD_CURSOR_MAINMESSAGE+MENU_LCD_LEN_MAINMESSAGE)) {
    2954:	84 35       	cpi	r24, 0x54	; 84
    2956:	10 f0       	brcs	.+4      	; 0x295c <lcd_putc+0x1e>
		lcd_write_character(c);
    2958:	8d 2f       	mov	r24, r29
    295a:	17 df       	rcall	.-466    	; 0x278a <lcd_write_character>
	}
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    295c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2960:	8c 2f       	mov	r24, r28
    2962:	d7 df       	rcall	.-82     	; 0x2912 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2964:	8f 3f       	cpi	r24, 0xFF	; 255
    2966:	29 f1       	breq	.+74     	; 0x29b2 <lcd_putc+0x74>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2968:	d1 3a       	cpi	r29, 0xA1	; 161
    296a:	79 f0       	breq	.+30     	; 0x298a <lcd_putc+0x4c>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    296c:	d0 38       	cpi	r29, 0x80	; 128
    296e:	79 f0       	breq	.+30     	; 0x298e <lcd_putc+0x50>
			stored_char = LCD_CHARREPL_STATEONOFF;
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2970:	d5 3a       	cpi	r29, 0xA5	; 165
    2972:	79 f0       	breq	.+30     	; 0x2992 <lcd_putc+0x54>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHAR_STATEON){
    2974:	da 32       	cpi	r29, 0x2A	; 42
    2976:	79 f0       	breq	.+30     	; 0x2996 <lcd_putc+0x58>
			stored_char = LCD_CHARREPL_STATEON;
		} else if (stored_char == LCD_CHAR_SZ){
    2978:	d2 3e       	cpi	r29, 0xE2	; 226
    297a:	79 f0       	breq	.+30     	; 0x299a <lcd_putc+0x5c>
			stored_char = LCD_CHARREPL_SZ;
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    297c:	d5 3f       	cpi	r29, 0xF5	; 245
    297e:	79 f0       	breq	.+30     	; 0x299e <lcd_putc+0x60>
			stored_char = LCD_CHARREPL_UMLAUTU;
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2980:	df 3e       	cpi	r29, 0xEF	; 239
    2982:	79 f0       	breq	.+30     	; 0x29a2 <lcd_putc+0x64>
			stored_char = LCD_CHARREPL_UMLAUTO;
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2984:	d1 3e       	cpi	r29, 0xE1	; 225
    2986:	81 f4       	brne	.+32     	; 0x29a8 <lcd_putc+0x6a>
    2988:	0e c0       	rjmp	.+28     	; 0x29a6 <lcd_putc+0x68>
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
    298a:	d0 e2       	ldi	r29, 0x20	; 32
    298c:	0d c0       	rjmp	.+26     	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF;
    298e:	d0 e2       	ldi	r29, 0x20	; 32
    2990:	0b c0       	rjmp	.+22     	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
    2992:	d4 e1       	ldi	r29, 0x14	; 20
    2994:	09 c0       	rjmp	.+18     	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON;
    2996:	d5 e1       	ldi	r29, 0x15	; 21
    2998:	07 c0       	rjmp	.+14     	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ;
    299a:	d3 e1       	ldi	r29, 0x13	; 19
    299c:	05 c0       	rjmp	.+10     	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU;
    299e:	d2 e1       	ldi	r29, 0x12	; 18
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO;
    29a2:	d1 e1       	ldi	r29, 0x11	; 17
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA;
    29a6:	d0 e1       	ldi	r29, 0x10	; 16
		}
		lcd_buffer[cursor] = stored_char;
    29a8:	e8 2f       	mov	r30, r24
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	e4 58       	subi	r30, 0x84	; 132
    29ae:	fc 4f       	sbci	r31, 0xFC	; 252
    29b0:	d0 83       	st	Z, r29
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    29b2:	cf 5f       	subi	r28, 0xFF	; 255
    29b4:	cf 77       	andi	r28, 0x7F	; 127
    29b6:	c0 93 cd 03 	sts	0x03CD, r28	; 0x8003cd <lcd_cursorPos>
}
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	fc 01       	movw	r30, r24
	if (s != NULL){
    29c6:	89 2b       	or	r24, r25
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <lcd_puts+0x10>
    29ca:	07 c0       	rjmp	.+14     	; 0x29da <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    29cc:	b8 df       	rcall	.-144    	; 0x293e <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    29ce:	fe 01       	movw	r30, r28
    29d0:	ef 01       	movw	r28, r30
    29d2:	21 96       	adiw	r28, 0x01	; 1
    29d4:	80 81       	ld	r24, Z
    29d6:	81 11       	cpse	r24, r1
    29d8:	f9 cf       	rjmp	.-14     	; 0x29cc <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    29e6:	89 2b       	or	r24, r25
    29e8:	19 f4       	brne	.+6      	; 0x29f0 <lcd_puts_P+0x10>
    29ea:	07 c0       	rjmp	.+14     	; 0x29fa <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    29ec:	a8 df       	rcall	.-176    	; 0x293e <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 01       	movw	r28, r30
    29f2:	21 96       	adiw	r28, 0x01	; 1
    29f4:	84 91       	lpm	r24, Z
    29f6:	81 11       	cpse	r24, r1
    29f8:	f9 cf       	rjmp	.-14     	; 0x29ec <lcd_puts_P+0xc>
		lcd_putc(c);
	}
}
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

00002a00 <lcd_message>:
//------------------------------ MESSAGE ------------------------------

uint8_t lcd_displayingMessage; // TRUE when a message is beeing displayed. Then all lcd outputs are wirten to buffer only
uint8_t lcd_saveCursorIsOn;

void lcd_message(const char *pMessage){
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	8c 01       	movw	r16, r24
	// clear message area and display message, start timer
	uint8_t saveCursor = lcd_cursorPos;
    2a0c:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2a10:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    2a14:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLen(pMessage);
    2a18:	c8 01       	movw	r24, r16
    2a1a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <get_StrLen>
    2a1e:	d8 2f       	mov	r29, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2a20:	80 e4       	ldi	r24, 0x40	; 64
    2a22:	63 df       	rcall	.-314    	; 0x28ea <lcd_goto>
	uint8_t pos = 0;
    2a24:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <lcd_message+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2a28:	80 e2       	ldi	r24, 0x20	; 32
    2a2a:	af de       	rcall	.-674    	; 0x278a <lcd_write_character>
		pos++;
    2a2c:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLen(pMessage);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a2e:	2c 2f       	mov	r18, r28
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	84 e1       	ldi	r24, 0x14	; 20
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	8d 1b       	sub	r24, r29
    2a38:	91 09       	sbc	r25, r1
    2a3a:	95 95       	asr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	28 17       	cp	r18, r24
    2a40:	39 07       	cpc	r19, r25
    2a42:	94 f3       	brlt	.-28     	; 0x2a28 <lcd_message+0x28>
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <lcd_message+0x4e>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
    2a46:	0f 5f       	subi	r16, 0xFF	; 255
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	9f de       	rcall	.-706    	; 0x278a <lcd_write_character>
		pos++;
    2a4c:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
    2a4e:	f8 01       	movw	r30, r16
    2a50:	80 81       	ld	r24, Z
    2a52:	81 11       	cpse	r24, r1
    2a54:	f8 cf       	rjmp	.-16     	; 0x2a46 <lcd_message+0x46>
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2a56:	03 c0       	rjmp	.+6      	; 0x2a5e <lcd_message+0x5e>
    2a58:	80 e2       	ldi	r24, 0x20	; 32
    2a5a:	97 de       	rcall	.-722    	; 0x278a <lcd_write_character>
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2a5c:	c1 2f       	mov	r28, r17
    2a5e:	11 e0       	ldi	r17, 0x01	; 1
    2a60:	1c 0f       	add	r17, r28
    2a62:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2a64:	c8 f3       	brcs	.-14     	; 0x2a58 <lcd_message+0x58>
    2a66:	8f 2d       	mov	r24, r15
    2a68:	40 df       	rcall	.-384    	; 0x28ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2a70:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a72:	f8 94       	cli
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	06 c0       	rjmp	.+12     	; 0x2a84 <lcd_message+0x84>
    2a78:	e0 e5       	ldi	r30, 0x50	; 80
    2a7a:	f2 e0       	ldi	r31, 0x02	; 2
    2a7c:	84 e6       	ldi	r24, 0x64	; 100
    2a7e:	86 87       	std	Z+14, r24	; 0x0e
    2a80:	17 86       	std	Z+15, r1	; 0x0f
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	81 11       	cpse	r24, r1
    2a86:	f8 cf       	rjmp	.-16     	; 0x2a78 <lcd_message+0x78>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a88:	9f bf       	out	0x3f, r25	; 63
}
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	08 95       	ret

00002a96 <lcd_message_P>:

void lcd_message_P(const char *pMessage_P){
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	8c 01       	movw	r16, r24
	uint8_t saveCursor = lcd_cursorPos;
    2aa2:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2aa6:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    2aaa:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLenP(pMessage_P);
    2aae:	c8 01       	movw	r24, r16
    2ab0:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <get_StrLenP>
    2ab4:	f8 2e       	mov	r15, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2ab6:	80 e4       	ldi	r24, 0x40	; 64
    2ab8:	18 df       	rcall	.-464    	; 0x28ea <lcd_goto>
	uint8_t pos = 0;
    2aba:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <lcd_message_P+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2abe:	80 e2       	ldi	r24, 0x20	; 32
    2ac0:	64 de       	rcall	.-824    	; 0x278a <lcd_write_character>
		pos++;
    2ac2:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLenP(pMessage_P);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2ac4:	2c 2f       	mov	r18, r28
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	84 e1       	ldi	r24, 0x14	; 20
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	8f 19       	sub	r24, r15
    2ace:	91 09       	sbc	r25, r1
    2ad0:	95 95       	asr	r25
    2ad2:	87 95       	ror	r24
    2ad4:	28 17       	cp	r18, r24
    2ad6:	39 07       	cpc	r19, r25
    2ad8:	94 f3       	brlt	.-28     	; 0x2abe <lcd_message_P+0x28>
    2ada:	06 c0       	rjmp	.+12     	; 0x2ae8 <lcd_message_P+0x52>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
    2adc:	0f 5f       	subi	r16, 0xFF	; 255
    2ade:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	84 91       	lpm	r24, Z
    2ae4:	52 de       	rcall	.-860    	; 0x278a <lcd_write_character>
		pos++;
    2ae6:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
    2ae8:	c8 01       	movw	r24, r16
    2aea:	f8 01       	movw	r30, r16
    2aec:	24 91       	lpm	r18, Z
    2aee:	21 11       	cpse	r18, r1
    2af0:	f5 cf       	rjmp	.-22     	; 0x2adc <lcd_message_P+0x46>
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2af2:	03 c0       	rjmp	.+6      	; 0x2afa <lcd_message_P+0x64>
    2af4:	80 e2       	ldi	r24, 0x20	; 32
    2af6:	49 de       	rcall	.-878    	; 0x278a <lcd_write_character>
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2af8:	c1 2f       	mov	r28, r17
    2afa:	11 e0       	ldi	r17, 0x01	; 1
    2afc:	1c 0f       	add	r17, r28
    2afe:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2b00:	c8 f3       	brcs	.-14     	; 0x2af4 <lcd_message_P+0x5e>
    2b02:	8d 2f       	mov	r24, r29
    2b04:	f2 de       	rcall	.-540    	; 0x28ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    2b06:	8f ef       	ldi	r24, 0xFF	; 255
    2b08:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2b0c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b0e:	f8 94       	cli
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	06 c0       	rjmp	.+12     	; 0x2b20 <lcd_message_P+0x8a>
    2b14:	e0 e5       	ldi	r30, 0x50	; 80
    2b16:	f2 e0       	ldi	r31, 0x02	; 2
    2b18:	84 e6       	ldi	r24, 0x64	; 100
    2b1a:	86 87       	std	Z+14, r24	; 0x0e
    2b1c:	17 86       	std	Z+15, r1	; 0x0f
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	81 11       	cpse	r24, r1
    2b22:	f8 cf       	rjmp	.-16     	; 0x2b14 <lcd_message_P+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b24:	9f bf       	out	0x3f, r25	; 63
}
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	08 95       	ret

00002b32 <lcd_setCG>:
	0b00011011,
	0b00011011,
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	eb 01       	movw	r28, r22
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	80 64       	ori	r24, 0x40	; 64
    2b4e:	41 de       	rcall	.-894    	; 0x27d2 <lcd_write_command>
	for (uint8_t i = 0; i < 8; i++){
    2b50:	10 e0       	ldi	r17, 0x00	; 0
    2b52:	09 c0       	rjmp	.+18     	; 0x2b66 <lcd_setCG+0x34>
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b54:	7e 01       	movw	r14, r28
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	e8 1a       	sub	r14, r24
    2b5a:	f8 0a       	sbc	r15, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	84 91       	lpm	r24, Z
    2b60:	14 de       	rcall	.-984    	; 0x278a <lcd_write_character>
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b62:	1f 5f       	subi	r17, 0xFF	; 255
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b64:	e7 01       	movw	r28, r14
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b66:	18 30       	cpi	r17, 0x08	; 8
    2b68:	a8 f3       	brcs	.-22     	; 0x2b54 <lcd_setCG+0x22>
		lcd_write_character(pgm_read_byte(patternPtr++));
	}
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	08 95       	ret

00002b76 <lcd_initCG>:

void lcd_initCG(){
	lcd_setCG(0,cgPattern_Up); // 0x08 = Arrow Up
    2b76:	6c e9       	ldi	r22, 0x9C	; 156
    2b78:	71 e0       	ldi	r23, 0x01	; 1
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	da df       	rcall	.-76     	; 0x2b32 <lcd_setCG>
	lcd_setCG(1,cgPattern_Down); // 0x09 = Arrow Down
    2b7e:	64 e9       	ldi	r22, 0x94	; 148
    2b80:	71 e0       	ldi	r23, 0x01	; 1
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	d6 df       	rcall	.-84     	; 0x2b32 <lcd_setCG>
	// old: 0x0A = Block = State On
	lcd_setCG(2,cgPattern_RegOff); // 0x0A = Single Reg Off
    2b86:	6c e8       	ldi	r22, 0x8C	; 140
    2b88:	71 e0       	ldi	r23, 0x01	; 1
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	d2 df       	rcall	.-92     	; 0x2b32 <lcd_setCG>
	lcd_setCG(3,cgPattern_RegOn); // 0x0B = Single Reg Off
    2b8e:	64 e8       	ldi	r22, 0x84	; 132
    2b90:	71 e0       	ldi	r23, 0x01	; 1
    2b92:	83 e0       	ldi	r24, 0x03	; 3
    2b94:	ce df       	rcall	.-100    	; 0x2b32 <lcd_setCG>
	lcd_setCG(4,cgPattern_RegOffOff); // 0x0C = 2 Reg Off Off
    2b96:	6c e7       	ldi	r22, 0x7C	; 124
    2b98:	71 e0       	ldi	r23, 0x01	; 1
    2b9a:	84 e0       	ldi	r24, 0x04	; 4
    2b9c:	ca df       	rcall	.-108    	; 0x2b32 <lcd_setCG>
	lcd_setCG(5,cgPattern_RegOffOn); // 0x0D = 2 Reg Off On
    2b9e:	64 e7       	ldi	r22, 0x74	; 116
    2ba0:	71 e0       	ldi	r23, 0x01	; 1
    2ba2:	85 e0       	ldi	r24, 0x05	; 5
    2ba4:	c6 df       	rcall	.-116    	; 0x2b32 <lcd_setCG>
	lcd_setCG(6,cgPattern_RegOnOff); // 0x0E = 2 Reg On Off
    2ba6:	6c e6       	ldi	r22, 0x6C	; 108
    2ba8:	71 e0       	ldi	r23, 0x01	; 1
    2baa:	86 e0       	ldi	r24, 0x06	; 6
    2bac:	c2 df       	rcall	.-124    	; 0x2b32 <lcd_setCG>
	lcd_setCG(7,cgPattern_RegOnOn); // 0x0F = 2 Reg On On
    2bae:	64 e6       	ldi	r22, 0x64	; 100
    2bb0:	71 e0       	ldi	r23, 0x01	; 1
    2bb2:	87 e0       	ldi	r24, 0x07	; 7
    2bb4:	be cf       	rjmp	.-132    	; 0x2b32 <lcd_setCG>
    2bb6:	08 95       	ret

00002bb8 <lcd_cursosblink>:
    2bb8:	8d e0       	ldi	r24, 0x0D	; 13
}

//----------------------------------- CURSOR -------------------------#

void lcd_cursosblink(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON) | (1 << LCD_DISPLAYMODE_BLINK));
    2bba:	0b de       	rcall	.-1002   	; 0x27d2 <lcd_write_command>
	lcd_cursorIsOn = TRUE;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <lcd_cursorIsOn>
    2bc2:	08 95       	ret

00002bc4 <lcd_cursoroff>:
}

void lcd_cursoroff(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON));
    2bc4:	8c e0       	ldi	r24, 0x0C	; 12
    2bc6:	05 de       	rcall	.-1014   	; 0x27d2 <lcd_write_command>
	lcd_cursorIsOn = FALSE;
    2bc8:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <lcd_cursorIsOn>
    2bcc:	08 95       	ret

00002bce <lcd_message_clear>:
	lcd_displayingMessage = TRUE;
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
}


void lcd_message_clear(){
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
    2bd6:	00 91 cd 03 	lds	r16, 0x03CD	; 0x8003cd <lcd_cursorPos>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
    2bda:	80 e4       	ldi	r24, 0x40	; 64
    2bdc:	9a de       	rcall	.-716    	; 0x2912 <getCursorFromLCDRAMcursor>
    2bde:	c8 2f       	mov	r28, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2be0:	80 e4       	ldi	r24, 0x40	; 64
    2be2:	83 de       	rcall	.-762    	; 0x28ea <lcd_goto>
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2be4:	d0 e0       	ldi	r29, 0x00	; 0
    2be6:	22 c0       	rjmp	.+68     	; 0x2c2c <lcd_message_clear+0x5e>
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2be8:	11 e0       	ldi	r17, 0x01	; 1
    2bea:	1c 0f       	add	r17, r28
    2bec:	ec 2f       	mov	r30, r28
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	e4 58       	subi	r30, 0x84	; 132
    2bf2:	fc 4f       	sbci	r31, 0xFC	; 252
    2bf4:	80 81       	ld	r24, Z
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
    2bf6:	84 31       	cpi	r24, 0x14	; 20
    2bf8:	59 f0       	breq	.+22     	; 0x2c10 <lcd_message_clear+0x42>
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHARREPL_STATEON){
    2bfa:	85 31       	cpi	r24, 0x15	; 21
    2bfc:	59 f0       	breq	.+22     	; 0x2c14 <lcd_message_clear+0x46>
			stored_char = LCD_CHAR_STATEON;
		} else if (stored_char == LCD_CHARREPL_SZ){
    2bfe:	83 31       	cpi	r24, 0x13	; 19
    2c00:	59 f0       	breq	.+22     	; 0x2c18 <lcd_message_clear+0x4a>
			stored_char = LCD_CHAR_SZ;
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
    2c02:	82 31       	cpi	r24, 0x12	; 18
    2c04:	59 f0       	breq	.+22     	; 0x2c1c <lcd_message_clear+0x4e>
			stored_char = LCD_CHAR_UMLAUTU;
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
    2c06:	81 31       	cpi	r24, 0x11	; 17
    2c08:	59 f0       	breq	.+22     	; 0x2c20 <lcd_message_clear+0x52>
			stored_char = LCD_CHAR_UMLAUTO;
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
    2c0a:	80 31       	cpi	r24, 0x10	; 16
    2c0c:	61 f4       	brne	.+24     	; 0x2c26 <lcd_message_clear+0x58>
    2c0e:	0a c0       	rjmp	.+20     	; 0x2c24 <lcd_message_clear+0x56>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
    2c10:	85 ea       	ldi	r24, 0xA5	; 165
    2c12:	09 c0       	rjmp	.+18     	; 0x2c26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_STATEON){
			stored_char = LCD_CHAR_STATEON;
    2c14:	8a e2       	ldi	r24, 0x2A	; 42
    2c16:	07 c0       	rjmp	.+14     	; 0x2c26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_SZ){
			stored_char = LCD_CHAR_SZ;
    2c18:	82 ee       	ldi	r24, 0xE2	; 226
    2c1a:	05 c0       	rjmp	.+10     	; 0x2c26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
			stored_char = LCD_CHAR_UMLAUTU;
    2c1c:	85 ef       	ldi	r24, 0xF5	; 245
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
			stored_char = LCD_CHAR_UMLAUTO;
    2c20:	8f ee       	ldi	r24, 0xEF	; 239
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <lcd_message_clear+0x58>
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
    2c24:	81 ee       	ldi	r24, 0xE1	; 225
    2c26:	b1 dd       	rcall	.-1182   	; 0x278a <lcd_write_character>
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c28:	df 5f       	subi	r29, 0xFF	; 255
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2c2a:	c1 2f       	mov	r28, r17
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c2c:	d4 31       	cpi	r29, 0x14	; 20
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
	}
	lcd_goto(saveCursor);
    2c2e:	e0 f2       	brcs	.-72     	; 0x2be8 <lcd_message_clear+0x1a>
    2c30:	80 2f       	mov	r24, r16
    2c32:	5b de       	rcall	.-842    	; 0x28ea <lcd_goto>
	if 	(lcd_saveCursorIsOn == TRUE){
    2c34:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <lcd_saveCursorIsOn>
		lcd_cursosblink();
    2c38:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3a:	11 f4       	brne	.+4      	; 0x2c40 <lcd_message_clear+0x72>
    2c3c:	bd df       	rcall	.-134    	; 0x2bb8 <lcd_cursosblink>
	} else {
		lcd_cursoroff();
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <lcd_message_clear+0x74>
    2c40:	c1 df       	rcall	.-126    	; 0x2bc4 <lcd_cursoroff>
	}
	lcd_displayingMessage = FALSE;
    2c42:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
}
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	08 95       	ret

00002c50 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2c50:	88 ef       	ldi	r24, 0xF8	; 248
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2c58:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2c5c:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2c60:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2c64:	08 95       	ret

00002c66 <log_count>:
    2c66:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2c6a:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2c6e:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <pLogStart>
    2c72:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <pLogStart+0x1>
    2c76:	82 17       	cp	r24, r18
    2c78:	93 07       	cpc	r25, r19
    2c7a:	48 f0       	brcs	.+18     	; 0x2c8e <log_count+0x28>
    2c7c:	82 1b       	sub	r24, r18
    2c7e:	93 0b       	sbc	r25, r19
    2c80:	95 95       	asr	r25
    2c82:	87 95       	ror	r24
    2c84:	9d ec       	ldi	r25, 0xCD	; 205
    2c86:	89 9f       	mul	r24, r25
    2c88:	80 2d       	mov	r24, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	08 95       	ret
    2c8e:	80 57       	subi	r24, 0x70	; 112
    2c90:	9e 4f       	sbci	r25, 0xFE	; 254
    2c92:	82 1b       	sub	r24, r18
    2c94:	93 0b       	sbc	r25, r19
    2c96:	95 95       	asr	r25
    2c98:	87 95       	ror	r24
    2c9a:	9d ec       	ldi	r25, 0xCD	; 205
    2c9c:	89 9f       	mul	r24, r25
    2c9e:	80 2d       	mov	r24, r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	08 95       	ret

00002ca4 <log_getLog>:
    2ca4:	cf 93       	push	r28
    2ca6:	c8 2f       	mov	r28, r24
    2ca8:	de df       	rcall	.-68     	; 0x2c66 <log_count>
    2caa:	c8 17       	cp	r28, r24
    2cac:	f8 f4       	brcc	.+62     	; 0x2cec <log_getLog+0x48>
    2cae:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <pLogStart>
    2cb2:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <pLogStart+0x1>
    2cb6:	8c 2f       	mov	r24, r28
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9c 01       	movw	r18, r24
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	28 0f       	add	r18, r24
    2cce:	39 1f       	adc	r19, r25
    2cd0:	ca 01       	movw	r24, r20
    2cd2:	82 0f       	add	r24, r18
    2cd4:	93 1f       	adc	r25, r19
    2cd6:	65 e0       	ldi	r22, 0x05	; 5
    2cd8:	8e 37       	cpi	r24, 0x7E	; 126
    2cda:	96 07       	cpc	r25, r22
    2cdc:	49 f0       	breq	.+18     	; 0x2cf0 <log_getLog+0x4c>
    2cde:	40 f0       	brcs	.+16     	; 0x2cf0 <log_getLog+0x4c>
    2ce0:	20 59       	subi	r18, 0x90	; 144
    2ce2:	31 40       	sbci	r19, 0x01	; 1
    2ce4:	ca 01       	movw	r24, r20
    2ce6:	82 0f       	add	r24, r18
    2ce8:	93 1f       	adc	r25, r19
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <log_getLog+0x4c>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	cf 91       	pop	r28
    2cf2:	08 95       	ret

00002cf4 <log_getErrorText>:
    2cf4:	d7 df       	rcall	.-82     	; 0x2ca4 <log_getLog>
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	f1 f1       	breq	.+124    	; 0x2d76 <log_getErrorText+0x82>
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	36 81       	ldd	r19, Z+6	; 0x06
    2cfe:	67 81       	ldd	r22, Z+7	; 0x07
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	34 c0       	rjmp	.+104    	; 0x2d6c <log_getErrorText+0x78>
    2d04:	42 2f       	mov	r20, r18
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	fa 01       	movw	r30, r20
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	cf 01       	movw	r24, r30
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	e8 0f       	add	r30, r24
    2d1e:	f9 1f       	adc	r31, r25
    2d20:	e6 55       	subi	r30, 0x56	; 86
    2d22:	fe 4f       	sbci	r31, 0xFE	; 254
    2d24:	84 91       	lpm	r24, Z
    2d26:	38 13       	cpse	r19, r24
    2d28:	20 c0       	rjmp	.+64     	; 0x2d6a <log_getErrorText+0x76>
    2d2a:	fa 01       	movw	r30, r20
    2d2c:	ee 0f       	add	r30, r30
    2d2e:	ff 1f       	adc	r31, r31
    2d30:	cf 01       	movw	r24, r30
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	e8 0f       	add	r30, r24
    2d40:	f9 1f       	adc	r31, r25
    2d42:	e5 55       	subi	r30, 0x55	; 85
    2d44:	fe 4f       	sbci	r31, 0xFE	; 254
    2d46:	84 91       	lpm	r24, Z
    2d48:	68 13       	cpse	r22, r24
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <log_getErrorText+0x76>
    2d4c:	44 0f       	add	r20, r20
    2d4e:	55 1f       	adc	r21, r21
    2d50:	ca 01       	movw	r24, r20
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	48 0f       	add	r20, r24
    2d60:	59 1f       	adc	r21, r25
    2d62:	ca 01       	movw	r24, r20
    2d64:	84 55       	subi	r24, 0x54	; 84
    2d66:	9e 4f       	sbci	r25, 0xFE	; 254
    2d68:	08 95       	ret
    2d6a:	2f 5f       	subi	r18, 0xFF	; 255
    2d6c:	21 31       	cpi	r18, 0x11	; 17
    2d6e:	50 f2       	brcs	.-108    	; 0x2d04 <log_getErrorText+0x10>
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	08 95       	ret
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	08 95       	ret

00002d7c <logCheckUnreadErrorLogs>:
    2d7c:	cf 93       	push	r28
    2d7e:	73 df       	rcall	.-282    	; 0x2c66 <log_count>
    2d80:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <log_unreadErrors>
    2d84:	81 11       	cpse	r24, r1
    2d86:	14 c0       	rjmp	.+40     	; 0x2db0 <logCheckUnreadErrorLogs+0x34>
    2d88:	17 c0       	rjmp	.+46     	; 0x2db8 <logCheckUnreadErrorLogs+0x3c>
    2d8a:	8c 2f       	mov	r24, r28
    2d8c:	8b df       	rcall	.-234    	; 0x2ca4 <log_getLog>
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	61 f0       	breq	.+24     	; 0x2daa <logCheckUnreadErrorLogs+0x2e>
    2d92:	fc 01       	movw	r30, r24
    2d94:	24 81       	ldd	r18, Z+4	; 0x04
    2d96:	20 32       	cpi	r18, 0x20	; 32
    2d98:	51 f0       	breq	.+20     	; 0x2dae <logCheckUnreadErrorLogs+0x32>
    2d9a:	95 81       	ldd	r25, Z+5	; 0x05
    2d9c:	8c 2f       	mov	r24, r28
    2d9e:	95 34       	cpi	r25, 0x45	; 69
    2da0:	39 f4       	brne	.+14     	; 0x2db0 <logCheckUnreadErrorLogs+0x34>
    2da2:	8f ef       	ldi	r24, 0xFF	; 255
    2da4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2da8:	07 c0       	rjmp	.+14     	; 0x2db8 <logCheckUnreadErrorLogs+0x3c>
    2daa:	8c 2f       	mov	r24, r28
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <logCheckUnreadErrorLogs+0x34>
    2dae:	8c 2f       	mov	r24, r28
    2db0:	cf ef       	ldi	r28, 0xFF	; 255
    2db2:	c8 0f       	add	r28, r24
    2db4:	81 11       	cpse	r24, r1
    2db6:	e9 cf       	rjmp	.-46     	; 0x2d8a <logCheckUnreadErrorLogs+0xe>
    2db8:	cf 91       	pop	r28
    2dba:	08 95       	ret

00002dbc <log_getShortTextFromPtr>:
    2dbc:	1f 93       	push	r17
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <log_getShortTextFromPtr+0xc>
    2dc6:	7b c0       	rjmp	.+246    	; 0x2ebe <log_getShortTextFromPtr+0x102>
    2dc8:	16 2f       	mov	r17, r22
    2dca:	ec 01       	movw	r28, r24
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	88 23       	and	r24, r24
    2dd0:	79 f0       	breq	.+30     	; 0x2df0 <log_getShortTextFromPtr+0x34>
    2dd2:	60 ed       	ldi	r22, 0xD0	; 208
    2dd4:	73 e0       	ldi	r23, 0x03	; 3
    2dd6:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    2dda:	bc 01       	movw	r22, r24
    2ddc:	6f 5f       	subi	r22, 0xFF	; 255
    2dde:	7f 4f       	sbci	r23, 0xFF	; 255
    2de0:	28 e6       	ldi	r18, 0x68	; 104
    2de2:	fc 01       	movw	r30, r24
    2de4:	20 83       	st	Z, r18
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    2dec:	dc 01       	movw	r26, r24
    2dee:	2f c0       	rjmp	.+94     	; 0x2e4e <log_getShortTextFromPtr+0x92>
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	88 23       	and	r24, r24
    2df4:	79 f0       	breq	.+30     	; 0x2e14 <log_getShortTextFromPtr+0x58>
    2df6:	60 ed       	ldi	r22, 0xD0	; 208
    2df8:	73 e0       	ldi	r23, 0x03	; 3
    2dfa:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    2dfe:	bc 01       	movw	r22, r24
    2e00:	6f 5f       	subi	r22, 0xFF	; 255
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	2d e6       	ldi	r18, 0x6D	; 109
    2e06:	fc 01       	movw	r30, r24
    2e08:	20 83       	st	Z, r18
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    2e10:	dc 01       	movw	r26, r24
    2e12:	1d c0       	rjmp	.+58     	; 0x2e4e <log_getShortTextFromPtr+0x92>
    2e14:	60 ed       	ldi	r22, 0xD0	; 208
    2e16:	73 e0       	ldi	r23, 0x03	; 3
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    2e1e:	fc 01       	movw	r30, r24
    2e20:	83 e7       	ldi	r24, 0x73	; 115
    2e22:	80 83       	st	Z, r24
    2e24:	98 81       	ld	r25, Y
    2e26:	99 0f       	add	r25, r25
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <log_getShortTextFromPtr+0x74>
    2e2c:	99 51       	subi	r25, 0x19	; 25
    2e2e:	2f 5f       	subi	r18, 0xFF	; 255
    2e30:	99 31       	cpi	r25, 0x19	; 25
    2e32:	e0 f7       	brcc	.-8      	; 0x2e2c <log_getShortTextFromPtr+0x70>
    2e34:	20 5d       	subi	r18, 0xD0	; 208
    2e36:	21 83       	std	Z+1, r18	; 0x01
    2e38:	99 0f       	add	r25, r25
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <log_getShortTextFromPtr+0x86>
    2e3e:	95 50       	subi	r25, 0x05	; 5
    2e40:	2f 5f       	subi	r18, 0xFF	; 255
    2e42:	95 30       	cpi	r25, 0x05	; 5
    2e44:	e0 f7       	brcc	.-8      	; 0x2e3e <log_getShortTextFromPtr+0x82>
    2e46:	df 01       	movw	r26, r30
    2e48:	13 96       	adiw	r26, 0x03	; 3
    2e4a:	20 5d       	subi	r18, 0xD0	; 208
    2e4c:	22 83       	std	Z+2, r18	; 0x02
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	90 34       	cpi	r25, 0x40	; 64
    2e52:	51 f0       	breq	.+20     	; 0x2e68 <log_getShortTextFromPtr+0xac>
    2e54:	90 38       	cpi	r25, 0x80	; 128
    2e56:	19 f0       	breq	.+6      	; 0x2e5e <log_getShortTextFromPtr+0xa2>
    2e58:	90 32       	cpi	r25, 0x20	; 32
    2e5a:	81 f4       	brne	.+32     	; 0x2e7c <log_getShortTextFromPtr+0xc0>
    2e5c:	0a c0       	rjmp	.+20     	; 0x2e72 <log_getShortTextFromPtr+0xb6>
    2e5e:	fd 01       	movw	r30, r26
    2e60:	31 96       	adiw	r30, 0x01	; 1
    2e62:	8a e2       	ldi	r24, 0x2A	; 42
    2e64:	8c 93       	st	X, r24
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <log_getShortTextFromPtr+0xc8>
    2e68:	fd 01       	movw	r30, r26
    2e6a:	31 96       	adiw	r30, 0x01	; 1
    2e6c:	85 ea       	ldi	r24, 0xA5	; 165
    2e6e:	8c 93       	st	X, r24
    2e70:	09 c0       	rjmp	.+18     	; 0x2e84 <log_getShortTextFromPtr+0xc8>
    2e72:	fd 01       	movw	r30, r26
    2e74:	31 96       	adiw	r30, 0x01	; 1
    2e76:	80 e2       	ldi	r24, 0x20	; 32
    2e78:	8c 93       	st	X, r24
    2e7a:	04 c0       	rjmp	.+8      	; 0x2e84 <log_getShortTextFromPtr+0xc8>
    2e7c:	fd 01       	movw	r30, r26
    2e7e:	31 96       	adiw	r30, 0x01	; 1
    2e80:	8f e3       	ldi	r24, 0x3F	; 63
    2e82:	8c 93       	st	X, r24
    2e84:	bf 01       	movw	r22, r30
    2e86:	6f 5f       	subi	r22, 0xFF	; 255
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	80 83       	st	Z, r24
    2e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e90:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    2e94:	bc 01       	movw	r22, r24
    2e96:	8f 81       	ldd	r24, Y+7	; 0x07
    2e98:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	2d e2       	ldi	r18, 0x2D	; 45
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	20 83       	st	Z, r18
    2ea8:	88 85       	ldd	r24, Y+8	; 0x08
    2eaa:	99 85       	ldd	r25, Y+9	; 0x09
    2eac:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <putChar_word>
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	10 82       	st	Z, r1
    2eb4:	1f 3f       	cpi	r17, 0xFF	; 255
    2eb6:	41 f0       	breq	.+16     	; 0x2ec8 <log_getShortTextFromPtr+0x10c>
    2eb8:	1c 83       	std	Y+4, r17	; 0x04
    2eba:	60 df       	rcall	.-320    	; 0x2d7c <logCheckUnreadErrorLogs>
    2ebc:	05 c0       	rjmp	.+10     	; 0x2ec8 <log_getShortTextFromPtr+0x10c>
    2ebe:	e0 ed       	ldi	r30, 0xD0	; 208
    2ec0:	f3 e0       	ldi	r31, 0x03	; 3
    2ec2:	8d e2       	ldi	r24, 0x2D	; 45
    2ec4:	80 83       	st	Z, r24
    2ec6:	11 82       	std	Z+1, r1	; 0x01
    2ec8:	80 ed       	ldi	r24, 0xD0	; 208
    2eca:	93 e0       	ldi	r25, 0x03	; 3
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	08 95       	ret

00002ed4 <log_put>:
    2ed4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2ed8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2edc:	a4 e6       	ldi	r26, 0x64	; 100
    2ede:	b2 e0       	ldi	r27, 0x02	; 2
    2ee0:	9c 91       	ld	r25, X
    2ee2:	90 83       	st	Z, r25
    2ee4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2ee8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	9c 91       	ld	r25, X
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2ef8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2efc:	12 96       	adiw	r26, 0x02	; 2
    2efe:	9c 91       	ld	r25, X
    2f00:	12 97       	sbiw	r26, 0x02	; 2
    2f02:	92 83       	std	Z+2, r25	; 0x02
    2f04:	13 96       	adiw	r26, 0x03	; 3
    2f06:	9c 91       	ld	r25, X
    2f08:	93 83       	std	Z+3, r25	; 0x03
    2f0a:	25 83       	std	Z+5, r18	; 0x05
    2f0c:	86 83       	std	Z+6, r24	; 0x06
    2f0e:	67 83       	std	Z+7, r22	; 0x07
    2f10:	51 87       	std	Z+9, r21	; 0x09
    2f12:	40 87       	std	Z+8, r20	; 0x08
    2f14:	80 e8       	ldi	r24, 0x80	; 128
    2f16:	84 83       	std	Z+4, r24	; 0x04
    2f18:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    2f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1e:	81 f4       	brne	.+32     	; 0x2f40 <log_put+0x6c>
    2f20:	84 ea       	ldi	r24, 0xA4	; 164
    2f22:	91 e0       	ldi	r25, 0x01	; 1
    2f24:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    2f28:	6f ef       	ldi	r22, 0xFF	; 255
    2f2a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2f2e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f32:	44 df       	rcall	.-376    	; 0x2dbc <log_getShortTextFromPtr>
    2f34:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    2f38:	80 ea       	ldi	r24, 0xA0	; 160
    2f3a:	94 e1       	ldi	r25, 0x14	; 20
    2f3c:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    2f40:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2f44:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f48:	0a 96       	adiw	r24, 0x0a	; 10
    2f4a:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2f4e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2f52:	8e 57       	subi	r24, 0x7E	; 126
    2f54:	95 40       	sbci	r25, 0x05	; 5
    2f56:	39 f0       	breq	.+14     	; 0x2f66 <log_put+0x92>
    2f58:	30 f0       	brcs	.+12     	; 0x2f66 <log_put+0x92>
    2f5a:	88 ef       	ldi	r24, 0xF8	; 248
    2f5c:	93 e0       	ldi	r25, 0x03	; 3
    2f5e:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2f62:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2f66:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <pLogEnd>
    2f6a:	30 91 89 05 	lds	r19, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f6e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogStart>
    2f72:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogStart+0x1>
    2f76:	28 17       	cp	r18, r24
    2f78:	39 07       	cpc	r19, r25
    2f7a:	79 f4       	brne	.+30     	; 0x2f9a <log_put+0xc6>
    2f7c:	0a 96       	adiw	r24, 0x0a	; 10
    2f7e:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2f82:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2f86:	8e 57       	subi	r24, 0x7E	; 126
    2f88:	95 40       	sbci	r25, 0x05	; 5
    2f8a:	39 f0       	breq	.+14     	; 0x2f9a <log_put+0xc6>
    2f8c:	30 f0       	brcs	.+12     	; 0x2f9a <log_put+0xc6>
    2f8e:	88 ef       	ldi	r24, 0xF8	; 248
    2f90:	93 e0       	ldi	r25, 0x03	; 3
    2f92:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2f96:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2f9a:	08 95       	ret

00002f9c <log_putError>:
    2f9c:	25 e4       	ldi	r18, 0x45	; 69
    2f9e:	9a df       	rcall	.-204    	; 0x2ed4 <log_put>
    2fa0:	8f ef       	ldi	r24, 0xFF	; 255
    2fa2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2fa6:	08 95       	ret

00002fa8 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2fa8:	cf 93       	push	r28
    2faa:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2fac:	7b de       	rcall	.-778    	; 0x2ca4 <log_getLog>
	if (pLogEntry != NULL){
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	19 f0       	breq	.+6      	; 0x2fb8 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2fb2:	6c 2f       	mov	r22, r28
    2fb4:	03 df       	rcall	.-506    	; 0x2dbc <log_getShortTextFromPtr>
    2fb6:	06 c0       	rjmp	.+12     	; 0x2fc4 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2fb8:	e0 ed       	ldi	r30, 0xD0	; 208
    2fba:	f3 e0       	ldi	r31, 0x03	; 3
    2fbc:	8d e2       	ldi	r24, 0x2D	; 45
    2fbe:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2fc0:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2fc2:	cf 01       	movw	r24, r30
	}
    2fc4:	cf 91       	pop	r28
    2fc6:	08 95       	ret

00002fc8 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2fc8:	83 db       	rcall	.-2298   	; 0x26d0 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2fca:	85 b1       	in	r24, 0x05	; 5
    2fcc:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();	// init error and event log
    2fce:	85 b9       	out	0x05, r24	; 5
    2fd0:	3f de       	rcall	.-898    	; 0x2c50 <init_log>
	init_Serial0SerUSB(); // serial port to PC
    2fd2:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <init_Serial0SerUSB>
	init_message(); // init keyboard message handling
    2fd6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <init_message>
	init_HwTimer(); // init timer interrupts and ports for module IO
    2fda:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <init_HwTimer>
	init_Timers(); // init timers
    2fde:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <init_Timers>
	init_ADC(); // init ADC variable and ports (for keyboard polling)
    2fe2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <init_ADC>
	init_Pipe(); // init ports and vars for module IO
    2fe6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <init_Pipe>
	init_Serial1MIDI(); // init serial IO for MIDI
    2fea:	0e 94 be 38 	call	0x717c	; 0x717c <init_Serial1MIDI>
	init_PipeModules(); // find out which modules are working
    2fee:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <init_PipeModules>
	init_Midi2Manual(); // init mapping midi in -> manuals
    2ff2:	0e 94 f5 33 	call	0x67ea	; 0x67ea <init_Midi2Manual>
	init_Manual2Midi(); // init mapping manuals -> midi out
    2ff6:	0e 94 35 34 	call	0x686a	; 0x686a <init_Manual2Midi>
	init_Midi(); //  init midi handling
    2ffa:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <init_Midi>
	init_Registers(); // init mapping registers - modules
    2ffe:	0e 94 5e 30 	call	0x60bc	; 0x60bc <init_Registers>
	init_RegOut(); // init mapping registers - display of registers
    3002:	0e 94 3d 33 	call	0x667a	; 0x667a <init_RegOut>
	init_Manual2Module(); // init mapping manuals - modules
    3006:	0e 94 c6 34 	call	0x698c	; 0x698c <init_Manual2Module>
	init_SoftKeys(); // init softkeys
    300a:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <init_SoftKeys>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    300e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <eeprom_UpdateALL>
	INIT_MENU // reset menu
    3012:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>


	// BOOT MESSAGE

	lcd_init (); // init lcd
	lcd_initCG(); // init Character generator RAM in LCD
    3016:	0b dc       	rcall	.-2026   	; 0x282e <lcd_init>
	lcd_clrscr (); // display boot message
    3018:	ae dd       	rcall	.-1188   	; 0x2b76 <lcd_initCG>
	lcd_goto(LCD_LINE1+3);
    301a:	6c dc       	rcall	.-1832   	; 0x28f4 <lcd_clrscr>
    301c:	83 e4       	ldi	r24, 0x43	; 67
	lcd_puts_P(prog_name);
    301e:	65 dc       	rcall	.-1846   	; 0x28ea <lcd_goto>
    3020:	87 ef       	ldi	r24, 0xF7	; 247
    3022:	92 e0       	ldi	r25, 0x02	; 2
	lcd_goto(LCD_LINE2+7);
    3024:	dd dc       	rcall	.-1606   	; 0x29e0 <lcd_puts_P>
    3026:	8b e1       	ldi	r24, 0x1B	; 27
    3028:	60 dc       	rcall	.-1856   	; 0x28ea <lcd_goto>
	lcd_puts_P(sw_version);
    302a:	88 e5       	ldi	r24, 0x58	; 88
    302c:	94 e1       	ldi	r25, 0x14	; 20
    302e:	d8 dc       	rcall	.-1616   	; 0x29e0 <lcd_puts_P>
    3030:	78 94       	sei
	sei(); // start timer, module handling, keyboard polling
    3032:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3034:	47 e9       	ldi	r20, 0x97	; 151
    3036:	8a e3       	ldi	r24, 0x3A	; 58
    3038:	21 50       	subi	r18, 0x01	; 1
    303a:	40 40       	sbci	r20, 0x00	; 0
    303c:	80 40       	sbci	r24, 0x00	; 0
    303e:	e1 f7       	brne	.-8      	; 0x3038 <main+0x70>
    3040:	00 c0       	rjmp	.+0      	; 0x3042 <main+0x7a>
	_delay_ms(1200); // time to show booot message
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    3042:	00 00       	nop
    3044:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <init_Serial3SerESP>
	lcd_clrscr ();
    3048:	55 dc       	rcall	.-1878   	; 0x28f4 <lcd_clrscr>

	// TURN ON POWER

	module_StartPowerOn(); // does not turn power on, but start power on cycle
    304a:	6f d8       	rcall	.-3874   	; 0x212a <module_StartPowerOn>
    304c:	8f ef       	ldi	r24, 0xFF	; 255
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)
    304e:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
    3052:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>

	menuNotActive = TRUE; // showing main screen
    3056:	8e ef       	ldi	r24, 0xFE	; 254
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    3058:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
    305c:	df ef       	ldi	r29, 0xFF	; 255

	module_StartPowerOn(); // does not turn power on, but start power on cycle
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)

	menuNotActive = TRUE; // showing main screen
	uint8_t updateStatus = TRUE;
    305e:	85 b1       	in	r24, 0x05	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		#ifdef DEBUG_ON_PINS
		DEBUG_OUT_MAIN
    3060:	8f 7c       	andi	r24, 0xCF	; 207
    3062:	85 b9       	out	0x05, r24	; 5
    3064:	20 91 28 14 	lds	r18, 0x1428	; 0x801428 <serESPRxInIndex>
		#endif
		// V0.60 read message from usart3 (esp)
		// --------------------------- ESP MESSAGE HANDLING --------------------------------------
		if SER_ESP_RX_BUFFER_NONEMPTY {
    3068:	30 91 29 14 	lds	r19, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
    306c:	80 91 23 14 	lds	r24, 0x1423	; 0x801423 <serESPRxOutIndex>
    3070:	90 91 24 14 	lds	r25, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
    3074:	28 17       	cp	r18, r24
    3076:	39 07       	cpc	r19, r25
    3078:	09 f4       	brne	.+2      	; 0x307c <main+0xb4>
    307a:	66 c0       	rjmp	.+204    	; 0x3148 <main+0x180>
    307c:	0e 94 ba 3b 	call	0x7774	; 0x7774 <serial3SER_ESPReadRx>
			uint8_t esp_message = serial3SER_ESPReadRx();
    3080:	c8 2f       	mov	r28, r24
    3082:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
			messageFromESP = esp_message; // save for later transfer of LCD
    3086:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    308a:	8f e7       	ldi	r24, 0x7F	; 127
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    308c:	8c 0f       	add	r24, r28
    308e:	86 30       	cpi	r24, 0x06	; 6
    3090:	28 f4       	brcc	.+10     	; 0x309c <main+0xd4>
    3092:	80 e8       	ldi	r24, 0x80	; 128
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    3094:	8c 0f       	add	r24, r28
    3096:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <message_push>
    309a:	56 c0       	rjmp	.+172    	; 0x3148 <main+0x180>
    309c:	c0 39       	cpi	r28, 0x90	; 144
			} else if (esp_message == SER_ESP_MSGMIDI) {
    309e:	09 f0       	breq	.+2      	; 0x30a2 <main+0xda>
    30a0:	53 c0       	rjmp	.+166    	; 0x3148 <main+0x180>
    30a2:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <serESPInBuffer>
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    30a6:	80 39       	cpi	r24, 0x90	; 144
    30a8:	09 f0       	breq	.+2      	; 0x30ac <main+0xe4>
    30aa:	4e c0       	rjmp	.+156    	; 0x3148 <main+0x180>
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	e9 2f       	mov	r30, r25
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    30b0:	09 2e       	mov	r0, r25
    30b2:	00 0c       	add	r0, r0
    30b4:	ff 0b       	sbc	r31, r31
    30b6:	e5 5e       	subi	r30, 0xE5	; 229
    30b8:	fb 4e       	sbci	r31, 0xEB	; 235
    30ba:	80 81       	ld	r24, Z
    30bc:	8d 33       	cpi	r24, 0x3D	; 61
    30be:	19 f0       	breq	.+6      	; 0x30c6 <main+0xfe>
    30c0:	9f 5f       	subi	r25, 0xFF	; 255
							break;
						}
						i++;
    30c2:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    30c4:	a4 f3       	brlt	.-24     	; 0x30ae <main+0xe6>
    30c6:	98 30       	cpi	r25, 0x08	; 8
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    30c8:	0c f0       	brlt	.+2      	; 0x30cc <main+0x104>
    30ca:	3e c0       	rjmp	.+124    	; 0x3148 <main+0x180>
    30cc:	89 2f       	mov	r24, r25
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    30ce:	85 95       	asr	r24
    30d0:	20 e0       	ldi	r18, 0x00	; 0
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <main+0x118>
    30d4:	e2 2f       	mov	r30, r18
							serESPMidiTmp[j] = 0;
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	eb 58       	subi	r30, 0x8B	; 139
    30da:	f9 4e       	sbci	r31, 0xE9	; 233
    30dc:	10 82       	st	Z, r1
    30de:	2f 5f       	subi	r18, 0xFF	; 255
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    30e0:	23 30       	cpi	r18, 0x03	; 3
    30e2:	c0 f3       	brcs	.-16     	; 0x30d4 <main+0x10c>
    30e4:	2c c0       	rjmp	.+88     	; 0x313e <main+0x176>
    30e6:	e9 2f       	mov	r30, r25
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    30e8:	09 2e       	mov	r0, r25
    30ea:	00 0c       	add	r0, r0
    30ec:	ff 0b       	sbc	r31, r31
    30ee:	e5 5e       	subi	r30, 0xE5	; 229
    30f0:	fb 4e       	sbci	r31, 0xEB	; 235
    30f2:	30 81       	ld	r19, Z
    30f4:	20 ed       	ldi	r18, 0xD0	; 208
    30f6:	23 0f       	add	r18, r19
    30f8:	2a 30       	cpi	r18, 0x0A	; 10
							if (asciiData > 9){
    30fa:	10 f0       	brcs	.+4      	; 0x3100 <main+0x138>
    30fc:	27 ed       	ldi	r18, 0xD7	; 215
								asciiData = asciiData - (0x0A - 'A' + '0');
    30fe:	23 0f       	add	r18, r19
    3100:	a2 2f       	mov	r26, r18
							}
							asciiData &= 0x0F;
    3102:	af 70       	andi	r26, 0x0F	; 15
    3104:	e5 e7       	ldi	r30, 0x75	; 117
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    3106:	f6 e1       	ldi	r31, 0x16	; 22
    3108:	62 81       	ldd	r22, Z+2	; 0x02
    310a:	20 e1       	ldi	r18, 0x10	; 16
    310c:	62 9f       	mul	r22, r18
    310e:	b0 01       	movw	r22, r0
    3110:	11 24       	eor	r1, r1
    3112:	41 81       	ldd	r20, Z+1	; 0x01
    3114:	24 2f       	mov	r18, r20
    3116:	22 95       	swap	r18
    3118:	2f 70       	andi	r18, 0x0F	; 15
    311a:	62 2b       	or	r22, r18
    311c:	62 83       	std	Z+2, r22	; 0x02
    311e:	20 e1       	ldi	r18, 0x10	; 16
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    3120:	42 9f       	mul	r20, r18
    3122:	a0 01       	movw	r20, r0
    3124:	11 24       	eor	r1, r1
    3126:	20 81       	ld	r18, Z
    3128:	32 2f       	mov	r19, r18
    312a:	32 95       	swap	r19
    312c:	3f 70       	andi	r19, 0x0F	; 15
    312e:	43 2b       	or	r20, r19
    3130:	41 83       	std	Z+1, r20	; 0x01
    3132:	40 e1       	ldi	r20, 0x10	; 16
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    3134:	24 9f       	mul	r18, r20
    3136:	90 01       	movw	r18, r0
    3138:	11 24       	eor	r1, r1
    313a:	2a 2b       	or	r18, r26
    313c:	20 83       	st	Z, r18
    313e:	91 50       	subi	r25, 0x01	; 1
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    3140:	19 16       	cp	r1, r25
    3142:	8c f2       	brlt	.-94     	; 0x30e6 <main+0x11e>
    3144:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <proc_ESPmidi>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    3148:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <message_status>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU HANDLING ----------------------
		if MESSAGE_PENDING {
    314c:	88 23       	and	r24, r24
    314e:	09 f4       	brne	.+2      	; 0x3152 <main+0x18a>
    3150:	55 c0       	rjmp	.+170    	; 0x31fc <main+0x234>
			// key press has to be processed
			DEBUG_OUT_MENU
    3152:	85 b1       	in	r24, 0x05	; 5
    3154:	80 63       	ori	r24, 0x30	; 48
    3156:	85 b9       	out	0x05, r24	; 5
			if (lcd_displayingMessage == TRUE) {
    3158:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
    315c:	8f 3f       	cpi	r24, 0xFF	; 255
    315e:	09 f4       	brne	.+2      	; 0x3162 <main+0x19a>
				// if message is beeing displayed: first clear message
				lcd_message_clear();
    3160:	36 dd       	rcall	.-1428   	; 0x2bce <lcd_message_clear>
    3162:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <message_get>
			}
			uint8_t keyMessage = message_get();
    3166:	c8 2f       	mov	r28, r24
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    3168:	86 38       	cpi	r24, 0x86	; 134
    316a:	b1 f4       	brne	.+44     	; 0x3198 <main+0x1d0>
				// PANIC BUTTON
				midiSendAllNotesOff();
    316c:	0e 94 94 38 	call	0x7128	; 0x7128 <midiSendAllNotesOff>
				midi_AllManualsOff();
    3170:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <midi_AllManualsOff>
				midi_resetRegisters();
    3174:	0e 94 d5 32 	call	0x65aa	; 0x65aa <midi_resetRegisters>
				midi_CouplerReset();
    3178:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <midi_CouplerReset>
				init_log(); // clear log V 0.70
    317c:	69 dd       	rcall	.-1326   	; 0x2c50 <init_log>
    317e:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    3182:	10 92 74 16 	sts	0x1674, r1	; 0x801674 <midiTxBuffUsage>
				POWER_ON
    3186:	85 b1       	in	r24, 0x05	; 5
    3188:	80 64       	ori	r24, 0x40	; 64
    318a:	85 b9       	out	0x05, r24	; 5
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    318c:	83 e1       	ldi	r24, 0x13	; 19
    318e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
				lcd_message_P(panicString);
    3192:	8c ed       	ldi	r24, 0xDC	; 220
    3194:	92 e0       	ldi	r25, 0x02	; 2
    3196:	7f dc       	rcall	.-1794   	; 0x2a96 <lcd_message_P>
    3198:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
			}
			if (menuNotActive == TRUE) {
    319c:	8f 3f       	cpi	r24, 0xFF	; 255
    319e:	f9 f4       	brne	.+62     	; 0x31de <main+0x216>
    31a0:	8c 2f       	mov	r24, r28
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    31a2:	8f 73       	andi	r24, 0x3F	; 63
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    31a4:	c5 30       	cpi	r28, 0x05	; 5
    31a6:	69 f4       	brne	.+26     	; 0x31c2 <main+0x1fa>
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 ca 22 	call	0x4594	; 0x4594 <menu_Init>
					menu_InitLCD(); //display menu
    31b4:	0e 94 9c 2b 	call	0x5738	; 0x5738 <menu_InitLCD>
					menuNotActive = FALSE; // notify that menu is displayed
    31b8:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <menuNotActive>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	0b d8       	rcall	.-4074   	; 0x21d6 <softKey_WantLong>
    31c0:	1d c0       	rjmp	.+58     	; 0x31fc <main+0x234>
    31c2:	9f ef       	ldi	r25, 0xFF	; 255
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    31c4:	98 0f       	add	r25, r24
    31c6:	94 30       	cpi	r25, 0x04	; 4
    31c8:	c8 f4       	brcc	.+50     	; 0x31fc <main+0x234>
    31ca:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <softKey_MessageKey_ToSoftKeyNr>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    31ce:	6c 2f       	mov	r22, r28
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    31d0:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <softKey_Execute>
    31d4:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    31d8:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <softKeys_toLCD>
					softKeys_toLCD();
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <main+0x234>
    31de:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    31e2:	81 11       	cpse	r24, r1
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <main+0x22a>
    31e6:	8c 2f       	mov	r24, r28
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    31e8:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_ProcessMessage>
    31ec:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    31f0:	05 c0       	rjmp	.+10     	; 0x31fc <main+0x234>
    31f2:	8d ef       	ldi	r24, 0xFD	; 253
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    31f4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    31f8:	0e 94 db 29 	call	0x53b6	; 0x53b6 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    31fc:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    3200:	8f 3f       	cpi	r24, 0xFF	; 255
    3202:	71 f4       	brne	.+28     	; 0x3220 <main+0x258>
    3204:	df 3f       	cpi	r29, 0xFF	; 255
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    3206:	69 f4       	brne	.+26     	; 0x3222 <main+0x25a>
    3208:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    320c:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <softKeys_toLCD>
				softKeys_toLCD();
    3210:	8f ef       	ldi	r24, 0xFF	; 255
				softKey_WantLong(TRUE);
    3212:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <softKey_WantLong>
    3216:	8f ef       	ldi	r24, 0xFF	; 255
				prog_UpdDisplay = TRUE; // update program display
    3218:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    321c:	d0 e0       	ldi	r29, 0x00	; 0
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <main+0x25a>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventually after next menu exit
    3220:	df ef       	ldi	r29, 0xFF	; 255
		}
		#ifdef DEBUG_ON_PINS
		DEBUG_OUT_MAIN
    3222:	85 b1       	in	r24, 0x05	; 5
    3224:	8f 7c       	andi	r24, 0xCF	; 207
    3226:	85 b9       	out	0x05, r24	; 5
		#endif
		// ------------------------- TIMER_MESSAGE_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MESSAGE_LCDCLEAR) {
    3228:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <swTimer+0xe>
    322c:	81 11       	cpse	r24, r1
    322e:	04 c0       	rjmp	.+8      	; 0x3238 <main+0x270>
			lcd_message_clear();
    3230:	ce dc       	rcall	.-1636   	; 0x2bce <lcd_message_clear>
    3232:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MESSAGE_LCDCLEAR)
    3234:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <swTimer+0xe>
    3238:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    323c:	81 11       	cpse	r24, r1
    323e:	0a c0       	rjmp	.+20     	; 0x3254 <main+0x28c>
    3240:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    3244:	88 23       	and	r24, r24
    3246:	19 f0       	breq	.+6      	; 0x324e <main+0x286>
    3248:	0e 94 db 29 	call	0x53b6	; 0x53b6 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    324c:	03 c0       	rjmp	.+6      	; 0x3254 <main+0x28c>
    324e:	8f ef       	ldi	r24, 0xFF	; 255
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    3250:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <swTimer+0xc>
    3254:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    3258:	81 11       	cpse	r24, r1
    325a:	1b c0       	rjmp	.+54     	; 0x3292 <main+0x2ca>
			module_PowerControl(); //
    325c:	0e 94 a5 10 	call	0x214a	; 0x214a <module_PowerControl>
			menu_showPowerState();
    3260:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <menu_showPowerState>
			if (menuNotActive == TRUE) {
    3264:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
    3268:	8f 3f       	cpi	r24, 0xFF	; 255
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    326a:	99 f4       	brne	.+38     	; 0x3292 <main+0x2ca>
    326c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    3270:	84 e1       	ldi	r24, 0x14	; 20
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    3272:	3b db       	rcall	.-2442   	; 0x28ea <lcd_goto>
    3274:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    3278:	81 30       	cpi	r24, 0x01	; 1
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    327a:	21 f4       	brne	.+8      	; 0x3284 <main+0x2bc>
    327c:	85 ee       	ldi	r24, 0xE5	; 229
    327e:	92 e0       	ldi	r25, 0x02	; 2
    3280:	af db       	rcall	.-2210   	; 0x29e0 <lcd_puts_P>
    3282:	05 c0       	rjmp	.+10     	; 0x328e <main+0x2c6>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    3284:	82 31       	cpi	r24, 0x12	; 18
    3286:	19 f4       	brne	.+6      	; 0x328e <main+0x2c6>
					lcd_blank(LCD_LINELEN);
    3288:	84 e1       	ldi	r24, 0x14	; 20
    328a:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <lcd_blank>
				}
				lcd_goto(saveCursor);
    328e:	8c 2f       	mov	r24, r28
    3290:	2c db       	rcall	.-2472   	; 0x28ea <lcd_goto>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    3292:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <messageFromESP>
    3296:	9f e7       	ldi	r25, 0x7F	; 127
    3298:	98 0f       	add	r25, r24
    329a:	96 30       	cpi	r25, 0x06	; 6
    329c:	10 f0       	brcs	.+4      	; 0x32a2 <main+0x2da>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    329e:	8e 3f       	cpi	r24, 0xFE	; 254
    32a0:	09 f5       	brne	.+66     	; 0x32e4 <main+0x31c>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    32a2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    32a6:	8f 3f       	cpi	r24, 0xFF	; 255
    32a8:	31 f4       	brne	.+12     	; 0x32b6 <main+0x2ee>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    32aa:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    32ae:	31 db       	rcall	.-2462   	; 0x2912 <getCursorFromLCDRAMcursor>
    32b0:	0e 94 84 3b 	call	0x7708	; 0x7708 <serial3SER_ESPSend>
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <main+0x2f4>
    32b6:	8f e7       	ldi	r24, 0x7F	; 127
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    32b8:	0e 94 84 3b 	call	0x7708	; 0x7708 <serial3SER_ESPSend>
    32bc:	81 e8       	ldi	r24, 0x81	; 129
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    32be:	0e 94 84 3b 	call	0x7708	; 0x7708 <serial3SER_ESPSend>
    32c2:	c0 e0       	ldi	r28, 0x00	; 0
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32c4:	ec e7       	ldi	r30, 0x7C	; 124
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    32c6:	f3 e0       	ldi	r31, 0x03	; 3
    32c8:	08 c0       	rjmp	.+16     	; 0x32da <main+0x312>
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32ca:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(*pChar++);
    32cc:	0f 5f       	subi	r16, 0xFF	; 255
    32ce:	1f 4f       	sbci	r17, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	0e 94 84 3b 	call	0x7708	; 0x7708 <serial3SER_ESPSend>
    32d6:	cf 5f       	subi	r28, 0xFF	; 255
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32d8:	f8 01       	movw	r30, r16
				serial3SER_ESPSend(*pChar++);
    32da:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32dc:	b0 f3       	brcs	.-20     	; 0x32ca <main+0x302>
    32de:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    32e0:	0e 94 84 3b 	call	0x7708	; 0x7708 <serial3SER_ESPSend>
    32e4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    32e6:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
    32ea:	0e 94 a2 38 	call	0x7144	; 0x7144 <midi_CheckTxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // must we send active Sense if midi out was inactive for some time?
    32ee:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of missing incoming Active Sense
    32f2:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    32f6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
		// status line lin0 left corner: midi in display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    32fa:	88 23       	and	r24, r24
    32fc:	29 f0       	breq	.+10     	; 0x3308 <main+0x340>
    32fe:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    3302:	8f 3f       	cpi	r24, 0xFF	; 255
    3304:	09 f0       	breq	.+2      	; 0x3308 <main+0x340>
    3306:	70 c0       	rjmp	.+224    	; 0x33e8 <main+0x420>
			if (prog_Display > PROGR_MAX) {
    3308:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    330c:	80 34       	cpi	r24, 0x40	; 64
    330e:	08 f4       	brcc	.+2      	; 0x3312 <main+0x34a>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    3310:	6b c0       	rjmp	.+214    	; 0x33e8 <main+0x420>
    3312:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    3316:	8f 3f       	cpi	r24, 0xFF	; 255
    3318:	91 f1       	breq	.+100    	; 0x337e <main+0x3b6>
    331a:	80 e0       	ldi	r24, 0x00	; 0
					if (midiLastInManual == MANUAL_NONE) {
    331c:	e6 da       	rcall	.-2612   	; 0x28ea <lcd_goto>
    331e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    3322:	8f 3f       	cpi	r24, 0xFF	; 255
    3324:	69 f4       	brne	.+26     	; 0x3340 <main+0x378>
    3326:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <midiLastInChannel>
						lcd_putc('?');
    332a:	0e 94 77 3e 	call	0x7cee	; 0x7cee <lcd_ChannelOut>
						lcd_noteOut(midiLastInNote);
    332e:	8f e3       	ldi	r24, 0x3F	; 63
    3330:	06 db       	rcall	.-2548   	; 0x293e <lcd_putc>
    3332:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(' ');
    3336:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <lcd_noteOut>
    333a:	80 e2       	ldi	r24, 0x20	; 32
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    333c:	00 db       	rcall	.-2560   	; 0x293e <lcd_putc>
    333e:	0c c0       	rjmp	.+24     	; 0x3358 <main+0x390>
    3340:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(MENU_MIDI_IO_SIGN);
    3344:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <lcd_noteOut>
    3348:	8e e7       	ldi	r24, 0x7E	; 126
						lcd_ManualOutDec(midiLastInManual);
    334a:	f9 da       	rcall	.-2574   	; 0x293e <lcd_putc>
    334c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    3350:	0e 94 88 3e 	call	0x7d10	; 0x7d10 <lcd_ManualOutDec>
						lcd_putc(' ');
    3354:	80 e2       	ldi	r24, 0x20	; 32
    3356:	f3 da       	rcall	.-2586   	; 0x293e <lcd_putc>
					}
					lcd_goto(oldcursor);
    3358:	8c 2f       	mov	r24, r28
    335a:	c7 da       	rcall	.-2674   	; 0x28ea <lcd_goto>
					midiLastInNote = MIDI_NOTE_NONE;
    335c:	8f ef       	ldi	r24, 0xFF	; 255
    335e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <midiLastInNote>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3362:	9f b7       	in	r25, 0x3f	; 63
					// now start timer
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    3364:	f8 94       	cli
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	06 c0       	rjmp	.+12     	; 0x3376 <main+0x3ae>
    336a:	e0 e5       	ldi	r30, 0x50	; 80
    336c:	f2 e0       	ldi	r31, 0x02	; 2
    336e:	83 e2       	ldi	r24, 0x23	; 35
    3370:	80 87       	std	Z+8, r24	; 0x08
    3372:	11 86       	std	Z+9, r1	; 0x09
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    3374:	80 e0       	ldi	r24, 0x00	; 0
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    3376:	81 11       	cpse	r24, r1
    3378:	f8 cf       	rjmp	.-16     	; 0x336a <main+0x3a2>
    337a:	9f bf       	out	0x3f, r25	; 63
    337c:	35 c0       	rjmp	.+106    	; 0x33e8 <main+0x420>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    337e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    3382:	8f 3f       	cpi	r24, 0xFF	; 255
					lcd_putc('p');
    3384:	21 f1       	breq	.+72     	; 0x33ce <main+0x406>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	b0 da       	rcall	.-2720   	; 0x28ea <lcd_goto>
					lcd_putc('A'+((midiLastProgram >> 3) & 0x07));
    338a:	80 e7       	ldi	r24, 0x70	; 112
    338c:	d8 da       	rcall	.-2640   	; 0x293e <lcd_putc>
    338e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    3392:	86 95       	lsr	r24
    3394:	86 95       	lsr	r24
    3396:	86 95       	lsr	r24
    3398:	87 70       	andi	r24, 0x07	; 7
    339a:	8f 5b       	subi	r24, 0xBF	; 191
					lcd_putc('1'+(midiLastProgram & 0x07)); // V 0.81 show Prog Nr and Bank
    339c:	d0 da       	rcall	.-2656   	; 0x293e <lcd_putc>
    339e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    33a2:	87 70       	andi	r24, 0x07	; 7
    33a4:	8f 5c       	subi	r24, 0xCF	; 207
					//lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    33a6:	cb da       	rcall	.-2666   	; 0x293e <lcd_putc>
    33a8:	8e e7       	ldi	r24, 0x7E	; 126
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    33aa:	c9 da       	rcall	.-2670   	; 0x293e <lcd_putc>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <midiLastProgram>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33b2:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    33b4:	f8 94       	cli
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	06 c0       	rjmp	.+12     	; 0x33c6 <main+0x3fe>
    33ba:	e0 e5       	ldi	r30, 0x50	; 80
    33bc:	f2 e0       	ldi	r31, 0x02	; 2
    33be:	83 e2       	ldi	r24, 0x23	; 35
    33c0:	80 87       	std	Z+8, r24	; 0x08
    33c2:	11 86       	std	Z+9, r1	; 0x09
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33c6:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    33c8:	f8 cf       	rjmp	.-16     	; 0x33ba <main+0x3f2>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    33ca:	9f bf       	out	0x3f, r25	; 63
    33cc:	0d c0       	rjmp	.+26     	; 0x33e8 <main+0x420>
    33ce:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    33d2:	81 11       	cpse	r24, r1
					lcd_blank(6);
    33d4:	09 c0       	rjmp	.+18     	; 0x33e8 <main+0x420>
    33d6:	89 da       	rcall	.-2798   	; 0x28ea <lcd_goto>
    33d8:	86 e0       	ldi	r24, 0x06	; 6
					lcd_goto(oldcursor);
    33da:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <lcd_blank>
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    33de:	8c 2f       	mov	r24, r28
    33e0:	84 da       	rcall	.-2808   	; 0x28ea <lcd_goto>
    33e2:	8f ef       	ldi	r24, 0xFF	; 255
				}
			}
		}
		// status line lin0 right corner: midi out display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    33e4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <swTimer+0x8>
    33e8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    33ec:	8f 3f       	cpi	r24, 0xFF	; 255
    33ee:	21 f0       	breq	.+8      	; 0x33f8 <main+0x430>
    33f0:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    33f4:	81 11       	cpse	r24, r1
    33f6:	5c c0       	rjmp	.+184    	; 0x34b0 <main+0x4e8>
    33f8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    33fc:	8f 3f       	cpi	r24, 0xFF	; 255
    33fe:	f9 f0       	breq	.+62     	; 0x343e <main+0x476>
    3400:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_ManualOutDec(midiLastOutManual);
    3402:	73 da       	rcall	.-2842   	; 0x28ea <lcd_goto>
    3404:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <midiLastOutManual>
				lcd_putc(MENU_MIDI_IO_SIGN);
    3408:	0e 94 88 3e 	call	0x7d10	; 0x7d10 <lcd_ManualOutDec>
				lcd_noteOut(midiLastOutNote);
    340c:	8e e7       	ldi	r24, 0x7E	; 126
    340e:	97 da       	rcall	.-2770   	; 0x293e <lcd_putc>
    3410:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
				lcd_goto(oldcursor);
    3414:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <lcd_noteOut>
    3418:	8c 2f       	mov	r24, r28
				midiLastOutNote = MIDI_NOTE_NONE;
    341a:	67 da       	rcall	.-2866   	; 0x28ea <lcd_goto>
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <midiLastOutNote>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    3422:	9f b7       	in	r25, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <main+0x46e>
    342a:	e0 e5       	ldi	r30, 0x50	; 80
    342c:	f2 e0       	ldi	r31, 0x02	; 2
    342e:	88 e2       	ldi	r24, 0x28	; 40
    3430:	82 87       	std	Z+10, r24	; 0x0a
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3432:	13 86       	std	Z+11, r1	; 0x0b
    __asm__ volatile ("" ::: "memory");
    3434:	80 e0       	ldi	r24, 0x00	; 0
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    3436:	81 11       	cpse	r24, r1
    3438:	f8 cf       	rjmp	.-16     	; 0x342a <main+0x462>
    343a:	9f bf       	out	0x3f, r25	; 63
    343c:	39 c0       	rjmp	.+114    	; 0x34b0 <main+0x4e8>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    343e:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    3442:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_putc('R');
    3444:	39 f1       	breq	.+78     	; 0x3494 <main+0x4cc>
    3446:	8f e0       	ldi	r24, 0x0F	; 15
    3448:	50 da       	rcall	.-2912   	; 0x28ea <lcd_goto>
				lcd_dec2out((midi_RegisterChanged & ~REGISTER_WAS_SET)+1); // remove MSB, add 1 for user register numbers
    344a:	82 e5       	ldi	r24, 0x52	; 82
    344c:	78 da       	rcall	.-2832   	; 0x293e <lcd_putc>
    344e:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    3452:	8f 77       	andi	r24, 0x7F	; 127
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_REG_OFF : LCD_CHAR_REG_ON); // MSB = register was set
    3454:	8f 5f       	subi	r24, 0xFF	; 255
    3456:	0e 94 aa 3c 	call	0x7954	; 0x7954 <lcd_dec2out>
    345a:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    345e:	88 23       	and	r24, r24
    3460:	14 f0       	brlt	.+4      	; 0x3466 <main+0x49e>
    3462:	8a e0       	ldi	r24, 0x0A	; 10
				lcd_putc(' ');
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <main+0x4a0>
    3466:	8b e0       	ldi	r24, 0x0B	; 11
    3468:	6a da       	rcall	.-2860   	; 0x293e <lcd_putc>
				lcd_goto(oldcursor);
    346a:	80 e2       	ldi	r24, 0x20	; 32
    346c:	68 da       	rcall	.-2864   	; 0x293e <lcd_putc>
    346e:	8c 2f       	mov	r24, r28
				midi_RegisterChanged = REGISTER_NONE;
    3470:	3c da       	rcall	.-2952   	; 0x28ea <lcd_goto>
    3472:	8f ef       	ldi	r24, 0xFF	; 255
    3474:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3478:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    347a:	f8 94       	cli
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	06 c0       	rjmp	.+12     	; 0x348c <main+0x4c4>
    3480:	e0 e5       	ldi	r30, 0x50	; 80
    3482:	f2 e0       	ldi	r31, 0x02	; 2
    3484:	88 e2       	ldi	r24, 0x28	; 40
    3486:	82 87       	std	Z+10, r24	; 0x0a
    3488:	13 86       	std	Z+11, r1	; 0x0b
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    348e:	f8 cf       	rjmp	.-16     	; 0x3480 <main+0x4b8>
    __asm__ volatile ("" ::: "memory");
    3490:	9f bf       	out	0x3f, r25	; 63
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    3492:	0e c0       	rjmp	.+28     	; 0x34b0 <main+0x4e8>
    3494:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3498:	81 11       	cpse	r24, r1
    349a:	0a c0       	rjmp	.+20     	; 0x34b0 <main+0x4e8>
    349c:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_blank(5);
    349e:	25 da       	rcall	.-2998   	; 0x28ea <lcd_goto>
    34a0:	85 e0       	ldi	r24, 0x05	; 5
    34a2:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <lcd_blank>
				lcd_goto(oldcursor);
    34a6:	8c 2f       	mov	r24, r28
    34a8:	20 da       	rcall	.-3008   	; 0x28ea <lcd_goto>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <swTimer+0xa>
			}
		}
		#endif
		//----------------------- program display line0 left corner------------------------
		if ((menuNotActive == TRUE) &&((prog_UpdDisplay == TRUE) || (TIMER_ELAPSED(TIMER_REGDISPLAY)))) {
    34b0:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
    34b4:	8f 3f       	cpi	r24, 0xFF	; 255
    34b6:	71 f5       	brne	.+92     	; 0x3514 <main+0x54c>
    34b8:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <prog_UpdDisplay>
    34bc:	8f 3f       	cpi	r24, 0xFF	; 255
    34be:	21 f0       	breq	.+8      	; 0x34c8 <main+0x500>
    34c0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <swTimer+0x12>
    34c4:	81 11       	cpse	r24, r1
    34c6:	26 c0       	rjmp	.+76     	; 0x3514 <main+0x54c>
			// 0.77: only if menu is not active!
			prog_UpdDisplay = FALSE;
    34c8:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
			TIMER_SET(TIMER_REGDISPLAY,TIMER_REGDISPLAY_MS)
    34cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34ce:	f8 94       	cli
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	06 c0       	rjmp	.+12     	; 0x34e0 <main+0x518>
    34d4:	e0 e5       	ldi	r30, 0x50	; 80
    34d6:	f2 e0       	ldi	r31, 0x02	; 2
    34d8:	84 e1       	ldi	r24, 0x14	; 20
    34da:	82 8b       	std	Z+18, r24	; 0x12
    34dc:	13 8a       	std	Z+19, r1	; 0x13
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34e2:	f8 cf       	rjmp	.-16     	; 0x34d4 <main+0x50c>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    34e4:	9f bf       	out	0x3f, r25	; 63
    34e6:	01 da       	rcall	.-3070   	; 0x28ea <lcd_goto>
			prog_toLcd();
    34e8:	0e 94 1c 33 	call	0x6638	; 0x6638 <prog_toLcd>
			if (pipe_PowerStatus != POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    34ec:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    34f0:	81 30       	cpi	r24, 0x01	; 1
    34f2:	81 f0       	breq	.+32     	; 0x3514 <main+0x54c>
				// only if not displaying message to release keys
				if (prog_Display <= PROGR_MAX) {
    34f4:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    34f8:	80 34       	cpi	r24, 0x40	; 64
    34fa:	50 f4       	brcc	.+20     	; 0x3510 <main+0x548>
					// show register settings
					reg_toLCD(regShowHW);
    34fc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
    3500:	0e 94 48 33 	call	0x6690	; 0x6690 <reg_toLCD>
					regShowHW = ~regShowHW; // alternate between SW output and HW read registers
    3504:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
    3508:	80 95       	com	r24
    350a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <regShowHW>
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <main+0x54c>
				} else {
					reg_ClearOnLCD();
    3510:	0e 94 cc 33 	call	0x6798	; 0x6798 <reg_ClearOnLCD>
				}
			}
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    3514:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_UpTimeUpdated>
    3518:	8f 3f       	cpi	r24, 0xFF	; 255
    351a:	09 f0       	breq	.+2      	; 0x351e <main+0x556>
			time_UpTimeUpdated = FALSE;
    351c:	7c c0       	rjmp	.+248    	; 0x3616 <main+0x64e>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    351e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <time_UpTimeUpdated>
			uint8_t oldBlink = lcd_cursorIsOn;
    3522:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
			if (oldBlink == TRUE) {
    3526:	c0 91 7b 03 	lds	r28, 0x037B	; 0x80037b <lcd_cursorIsOn>
				lcd_cursoroff();
    352a:	cf 3f       	cpi	r28, 0xFF	; 255
    352c:	09 f4       	brne	.+2      	; 0x3530 <main+0x568>
			}
			char separator;
			if (*pTime == 0) {
    352e:	4a db       	rcall	.-2412   	; 0x2bc4 <lcd_cursoroff>
    3530:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <time_Uptime+0x3>
    3534:	88 23       	and	r24, r24
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    3536:	59 f0       	breq	.+22     	; 0x354e <main+0x586>
    3538:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <time_Uptime+0x1>
				// when displaying hr:min blink ":"
				separator = ':';
    353c:	80 fd       	sbrc	r24, 0
    353e:	0e c0       	rjmp	.+28     	; 0x355c <main+0x594>
    3540:	0f 2e       	mov	r0, r31
    3542:	fa e3       	ldi	r31, 0x3A	; 58
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3544:	ef 2e       	mov	r14, r31
    3546:	f0 2d       	mov	r31, r0
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    3548:	07 e6       	ldi	r16, 0x67	; 103
    354a:	12 e0       	ldi	r17, 0x02	; 2
    354c:	0c c0       	rjmp	.+24     	; 0x3566 <main+0x59e>
    354e:	0f 2e       	mov	r0, r31
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    3550:	fa e3       	ldi	r31, 0x3A	; 58
    3552:	ef 2e       	mov	r14, r31
    3554:	f0 2d       	mov	r31, r0
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3556:	06 e6       	ldi	r16, 0x66	; 102
    3558:	12 e0       	ldi	r17, 0x02	; 2
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    355a:	05 c0       	rjmp	.+10     	; 0x3566 <main+0x59e>
    355c:	68 94       	set
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    355e:	ee 24       	eor	r14, r14
    3560:	e5 f8       	bld	r14, 5
    3562:	07 e6       	ldi	r16, 0x67	; 103
			lcd_dec2out(*(pTime--));
    3564:	12 e0       	ldi	r17, 0x02	; 2
    3566:	87 e0       	ldi	r24, 0x07	; 7
    3568:	c0 d9       	rcall	.-3200   	; 0x28ea <lcd_goto>
			lcd_putc(separator);
    356a:	f8 01       	movw	r30, r16
    356c:	80 81       	ld	r24, Z
			lcd_dec2out(*pTime);
    356e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <lcd_dec2out>
    3572:	8e 2d       	mov	r24, r14
    3574:	e4 d9       	rcall	.-3128   	; 0x293e <lcd_putc>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    3576:	f8 01       	movw	r30, r16
    3578:	31 97       	sbiw	r30, 0x01	; 1
			if (ovflCount > 0){
    357a:	80 81       	ld	r24, Z
    357c:	0e 94 aa 3c 	call	0x7954	; 0x7954 <lcd_dec2out>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    3580:	40 91 79 16 	lds	r20, 0x1679	; 0x801679 <midiRxOvflCount>
    3584:	44 23       	and	r20, r20
    3586:	31 f0       	breq	.+12     	; 0x3594 <main+0x5cc>
				midiRxOvflCount = 0;
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    358c:	83 e0       	ldi	r24, 0x03	; 3
    358e:	06 dd       	rcall	.-1524   	; 0x2f9c <log_putError>
			if (ovflCount > 0){
    3590:	10 92 79 16 	sts	0x1679, r1	; 0x801679 <midiRxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    3594:	40 91 80 16 	lds	r20, 0x1680	; 0x801680 <midiTxOvflCount>
    3598:	44 23       	and	r20, r20
    359a:	31 f0       	breq	.+12     	; 0x35a8 <main+0x5e0>
    359c:	50 e0       	ldi	r21, 0x00	; 0
				midiTxOvflCount = 0;
    359e:	61 e0       	ldi	r22, 0x01	; 1
    35a0:	83 e0       	ldi	r24, 0x03	; 3
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    35a2:	fc dc       	rcall	.-1544   	; 0x2f9c <log_putError>
    35a4:	10 92 80 16 	sts	0x1680, r1	; 0x801680 <midiTxOvflCount>
    35a8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    35ac:	84 ff       	sbrs	r24, 4
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <main+0x5ec>
    35b0:	80 e2       	ldi	r24, 0x20	; 32
    35b2:	01 c0       	rjmp	.+2      	; 0x35b6 <main+0x5ee>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    35b4:	89 e0       	ldi	r24, 0x09	; 9
    35b6:	c3 d9       	rcall	.-3194   	; 0x293e <lcd_putc>
    35b8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <log_unreadErrors>
    35bc:	8f 3f       	cpi	r24, 0xFF	; 255
    35be:	11 f4       	brne	.+4      	; 0x35c4 <main+0x5fc>
    35c0:	85 e4       	ldi	r24, 0x45	; 69
    35c2:	01 c0       	rjmp	.+2      	; 0x35c6 <main+0x5fe>
    35c4:	80 e2       	ldi	r24, 0x20	; 32
			// --- restore cursor ---
			lcd_goto(oldCursor);
    35c6:	bb d9       	rcall	.-3210   	; 0x293e <lcd_putc>
    35c8:	8f 2d       	mov	r24, r15
			if (oldBlink == TRUE) {
    35ca:	8f d9       	rcall	.-3298   	; 0x28ea <lcd_goto>
    35cc:	cf 3f       	cpi	r28, 0xFF	; 255
				lcd_cursosblink();
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <main+0x60a>
    35d0:	f3 da       	rcall	.-2586   	; 0x2bb8 <lcd_cursosblink>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    35d2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    35d6:	8f 3f       	cpi	r24, 0xFF	; 255
    35d8:	69 f4       	brne	.+26     	; 0x35f4 <main+0x62c>
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    35da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35dc:	f8 94       	cli
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <main+0x626>
    35e2:	e0 e5       	ldi	r30, 0x50	; 80
    35e4:	f2 e0       	ldi	r31, 0x02	; 2
    35e6:	8d e7       	ldi	r24, 0x7D	; 125
    35e8:	80 87       	std	Z+8, r24	; 0x08
    35ea:	11 86       	std	Z+9, r1	; 0x09
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	81 11       	cpse	r24, r1
    35f0:	f8 cf       	rjmp	.-16     	; 0x35e2 <main+0x61a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35f2:	9f bf       	out	0x3f, r25	; 63
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    35f4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    35f8:	8f 3f       	cpi	r24, 0xFF	; 255
    35fa:	69 f4       	brne	.+26     	; 0x3616 <main+0x64e>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    35fc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35fe:	f8 94       	cli
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	06 c0       	rjmp	.+12     	; 0x3610 <main+0x648>
    3604:	e0 e5       	ldi	r30, 0x50	; 80
    3606:	f2 e0       	ldi	r31, 0x02	; 2
    3608:	8d e7       	ldi	r24, 0x7D	; 125
    360a:	82 87       	std	Z+10, r24	; 0x0a
    360c:	13 86       	std	Z+11, r1	; 0x0b
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	81 11       	cpse	r24, r1
    3612:	f8 cf       	rjmp	.-16     	; 0x3604 <main+0x63c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3614:	9f bf       	out	0x3f, r25	; 63
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3616:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <msgPipeOverflow>
    361a:	8f 3f       	cpi	r24, 0xFF	; 255
    361c:	39 f4       	brne	.+14     	; 0x362c <main+0x664>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    361e:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <msgPipeOverflow>
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	84 e0       	ldi	r24, 0x04	; 4
    362a:	b8 dc       	rcall	.-1680   	; 0x2f9c <log_putError>
    362c:	85 b1       	in	r24, 0x05	; 5
		}
		DEBUG_OUT_MIDI
    362e:	8f 7c       	andi	r24, 0xCF	; 207
    3630:	80 62       	ori	r24, 0x20	; 32
    3632:	85 b9       	out	0x05, r24	; 5
    3634:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3638:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    363c:	98 17       	cp	r25, r24
    363e:	21 f0       	breq	.+8      	; 0x3648 <main+0x680>
    3640:	0e 94 ba 39 	call	0x7374	; 0x7374 <serial1MIDIReadRx>
			midiIn_Process(serial1MIDIReadRx());
    3644:	0e 94 f7 36 	call	0x6dee	; 0x6dee <midiIn_Process>
    3648:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <pipeMsgStatus>
		}
		//----------------------- PIPE KEY PROCESSING -> MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    364c:	8f 3f       	cpi	r24, 0xFF	; 255
    364e:	09 f0       	breq	.+2      	; 0x3652 <main+0x68a>
    3650:	06 cd       	rjmp	.-1524   	; 0x305e <main+0x96>
    3652:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <pipeMsgGet>
			midiKeyPress_Process(pipeMsgGet()); // events from module read (->midi out, couplers)
    3656:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <midiKeyPress_Process>
    365a:	01 cd       	rjmp	.-1534   	; 0x305e <main+0x96>

0000365c <menu_enterWriteModule>:
    365c:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <menuModVal>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    3660:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <menuModVal+0x1>
    3664:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <menuModVal+0x2>
    3668:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <menuModVal+0x3>
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3674:	02 c0       	rjmp	.+4      	; 0x367a <menu_enterWriteModule+0x1e>
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	0a 94       	dec	r0
    367c:	e2 f7       	brpl	.-8      	; 0x3676 <menu_enterWriteModule+0x1a>
    367e:	48 2f       	mov	r20, r24
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	e4 e6       	ldi	r30, 0x64	; 100
    3684:	f3 e0       	ldi	r31, 0x03	; 3
    3686:	22 c0       	rjmp	.+68     	; 0x36cc <menu_enterWriteModule+0x70>
    3688:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <menuModVal>
    368c:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    3690:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    3694:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	bb 1f       	adc	r27, r27
    36a0:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    36a4:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    36a8:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    36ac:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    36b0:	21 81       	ldd	r18, Z+1	; 0x01
    36b2:	24 23       	and	r18, r20
    36b4:	49 f0       	breq	.+18     	; 0x36c8 <menu_enterWriteModule+0x6c>
    36b6:	81 60       	ori	r24, 0x01	; 1
    36b8:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    36bc:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    36c0:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    36c4:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    36c8:	38 97       	sbiw	r30, 0x08	; 8
    36ca:	3f 5f       	subi	r19, 0xFF	; 255
    36cc:	30 32       	cpi	r19, 0x20	; 32
    36ce:	e0 f2       	brcs	.-72     	; 0x3688 <menu_enterWriteModule+0x2c>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	08 95       	ret

000036d4 <menu_exitWriteModule>:
    36d4:	40 91 d3 05 	lds	r20, 0x05D3	; 0x8005d3 <menuModVal>
    36d8:	50 91 d4 05 	lds	r21, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    36dc:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    36e0:	70 91 d6 05 	lds	r23, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    36e4:	85 30       	cpi	r24, 0x05	; 5
    36e6:	09 f5       	brne	.+66     	; 0x372a <menu_exitWriteModule+0x56>
    36e8:	a1 e0       	ldi	r26, 0x01	; 1
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <menu_exitWriteModule+0x22>
    36f2:	aa 0f       	add	r26, r26
    36f4:	bb 1f       	adc	r27, r27
    36f6:	0a 94       	dec	r0
    36f8:	e2 f7       	brpl	.-8      	; 0x36f2 <menu_exitWriteModule+0x1e>
    36fa:	3a 2f       	mov	r19, r26
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	e4 e6       	ldi	r30, 0x64	; 100
    3700:	f3 e0       	ldi	r31, 0x03	; 3
    3702:	11 c0       	rjmp	.+34     	; 0x3726 <menu_exitWriteModule+0x52>
    3704:	77 23       	and	r23, r23
    3706:	24 f4       	brge	.+8      	; 0x3710 <menu_exitWriteModule+0x3c>
    3708:	81 81       	ldd	r24, Z+1	; 0x01
    370a:	83 2b       	or	r24, r19
    370c:	81 83       	std	Z+1, r24	; 0x01
    370e:	05 c0       	rjmp	.+10     	; 0x371a <menu_exitWriteModule+0x46>
    3710:	21 81       	ldd	r18, Z+1	; 0x01
    3712:	8a 2f       	mov	r24, r26
    3714:	80 95       	com	r24
    3716:	82 23       	and	r24, r18
    3718:	81 83       	std	Z+1, r24	; 0x01
    371a:	44 0f       	add	r20, r20
    371c:	55 1f       	adc	r21, r21
    371e:	66 1f       	adc	r22, r22
    3720:	77 1f       	adc	r23, r23
    3722:	38 97       	sbiw	r30, 0x08	; 8
    3724:	9f 5f       	subi	r25, 0xFF	; 255
    3726:	90 32       	cpi	r25, 0x20	; 32
    3728:	68 f3       	brcs	.-38     	; 0x3704 <menu_exitWriteModule+0x30>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	08 95       	ret

0000372e <menuOnEnterModSel>:
    372e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3732:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3736:	3e 96       	adiw	r30, 0x0e	; 14
    3738:	85 91       	lpm	r24, Z+
    373a:	95 91       	lpm	r25, Z+
    373c:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <menuVmodule>
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	08 95       	ret

00003744 <menuOnEnterMidiInCh>:
    3744:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3748:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    374c:	3e 96       	adiw	r30, 0x0e	; 14
    374e:	85 91       	lpm	r24, Z+
    3750:	95 91       	lpm	r25, Z+
    3752:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVmidiChan>
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	08 95       	ret

0000375a <menuOnEnterMidiInSec>:
    375a:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    375e:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3762:	3e 96       	adiw	r30, 0x0e	; 14
    3764:	25 91       	lpm	r18, Z+
    3766:	35 91       	lpm	r19, Z+
    3768:	20 93 dd 05 	sts	0x05DD, r18	; 0x8005dd <menuVsection>
    376c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVmidiChan>
    3770:	8f 70       	andi	r24, 0x0F	; 15
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	23 70       	andi	r18, 0x03	; 3
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	82 0f       	add	r24, r18
    3780:	91 1d       	adc	r25, r1
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    378e:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	08 95       	ret

00003796 <menuOnEnterModManual>:
    3796:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    379a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    379e:	3e 96       	adiw	r30, 0x0e	; 14
    37a0:	85 91       	lpm	r24, Z+
    37a2:	95 91       	lpm	r25, Z+
    37a4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	08 95       	ret

000037ac <menuOnEnterModSec>:
    37ac:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    37b0:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    37b4:	3e 96       	adiw	r30, 0x0e	; 14
    37b6:	85 91       	lpm	r24, Z+
    37b8:	95 91       	lpm	r25, Z+
    37ba:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    37be:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <menuVmanual>
    37c2:	2f 70       	andi	r18, 0x0F	; 15
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	83 70       	andi	r24, 0x03	; 3
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a9 01       	movw	r20, r18
    37cc:	44 0f       	add	r20, r20
    37ce:	55 1f       	adc	r21, r21
    37d0:	24 0f       	add	r18, r20
    37d2:	35 1f       	adc	r19, r21
    37d4:	22 0f       	add	r18, r18
    37d6:	33 1f       	adc	r19, r19
    37d8:	22 0f       	add	r18, r18
    37da:	33 1f       	adc	r19, r19
    37dc:	ac 01       	movw	r20, r24
    37de:	44 0f       	add	r20, r20
    37e0:	55 1f       	adc	r21, r21
    37e2:	84 0f       	add	r24, r20
    37e4:	95 1f       	adc	r25, r21
    37e6:	82 0f       	add	r24, r18
    37e8:	93 1f       	adc	r25, r19
    37ea:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    37ee:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	08 95       	ret

000037f6 <menuOnEnterModSecReg>:
    37f6:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    37fa:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    37fe:	3e 96       	adiw	r30, 0x0e	; 14
    3800:	85 91       	lpm	r24, Z+
    3802:	95 91       	lpm	r25, Z+
    3804:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    3808:	87 70       	andi	r24, 0x07	; 7
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	9c 01       	movw	r18, r24
    380e:	22 0f       	add	r18, r18
    3810:	33 1f       	adc	r19, r19
    3812:	82 0f       	add	r24, r18
    3814:	93 1f       	adc	r25, r19
    3816:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    381a:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	08 95       	ret

00003822 <menuOnEnterRegOut>:
    3822:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3826:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    382a:	3e 96       	adiw	r30, 0x0e	; 14
    382c:	85 91       	lpm	r24, Z+
    382e:	95 91       	lpm	r25, Z+
    3830:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    3834:	87 70       	andi	r24, 0x07	; 7
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    3844:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	08 95       	ret

0000384c <menuOnEnterKey>:
    384c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3850:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3854:	3e 96       	adiw	r30, 0x0e	; 14
    3856:	85 91       	lpm	r24, Z+
    3858:	95 91       	lpm	r25, Z+
    385a:	84 30       	cpi	r24, 0x04	; 4
    385c:	60 f4       	brcc	.+24     	; 0x3876 <menuOnEnterKey+0x2a>
    385e:	fc 01       	movw	r30, r24
    3860:	ff 27       	eor	r31, r31
    3862:	ee 0f       	add	r30, r30
    3864:	ff 1f       	adc	r31, r31
    3866:	e0 52       	subi	r30, 0x20	; 32
    3868:	fa 4f       	sbci	r31, 0xFA	; 250
    386a:	80 81       	ld	r24, Z
    386c:	91 81       	ldd	r25, Z+1	; 0x01
    386e:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <menuVMenuSoftKey+0x1>
    3872:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <menuVMenuSoftKey>
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	08 95       	ret

0000387a <menuOnExitMidiCCreg>:
    387a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <eeprom_UpdateCCreg>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	08 95       	ret

00003882 <menuOnExitRegisterOut>:
    3882:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <eeprom_UpdateRegOut>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	08 95       	ret

0000388a <menuOnExitMidiThrough>:
    388a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <eeprom_UpdateMidiThrough>
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	08 95       	ret

00003892 <menuOnExitRegisterEdit>:
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	86 30       	cpi	r24, 0x06	; 6
    389a:	f1 f0       	breq	.+60     	; 0x38d8 <menuOnExitRegisterEdit+0x46>
    389c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    38a0:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    38a4:	3e 96       	adiw	r30, 0x0e	; 14
    38a6:	05 90       	lpm	r0, Z+
    38a8:	f4 91       	lpm	r31, Z
    38aa:	e0 2d       	mov	r30, r0
    38ac:	cf 01       	movw	r24, r30
    38ae:	83 59       	subi	r24, 0x93	; 147
    38b0:	95 40       	sbci	r25, 0x05	; 5
    38b2:	88 0f       	add	r24, r24
    38b4:	88 0f       	add	r24, r24
    38b6:	88 0f       	add	r24, r24
    38b8:	d0 81       	ld	r29, Z
    38ba:	c0 e0       	ldi	r28, 0x00	; 0
    38bc:	0b c0       	rjmp	.+22     	; 0x38d4 <menuOnExitRegisterEdit+0x42>
    38be:	11 e0       	ldi	r17, 0x01	; 1
    38c0:	18 0f       	add	r17, r24
    38c2:	6d 2f       	mov	r22, r29
    38c4:	66 1f       	adc	r22, r22
    38c6:	66 27       	eor	r22, r22
    38c8:	66 1f       	adc	r22, r22
    38ca:	0e 94 c1 31 	call	0x6382	; 0x6382 <register_onOff>
    38ce:	dd 0f       	add	r29, r29
    38d0:	cf 5f       	subi	r28, 0xFF	; 255
    38d2:	81 2f       	mov	r24, r17
    38d4:	c8 30       	cpi	r28, 0x08	; 8
    38d6:	98 f3       	brcs	.-26     	; 0x38be <menuOnExitRegisterEdit+0x2c>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	08 95       	ret

000038e2 <softKeyRegOff>:
    38e2:	81 11       	cpse	r24, r1
    38e4:	0e 94 d5 32 	call	0x65aa	; 0x65aa <midi_resetRegisters>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	08 95       	ret

000038ec <menuOnExitCoupler>:
    38ec:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    38f0:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    38f4:	3e 96       	adiw	r30, 0x0e	; 14
    38f6:	85 91       	lpm	r24, Z+
    38f8:	95 91       	lpm	r25, Z+
    38fa:	87 53       	subi	r24, 0x37	; 55
    38fc:	98 40       	sbci	r25, 0x08	; 8
    38fe:	fc 01       	movw	r30, r24
    3900:	ff 27       	eor	r31, r31
    3902:	e9 5c       	subi	r30, 0xC9	; 201
    3904:	f7 4f       	sbci	r31, 0xF7	; 247
    3906:	20 81       	ld	r18, Z
    3908:	21 11       	cpse	r18, r1
    390a:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <set_Coupler>
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	08 95       	ret

00003912 <menuOnExitSaveProgram>:
    3912:	86 30       	cpi	r24, 0x06	; 6
    3914:	39 f0       	breq	.+14     	; 0x3924 <menuOnExitSaveProgram+0x12>
    3916:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    391a:	80 34       	cpi	r24, 0x40	; 64
    391c:	18 f4       	brcc	.+6      	; 0x3924 <menuOnExitSaveProgram+0x12>
    391e:	6f ef       	ldi	r22, 0xFF	; 255
    3920:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <register_toProgram>
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	08 95       	ret

00003928 <menuOnExitKeys>:
    3928:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_UpdateSoftkeys>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	08 95       	ret

00003930 <menu_readModule>:
    3930:	cf 92       	push	r12
    3932:	df 92       	push	r13
    3934:	ef 92       	push	r14
    3936:	ff 92       	push	r15
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <menu_readModule+0x16>
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	0a 94       	dec	r0
    3948:	e2 f7       	brpl	.-8      	; 0x3942 <menu_readModule+0x12>
    394a:	28 2f       	mov	r18, r24
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	e4 e6       	ldi	r30, 0x64	; 100
    3950:	f3 e0       	ldi	r31, 0x03	; 3
    3952:	c1 2c       	mov	r12, r1
    3954:	d1 2c       	mov	r13, r1
    3956:	76 01       	movw	r14, r12
    3958:	0b c0       	rjmp	.+22     	; 0x3970 <menu_readModule+0x40>
    395a:	cc 0c       	add	r12, r12
    395c:	dd 1c       	adc	r13, r13
    395e:	ee 1c       	adc	r14, r14
    3960:	ff 1c       	adc	r15, r15
    3962:	86 81       	ldd	r24, Z+6	; 0x06
    3964:	82 23       	and	r24, r18
    3966:	11 f0       	breq	.+4      	; 0x396c <menu_readModule+0x3c>
    3968:	68 94       	set
    396a:	c0 f8       	bld	r12, 0
    396c:	38 97       	sbiw	r30, 0x08	; 8
    396e:	9f 5f       	subi	r25, 0xFF	; 255
    3970:	90 32       	cpi	r25, 0x20	; 32
    3972:	98 f3       	brcs	.-26     	; 0x395a <menu_readModule+0x2a>
    3974:	8e e1       	ldi	r24, 0x1E	; 30
    3976:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    397a:	c0 92 06 19 	sts	0x1906, r12	; 0x801906 <editLong>
    397e:	d0 92 07 19 	sts	0x1907, r13	; 0x801907 <editLong+0x1>
    3982:	e0 92 08 19 	sts	0x1908, r14	; 0x801908 <editLong+0x2>
    3986:	f0 92 09 19 	sts	0x1909, r15	; 0x801909 <editLong+0x3>
    398a:	0e 94 85 3c 	call	0x790a	; 0x790a <lcd_longout>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	df 90       	pop	r13
    3996:	cf 90       	pop	r12
    3998:	08 95       	ret

0000399a <menu_testModule>:
    399a:	8e e1       	ldi	r24, 0x1E	; 30
    399c:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    39a0:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <menuVmodule>
    39a4:	0e 94 00 10 	call	0x2000	; 0x2000 <test_PipeModule>
    39a8:	60 93 06 19 	sts	0x1906, r22	; 0x801906 <editLong>
    39ac:	70 93 07 19 	sts	0x1907, r23	; 0x801907 <editLong+0x1>
    39b0:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <editLong+0x2>
    39b4:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <editLong+0x3>
    39b8:	0e 94 85 3c 	call	0x790a	; 0x790a <lcd_longout>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	08 95       	ret

000039c0 <menuOnEnterTune>:
    39c0:	cf 93       	push	r28
    39c2:	8f 3f       	cpi	r24, 0xFF	; 255
    39c4:	09 f0       	breq	.+2      	; 0x39c8 <menuOnEnterTune+0x8>
    39c6:	79 c0       	rjmp	.+242    	; 0x3aba <menuOnEnterTune+0xfa>
    39c8:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minManNote.3067>
    39cc:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <maxManNote.3068>
    39d0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    39d4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    39d8:	3e 96       	adiw	r30, 0x0e	; 14
    39da:	85 91       	lpm	r24, Z+
    39dc:	95 91       	lpm	r25, Z+
    39de:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    39e2:	84 30       	cpi	r24, 0x04	; 4
    39e4:	10 f0       	brcs	.+4      	; 0x39ea <menuOnEnterTune+0x2a>
    39e6:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <menuVmanual>
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	39 c0       	rjmp	.+114    	; 0x3a60 <menuOnEnterTune+0xa0>
    39ee:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	e2 2f       	mov	r30, r18
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	df 01       	movw	r26, r30
    39fa:	aa 0f       	add	r26, r26
    39fc:	bb 1f       	adc	r27, r27
    39fe:	ad 01       	movw	r20, r26
    3a00:	4e 0f       	add	r20, r30
    3a02:	5f 1f       	adc	r21, r31
    3a04:	dc 01       	movw	r26, r24
    3a06:	aa 0f       	add	r26, r26
    3a08:	bb 1f       	adc	r27, r27
    3a0a:	a8 0f       	add	r26, r24
    3a0c:	b9 1f       	adc	r27, r25
    3a0e:	aa 0f       	add	r26, r26
    3a10:	bb 1f       	adc	r27, r27
    3a12:	aa 0f       	add	r26, r26
    3a14:	bb 1f       	adc	r27, r27
    3a16:	a4 0f       	add	r26, r20
    3a18:	b5 1f       	adc	r27, r21
    3a1a:	a2 5a       	subi	r26, 0xA2	; 162
    3a1c:	b6 4f       	sbci	r27, 0xF6	; 246
    3a1e:	3c 91       	ld	r19, X
    3a20:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <minManNote.3067>
    3a24:	34 17       	cp	r19, r20
    3a26:	10 f4       	brcc	.+4      	; 0x3a2c <menuOnEnterTune+0x6c>
    3a28:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <minManNote.3067>
    3a2c:	af 01       	movw	r20, r30
    3a2e:	44 0f       	add	r20, r20
    3a30:	55 1f       	adc	r21, r21
    3a32:	e4 0f       	add	r30, r20
    3a34:	f5 1f       	adc	r31, r21
    3a36:	ac 01       	movw	r20, r24
    3a38:	44 0f       	add	r20, r20
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	84 0f       	add	r24, r20
    3a3e:	95 1f       	adc	r25, r21
    3a40:	88 0f       	add	r24, r24
    3a42:	99 1f       	adc	r25, r25
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	e8 0f       	add	r30, r24
    3a4a:	f9 1f       	adc	r31, r25
    3a4c:	e2 5a       	subi	r30, 0xA2	; 162
    3a4e:	f6 4f       	sbci	r31, 0xF6	; 246
    3a50:	81 81       	ldd	r24, Z+1	; 0x01
    3a52:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <maxManNote.3068>
    3a56:	98 17       	cp	r25, r24
    3a58:	10 f4       	brcc	.+4      	; 0x3a5e <menuOnEnterTune+0x9e>
    3a5a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <maxManNote.3068>
    3a5e:	2f 5f       	subi	r18, 0xFF	; 255
    3a60:	24 30       	cpi	r18, 0x04	; 4
    3a62:	28 f2       	brcs	.-118    	; 0x39ee <menuOnEnterTune+0x2e>
    3a64:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3067>
    3a68:	88 23       	and	r24, r24
    3a6a:	5c f4       	brge	.+22     	; 0x3a82 <menuOnEnterTune+0xc2>
    3a6c:	8e e1       	ldi	r24, 0x1E	; 30
    3a6e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    3a72:	82 ef       	ldi	r24, 0xF2	; 242
    3a74:	93 e0       	ldi	r25, 0x03	; 3
    3a76:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    3a7a:	8f ef       	ldi	r24, 0xFF	; 255
    3a7c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    3a80:	04 c0       	rjmp	.+8      	; 0x3a8a <menuOnEnterTune+0xca>
    3a82:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    3a86:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3069>
    3a8a:	60 e8       	ldi	r22, 0x80	; 128
    3a8c:	74 e1       	ldi	r23, 0x14	; 20
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    3a94:	6f e8       	ldi	r22, 0x8F	; 143
    3a96:	74 e1       	ldi	r23, 0x14	; 20
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    3a9e:	64 e9       	ldi	r22, 0x94	; 148
    3aa0:	74 e1       	ldi	r23, 0x14	; 20
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    3aa8:	66 e9       	ldi	r22, 0x96	; 150
    3aaa:	74 e1       	ldi	r23, 0x14	; 20
    3aac:	83 e0       	ldi	r24, 0x03	; 3
    3aae:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    3ab2:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    3ab6:	cf ef       	ldi	r28, 0xFF	; 255
    3ab8:	71 c0       	rjmp	.+226    	; 0x3b9c <menuOnEnterTune+0x1dc>
    3aba:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3abe:	6f 3f       	cpi	r22, 0xFF	; 255
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <menuOnEnterTune+0x104>
    3ac2:	61 c0       	rjmp	.+194    	; 0x3b86 <menuOnEnterTune+0x1c6>
    3ac4:	81 30       	cpi	r24, 0x01	; 1
    3ac6:	d9 f4       	brne	.+54     	; 0x3afe <menuOnEnterTune+0x13e>
    3ac8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <maxManNote.3068>
    3acc:	68 17       	cp	r22, r24
    3ace:	08 f0       	brcs	.+2      	; 0x3ad2 <menuOnEnterTune+0x112>
    3ad0:	5c c0       	rjmp	.+184    	; 0x3b8a <menuOnEnterTune+0x1ca>
    3ad2:	40 e0       	ldi	r20, 0x00	; 0
    3ad4:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3ad8:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3adc:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3ae0:	6f 5f       	subi	r22, 0xFF	; 255
    3ae2:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    3ae6:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3069>
    3aea:	81 30       	cpi	r24, 0x01	; 1
    3aec:	09 f0       	breq	.+2      	; 0x3af0 <menuOnEnterTune+0x130>
    3aee:	4f c0       	rjmp	.+158    	; 0x3b8e <menuOnEnterTune+0x1ce>
    3af0:	41 e0       	ldi	r20, 0x01	; 1
    3af2:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3af6:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3afa:	cf ef       	ldi	r28, 0xFF	; 255
    3afc:	4f c0       	rjmp	.+158    	; 0x3b9c <menuOnEnterTune+0x1dc>
    3afe:	84 30       	cpi	r24, 0x04	; 4
    3b00:	d1 f4       	brne	.+52     	; 0x3b36 <menuOnEnterTune+0x176>
    3b02:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3067>
    3b06:	86 17       	cp	r24, r22
    3b08:	08 f0       	brcs	.+2      	; 0x3b0c <menuOnEnterTune+0x14c>
    3b0a:	43 c0       	rjmp	.+134    	; 0x3b92 <menuOnEnterTune+0x1d2>
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b12:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3b16:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3b1a:	61 50       	subi	r22, 0x01	; 1
    3b1c:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    3b20:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3069>
    3b24:	81 30       	cpi	r24, 0x01	; 1
    3b26:	b9 f5       	brne	.+110    	; 0x3b96 <menuOnEnterTune+0x1d6>
    3b28:	41 e0       	ldi	r20, 0x01	; 1
    3b2a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b2e:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3b32:	cf ef       	ldi	r28, 0xFF	; 255
    3b34:	33 c0       	rjmp	.+102    	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b36:	83 30       	cpi	r24, 0x03	; 3
    3b38:	91 f4       	brne	.+36     	; 0x3b5e <menuOnEnterTune+0x19e>
    3b3a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3069>
    3b3e:	81 11       	cpse	r24, r1
    3b40:	04 c0       	rjmp	.+8      	; 0x3b4a <menuOnEnterTune+0x18a>
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <notOnOff.3069>
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <menuOnEnterTune+0x18e>
    3b4a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3069>
    3b4e:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <notOnOff.3069>
    3b52:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b56:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3b5a:	cf ef       	ldi	r28, 0xFF	; 255
    3b5c:	1f c0       	rjmp	.+62     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	11 f0       	breq	.+4      	; 0x3b66 <menuOnEnterTune+0x1a6>
    3b62:	86 30       	cpi	r24, 0x06	; 6
    3b64:	39 f4       	brne	.+14     	; 0x3b74 <menuOnEnterTune+0x1b4>
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b6c:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3b70:	c0 e0       	ldi	r28, 0x00	; 0
    3b72:	14 c0       	rjmp	.+40     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b74:	85 30       	cpi	r24, 0x05	; 5
    3b76:	89 f4       	brne	.+34     	; 0x3b9a <menuOnEnterTune+0x1da>
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b7e:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <manual_NoteOnOff>
    3b82:	c0 e0       	ldi	r28, 0x00	; 0
    3b84:	0b c0       	rjmp	.+22     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b86:	c0 e0       	ldi	r28, 0x00	; 0
    3b88:	09 c0       	rjmp	.+18     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b8a:	cf ef       	ldi	r28, 0xFF	; 255
    3b8c:	07 c0       	rjmp	.+14     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b8e:	cf ef       	ldi	r28, 0xFF	; 255
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b92:	cf ef       	ldi	r28, 0xFF	; 255
    3b94:	03 c0       	rjmp	.+6      	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b96:	cf ef       	ldi	r28, 0xFF	; 255
    3b98:	01 c0       	rjmp	.+2      	; 0x3b9c <menuOnEnterTune+0x1dc>
    3b9a:	cf ef       	ldi	r28, 0xFF	; 255
    3b9c:	cf 3f       	cpi	r28, 0xFF	; 255
    3b9e:	a1 f5       	brne	.+104    	; 0x3c08 <menuOnEnterTune+0x248>
    3ba0:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba6:	69 f1       	breq	.+90     	; 0x3c02 <menuOnEnterTune+0x242>
    3ba8:	8e e1       	ldi	r24, 0x1E	; 30
    3baa:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    3bae:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3bb2:	0e 94 26 3e 	call	0x7c4c	; 0x7c4c <lcd_noteOut>
    3bb6:	80 e2       	ldi	r24, 0x20	; 32
    3bb8:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bbc:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3069>
    3bc0:	81 11       	cpse	r24, r1
    3bc2:	0a c0       	rjmp	.+20     	; 0x3bd8 <menuOnEnterTune+0x218>
    3bc4:	81 e6       	ldi	r24, 0x61	; 97
    3bc6:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bca:	85 e7       	ldi	r24, 0x75	; 117
    3bcc:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bd0:	83 e7       	ldi	r24, 0x73	; 115
    3bd2:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bd6:	09 c0       	rjmp	.+18     	; 0x3bea <menuOnEnterTune+0x22a>
    3bd8:	85 e6       	ldi	r24, 0x65	; 101
    3bda:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bde:	89 e6       	ldi	r24, 0x69	; 105
    3be0:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3be4:	8e e6       	ldi	r24, 0x6E	; 110
    3be6:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    3bea:	61 e0       	ldi	r22, 0x01	; 1
    3bec:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3069>
    3bf0:	81 11       	cpse	r24, r1
    3bf2:	01 c0       	rjmp	.+2      	; 0x3bf6 <menuOnEnterTune+0x236>
    3bf4:	60 e0       	ldi	r22, 0x00	; 0
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_statcheck>
    3bfc:	81 11       	cpse	r24, r1
    3bfe:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    3c02:	8e e1       	ldi	r24, 0x1E	; 30
    3c04:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    3c08:	8c 2f       	mov	r24, r28
    3c0a:	cf 91       	pop	r28
    3c0c:	08 95       	ret

00003c0e <menuOnExitMidiActiveSense>:
    3c0e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <eeprom_UpdateMidiOutMap>
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	08 95       	ret

00003c16 <menuOnExitMidiOut>:
    3c16:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <eeprom_UpdateMidiOutMap>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	08 95       	ret

00003c1e <menuOnExitMidiIn>:
    3c1e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <eeprom_UpdateMidiInMap>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	08 95       	ret

00003c26 <menuOnExitManual>:
    3c26:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <eeprom_UpdateManualMap>
    3c2a:	0e 94 44 30 	call	0x6088	; 0x6088 <registers_CalcCount>
    3c2e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <eeprom_UpdateReg>
    3c32:	0e 94 6f 34 	call	0x68de	; 0x68de <Midi_updateManualRange>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	08 95       	ret

00003c3a <menuOnExitModules>:
    3c3a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <eeprom_UpdateModules>
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	08 95       	ret

00003c42 <menuOnEnterUSBprotokoll>:
    3c42:	cf 93       	push	r28
    3c44:	85 ed       	ldi	r24, 0xD5	; 213
    3c46:	93 e0       	ldi	r25, 0x03	; 3
    3c48:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3c4c:	0c d8       	rcall	.-4072   	; 0x2c66 <log_count>
    3c4e:	81 11       	cpse	r24, r1
    3c50:	17 c0       	rjmp	.+46     	; 0x3c80 <menuOnEnterUSBprotokoll+0x3e>
    3c52:	8b ed       	ldi	r24, 0xDB	; 219
    3c54:	93 e0       	ldi	r25, 0x03	; 3
    3c56:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3c5a:	16 c0       	rjmp	.+44     	; 0x3c88 <menuOnEnterUSBprotokoll+0x46>
    3c5c:	6f ef       	ldi	r22, 0xFF	; 255
    3c5e:	8c 2f       	mov	r24, r28
    3c60:	a3 d9       	rcall	.-3258   	; 0x2fa8 <log_getShortTextFromIndex>
    3c62:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3c66:	80 ea       	ldi	r24, 0xA0	; 160
    3c68:	94 e1       	ldi	r25, 0x14	; 20
    3c6a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3c6e:	8c 2f       	mov	r24, r28
    3c70:	41 d8       	rcall	.-3966   	; 0x2cf4 <log_getErrorText>
    3c72:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3c76:	80 ea       	ldi	r24, 0xA0	; 160
    3c78:	94 e1       	ldi	r25, 0x14	; 20
    3c7a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3c7e:	8c 2f       	mov	r24, r28
    3c80:	cf ef       	ldi	r28, 0xFF	; 255
    3c82:	c8 0f       	add	r28, r24
    3c84:	81 11       	cpse	r24, r1
    3c86:	ea cf       	rjmp	.-44     	; 0x3c5c <menuOnEnterUSBprotokoll+0x1a>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	cf 91       	pop	r28
    3c8c:	08 95       	ret

00003c8e <menuOnExitUSBactive>:
    3c8e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <eeprom_UpdateUSB>
    3c92:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    3c96:	8f 3f       	cpi	r24, 0xFF	; 255
    3c98:	61 f4       	brne	.+24     	; 0x3cb2 <menuOnExitUSBactive+0x24>
    3c9a:	8c eb       	ldi	r24, 0xBC	; 188
    3c9c:	93 e0       	ldi	r25, 0x03	; 3
    3c9e:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3ca2:	88 e5       	ldi	r24, 0x58	; 88
    3ca4:	94 e1       	ldi	r25, 0x14	; 20
    3ca6:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3caa:	80 ea       	ldi	r24, 0xA0	; 160
    3cac:	94 e1       	ldi	r25, 0x14	; 20
    3cae:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	08 95       	ret

00003cb6 <menuOnEnterUSBsendHW>:
    3cb6:	9f 92       	push	r9
    3cb8:	af 92       	push	r10
    3cba:	bf 92       	push	r11
    3cbc:	cf 92       	push	r12
    3cbe:	df 92       	push	r13
    3cc0:	ef 92       	push	r14
    3cc2:	ff 92       	push	r15
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	83 ea       	ldi	r24, 0xA3	; 163
    3cce:	93 e0       	ldi	r25, 0x03	; 3
    3cd0:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3cd4:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3cd8:	80 e9       	ldi	r24, 0x90	; 144
    3cda:	93 e0       	ldi	r25, 0x03	; 3
    3cdc:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3ce0:	c8 e7       	ldi	r28, 0x78	; 120
    3ce2:	d3 e0       	ldi	r29, 0x03	; 3
    3ce4:	6a e0       	ldi	r22, 0x0A	; 10
    3ce6:	79 e1       	ldi	r23, 0x19	; 25
    3ce8:	88 81       	ld	r24, Y
    3cea:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3cee:	22 e7       	ldi	r18, 0x72	; 114
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	20 83       	st	Z, r18
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	6e 5f       	subi	r22, 0xFE	; 254
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	20 e2       	ldi	r18, 0x20	; 32
    3cfc:	21 83       	std	Z+1, r18	; 0x01
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3d04:	27 e7       	ldi	r18, 0x77	; 119
    3d06:	fc 01       	movw	r30, r24
    3d08:	20 83       	st	Z, r18
    3d0a:	8a e0       	ldi	r24, 0x0A	; 10
    3d0c:	99 e1       	ldi	r25, 0x19	; 25
    3d0e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3d12:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3d16:	8e e7       	ldi	r24, 0x7E	; 126
    3d18:	93 e0       	ldi	r25, 0x03	; 3
    3d1a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3d1e:	6a e0       	ldi	r22, 0x0A	; 10
    3d20:	79 e1       	ldi	r23, 0x19	; 25
    3d22:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    3d26:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3d2a:	8a e0       	ldi	r24, 0x0A	; 10
    3d2c:	99 e1       	ldi	r25, 0x19	; 25
    3d2e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3d32:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3d36:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3d3a:	e1 2c       	mov	r14, r1
    3d3c:	d1 c0       	rjmp	.+418    	; 0x3ee0 <menuOnEnterUSBsendHW+0x22a>
    3d3e:	85 e7       	ldi	r24, 0x75	; 117
    3d40:	93 e0       	ldi	r25, 0x03	; 3
    3d42:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3d46:	6a e0       	ldi	r22, 0x0A	; 10
    3d48:	79 e1       	ldi	r23, 0x19	; 25
    3d4a:	8e 2d       	mov	r24, r14
    3d4c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <putChar_Manual>
    3d50:	8a e0       	ldi	r24, 0x0A	; 10
    3d52:	99 e1       	ldi	r25, 0x19	; 25
    3d54:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3d58:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3d5c:	f1 2c       	mov	r15, r1
    3d5e:	a4 c0       	rjmp	.+328    	; 0x3ea8 <menuOnEnterUSBsendHW+0x1f2>
    3d60:	8e e6       	ldi	r24, 0x6E	; 110
    3d62:	93 e0       	ldi	r25, 0x03	; 3
    3d64:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3d68:	80 e3       	ldi	r24, 0x30	; 48
    3d6a:	8f 0d       	add	r24, r15
    3d6c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3d70:	8a e3       	ldi	r24, 0x3A	; 58
    3d72:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3d76:	80 e2       	ldi	r24, 0x20	; 32
    3d78:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3d7c:	0e 2d       	mov	r16, r14
    3d7e:	10 e0       	ldi	r17, 0x00	; 0
    3d80:	cf 2c       	mov	r12, r15
    3d82:	d1 2c       	mov	r13, r1
    3d84:	e6 01       	movw	r28, r12
    3d86:	cc 0f       	add	r28, r28
    3d88:	dd 1f       	adc	r29, r29
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	8c 0d       	add	r24, r12
    3d8e:	9d 1d       	adc	r25, r13
    3d90:	e8 01       	movw	r28, r16
    3d92:	cc 0f       	add	r28, r28
    3d94:	dd 1f       	adc	r29, r29
    3d96:	c0 0f       	add	r28, r16
    3d98:	d1 1f       	adc	r29, r17
    3d9a:	cc 0f       	add	r28, r28
    3d9c:	dd 1f       	adc	r29, r29
    3d9e:	cc 0f       	add	r28, r28
    3da0:	dd 1f       	adc	r29, r29
    3da2:	c8 0f       	add	r28, r24
    3da4:	d9 1f       	adc	r29, r25
    3da6:	c2 5a       	subi	r28, 0xA2	; 162
    3da8:	d6 4f       	sbci	r29, 0xF6	; 246
    3daa:	6a e0       	ldi	r22, 0x0A	; 10
    3dac:	79 e1       	ldi	r23, 0x19	; 25
    3dae:	88 81       	ld	r24, Y
    3db0:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3db4:	bc 01       	movw	r22, r24
    3db6:	6f 5f       	subi	r22, 0xFF	; 255
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	0f 2e       	mov	r0, r31
    3dbc:	fe e2       	ldi	r31, 0x2E	; 46
    3dbe:	bf 2e       	mov	r11, r31
    3dc0:	f0 2d       	mov	r31, r0
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	b0 82       	st	Z, r11
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3dcc:	bc 01       	movw	r22, r24
    3dce:	6f 5f       	subi	r22, 0xFF	; 255
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	b0 82       	st	Z, r11
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3ddc:	fc 01       	movw	r30, r24
    3dde:	80 e2       	ldi	r24, 0x20	; 32
    3de0:	80 83       	st	Z, r24
    3de2:	9d e3       	ldi	r25, 0x3D	; 61
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	82 83       	std	Z+2, r24	; 0x02
    3de8:	8a e0       	ldi	r24, 0x0A	; 10
    3dea:	99 e1       	ldi	r25, 0x19	; 25
    3dec:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3df0:	88 81       	ld	r24, Y
    3df2:	88 23       	and	r24, r24
    3df4:	2c f4       	brge	.+10     	; 0x3e00 <menuOnEnterUSBsendHW+0x14a>
    3df6:	8c e5       	ldi	r24, 0x5C	; 92
    3df8:	93 e0       	ldi	r25, 0x03	; 3
    3dfa:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3dfe:	51 c0       	rjmp	.+162    	; 0x3ea2 <menuOnEnterUSBsendHW+0x1ec>
    3e00:	6a e0       	ldi	r22, 0x0A	; 10
    3e02:	79 e1       	ldi	r23, 0x19	; 25
    3e04:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <putChar_Note>
    3e08:	bc 01       	movw	r22, r24
    3e0a:	6f 5f       	subi	r22, 0xFF	; 255
    3e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0e:	0f 2e       	mov	r0, r31
    3e10:	fd e2       	ldi	r31, 0x2D	; 45
    3e12:	9f 2e       	mov	r9, r31
    3e14:	f0 2d       	mov	r31, r0
    3e16:	fc 01       	movw	r30, r24
    3e18:	90 82       	st	Z, r9
    3e1a:	f6 01       	movw	r30, r12
    3e1c:	ee 0f       	add	r30, r30
    3e1e:	ff 1f       	adc	r31, r31
    3e20:	ce 0e       	add	r12, r30
    3e22:	df 1e       	adc	r13, r31
    3e24:	58 01       	movw	r10, r16
    3e26:	aa 0c       	add	r10, r10
    3e28:	bb 1c       	adc	r11, r11
    3e2a:	e5 01       	movw	r28, r10
    3e2c:	c0 0f       	add	r28, r16
    3e2e:	d1 1f       	adc	r29, r17
    3e30:	cc 0f       	add	r28, r28
    3e32:	dd 1f       	adc	r29, r29
    3e34:	cc 0f       	add	r28, r28
    3e36:	dd 1f       	adc	r29, r29
    3e38:	cc 0d       	add	r28, r12
    3e3a:	dd 1d       	adc	r29, r13
    3e3c:	c2 5a       	subi	r28, 0xA2	; 162
    3e3e:	d6 4f       	sbci	r29, 0xF6	; 246
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <putChar_Note>
    3e46:	20 e2       	ldi	r18, 0x20	; 32
    3e48:	fc 01       	movw	r30, r24
    3e4a:	20 83       	st	Z, r18
    3e4c:	11 82       	std	Z+1, r1	; 0x01
    3e4e:	8a e0       	ldi	r24, 0x0A	; 10
    3e50:	99 e1       	ldi	r25, 0x19	; 25
    3e52:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3e56:	84 e5       	ldi	r24, 0x54	; 84
    3e58:	93 e0       	ldi	r25, 0x03	; 3
    3e5a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	82 95       	swap	r24
    3e62:	86 95       	lsr	r24
    3e64:	87 70       	andi	r24, 0x07	; 7
    3e66:	80 5d       	subi	r24, 0xD0	; 208
    3e68:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3e6c:	8c e4       	ldi	r24, 0x4C	; 76
    3e6e:	93 e0       	ldi	r25, 0x03	; 3
    3e70:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	6a e0       	ldi	r22, 0x0A	; 10
    3e78:	79 e1       	ldi	r23, 0x19	; 25
    3e7a:	8f 71       	andi	r24, 0x1F	; 31
    3e7c:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    3e80:	bc 01       	movw	r22, r24
    3e82:	6f 5f       	subi	r22, 0xFF	; 255
    3e84:	7f 4f       	sbci	r23, 0xFF	; 255
    3e86:	fc 01       	movw	r30, r24
    3e88:	90 82       	st	Z, r9
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	99 81       	ldd	r25, Y+1	; 0x01
    3e8e:	28 81       	ld	r18, Y
    3e90:	8f 71       	andi	r24, 0x1F	; 31
    3e92:	89 0f       	add	r24, r25
    3e94:	82 1b       	sub	r24, r18
    3e96:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    3e9a:	8a e0       	ldi	r24, 0x0A	; 10
    3e9c:	99 e1       	ldi	r25, 0x19	; 25
    3e9e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3ea2:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3ea6:	f3 94       	inc	r15
    3ea8:	f3 e0       	ldi	r31, 0x03	; 3
    3eaa:	ff 15       	cp	r31, r15
    3eac:	08 f0       	brcs	.+2      	; 0x3eb0 <menuOnEnterUSBsendHW+0x1fa>
    3eae:	58 cf       	rjmp	.-336    	; 0x3d60 <menuOnEnterUSBsendHW+0xaa>
    3eb0:	8a e2       	ldi	r24, 0x2A	; 42
    3eb2:	93 e0       	ldi	r25, 0x03	; 3
    3eb4:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3eb8:	ee 2d       	mov	r30, r14
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	e2 5b       	subi	r30, 0xB2	; 178
    3ec2:	f6 4f       	sbci	r31, 0xF6	; 246
    3ec4:	6a e0       	ldi	r22, 0x0A	; 10
    3ec6:	79 e1       	ldi	r23, 0x19	; 25
    3ec8:	81 81       	ldd	r24, Z+1	; 0x01
    3eca:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <putChar_MidiChan>
    3ece:	8a e0       	ldi	r24, 0x0A	; 10
    3ed0:	99 e1       	ldi	r25, 0x19	; 25
    3ed2:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3ed6:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3eda:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    3ede:	e3 94       	inc	r14
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	8e 15       	cp	r24, r14
    3ee4:	08 f0       	brcs	.+2      	; 0x3ee8 <menuOnEnterUSBsendHW+0x232>
    3ee6:	2b cf       	rjmp	.-426    	; 0x3d3e <menuOnEnterUSBsendHW+0x88>
    3ee8:	82 e6       	ldi	r24, 0x62	; 98
    3eea:	93 e0       	ldi	r25, 0x03	; 3
    3eec:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3ef0:	f1 2c       	mov	r15, r1
    3ef2:	94 c0       	rjmp	.+296    	; 0x401c <menuOnEnterUSBsendHW+0x366>
    3ef4:	8e e6       	ldi	r24, 0x6E	; 110
    3ef6:	93 e0       	ldi	r25, 0x03	; 3
    3ef8:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3efc:	80 e3       	ldi	r24, 0x30	; 48
    3efe:	8f 0d       	add	r24, r15
    3f00:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3f04:	8a e3       	ldi	r24, 0x3A	; 58
    3f06:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3f0a:	80 e2       	ldi	r24, 0x20	; 32
    3f0c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3f10:	cf 2d       	mov	r28, r15
    3f12:	d0 e0       	ldi	r29, 0x00	; 0
    3f14:	8e 01       	movw	r16, r28
    3f16:	00 0f       	add	r16, r16
    3f18:	11 1f       	adc	r17, r17
    3f1a:	0c 0f       	add	r16, r28
    3f1c:	1d 1f       	adc	r17, r29
    3f1e:	03 5e       	subi	r16, 0xE3	; 227
    3f20:	17 4f       	sbci	r17, 0xF7	; 247
    3f22:	6a e0       	ldi	r22, 0x0A	; 10
    3f24:	79 e1       	ldi	r23, 0x19	; 25
    3f26:	f8 01       	movw	r30, r16
    3f28:	80 81       	ld	r24, Z
    3f2a:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3f2e:	bc 01       	movw	r22, r24
    3f30:	6f 5f       	subi	r22, 0xFF	; 255
    3f32:	7f 4f       	sbci	r23, 0xFF	; 255
    3f34:	0f 2e       	mov	r0, r31
    3f36:	fe e2       	ldi	r31, 0x2E	; 46
    3f38:	ef 2e       	mov	r14, r31
    3f3a:	f0 2d       	mov	r31, r0
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	e0 82       	st	Z, r14
    3f40:	f8 01       	movw	r30, r16
    3f42:	81 81       	ldd	r24, Z+1	; 0x01
    3f44:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3f48:	bc 01       	movw	r22, r24
    3f4a:	6f 5f       	subi	r22, 0xFF	; 255
    3f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4e:	fc 01       	movw	r30, r24
    3f50:	e0 82       	st	Z, r14
    3f52:	f8 01       	movw	r30, r16
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <putChar_hex>
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	80 e2       	ldi	r24, 0x20	; 32
    3f5e:	80 83       	st	Z, r24
    3f60:	9d e3       	ldi	r25, 0x3D	; 61
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	82 83       	std	Z+2, r24	; 0x02
    3f66:	13 82       	std	Z+3, r1	; 0x03
    3f68:	8a e0       	ldi	r24, 0x0A	; 10
    3f6a:	99 e1       	ldi	r25, 0x19	; 25
    3f6c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3f70:	f8 01       	movw	r30, r16
    3f72:	80 81       	ld	r24, Z
    3f74:	8f 3f       	cpi	r24, 0xFF	; 255
    3f76:	29 f4       	brne	.+10     	; 0x3f82 <menuOnEnterUSBsendHW+0x2cc>
    3f78:	8c e5       	ldi	r24, 0x5C	; 92
    3f7a:	93 e0       	ldi	r25, 0x03	; 3
    3f7c:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3f80:	4a c0       	rjmp	.+148    	; 0x4016 <menuOnEnterUSBsendHW+0x360>
    3f82:	ea e0       	ldi	r30, 0x0A	; 10
    3f84:	f9 e1       	ldi	r31, 0x19	; 25
    3f86:	92 e5       	ldi	r25, 0x52	; 82
    3f88:	90 83       	st	Z, r25
    3f8a:	9e e2       	ldi	r25, 0x2E	; 46
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	6c e0       	ldi	r22, 0x0C	; 12
    3f90:	79 e1       	ldi	r23, 0x19	; 25
    3f92:	8f 5f       	subi	r24, 0xFF	; 255
    3f94:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <putChar_Dec>
    3f98:	bc 01       	movw	r22, r24
    3f9a:	6f 5f       	subi	r22, 0xFF	; 255
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	1d e2       	ldi	r17, 0x2D	; 45
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	10 83       	st	Z, r17
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	88 0f       	add	r24, r24
    3fa8:	99 1f       	adc	r25, r25
    3faa:	c8 0f       	add	r28, r24
    3fac:	d9 1f       	adc	r29, r25
    3fae:	c3 5e       	subi	r28, 0xE3	; 227
    3fb0:	d7 4f       	sbci	r29, 0xF7	; 247
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	8f 5f       	subi	r24, 0xFF	; 255
    3fb6:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <putChar_Dec>
    3fba:	20 e2       	ldi	r18, 0x20	; 32
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	20 83       	st	Z, r18
    3fc0:	11 82       	std	Z+1, r1	; 0x01
    3fc2:	8a e0       	ldi	r24, 0x0A	; 10
    3fc4:	99 e1       	ldi	r25, 0x19	; 25
    3fc6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    3fca:	84 e5       	ldi	r24, 0x54	; 84
    3fcc:	93 e0       	ldi	r25, 0x03	; 3
    3fce:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	82 95       	swap	r24
    3fd6:	86 95       	lsr	r24
    3fd8:	87 70       	andi	r24, 0x07	; 7
    3fda:	80 5d       	subi	r24, 0xD0	; 208
    3fdc:	0e 94 71 39 	call	0x72e2	; 0x72e2 <serial0SER_USBSend>
    3fe0:	8c e4       	ldi	r24, 0x4C	; 76
    3fe2:	93 e0       	ldi	r25, 0x03	; 3
    3fe4:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	6a e0       	ldi	r22, 0x0A	; 10
    3fec:	79 e1       	ldi	r23, 0x19	; 25
    3fee:	8f 71       	andi	r24, 0x1F	; 31
    3ff0:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	6f 5f       	subi	r22, 0xFF	; 255
    3ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	10 83       	st	Z, r17
    3ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    4000:	99 81       	ldd	r25, Y+1	; 0x01
    4002:	28 81       	ld	r18, Y
    4004:	8f 71       	andi	r24, 0x1F	; 31
    4006:	89 0f       	add	r24, r25
    4008:	82 1b       	sub	r24, r18
    400a:	0e 94 c4 3c 	call	0x7988	; 0x7988 <putChar_Dec2>
    400e:	8a e0       	ldi	r24, 0x0A	; 10
    4010:	99 e1       	ldi	r25, 0x19	; 25
    4012:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    4016:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    401a:	f3 94       	inc	r15
    401c:	f7 e0       	ldi	r31, 0x07	; 7
    401e:	ff 15       	cp	r31, r15
    4020:	08 f0       	brcs	.+2      	; 0x4024 <menuOnEnterUSBsendHW+0x36e>
    4022:	68 cf       	rjmp	.-304    	; 0x3ef4 <menuOnEnterUSBsendHW+0x23e>
    4024:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    4028:	81 e2       	ldi	r24, 0x21	; 33
    402a:	93 e0       	ldi	r25, 0x03	; 3
    402c:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    4030:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    4034:	e1 2c       	mov	r14, r1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	64 c0       	rjmp	.+200    	; 0x4102 <menuOnEnterUSBsendHW+0x44c>
    403a:	ce 2d       	mov	r28, r14
    403c:	d0 e0       	ldi	r29, 0x00	; 0
    403e:	0f 2d       	mov	r16, r15
    4040:	10 e0       	ldi	r17, 0x00	; 0
    4042:	fe 01       	movw	r30, r28
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	ee 0f       	add	r30, r30
    404a:	ff 1f       	adc	r31, r31
    404c:	e0 0f       	add	r30, r16
    404e:	f1 1f       	adc	r31, r17
    4050:	ee 0f       	add	r30, r30
    4052:	ff 1f       	adc	r31, r31
    4054:	ee 0f       	add	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	e2 5b       	subi	r30, 0xB2	; 178
    405a:	f7 4f       	sbci	r31, 0xF7	; 247
    405c:	80 81       	ld	r24, Z
    405e:	8f 3f       	cpi	r24, 0xFF	; 255
    4060:	09 f4       	brne	.+2      	; 0x4064 <menuOnEnterUSBsendHW+0x3ae>
    4062:	47 c0       	rjmp	.+142    	; 0x40f2 <menuOnEnterUSBsendHW+0x43c>
    4064:	6a e0       	ldi	r22, 0x0A	; 10
    4066:	79 e1       	ldi	r23, 0x19	; 25
    4068:	8e 2d       	mov	r24, r14
    406a:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <putChar_MidiChan>
    406e:	bc 01       	movw	r22, r24
    4070:	6f 5f       	subi	r22, 0xFF	; 255
    4072:	7f 4f       	sbci	r23, 0xFF	; 255
    4074:	0f 2e       	mov	r0, r31
    4076:	f8 e2       	ldi	r31, 0x28	; 40
    4078:	df 2e       	mov	r13, r31
    407a:	f0 2d       	mov	r31, r0
    407c:	fc 01       	movw	r30, r24
    407e:	d0 82       	st	Z, r13
    4080:	cc 0f       	add	r28, r28
    4082:	dd 1f       	adc	r29, r29
    4084:	cc 0f       	add	r28, r28
    4086:	dd 1f       	adc	r29, r29
    4088:	c0 0f       	add	r28, r16
    408a:	d1 1f       	adc	r29, r17
    408c:	cc 0f       	add	r28, r28
    408e:	dd 1f       	adc	r29, r29
    4090:	cc 0f       	add	r28, r28
    4092:	dd 1f       	adc	r29, r29
    4094:	c2 5b       	subi	r28, 0xB2	; 178
    4096:	d7 4f       	sbci	r29, 0xF7	; 247
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <putChar_Note>
    409e:	bc 01       	movw	r22, r24
    40a0:	6f 5f       	subi	r22, 0xFF	; 255
    40a2:	7f 4f       	sbci	r23, 0xFF	; 255
    40a4:	2d e2       	ldi	r18, 0x2D	; 45
    40a6:	fc 01       	movw	r30, r24
    40a8:	20 83       	st	Z, r18
    40aa:	99 81       	ldd	r25, Y+1	; 0x01
    40ac:	8a 81       	ldd	r24, Y+2	; 0x02
    40ae:	89 0f       	add	r24, r25
    40b0:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <putChar_Note>
    40b4:	fc 01       	movw	r30, r24
    40b6:	19 e2       	ldi	r17, 0x29	; 41
    40b8:	10 83       	st	Z, r17
    40ba:	80 e2       	ldi	r24, 0x20	; 32
    40bc:	81 83       	std	Z+1, r24	; 0x01
    40be:	bf 01       	movw	r22, r30
    40c0:	6d 5f       	subi	r22, 0xFD	; 253
    40c2:	7f 4f       	sbci	r23, 0xFF	; 255
    40c4:	8e e3       	ldi	r24, 0x3E	; 62
    40c6:	82 83       	std	Z+2, r24	; 0x02
    40c8:	88 81       	ld	r24, Y
    40ca:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <putChar_Manual>
    40ce:	bc 01       	movw	r22, r24
    40d0:	6f 5f       	subi	r22, 0xFF	; 255
    40d2:	7f 4f       	sbci	r23, 0xFF	; 255
    40d4:	fc 01       	movw	r30, r24
    40d6:	d0 82       	st	Z, r13
    40d8:	8b 81       	ldd	r24, Y+3	; 0x03
    40da:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <putChar_Note>
    40de:	fc 01       	movw	r30, r24
    40e0:	10 83       	st	Z, r17
    40e2:	11 82       	std	Z+1, r1	; 0x01
    40e4:	8a e0       	ldi	r24, 0x0A	; 10
    40e6:	99 e1       	ldi	r25, 0x19	; 25
    40e8:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    40ec:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    40f0:	9f ef       	ldi	r25, 0xFF	; 255
    40f2:	f3 94       	inc	r15
    40f4:	01 c0       	rjmp	.+2      	; 0x40f8 <menuOnEnterUSBsendHW+0x442>
    40f6:	f1 2c       	mov	r15, r1
    40f8:	f3 e0       	ldi	r31, 0x03	; 3
    40fa:	ff 15       	cp	r31, r15
    40fc:	08 f0       	brcs	.+2      	; 0x4100 <menuOnEnterUSBsendHW+0x44a>
    40fe:	9d cf       	rjmp	.-198    	; 0x403a <menuOnEnterUSBsendHW+0x384>
    4100:	e3 94       	inc	r14
    4102:	8f e0       	ldi	r24, 0x0F	; 15
    4104:	8e 15       	cp	r24, r14
    4106:	b8 f7       	brcc	.-18     	; 0x40f6 <menuOnEnterUSBsendHW+0x440>
    4108:	91 11       	cpse	r25, r1
    410a:	06 c0       	rjmp	.+12     	; 0x4118 <menuOnEnterUSBsendHW+0x462>
    410c:	86 e0       	ldi	r24, 0x06	; 6
    410e:	93 e0       	ldi	r25, 0x03	; 3
    4110:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    4114:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    4118:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    411c:	87 e1       	ldi	r24, 0x17	; 23
    411e:	93 e0       	ldi	r25, 0x03	; 3
    4120:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    4124:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    4128:	c0 e0       	ldi	r28, 0x00	; 0
    412a:	25 c0       	rjmp	.+74     	; 0x4176 <menuOnEnterUSBsendHW+0x4c0>
    412c:	6a e0       	ldi	r22, 0x0A	; 10
    412e:	79 e1       	ldi	r23, 0x19	; 25
    4130:	8c 2f       	mov	r24, r28
    4132:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <putChar_Manual>
    4136:	dc 01       	movw	r26, r24
    4138:	bc 01       	movw	r22, r24
    413a:	6f 5f       	subi	r22, 0xFF	; 255
    413c:	7f 4f       	sbci	r23, 0xFF	; 255
    413e:	8a e3       	ldi	r24, 0x3A	; 58
    4140:	8c 93       	st	X, r24
    4142:	ec 2f       	mov	r30, r28
    4144:	f0 e0       	ldi	r31, 0x00	; 0
    4146:	ee 0f       	add	r30, r30
    4148:	ff 1f       	adc	r31, r31
    414a:	e2 5b       	subi	r30, 0xB2	; 178
    414c:	f6 4f       	sbci	r31, 0xF6	; 246
    414e:	80 81       	ld	r24, Z
    4150:	8f 3f       	cpi	r24, 0xFF	; 255
    4152:	19 f0       	breq	.+6      	; 0x415a <menuOnEnterUSBsendHW+0x4a4>
    4154:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <putChar_MidiChan>
    4158:	05 c0       	rjmp	.+10     	; 0x4164 <menuOnEnterUSBsendHW+0x4ae>
    415a:	cd 01       	movw	r24, r26
    415c:	02 96       	adiw	r24, 0x02	; 2
    415e:	2d e2       	ldi	r18, 0x2D	; 45
    4160:	11 96       	adiw	r26, 0x01	; 1
    4162:	2c 93       	st	X, r18
    4164:	fc 01       	movw	r30, r24
    4166:	10 82       	st	Z, r1
    4168:	8a e0       	ldi	r24, 0x0A	; 10
    416a:	99 e1       	ldi	r25, 0x19	; 25
    416c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    4170:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    4174:	cf 5f       	subi	r28, 0xFF	; 255
    4176:	c4 30       	cpi	r28, 0x04	; 4
    4178:	c8 f2       	brcs	.-78     	; 0x412c <menuOnEnterUSBsendHW+0x476>
    417a:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    417e:	8b e0       	ldi	r24, 0x0B	; 11
    4180:	93 e0       	ldi	r25, 0x03	; 3
    4182:	0e 94 67 3a 	call	0x74ce	; 0x74ce <serial0SER_USB_sendStringP>
    4186:	cc e4       	ldi	r28, 0x4C	; 76
    4188:	d8 e0       	ldi	r29, 0x08	; 8
    418a:	6a e0       	ldi	r22, 0x0A	; 10
    418c:	79 e1       	ldi	r23, 0x19	; 25
    418e:	88 81       	ld	r24, Y
    4190:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <putChar_MidiChan>
    4194:	bc 01       	movw	r22, r24
    4196:	6f 5f       	subi	r22, 0xFF	; 255
    4198:	7f 4f       	sbci	r23, 0xFF	; 255
    419a:	2e e3       	ldi	r18, 0x3E	; 62
    419c:	fc 01       	movw	r30, r24
    419e:	20 83       	st	Z, r18
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <putChar_MidiChan>
    41a6:	fc 01       	movw	r30, r24
    41a8:	10 82       	st	Z, r1
    41aa:	8a e0       	ldi	r24, 0x0A	; 10
    41ac:	99 e1       	ldi	r25, 0x19	; 25
    41ae:	0e 94 bb 3a 	call	0x7576	; 0x7576 <serial0SER_USB_sendString>
    41b2:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial0SER_USB_sendCRLF>
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	df 91       	pop	r29
    41ba:	cf 91       	pop	r28
    41bc:	1f 91       	pop	r17
    41be:	0f 91       	pop	r16
    41c0:	ff 90       	pop	r15
    41c2:	ef 90       	pop	r14
    41c4:	df 90       	pop	r13
    41c6:	cf 90       	pop	r12
    41c8:	bf 90       	pop	r11
    41ca:	af 90       	pop	r10
    41cc:	9f 90       	pop	r9
    41ce:	08 95       	ret

000041d0 <reverseRegisterBits>:
    41d0:	1f 93       	push	r17
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	10 e0       	ldi	r17, 0x00	; 0
    41d8:	09 c0       	rjmp	.+18     	; 0x41ec <reverseRegisterBits+0x1c>
    41da:	c1 2f       	mov	r28, r17
    41dc:	d0 e0       	ldi	r29, 0x00	; 0
    41de:	cd 56       	subi	r28, 0x6D	; 109
    41e0:	da 4f       	sbci	r29, 0xFA	; 250
    41e2:	88 81       	ld	r24, Y
    41e4:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <reverse_Bits>
    41e8:	88 83       	st	Y, r24
    41ea:	1f 5f       	subi	r17, 0xFF	; 255
    41ec:	18 30       	cpi	r17, 0x08	; 8
    41ee:	a8 f3       	brcs	.-22     	; 0x41da <reverseRegisterBits+0xa>
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	08 95       	ret

000041f8 <menuOnUpdateRegister>:
    41f8:	83 e9       	ldi	r24, 0x93	; 147
    41fa:	95 e0       	ldi	r25, 0x05	; 5
    41fc:	0e 94 95 31 	call	0x632a	; 0x632a <read_allRegister>
    4200:	e7 df       	rcall	.-50     	; 0x41d0 <reverseRegisterBits>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	08 95       	ret

00004206 <menuOnEnterResetReg>:
    4206:	0e 94 d5 32 	call	0x65aa	; 0x65aa <midi_resetRegisters>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	f5 df       	rcall	.-22     	; 0x41f8 <menuOnUpdateRegister>
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	08 95       	ret

00004212 <menuOnExitLoadProgran>:
    4212:	86 30       	cpi	r24, 0x06	; 6
    4214:	31 f0       	breq	.+12     	; 0x4222 <menuOnExitLoadProgran+0x10>
    4216:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    421a:	80 34       	cpi	r24, 0x40	; 64
    421c:	10 f4       	brcc	.+4      	; 0x4222 <menuOnExitLoadProgran+0x10>
    421e:	0e 94 4a 32 	call	0x6494	; 0x6494 <program_toRegister>
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	e9 df       	rcall	.-46     	; 0x41f8 <menuOnUpdateRegister>
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	08 95       	ret

0000422a <softkeyCoupler>:
    422a:	cf 93       	push	r28
    422c:	c6 2f       	mov	r28, r22
    422e:	88 23       	and	r24, r24
    4230:	d9 f0       	breq	.+54     	; 0x4268 <softkeyCoupler+0x3e>
    4232:	e6 2f       	mov	r30, r22
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	df 01       	movw	r26, r30
    4238:	a9 5c       	subi	r26, 0xC9	; 201
    423a:	b7 4f       	sbci	r27, 0xF7	; 247
    423c:	8c 91       	ld	r24, X
    423e:	81 11       	cpse	r24, r1
    4240:	08 c0       	rjmp	.+16     	; 0x4252 <softkeyCoupler+0x28>
    4242:	86 2f       	mov	r24, r22
    4244:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <set_Coupler>
    4248:	88 23       	and	r24, r24
    424a:	71 f0       	breq	.+28     	; 0x4268 <softkeyCoupler+0x3e>
    424c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <midi_ManualOff>
    4250:	0b c0       	rjmp	.+22     	; 0x4268 <softkeyCoupler+0x3e>
    4252:	df 01       	movw	r26, r30
    4254:	a9 5c       	subi	r26, 0xC9	; 201
    4256:	b7 4f       	sbci	r27, 0xF7	; 247
    4258:	1c 92       	st	X, r1
    425a:	ee 0f       	add	r30, r30
    425c:	ff 1f       	adc	r31, r31
    425e:	e2 5a       	subi	r30, 0xA2	; 162
    4260:	fb 4e       	sbci	r31, 0xEB	; 235
    4262:	84 91       	lpm	r24, Z
    4264:	0e 94 29 36 	call	0x6c52	; 0x6c52 <midi_ManualOff>
    4268:	ec 2f       	mov	r30, r28
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	e9 5c       	subi	r30, 0xC9	; 201
    426e:	f7 4f       	sbci	r31, 0xF7	; 247
    4270:	80 81       	ld	r24, Z
    4272:	81 11       	cpse	r24, r1
    4274:	02 c0       	rjmp	.+4      	; 0x427a <softkeyCoupler+0x50>
    4276:	82 e8       	ldi	r24, 0x82	; 130
    4278:	01 c0       	rjmp	.+2      	; 0x427c <softkeyCoupler+0x52>
    427a:	81 e8       	ldi	r24, 0x81	; 129
    427c:	cf 91       	pop	r28
    427e:	08 95       	ret

00004280 <softKeyCoupler2from3>:
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	d3 cf       	rjmp	.-90     	; 0x422a <softkeyCoupler>
    4284:	08 95       	ret

00004286 <softKeyCoupler1from3>:
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	d0 cf       	rjmp	.-96     	; 0x422a <softkeyCoupler>
    428a:	08 95       	ret

0000428c <softKeyCouplerPfrom3>:
    428c:	63 e0       	ldi	r22, 0x03	; 3
    428e:	cd cf       	rjmp	.-102    	; 0x422a <softkeyCoupler>
    4290:	08 95       	ret

00004292 <softKeyCoupler1from2>:
    4292:	62 e0       	ldi	r22, 0x02	; 2
    4294:	ca cf       	rjmp	.-108    	; 0x422a <softkeyCoupler>
    4296:	08 95       	ret

00004298 <softKeyCouplerPfrom2>:
    4298:	64 e0       	ldi	r22, 0x04	; 4
    429a:	c7 cf       	rjmp	.-114    	; 0x422a <softkeyCoupler>
    429c:	08 95       	ret

0000429e <softKeyCouplerPfrom1>:
    429e:	65 e0       	ldi	r22, 0x05	; 5
    42a0:	c4 cf       	rjmp	.-120    	; 0x422a <softkeyCoupler>
    42a2:	08 95       	ret

000042a4 <softKeyCoupler3from2>:
    42a4:	66 e0       	ldi	r22, 0x06	; 6
    42a6:	c1 cf       	rjmp	.-126    	; 0x422a <softkeyCoupler>
    42a8:	08 95       	ret

000042aa <softKeyCoupler3from1>:
    42aa:	67 e0       	ldi	r22, 0x07	; 7
    42ac:	be cf       	rjmp	.-132    	; 0x422a <softkeyCoupler>
    42ae:	08 95       	ret

000042b0 <softKeyCoupler3fromP>:
    42b0:	69 e0       	ldi	r22, 0x09	; 9
    42b2:	bb cf       	rjmp	.-138    	; 0x422a <softkeyCoupler>
    42b4:	08 95       	ret

000042b6 <softKeyCoupler2from1>:
    42b6:	68 e0       	ldi	r22, 0x08	; 8
    42b8:	b8 cf       	rjmp	.-144    	; 0x422a <softkeyCoupler>
    42ba:	08 95       	ret

000042bc <softKeyCoupler2fromP>:
    42bc:	6a e0       	ldi	r22, 0x0A	; 10
    42be:	b5 cf       	rjmp	.-150    	; 0x422a <softkeyCoupler>
    42c0:	08 95       	ret

000042c2 <softKeyCoupler1fromP>:
    42c2:	6b e0       	ldi	r22, 0x0B	; 11
    42c4:	b2 cf       	rjmp	.-156    	; 0x422a <softkeyCoupler>
    42c6:	08 95       	ret

000042c8 <menuDisplaySaveMessage>:
    42c8:	cf 93       	push	r28
    42ca:	c6 2f       	mov	r28, r22
    42cc:	6a e0       	ldi	r22, 0x0A	; 10
    42ce:	79 e1       	ldi	r23, 0x19	; 25
    42d0:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <putChar_Dec>
    42d4:	bc 01       	movw	r22, r24
    42d6:	80 e2       	ldi	r24, 0x20	; 32
    42d8:	94 e0       	ldi	r25, 0x04	; 4
    42da:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <putString_P>
    42de:	6c 2f       	mov	r22, r28
    42e0:	0e 94 0e 3e 	call	0x7c1c	; 0x7c1c <putString_Prog>
    42e4:	8a e0       	ldi	r24, 0x0A	; 10
    42e6:	99 e1       	ldi	r25, 0x19	; 25
    42e8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <lcd_message>
    42ec:	cf 91       	pop	r28
    42ee:	08 95       	ret

000042f0 <softKeyPrSet>:
    42f0:	cf 93       	push	r28
    42f2:	df 93       	push	r29
    42f4:	88 23       	and	r24, r24
    42f6:	79 f0       	breq	.+30     	; 0x4316 <softKeyPrSet+0x26>
    42f8:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    42fc:	c0 34       	cpi	r28, 0x40	; 64
    42fe:	58 f4       	brcc	.+22     	; 0x4316 <softKeyPrSet+0x26>
    4300:	dc 2f       	mov	r29, r28
    4302:	d0 68       	ori	r29, 0x80	; 128
    4304:	6f ef       	ldi	r22, 0xFF	; 255
    4306:	8c 2f       	mov	r24, r28
    4308:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <register_toProgram>
    430c:	6c 2f       	mov	r22, r28
    430e:	dc df       	rcall	.-72     	; 0x42c8 <menuDisplaySaveMessage>
    4310:	8d 2f       	mov	r24, r29
    4312:	0e 94 40 32 	call	0x6480	; 0x6480 <prog_set>
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	08 95       	ret

0000431e <menuDisplayLoadMessage>:
    431e:	0f 93       	push	r16
    4320:	1f 93       	push	r17
    4322:	cf 93       	push	r28
    4324:	c8 2f       	mov	r28, r24
    4326:	8a e0       	ldi	r24, 0x0A	; 10
    4328:	99 e1       	ldi	r25, 0x19	; 25
    432a:	0e 94 0e 3e 	call	0x7c1c	; 0x7c1c <putString_Prog>
    432e:	bc 01       	movw	r22, r24
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	2e e7       	ldi	r18, 0x7E	; 126
    4336:	fc 01       	movw	r30, r24
    4338:	20 83       	st	Z, r18
    433a:	8c 2f       	mov	r24, r28
    433c:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <putChar_Dec>
    4340:	bc 01       	movw	r22, r24
    4342:	8b e1       	ldi	r24, 0x1B	; 27
    4344:	94 e0       	ldi	r25, 0x04	; 4
    4346:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <putString_P>
    434a:	8c 01       	movw	r16, r24
    434c:	0e 94 88 10 	call	0x2110	; 0x2110 <module_WaitOutputInput2Cycles>
    4350:	84 e0       	ldi	r24, 0x04	; 4
    4352:	0e 94 81 31 	call	0x6302	; 0x6302 <count_Registers>
    4356:	c8 2f       	mov	r28, r24
    4358:	88 23       	and	r24, r24
    435a:	49 f0       	breq	.+18     	; 0x436e <menuDisplayLoadMessage+0x50>
    435c:	b8 01       	movw	r22, r16
    435e:	89 e1       	ldi	r24, 0x19	; 25
    4360:	94 e0       	ldi	r25, 0x04	; 4
    4362:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <putString_P>
    4366:	bc 01       	movw	r22, r24
    4368:	8c 2f       	mov	r24, r28
    436a:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <putChar_Dec>
    436e:	8a e0       	ldi	r24, 0x0A	; 10
    4370:	99 e1       	ldi	r25, 0x19	; 25
    4372:	0e 94 00 15 	call	0x2a00	; 0x2a00 <lcd_message>
    4376:	cf 91       	pop	r28
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	08 95       	ret

0000437e <send_progrChange_toMidiThru>:
    437e:	cf 93       	push	r28
    4380:	80 34       	cpi	r24, 0x40	; 64
    4382:	60 f4       	brcc	.+24     	; 0x439c <send_progrChange_toMidiThru+0x1e>
    4384:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <midiThrough+0x1>
    4388:	9f 3f       	cpi	r25, 0xFF	; 255
    438a:	41 f0       	breq	.+16     	; 0x439c <send_progrChange_toMidiThru+0x1e>
    438c:	c8 2f       	mov	r28, r24
    438e:	89 2f       	mov	r24, r25
    4390:	80 6c       	ori	r24, 0xC0	; 192
    4392:	0e 94 e6 39 	call	0x73cc	; 0x73cc <serial1MIDISend>
    4396:	8c 2f       	mov	r24, r28
    4398:	0e 94 e6 39 	call	0x73cc	; 0x73cc <serial1MIDISend>
    439c:	cf 91       	pop	r28
    439e:	08 95       	ret

000043a0 <handle_programKey>:
    43a0:	cf 93       	push	r28
    43a2:	c6 2f       	mov	r28, r22
    43a4:	88 23       	and	r24, r24
    43a6:	3c f4       	brge	.+14     	; 0x43b6 <handle_programKey+0x16>
    43a8:	6f ef       	ldi	r22, 0xFF	; 255
    43aa:	8c 2f       	mov	r24, r28
    43ac:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <register_toProgram>
    43b0:	6c 2f       	mov	r22, r28
    43b2:	8a df       	rcall	.-236    	; 0x42c8 <menuDisplaySaveMessage>
    43b4:	09 c0       	rjmp	.+18     	; 0x43c8 <handle_programKey+0x28>
    43b6:	88 23       	and	r24, r24
    43b8:	39 f0       	breq	.+14     	; 0x43c8 <handle_programKey+0x28>
    43ba:	86 2f       	mov	r24, r22
    43bc:	0e 94 4a 32 	call	0x6494	; 0x6494 <program_toRegister>
    43c0:	6c 2f       	mov	r22, r28
    43c2:	ad df       	rcall	.-166    	; 0x431e <menuDisplayLoadMessage>
    43c4:	8c 2f       	mov	r24, r28
    43c6:	db df       	rcall	.-74     	; 0x437e <send_progrChange_toMidiThru>
    43c8:	8c 2f       	mov	r24, r28
    43ca:	0e 94 20 32 	call	0x6440	; 0x6440 <midi_CountRegisterInProgram>
    43ce:	88 23       	and	r24, r24
    43d0:	39 f0       	breq	.+14     	; 0x43e0 <handle_programKey+0x40>
    43d2:	8c 2f       	mov	r24, r28
    43d4:	0e 94 e6 31 	call	0x63cc	; 0x63cc <midi_RegisterMatchProgram>
    43d8:	81 11       	cpse	r24, r1
    43da:	04 c0       	rjmp	.+8      	; 0x43e4 <handle_programKey+0x44>
    43dc:	81 e8       	ldi	r24, 0x81	; 129
    43de:	03 c0       	rjmp	.+6      	; 0x43e6 <handle_programKey+0x46>
    43e0:	82 e8       	ldi	r24, 0x82	; 130
    43e2:	01 c0       	rjmp	.+2      	; 0x43e6 <handle_programKey+0x46>
    43e4:	82 e8       	ldi	r24, 0x82	; 130
    43e6:	cf 91       	pop	r28
    43e8:	08 95       	ret

000043ea <softKeyK1A>:
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	d9 cf       	rjmp	.-78     	; 0x43a0 <handle_programKey>
    43ee:	08 95       	ret

000043f0 <softKeyK2A>:
    43f0:	61 e0       	ldi	r22, 0x01	; 1
    43f2:	d6 cf       	rjmp	.-84     	; 0x43a0 <handle_programKey>
    43f4:	08 95       	ret

000043f6 <softKeyK3A>:
    43f6:	62 e0       	ldi	r22, 0x02	; 2
    43f8:	d3 cf       	rjmp	.-90     	; 0x43a0 <handle_programKey>
    43fa:	08 95       	ret

000043fc <softKeyK4A>:
    43fc:	63 e0       	ldi	r22, 0x03	; 3
    43fe:	d0 cf       	rjmp	.-96     	; 0x43a0 <handle_programKey>
    4400:	08 95       	ret

00004402 <softKeyUpdateProg>:
    4402:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4406:	80 34       	cpi	r24, 0x40	; 64
    4408:	30 f4       	brcc	.+12     	; 0x4416 <softKeyUpdateProg+0x14>
    440a:	b9 df       	rcall	.-142    	; 0x437e <send_progrChange_toMidiThru>
    440c:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4410:	0e 94 4a 32 	call	0x6494	; 0x6494 <program_toRegister>
    4414:	02 c0       	rjmp	.+4      	; 0x441a <softKeyUpdateProg+0x18>
    4416:	0e 94 d5 32 	call	0x65aa	; 0x65aa <midi_resetRegisters>
    441a:	8f ef       	ldi	r24, 0xFF	; 255
    441c:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    4420:	08 95       	ret

00004422 <softKeyPBInc>:
    4422:	88 23       	and	r24, r24
    4424:	39 f0       	breq	.+14     	; 0x4434 <softKeyPBInc+0x12>
    4426:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    442a:	88 5f       	subi	r24, 0xF8	; 248
    442c:	88 73       	andi	r24, 0x38	; 56
    442e:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4432:	e7 df       	rcall	.-50     	; 0x4402 <softKeyUpdateProg>
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	08 95       	ret

00004438 <softKeyPBDec>:
    4438:	88 23       	and	r24, r24
    443a:	39 f0       	breq	.+14     	; 0x444a <softKeyPBDec+0x12>
    443c:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4440:	88 50       	subi	r24, 0x08	; 8
    4442:	88 73       	andi	r24, 0x38	; 56
    4444:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4448:	dc df       	rcall	.-72     	; 0x4402 <softKeyUpdateProg>
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	08 95       	ret

0000444e <progDec>:
    444e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4452:	8f 3f       	cpi	r24, 0xFF	; 255
    4454:	21 f4       	brne	.+8      	; 0x445e <progDec+0x10>
    4456:	8f e3       	ldi	r24, 0x3F	; 63
    4458:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    445c:	08 95       	ret
    445e:	80 34       	cpi	r24, 0x40	; 64
    4460:	20 f4       	brcc	.+8      	; 0x446a <progDec+0x1c>
    4462:	81 50       	subi	r24, 0x01	; 1
    4464:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4468:	08 95       	ret
    446a:	8f 77       	andi	r24, 0x7F	; 127
    446c:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4470:	08 95       	ret

00004472 <softKeyPrM>:
    4472:	cf 93       	push	r28
    4474:	88 23       	and	r24, r24
    4476:	4c f4       	brge	.+18     	; 0x448a <softKeyPrM+0x18>
    4478:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    447c:	c0 68       	ori	r28, 0x80	; 128
    447e:	0e 94 d5 32 	call	0x65aa	; 0x65aa <midi_resetRegisters>
    4482:	8c 2f       	mov	r24, r28
    4484:	0e 94 40 32 	call	0x6480	; 0x6480 <prog_set>
    4488:	04 c0       	rjmp	.+8      	; 0x4492 <softKeyPrM+0x20>
    448a:	88 23       	and	r24, r24
    448c:	11 f0       	breq	.+4      	; 0x4492 <softKeyPrM+0x20>
    448e:	df df       	rcall	.-66     	; 0x444e <progDec>
    4490:	b8 df       	rcall	.-144    	; 0x4402 <softKeyUpdateProg>
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	cf 91       	pop	r28
    4496:	08 95       	ret

00004498 <softKeyPrDec>:
    4498:	88 23       	and	r24, r24
    449a:	69 f0       	breq	.+26     	; 0x44b6 <softKeyPrDec+0x1e>
    449c:	4c f4       	brge	.+18     	; 0x44b0 <softKeyPrDec+0x18>
    449e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    44a2:	80 34       	cpi	r24, 0x40	; 64
    44a4:	38 f4       	brcc	.+14     	; 0x44b4 <softKeyPrDec+0x1c>
    44a6:	88 50       	subi	r24, 0x08	; 8
    44a8:	88 73       	andi	r24, 0x38	; 56
    44aa:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <softKeyPrDec+0x1c>
    44b0:	81 11       	cpse	r24, r1
    44b2:	cd df       	rcall	.-102    	; 0x444e <progDec>
    44b4:	a6 df       	rcall	.-180    	; 0x4402 <softKeyUpdateProg>
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	08 95       	ret

000044ba <progInc>:
    44ba:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    44be:	8f 33       	cpi	r24, 0x3F	; 63
    44c0:	21 f4       	brne	.+8      	; 0x44ca <progInc+0x10>
    44c2:	8f ef       	ldi	r24, 0xFF	; 255
    44c4:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44c8:	08 95       	ret
    44ca:	8f 33       	cpi	r24, 0x3F	; 63
    44cc:	20 f4       	brcc	.+8      	; 0x44d6 <progInc+0x1c>
    44ce:	8f 5f       	subi	r24, 0xFF	; 255
    44d0:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44d4:	08 95       	ret
    44d6:	8f 3f       	cpi	r24, 0xFF	; 255
    44d8:	19 f4       	brne	.+6      	; 0x44e0 <progInc+0x26>
    44da:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <prog_Display>
    44de:	08 95       	ret
    44e0:	8f 77       	andi	r24, 0x7F	; 127
    44e2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44e6:	08 95       	ret

000044e8 <softKeyPrP>:
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	88 23       	and	r24, r24
    44ee:	84 f4       	brge	.+32     	; 0x4510 <softKeyPrP+0x28>
    44f0:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    44f4:	c0 34       	cpi	r28, 0x40	; 64
    44f6:	80 f4       	brcc	.+32     	; 0x4518 <softKeyPrP+0x30>
    44f8:	dc 2f       	mov	r29, r28
    44fa:	d0 68       	ori	r29, 0x80	; 128
    44fc:	6f ef       	ldi	r22, 0xFF	; 255
    44fe:	8c 2f       	mov	r24, r28
    4500:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <register_toProgram>
    4504:	6c 2f       	mov	r22, r28
    4506:	e0 de       	rcall	.-576    	; 0x42c8 <menuDisplaySaveMessage>
    4508:	8d 2f       	mov	r24, r29
    450a:	0e 94 40 32 	call	0x6480	; 0x6480 <prog_set>
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <softKeyPrP+0x30>
    4510:	88 23       	and	r24, r24
    4512:	11 f0       	breq	.+4      	; 0x4518 <softKeyPrP+0x30>
    4514:	d2 df       	rcall	.-92     	; 0x44ba <progInc>
    4516:	75 df       	rcall	.-278    	; 0x4402 <softKeyUpdateProg>
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	08 95       	ret

00004520 <softKeyPrInc>:
    4520:	88 23       	and	r24, r24
    4522:	69 f0       	breq	.+26     	; 0x453e <softKeyPrInc+0x1e>
    4524:	4c f4       	brge	.+18     	; 0x4538 <softKeyPrInc+0x18>
    4526:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    452a:	80 34       	cpi	r24, 0x40	; 64
    452c:	38 f4       	brcc	.+14     	; 0x453c <softKeyPrInc+0x1c>
    452e:	88 5f       	subi	r24, 0xF8	; 248
    4530:	88 73       	andi	r24, 0x38	; 56
    4532:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4536:	02 c0       	rjmp	.+4      	; 0x453c <softKeyPrInc+0x1c>
    4538:	81 11       	cpse	r24, r1
    453a:	bf df       	rcall	.-130    	; 0x44ba <progInc>
    453c:	62 df       	rcall	.-316    	; 0x4402 <softKeyUpdateProg>
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	08 95       	ret

00004542 <menuLCDwriteOK>:
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	94 e0       	ldi	r25, 0x04	; 4
    4546:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <lcd_message_P>
    454a:	08 95       	ret

0000454c <menuOnEnterEEBackup>:
    454c:	8e e1       	ldi	r24, 0x1E	; 30
    454e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    4552:	83 ee       	ldi	r24, 0xE3	; 227
    4554:	93 e0       	ldi	r25, 0x03	; 3
    4556:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    455a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <eeprom_Backup>
    455e:	f1 df       	rcall	.-30     	; 0x4542 <menuLCDwriteOK>
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	08 95       	ret

00004564 <menuOnEnterEERestore>:
    4564:	8e e1       	ldi	r24, 0x1E	; 30
    4566:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    456a:	83 ee       	ldi	r24, 0xE3	; 227
    456c:	93 e0       	ldi	r25, 0x03	; 3
    456e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    4572:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <eeprom_Restore>
    4576:	e5 df       	rcall	.-54     	; 0x4542 <menuLCDwriteOK>
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	08 95       	ret

0000457c <menuOnEnterEEUpdate>:
    457c:	83 ee       	ldi	r24, 0xE3	; 227
    457e:	93 e0       	ldi	r25, 0x03	; 3
    4580:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    4584:	8e e1       	ldi	r24, 0x1E	; 30
    4586:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    458a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <eeprom_UpdateALL>
    458e:	d9 df       	rcall	.-78     	; 0x4542 <menuLCDwriteOK>
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	08 95       	ret

00004594 <menu_Init>:
    4594:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <menuStackIndex>
    4598:	00 97       	sbiw	r24, 0x00	; 0
    459a:	69 f4       	brne	.+26     	; 0x45b6 <menu_Init+0x22>
    459c:	88 e2       	ldi	r24, 0x28	; 40
    459e:	98 e0       	ldi	r25, 0x08	; 8
    45a0:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    45a4:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    45a8:	81 e3       	ldi	r24, 0x31	; 49
    45aa:	94 e0       	ldi	r25, 0x04	; 4
    45ac:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <pMenuTopTitle+0x1>
    45b0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <pMenuTopTitle>
    45b4:	08 c0       	rjmp	.+16     	; 0x45c6 <menu_Init+0x32>
    45b6:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    45ba:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    45be:	70 93 c3 05 	sts	0x05C3, r23	; 0x8005c3 <pMenuTopTitle+0x1>
    45c2:	60 93 c2 05 	sts	0x05C2, r22	; 0x8005c2 <pMenuTopTitle>
    45c6:	8f ef       	ldi	r24, 0xFF	; 255
    45c8:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    45cc:	8b e3       	ldi	r24, 0x3B	; 59
    45ce:	94 e0       	ldi	r25, 0x04	; 4
    45d0:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    45d4:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    45d8:	08 95       	ret

000045da <softkeyLeft>:
    45da:	68 e9       	ldi	r22, 0x98	; 152
    45dc:	74 e1       	ldi	r23, 0x14	; 20
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    45e4:	08 95       	ret

000045e6 <softkeyRight>:
    45e6:	6a e9       	ldi	r22, 0x9A	; 154
    45e8:	74 e1       	ldi	r23, 0x14	; 20
    45ea:	83 e0       	ldi	r24, 0x03	; 3
    45ec:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    45f0:	08 95       	ret

000045f2 <softkeyDown>:
    45f2:	6c e9       	ldi	r22, 0x9C	; 156
    45f4:	74 e1       	ldi	r23, 0x14	; 20
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    45fc:	08 95       	ret

000045fe <softkeyOn>:
    45fe:	6a e8       	ldi	r22, 0x8A	; 138
    4600:	74 e1       	ldi	r23, 0x14	; 20
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4608:	08 95       	ret

0000460a <softkeyOff>:
    460a:	65 e8       	ldi	r22, 0x85	; 133
    460c:	74 e1       	ldi	r23, 0x14	; 20
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4614:	08 95       	ret

00004616 <softkeyUp>:
    4616:	6e e9       	ldi	r22, 0x9E	; 158
    4618:	74 e1       	ldi	r23, 0x14	; 20
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4620:	08 95       	ret

00004622 <softkeyPlus>:
    4622:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    4626:	8a 30       	cpi	r24, 0x0A	; 10
    4628:	11 f0       	breq	.+4      	; 0x462e <softkeyPlus+0xc>
    462a:	8e 30       	cpi	r24, 0x0E	; 14
    462c:	31 f4       	brne	.+12     	; 0x463a <softkeyPlus+0x18>
    462e:	66 e7       	ldi	r22, 0x76	; 118
    4630:	74 e1       	ldi	r23, 0x14	; 20
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4638:	08 95       	ret
    463a:	66 e9       	ldi	r22, 0x96	; 150
    463c:	74 e1       	ldi	r23, 0x14	; 20
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4644:	08 95       	ret

00004646 <softkeyMinus>:
    4646:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    464a:	8a 30       	cpi	r24, 0x0A	; 10
    464c:	11 f0       	breq	.+4      	; 0x4652 <softkeyMinus+0xc>
    464e:	8e 30       	cpi	r24, 0x0E	; 14
    4650:	31 f4       	brne	.+12     	; 0x465e <softkeyMinus+0x18>
    4652:	68 e7       	ldi	r22, 0x78	; 120
    4654:	74 e1       	ldi	r23, 0x14	; 20
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    465c:	08 95       	ret
    465e:	64 e9       	ldi	r22, 0x94	; 148
    4660:	74 e1       	ldi	r23, 0x14	; 20
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <keylabel_set>
    4668:	08 95       	ret

0000466a <dataToNibbles>:
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4672:	8e 2f       	mov	r24, r30
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	fc 01       	movw	r30, r24
    4678:	32 97       	sbiw	r30, 0x02	; 2
    467a:	ed 30       	cpi	r30, 0x0D	; 13
    467c:	f1 05       	cpc	r31, r1
    467e:	08 f0       	brcs	.+2      	; 0x4682 <dataToNibbles+0x18>
    4680:	e4 c0       	rjmp	.+456    	; 0x484a <dataToNibbles+0x1e0>
    4682:	88 27       	eor	r24, r24
    4684:	ee 58       	subi	r30, 0x8E	; 142
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	8f 4f       	sbci	r24, 0xFF	; 255
    468a:	0c 94 8b 3f 	jmp	0x7f16	; 0x7f16 <__tablejump2__>
    468e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4692:	ea ee       	ldi	r30, 0xEA	; 234
    4694:	f5 e0       	ldi	r31, 0x05	; 5
    4696:	98 2f       	mov	r25, r24
    4698:	92 95       	swap	r25
    469a:	9f 70       	andi	r25, 0x0F	; 15
    469c:	90 83       	st	Z, r25
    469e:	8f 70       	andi	r24, 0x0F	; 15
    46a0:	81 83       	std	Z+1, r24	; 0x01
    46a2:	d3 c0       	rjmp	.+422    	; 0x484a <dataToNibbles+0x1e0>
    46a4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46a8:	80 31       	cpi	r24, 0x10	; 16
    46aa:	20 f0       	brcs	.+8      	; 0x46b4 <dataToNibbles+0x4a>
    46ac:	8f ef       	ldi	r24, 0xFF	; 255
    46ae:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    46b2:	cb c0       	rjmp	.+406    	; 0x484a <dataToNibbles+0x1e0>
    46b4:	8f 5f       	subi	r24, 0xFF	; 255
    46b6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    46ba:	c7 c0       	rjmp	.+398    	; 0x484a <dataToNibbles+0x1e0>
    46bc:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46c0:	88 23       	and	r24, r24
    46c2:	34 f4       	brge	.+12     	; 0x46d0 <dataToNibbles+0x66>
    46c4:	ea ee       	ldi	r30, 0xEA	; 234
    46c6:	f5 e0       	ldi	r31, 0x05	; 5
    46c8:	10 82       	st	Z, r1
    46ca:	8f ef       	ldi	r24, 0xFF	; 255
    46cc:	81 83       	std	Z+1, r24	; 0x01
    46ce:	bd c0       	rjmp	.+378    	; 0x484a <dataToNibbles+0x1e0>
    46d0:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <nibble+0x1>
    46d4:	08 c0       	rjmp	.+16     	; 0x46e6 <dataToNibbles+0x7c>
    46d6:	ea ee       	ldi	r30, 0xEA	; 234
    46d8:	f5 e0       	ldi	r31, 0x05	; 5
    46da:	91 81       	ldd	r25, Z+1	; 0x01
    46dc:	9f 5f       	subi	r25, 0xFF	; 255
    46de:	91 83       	std	Z+1, r25	; 0x01
    46e0:	8c 50       	subi	r24, 0x0C	; 12
    46e2:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    46e6:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46ea:	8c 30       	cpi	r24, 0x0C	; 12
    46ec:	a0 f7       	brcc	.-24     	; 0x46d6 <dataToNibbles+0x6c>
    46ee:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    46f2:	ab c0       	rjmp	.+342    	; 0x484a <dataToNibbles+0x1e0>
    46f4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46f8:	ea ee       	ldi	r30, 0xEA	; 234
    46fa:	f5 e0       	ldi	r31, 0x05	; 5
    46fc:	98 2f       	mov	r25, r24
    46fe:	92 95       	swap	r25
    4700:	96 95       	lsr	r25
    4702:	97 70       	andi	r25, 0x07	; 7
    4704:	90 83       	st	Z, r25
    4706:	8f 71       	andi	r24, 0x1F	; 31
    4708:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    470c:	11 82       	std	Z+1, r1	; 0x01
    470e:	08 c0       	rjmp	.+16     	; 0x4720 <dataToNibbles+0xb6>
    4710:	ea ee       	ldi	r30, 0xEA	; 234
    4712:	f5 e0       	ldi	r31, 0x05	; 5
    4714:	91 81       	ldd	r25, Z+1	; 0x01
    4716:	9f 5f       	subi	r25, 0xFF	; 255
    4718:	91 83       	std	Z+1, r25	; 0x01
    471a:	8a 50       	subi	r24, 0x0A	; 10
    471c:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4720:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4724:	8a 30       	cpi	r24, 0x0A	; 10
    4726:	a0 f7       	brcc	.-24     	; 0x4710 <dataToNibbles+0xa6>
    4728:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    472c:	8e c0       	rjmp	.+284    	; 0x484a <dataToNibbles+0x1e0>
    472e:	ea ee       	ldi	r30, 0xEA	; 234
    4730:	f5 e0       	ldi	r31, 0x05	; 5
    4732:	10 82       	st	Z, r1
    4734:	11 82       	std	Z+1, r1	; 0x01
    4736:	08 c0       	rjmp	.+16     	; 0x4748 <dataToNibbles+0xde>
    4738:	ea ee       	ldi	r30, 0xEA	; 234
    473a:	f5 e0       	ldi	r31, 0x05	; 5
    473c:	90 81       	ld	r25, Z
    473e:	9f 5f       	subi	r25, 0xFF	; 255
    4740:	90 83       	st	Z, r25
    4742:	84 56       	subi	r24, 0x64	; 100
    4744:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4748:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    474c:	84 36       	cpi	r24, 0x64	; 100
    474e:	a0 f7       	brcc	.-24     	; 0x4738 <dataToNibbles+0xce>
    4750:	08 c0       	rjmp	.+16     	; 0x4762 <dataToNibbles+0xf8>
    4752:	ea ee       	ldi	r30, 0xEA	; 234
    4754:	f5 e0       	ldi	r31, 0x05	; 5
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	9f 5f       	subi	r25, 0xFF	; 255
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	8a 50       	subi	r24, 0x0A	; 10
    475e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4762:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4766:	8a 30       	cpi	r24, 0x0A	; 10
    4768:	a0 f7       	brcc	.-24     	; 0x4752 <dataToNibbles+0xe8>
    476a:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    476e:	6d c0       	rjmp	.+218    	; 0x484a <dataToNibbles+0x1e0>
    4770:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4774:	84 30       	cpi	r24, 0x04	; 4
    4776:	20 f0       	brcs	.+8      	; 0x4780 <dataToNibbles+0x116>
    4778:	8f ef       	ldi	r24, 0xFF	; 255
    477a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    477e:	65 c0       	rjmp	.+202    	; 0x484a <dataToNibbles+0x1e0>
    4780:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4784:	62 c0       	rjmp	.+196    	; 0x484a <dataToNibbles+0x1e0>
    4786:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    478a:	84 30       	cpi	r24, 0x04	; 4
    478c:	20 f0       	brcs	.+8      	; 0x4796 <dataToNibbles+0x12c>
    478e:	83 e0       	ldi	r24, 0x03	; 3
    4790:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4794:	5a c0       	rjmp	.+180    	; 0x484a <dataToNibbles+0x1e0>
    4796:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    479a:	57 c0       	rjmp	.+174    	; 0x484a <dataToNibbles+0x1e0>
    479c:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    47a0:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    47a4:	52 c0       	rjmp	.+164    	; 0x484a <dataToNibbles+0x1e0>
    47a6:	e9 2f       	mov	r30, r25
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    47ae:	28 2f       	mov	r18, r24
    47b0:	22 1f       	adc	r18, r18
    47b2:	22 27       	eor	r18, r18
    47b4:	22 1f       	adc	r18, r18
    47b6:	e6 51       	subi	r30, 0x16	; 22
    47b8:	fa 4f       	sbci	r31, 0xFA	; 250
    47ba:	20 83       	st	Z, r18
    47bc:	88 0f       	add	r24, r24
    47be:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    47c2:	9f 5f       	subi	r25, 0xFF	; 255
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <dataToNibbles+0x15e>
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	98 30       	cpi	r25, 0x08	; 8
    47ca:	68 f3       	brcs	.-38     	; 0x47a6 <dataToNibbles+0x13c>
    47cc:	3e c0       	rjmp	.+124    	; 0x484a <dataToNibbles+0x1e0>
    47ce:	82 50       	subi	r24, 0x02	; 2
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	de 01       	movw	r26, r28
    47d4:	9d 91       	ld	r25, X+
    47d6:	e6 51       	subi	r30, 0x16	; 22
    47d8:	fa 4f       	sbci	r31, 0xFA	; 250
    47da:	9f 70       	andi	r25, 0x0F	; 15
    47dc:	90 83       	st	Z, r25
    47de:	e8 2f       	mov	r30, r24
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	98 81       	ld	r25, Y
    47e4:	e6 51       	subi	r30, 0x16	; 22
    47e6:	fa 4f       	sbci	r31, 0xFA	; 250
    47e8:	92 95       	swap	r25
    47ea:	9f 70       	andi	r25, 0x0F	; 15
    47ec:	90 83       	st	Z, r25
    47ee:	ed 01       	movw	r28, r26
    47f0:	03 c0       	rjmp	.+6      	; 0x47f8 <dataToNibbles+0x18e>
    47f2:	c8 ec       	ldi	r28, 0xC8	; 200
    47f4:	d5 e0       	ldi	r29, 0x05	; 5
    47f6:	88 e0       	ldi	r24, 0x08	; 8
    47f8:	ef ef       	ldi	r30, 0xFF	; 255
    47fa:	e8 0f       	add	r30, r24
    47fc:	81 11       	cpse	r24, r1
    47fe:	e7 cf       	rjmp	.-50     	; 0x47ce <dataToNibbles+0x164>
    4800:	24 c0       	rjmp	.+72     	; 0x484a <dataToNibbles+0x1e0>
    4802:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4806:	ea ee       	ldi	r30, 0xEA	; 234
    4808:	f5 e0       	ldi	r31, 0x05	; 5
    480a:	98 2f       	mov	r25, r24
    480c:	96 95       	lsr	r25
    480e:	96 95       	lsr	r25
    4810:	96 95       	lsr	r25
    4812:	9f 5f       	subi	r25, 0xFF	; 255
    4814:	90 83       	st	Z, r25
    4816:	87 70       	andi	r24, 0x07	; 7
    4818:	8f 5f       	subi	r24, 0xFF	; 255
    481a:	81 83       	std	Z+1, r24	; 0x01
    481c:	16 c0       	rjmp	.+44     	; 0x484a <dataToNibbles+0x1e0>
    481e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4822:	8f 5f       	subi	r24, 0xFF	; 255
    4824:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4828:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    482c:	08 c0       	rjmp	.+16     	; 0x483e <dataToNibbles+0x1d4>
    482e:	ea ee       	ldi	r30, 0xEA	; 234
    4830:	f5 e0       	ldi	r31, 0x05	; 5
    4832:	90 81       	ld	r25, Z
    4834:	9f 5f       	subi	r25, 0xFF	; 255
    4836:	90 83       	st	Z, r25
    4838:	8a 50       	subi	r24, 0x0A	; 10
    483a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    483e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4842:	8a 30       	cpi	r24, 0x0A	; 10
    4844:	a0 f7       	brcc	.-24     	; 0x482e <dataToNibbles+0x1c4>
    4846:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <nibble+0x1>
    484a:	df 91       	pop	r29
    484c:	cf 91       	pop	r28
    484e:	08 95       	ret

00004850 <nibbleToLCDstring>:
    4850:	0f 93       	push	r16
    4852:	1f 93       	push	r17
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    485c:	8e 2f       	mov	r24, r30
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	fc 01       	movw	r30, r24
    4862:	32 97       	sbiw	r30, 0x02	; 2
    4864:	ed 30       	cpi	r30, 0x0D	; 13
    4866:	f1 05       	cpc	r31, r1
    4868:	08 f0       	brcs	.+2      	; 0x486c <nibbleToLCDstring+0x1c>
    486a:	3b c1       	rjmp	.+630    	; 0x4ae2 <nibbleToLCDstring+0x292>
    486c:	88 27       	eor	r24, r24
    486e:	e1 58       	subi	r30, 0x81	; 129
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	8f 4f       	sbci	r24, 0xFF	; 255
    4874:	0c 94 8b 3f 	jmp	0x7f16	; 0x7f16 <__tablejump2__>
    4878:	0a ee       	ldi	r16, 0xEA	; 234
    487a:	15 e0       	ldi	r17, 0x05	; 5
    487c:	f8 01       	movw	r30, r16
    487e:	80 81       	ld	r24, Z
    4880:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    4884:	c6 e4       	ldi	r28, 0x46	; 70
    4886:	d2 e0       	ldi	r29, 0x02	; 2
    4888:	88 83       	st	Y, r24
    488a:	f8 01       	movw	r30, r16
    488c:	81 81       	ldd	r24, Z+1	; 0x01
    488e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    4892:	89 83       	std	Y+1, r24	; 0x01
    4894:	1a 82       	std	Y+2, r1	; 0x02
    4896:	25 c1       	rjmp	.+586    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4898:	e6 e4       	ldi	r30, 0x46	; 70
    489a:	f2 e0       	ldi	r31, 0x02	; 2
    489c:	83 e4       	ldi	r24, 0x43	; 67
    489e:	80 83       	st	Z, r24
    48a0:	88 e6       	ldi	r24, 0x68	; 104
    48a2:	81 83       	std	Z+1, r24	; 0x01
    48a4:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    48a8:	8f 3f       	cpi	r24, 0xFF	; 255
    48aa:	29 f4       	brne	.+10     	; 0x48b6 <nibbleToLCDstring+0x66>
    48ac:	80 e2       	ldi	r24, 0x20	; 32
    48ae:	82 83       	std	Z+2, r24	; 0x02
    48b0:	8d e2       	ldi	r24, 0x2D	; 45
    48b2:	83 83       	std	Z+3, r24	; 0x03
    48b4:	12 c0       	rjmp	.+36     	; 0x48da <nibbleToLCDstring+0x8a>
    48b6:	8a 30       	cpi	r24, 0x0A	; 10
    48b8:	48 f0       	brcs	.+18     	; 0x48cc <nibbleToLCDstring+0x7c>
    48ba:	c6 e4       	ldi	r28, 0x46	; 70
    48bc:	d2 e0       	ldi	r29, 0x02	; 2
    48be:	91 e3       	ldi	r25, 0x31	; 49
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	8a 50       	subi	r24, 0x0A	; 10
    48c4:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    48c8:	8b 83       	std	Y+3, r24	; 0x03
    48ca:	07 c0       	rjmp	.+14     	; 0x48da <nibbleToLCDstring+0x8a>
    48cc:	c6 e4       	ldi	r28, 0x46	; 70
    48ce:	d2 e0       	ldi	r29, 0x02	; 2
    48d0:	90 e2       	ldi	r25, 0x20	; 32
    48d2:	9a 83       	std	Y+2, r25	; 0x02
    48d4:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    48d8:	8b 83       	std	Y+3, r24	; 0x03
    48da:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <lcdData+0x4>
    48de:	01 c1       	rjmp	.+514    	; 0x4ae2 <nibbleToLCDstring+0x292>
    48e0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    48e4:	8f 3f       	cpi	r24, 0xFF	; 255
    48e6:	21 f0       	breq	.+8      	; 0x48f0 <nibbleToLCDstring+0xa0>
    48e8:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <nibble+0x1>
    48ec:	9f 3f       	cpi	r25, 0xFF	; 255
    48ee:	59 f4       	brne	.+22     	; 0x4906 <nibbleToLCDstring+0xb6>
    48f0:	e6 e4       	ldi	r30, 0x46	; 70
    48f2:	f2 e0       	ldi	r31, 0x02	; 2
    48f4:	8e e6       	ldi	r24, 0x6E	; 110
    48f6:	80 83       	st	Z, r24
    48f8:	9f e6       	ldi	r25, 0x6F	; 111
    48fa:	91 83       	std	Z+1, r25	; 0x01
    48fc:	82 83       	std	Z+2, r24	; 0x02
    48fe:	85 e6       	ldi	r24, 0x65	; 101
    4900:	83 83       	std	Z+3, r24	; 0x03
    4902:	14 82       	std	Z+4, r1	; 0x04
    4904:	ee c0       	rjmp	.+476    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4906:	9f e5       	ldi	r25, 0x5F	; 95
    4908:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <lcdData+0x1>
    490c:	8b 30       	cpi	r24, 0x0B	; 11
    490e:	21 f4       	brne	.+8      	; 0x4918 <nibbleToLCDstring+0xc8>
    4910:	88 e4       	ldi	r24, 0x48	; 72
    4912:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4916:	20 c0       	rjmp	.+64     	; 0x4958 <nibbleToLCDstring+0x108>
    4918:	85 30       	cpi	r24, 0x05	; 5
    491a:	58 f4       	brcc	.+22     	; 0x4932 <nibbleToLCDstring+0xe2>
    491c:	98 2f       	mov	r25, r24
    491e:	96 95       	lsr	r25
    4920:	9d 5b       	subi	r25, 0xBD	; 189
    4922:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lcdData>
    4926:	80 ff       	sbrs	r24, 0
    4928:	17 c0       	rjmp	.+46     	; 0x4958 <nibbleToLCDstring+0x108>
    492a:	83 e2       	ldi	r24, 0x23	; 35
    492c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    4930:	13 c0       	rjmp	.+38     	; 0x4958 <nibbleToLCDstring+0x108>
    4932:	28 2f       	mov	r18, r24
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	25 50       	subi	r18, 0x05	; 5
    4938:	31 09       	sbc	r19, r1
    493a:	35 95       	asr	r19
    493c:	27 95       	ror	r18
    493e:	2a 5b       	subi	r18, 0xBA	; 186
    4940:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lcdData>
    4944:	80 fd       	sbrc	r24, 0
    4946:	03 c0       	rjmp	.+6      	; 0x494e <nibbleToLCDstring+0xfe>
    4948:	83 e2       	ldi	r24, 0x23	; 35
    494a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    494e:	28 34       	cpi	r18, 0x48	; 72
    4950:	19 f4       	brne	.+6      	; 0x4958 <nibbleToLCDstring+0x108>
    4952:	81 e4       	ldi	r24, 0x41	; 65
    4954:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4958:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    495c:	81 11       	cpse	r24, r1
    495e:	04 c0       	rjmp	.+8      	; 0x4968 <nibbleToLCDstring+0x118>
    4960:	8d e6       	ldi	r24, 0x6D	; 109
    4962:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4966:	0b c0       	rjmp	.+22     	; 0x497e <nibbleToLCDstring+0x12e>
    4968:	8c 30       	cpi	r24, 0x0C	; 12
    496a:	30 f4       	brcc	.+12     	; 0x4978 <nibbleToLCDstring+0x128>
    496c:	81 50       	subi	r24, 0x01	; 1
    496e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    4972:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4976:	03 c0       	rjmp	.+6      	; 0x497e <nibbleToLCDstring+0x12e>
    4978:	8d e2       	ldi	r24, 0x2D	; 45
    497a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    497e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4982:	af c0       	rjmp	.+350    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4984:	c6 e4       	ldi	r28, 0x46	; 70
    4986:	d2 e0       	ldi	r29, 0x02	; 2
    4988:	8d e4       	ldi	r24, 0x4D	; 77
    498a:	88 83       	st	Y, r24
    498c:	0a ee       	ldi	r16, 0xEA	; 234
    498e:	15 e0       	ldi	r17, 0x05	; 5
    4990:	f8 01       	movw	r30, r16
    4992:	80 81       	ld	r24, Z
    4994:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	82 e4       	ldi	r24, 0x42	; 66
    499c:	8a 83       	std	Y+2, r24	; 0x02
    499e:	f8 01       	movw	r30, r16
    49a0:	81 81       	ldd	r24, Z+1	; 0x01
    49a2:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    49a6:	8b 83       	std	Y+3, r24	; 0x03
    49a8:	f8 01       	movw	r30, r16
    49aa:	82 81       	ldd	r24, Z+2	; 0x02
    49ac:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    49b0:	8c 83       	std	Y+4, r24	; 0x04
    49b2:	1d 82       	std	Y+5, r1	; 0x05
    49b4:	96 c0       	rjmp	.+300    	; 0x4ae2 <nibbleToLCDstring+0x292>
    49b6:	0a ee       	ldi	r16, 0xEA	; 234
    49b8:	15 e0       	ldi	r17, 0x05	; 5
    49ba:	f8 01       	movw	r30, r16
    49bc:	80 81       	ld	r24, Z
    49be:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    49c2:	c6 e4       	ldi	r28, 0x46	; 70
    49c4:	d2 e0       	ldi	r29, 0x02	; 2
    49c6:	88 83       	st	Y, r24
    49c8:	f8 01       	movw	r30, r16
    49ca:	81 81       	ldd	r24, Z+1	; 0x01
    49cc:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    49d0:	89 83       	std	Y+1, r24	; 0x01
    49d2:	f8 01       	movw	r30, r16
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    49da:	8a 83       	std	Y+2, r24	; 0x02
    49dc:	1b 82       	std	Y+3, r1	; 0x03
    49de:	81 c0       	rjmp	.+258    	; 0x4ae2 <nibbleToLCDstring+0x292>
    49e0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    49e4:	83 30       	cpi	r24, 0x03	; 3
    49e6:	38 f4       	brcc	.+14     	; 0x49f6 <nibbleToLCDstring+0x1a6>
    49e8:	e6 e4       	ldi	r30, 0x46	; 70
    49ea:	f2 e0       	ldi	r31, 0x02	; 2
    49ec:	93 e3       	ldi	r25, 0x33	; 51
    49ee:	98 1b       	sub	r25, r24
    49f0:	90 83       	st	Z, r25
    49f2:	11 82       	std	Z+1, r1	; 0x01
    49f4:	76 c0       	rjmp	.+236    	; 0x4ae2 <nibbleToLCDstring+0x292>
    49f6:	83 30       	cpi	r24, 0x03	; 3
    49f8:	31 f4       	brne	.+12     	; 0x4a06 <nibbleToLCDstring+0x1b6>
    49fa:	e6 e4       	ldi	r30, 0x46	; 70
    49fc:	f2 e0       	ldi	r31, 0x02	; 2
    49fe:	80 e5       	ldi	r24, 0x50	; 80
    4a00:	80 83       	st	Z, r24
    4a02:	11 82       	std	Z+1, r1	; 0x01
    4a04:	6e c0       	rjmp	.+220    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a06:	e6 e4       	ldi	r30, 0x46	; 70
    4a08:	f2 e0       	ldi	r31, 0x02	; 2
    4a0a:	8d e2       	ldi	r24, 0x2D	; 45
    4a0c:	80 83       	st	Z, r24
    4a0e:	11 82       	std	Z+1, r1	; 0x01
    4a10:	68 c0       	rjmp	.+208    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a12:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4a16:	e6 e4       	ldi	r30, 0x46	; 70
    4a18:	f2 e0       	ldi	r31, 0x02	; 2
    4a1a:	80 5d       	subi	r24, 0xD0	; 208
    4a1c:	80 83       	st	Z, r24
    4a1e:	11 82       	std	Z+1, r1	; 0x01
    4a20:	60 c0       	rjmp	.+192    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a22:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4a26:	81 11       	cpse	r24, r1
    4a28:	09 c0       	rjmp	.+18     	; 0x4a3c <nibbleToLCDstring+0x1ec>
    4a2a:	e6 e4       	ldi	r30, 0x46	; 70
    4a2c:	f2 e0       	ldi	r31, 0x02	; 2
    4a2e:	81 e4       	ldi	r24, 0x41	; 65
    4a30:	80 83       	st	Z, r24
    4a32:	85 e7       	ldi	r24, 0x75	; 117
    4a34:	81 83       	std	Z+1, r24	; 0x01
    4a36:	83 e7       	ldi	r24, 0x73	; 115
    4a38:	82 83       	std	Z+2, r24	; 0x02
    4a3a:	08 c0       	rjmp	.+16     	; 0x4a4c <nibbleToLCDstring+0x1fc>
    4a3c:	e6 e4       	ldi	r30, 0x46	; 70
    4a3e:	f2 e0       	ldi	r31, 0x02	; 2
    4a40:	85 e4       	ldi	r24, 0x45	; 69
    4a42:	80 83       	st	Z, r24
    4a44:	89 e6       	ldi	r24, 0x69	; 105
    4a46:	81 83       	std	Z+1, r24	; 0x01
    4a48:	8e e6       	ldi	r24, 0x6E	; 110
    4a4a:	82 83       	std	Z+2, r24	; 0x02
    4a4c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4a50:	48 c0       	rjmp	.+144    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a52:	c1 2f       	mov	r28, r17
    4a54:	d0 e0       	ldi	r29, 0x00	; 0
    4a56:	fe 01       	movw	r30, r28
    4a58:	e6 51       	subi	r30, 0x16	; 22
    4a5a:	fa 4f       	sbci	r31, 0xFA	; 250
    4a5c:	80 81       	ld	r24, Z
    4a5e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <nibbleToChr>
    4a62:	ca 5b       	subi	r28, 0xBA	; 186
    4a64:	dd 4f       	sbci	r29, 0xFD	; 253
    4a66:	88 83       	st	Y, r24
    4a68:	1f 5f       	subi	r17, 0xFF	; 255
    4a6a:	01 c0       	rjmp	.+2      	; 0x4a6e <nibbleToLCDstring+0x21e>
    4a6c:	10 e0       	ldi	r17, 0x00	; 0
    4a6e:	18 30       	cpi	r17, 0x08	; 8
    4a70:	80 f3       	brcs	.-32     	; 0x4a52 <nibbleToLCDstring+0x202>
    4a72:	37 c0       	rjmp	.+110    	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a74:	82 2f       	mov	r24, r18
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	fc 01       	movw	r30, r24
    4a7a:	e6 51       	subi	r30, 0x16	; 22
    4a7c:	fa 4f       	sbci	r31, 0xFA	; 250
    4a7e:	30 81       	ld	r19, Z
    4a80:	31 11       	cpse	r19, r1
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <nibbleToLCDstring+0x238>
    4a84:	3f e6       	ldi	r19, 0x6F	; 111
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <nibbleToLCDstring+0x23a>
    4a88:	39 e4       	ldi	r19, 0x49	; 73
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	ea 5b       	subi	r30, 0xBA	; 186
    4a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    4a90:	30 83       	st	Z, r19
    4a92:	2f 5f       	subi	r18, 0xFF	; 255
    4a94:	01 c0       	rjmp	.+2      	; 0x4a98 <nibbleToLCDstring+0x248>
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	28 30       	cpi	r18, 0x08	; 8
    4a9a:	60 f3       	brcs	.-40     	; 0x4a74 <nibbleToLCDstring+0x224>
    4a9c:	22 c0       	rjmp	.+68     	; 0x4ae2 <nibbleToLCDstring+0x292>
    4a9e:	aa ee       	ldi	r26, 0xEA	; 234
    4aa0:	b5 e0       	ldi	r27, 0x05	; 5
    4aa2:	8c 91       	ld	r24, X
    4aa4:	e6 e4       	ldi	r30, 0x46	; 70
    4aa6:	f2 e0       	ldi	r31, 0x02	; 2
    4aa8:	80 5c       	subi	r24, 0xC0	; 192
    4aaa:	80 83       	st	Z, r24
    4aac:	11 96       	adiw	r26, 0x01	; 1
    4aae:	8c 91       	ld	r24, X
    4ab0:	80 5d       	subi	r24, 0xD0	; 208
    4ab2:	81 83       	std	Z+1, r24	; 0x01
    4ab4:	12 82       	std	Z+2, r1	; 0x02
    4ab6:	15 c0       	rjmp	.+42     	; 0x4ae2 <nibbleToLCDstring+0x292>
    4ab8:	ea ee       	ldi	r30, 0xEA	; 234
    4aba:	f5 e0       	ldi	r31, 0x05	; 5
    4abc:	90 81       	ld	r25, Z
    4abe:	81 81       	ldd	r24, Z+1	; 0x01
    4ac0:	29 2f       	mov	r18, r25
    4ac2:	28 2b       	or	r18, r24
    4ac4:	31 f4       	brne	.+12     	; 0x4ad2 <nibbleToLCDstring+0x282>
    4ac6:	e6 e4       	ldi	r30, 0x46	; 70
    4ac8:	f2 e0       	ldi	r31, 0x02	; 2
    4aca:	8d e2       	ldi	r24, 0x2D	; 45
    4acc:	80 83       	st	Z, r24
    4ace:	81 83       	std	Z+1, r24	; 0x01
    4ad0:	06 c0       	rjmp	.+12     	; 0x4ade <nibbleToLCDstring+0x28e>
    4ad2:	e6 e4       	ldi	r30, 0x46	; 70
    4ad4:	f2 e0       	ldi	r31, 0x02	; 2
    4ad6:	90 5d       	subi	r25, 0xD0	; 208
    4ad8:	90 83       	st	Z, r25
    4ada:	80 5d       	subi	r24, 0xD0	; 208
    4adc:	81 83       	std	Z+1, r24	; 0x01
    4ade:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x2>
    4ae2:	df 91       	pop	r29
    4ae4:	cf 91       	pop	r28
    4ae6:	1f 91       	pop	r17
    4ae8:	0f 91       	pop	r16
    4aea:	08 95       	ret

00004aec <LCDStringOut>:
    4aec:	0f 93       	push	r16
    4aee:	1f 93       	push	r17
    4af0:	cf 93       	push	r28
    4af2:	8e e1       	ldi	r24, 0x1E	; 30
    4af4:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    4af8:	c0 e0       	ldi	r28, 0x00	; 0
    4afa:	06 e4       	ldi	r16, 0x46	; 70
    4afc:	12 e0       	ldi	r17, 0x02	; 2
    4afe:	0b c0       	rjmp	.+22     	; 0x4b16 <LCDStringOut+0x2a>
    4b00:	f8 01       	movw	r30, r16
    4b02:	80 81       	ld	r24, Z
    4b04:	88 23       	and	r24, r24
    4b06:	19 f0       	breq	.+6      	; 0x4b0e <LCDStringOut+0x22>
    4b08:	0f 5f       	subi	r16, 0xFF	; 255
    4b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <LCDStringOut+0x24>
    4b0e:	80 e2       	ldi	r24, 0x20	; 32
    4b10:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    4b14:	cf 5f       	subi	r28, 0xFF	; 255
    4b16:	ca 30       	cpi	r28, 0x0A	; 10
    4b18:	98 f3       	brcs	.-26     	; 0x4b00 <LCDStringOut+0x14>
    4b1a:	cf 91       	pop	r28
    4b1c:	1f 91       	pop	r17
    4b1e:	0f 91       	pop	r16
    4b20:	08 95       	ret

00004b22 <nibbleCheckOvfl>:
    4b22:	8a 30       	cpi	r24, 0x0A	; 10
    4b24:	1c f4       	brge	.+6      	; 0x4b2c <nibbleCheckOvfl+0xa>
    4b26:	88 23       	and	r24, r24
    4b28:	1c f0       	brlt	.+6      	; 0x4b30 <nibbleCheckOvfl+0xe>
    4b2a:	08 95       	ret
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	08 95       	ret
    4b30:	89 e0       	ldi	r24, 0x09	; 9
    4b32:	08 95       	ret

00004b34 <nibbleChange>:
    4b34:	0f 93       	push	r16
    4b36:	1f 93       	push	r17
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	c8 2f       	mov	r28, r24
    4b3e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    4b42:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    4b46:	31 96       	adiw	r30, 0x01	; 1
    4b48:	84 91       	lpm	r24, Z
    4b4a:	28 2f       	mov	r18, r24
    4b4c:	20 71       	andi	r18, 0x10	; 16
    4b4e:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4b52:	8e 2f       	mov	r24, r30
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	fc 01       	movw	r30, r24
    4b58:	32 97       	sbiw	r30, 0x02	; 2
    4b5a:	ed 30       	cpi	r30, 0x0D	; 13
    4b5c:	f1 05       	cpc	r31, r1
    4b5e:	08 f0       	brcs	.+2      	; 0x4b62 <nibbleChange+0x2e>
    4b60:	93 c1       	rjmp	.+806    	; 0x4e88 <nibbleChange+0x354>
    4b62:	88 27       	eor	r24, r24
    4b64:	e4 57       	subi	r30, 0x74	; 116
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	8f 4f       	sbci	r24, 0xFF	; 255
    4b6a:	0c 94 8b 3f 	jmp	0x7f16	; 0x7f16 <__tablejump2__>
    4b6e:	d0 e0       	ldi	r29, 0x00	; 0
    4b70:	c6 51       	subi	r28, 0x16	; 22
    4b72:	da 4f       	sbci	r29, 0xFA	; 250
    4b74:	88 81       	ld	r24, Y
    4b76:	68 0f       	add	r22, r24
    4b78:	6f 70       	andi	r22, 0x0F	; 15
    4b7a:	68 83       	st	Y, r22
    4b7c:	85 c1       	rjmp	.+778    	; 0x4e88 <nibbleChange+0x354>
    4b7e:	21 11       	cpse	r18, r1
    4b80:	1b c0       	rjmp	.+54     	; 0x4bb8 <nibbleChange+0x84>
    4b82:	61 30       	cpi	r22, 0x01	; 1
    4b84:	41 f4       	brne	.+16     	; 0x4b96 <nibbleChange+0x62>
    4b86:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b8a:	80 31       	cpi	r24, 0x10	; 16
    4b8c:	20 f0       	brcs	.+8      	; 0x4b96 <nibbleChange+0x62>
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
    4b90:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4b94:	79 c1       	rjmp	.+754    	; 0x4e88 <nibbleChange+0x354>
    4b96:	6f 3f       	cpi	r22, 0xFF	; 255
    4b98:	49 f4       	brne	.+18     	; 0x4bac <nibbleChange+0x78>
    4b9a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b9e:	82 50       	subi	r24, 0x02	; 2
    4ba0:	8f 30       	cpi	r24, 0x0F	; 15
    4ba2:	20 f0       	brcs	.+8      	; 0x4bac <nibbleChange+0x78>
    4ba4:	80 e1       	ldi	r24, 0x10	; 16
    4ba6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4baa:	6e c1       	rjmp	.+732    	; 0x4e88 <nibbleChange+0x354>
    4bac:	ea ee       	ldi	r30, 0xEA	; 234
    4bae:	f5 e0       	ldi	r31, 0x05	; 5
    4bb0:	80 81       	ld	r24, Z
    4bb2:	68 0f       	add	r22, r24
    4bb4:	60 83       	st	Z, r22
    4bb6:	68 c1       	rjmp	.+720    	; 0x4e88 <nibbleChange+0x354>
    4bb8:	61 30       	cpi	r22, 0x01	; 1
    4bba:	41 f4       	brne	.+16     	; 0x4bcc <nibbleChange+0x98>
    4bbc:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4bc0:	80 31       	cpi	r24, 0x10	; 16
    4bc2:	21 f4       	brne	.+8      	; 0x4bcc <nibbleChange+0x98>
    4bc4:	8f ef       	ldi	r24, 0xFF	; 255
    4bc6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4bca:	5e c1       	rjmp	.+700    	; 0x4e88 <nibbleChange+0x354>
    4bcc:	61 30       	cpi	r22, 0x01	; 1
    4bce:	41 f4       	brne	.+16     	; 0x4be0 <nibbleChange+0xac>
    4bd0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bd6:	21 f4       	brne	.+8      	; 0x4be0 <nibbleChange+0xac>
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4bde:	54 c1       	rjmp	.+680    	; 0x4e88 <nibbleChange+0x354>
    4be0:	6f 3f       	cpi	r22, 0xFF	; 255
    4be2:	41 f4       	brne	.+16     	; 0x4bf4 <nibbleChange+0xc0>
    4be4:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4be8:	8f 3f       	cpi	r24, 0xFF	; 255
    4bea:	21 f4       	brne	.+8      	; 0x4bf4 <nibbleChange+0xc0>
    4bec:	80 e1       	ldi	r24, 0x10	; 16
    4bee:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4bf2:	4a c1       	rjmp	.+660    	; 0x4e88 <nibbleChange+0x354>
    4bf4:	6f 3f       	cpi	r22, 0xFF	; 255
    4bf6:	41 f4       	brne	.+16     	; 0x4c08 <nibbleChange+0xd4>
    4bf8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4bfc:	81 30       	cpi	r24, 0x01	; 1
    4bfe:	21 f4       	brne	.+8      	; 0x4c08 <nibbleChange+0xd4>
    4c00:	8f ef       	ldi	r24, 0xFF	; 255
    4c02:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4c06:	40 c1       	rjmp	.+640    	; 0x4e88 <nibbleChange+0x354>
    4c08:	ea ee       	ldi	r30, 0xEA	; 234
    4c0a:	f5 e0       	ldi	r31, 0x05	; 5
    4c0c:	80 81       	ld	r24, Z
    4c0e:	68 0f       	add	r22, r24
    4c10:	60 83       	st	Z, r22
    4c12:	3a c1       	rjmp	.+628    	; 0x4e88 <nibbleChange+0x354>
    4c14:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4c18:	8f 3f       	cpi	r24, 0xFF	; 255
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <nibbleChange+0xea>
    4c1c:	c1 e0       	ldi	r28, 0x01	; 1
    4c1e:	c1 11       	cpse	r28, r1
    4c20:	16 c0       	rjmp	.+44     	; 0x4c4e <nibbleChange+0x11a>
    4c22:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4c26:	8c 30       	cpi	r24, 0x0C	; 12
    4c28:	50 f4       	brcc	.+20     	; 0x4c3e <nibbleChange+0x10a>
    4c2a:	8b 30       	cpi	r24, 0x0B	; 11
    4c2c:	11 f4       	brne	.+4      	; 0x4c32 <nibbleChange+0xfe>
    4c2e:	61 30       	cpi	r22, 0x01	; 1
    4c30:	41 f0       	breq	.+16     	; 0x4c42 <nibbleChange+0x10e>
    4c32:	81 11       	cpse	r24, r1
    4c34:	02 c0       	rjmp	.+4      	; 0x4c3a <nibbleChange+0x106>
    4c36:	6f 3f       	cpi	r22, 0xFF	; 255
    4c38:	31 f0       	breq	.+12     	; 0x4c46 <nibbleChange+0x112>
    4c3a:	68 0f       	add	r22, r24
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <nibbleChange+0x114>
    4c3e:	60 e0       	ldi	r22, 0x00	; 0
    4c40:	03 c0       	rjmp	.+6      	; 0x4c48 <nibbleChange+0x114>
    4c42:	60 e0       	ldi	r22, 0x00	; 0
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <nibbleChange+0x114>
    4c46:	6b e0       	ldi	r22, 0x0B	; 11
    4c48:	60 93 ea 05 	sts	0x05EA, r22	; 0x8005ea <nibble>
    4c4c:	2b c0       	rjmp	.+86     	; 0x4ca4 <nibbleChange+0x170>
    4c4e:	21 11       	cpse	r18, r1
    4c50:	0a c0       	rjmp	.+20     	; 0x4c66 <nibbleChange+0x132>
    4c52:	81 11       	cpse	r24, r1
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <nibbleChange+0x126>
    4c56:	6f 3f       	cpi	r22, 0xFF	; 255
    4c58:	c1 f0       	breq	.+48     	; 0x4c8a <nibbleChange+0x156>
    4c5a:	8a 30       	cpi	r24, 0x0A	; 10
    4c5c:	11 f4       	brne	.+4      	; 0x4c62 <nibbleChange+0x12e>
    4c5e:	61 30       	cpi	r22, 0x01	; 1
    4c60:	b1 f0       	breq	.+44     	; 0x4c8e <nibbleChange+0x15a>
    4c62:	68 0f       	add	r22, r24
    4c64:	1d c0       	rjmp	.+58     	; 0x4ca0 <nibbleChange+0x16c>
    4c66:	81 11       	cpse	r24, r1
    4c68:	02 c0       	rjmp	.+4      	; 0x4c6e <nibbleChange+0x13a>
    4c6a:	6f 3f       	cpi	r22, 0xFF	; 255
    4c6c:	91 f0       	breq	.+36     	; 0x4c92 <nibbleChange+0x15e>
    4c6e:	8a 30       	cpi	r24, 0x0A	; 10
    4c70:	11 f4       	brne	.+4      	; 0x4c76 <nibbleChange+0x142>
    4c72:	61 30       	cpi	r22, 0x01	; 1
    4c74:	81 f0       	breq	.+32     	; 0x4c96 <nibbleChange+0x162>
    4c76:	8f 3f       	cpi	r24, 0xFF	; 255
    4c78:	11 f4       	brne	.+4      	; 0x4c7e <nibbleChange+0x14a>
    4c7a:	61 30       	cpi	r22, 0x01	; 1
    4c7c:	71 f0       	breq	.+28     	; 0x4c9a <nibbleChange+0x166>
    4c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c80:	11 f4       	brne	.+4      	; 0x4c86 <nibbleChange+0x152>
    4c82:	6f 3f       	cpi	r22, 0xFF	; 255
    4c84:	61 f0       	breq	.+24     	; 0x4c9e <nibbleChange+0x16a>
    4c86:	68 0f       	add	r22, r24
    4c88:	0b c0       	rjmp	.+22     	; 0x4ca0 <nibbleChange+0x16c>
    4c8a:	6a e0       	ldi	r22, 0x0A	; 10
    4c8c:	09 c0       	rjmp	.+18     	; 0x4ca0 <nibbleChange+0x16c>
    4c8e:	60 e0       	ldi	r22, 0x00	; 0
    4c90:	07 c0       	rjmp	.+14     	; 0x4ca0 <nibbleChange+0x16c>
    4c92:	6f ef       	ldi	r22, 0xFF	; 255
    4c94:	05 c0       	rjmp	.+10     	; 0x4ca0 <nibbleChange+0x16c>
    4c96:	6f ef       	ldi	r22, 0xFF	; 255
    4c98:	03 c0       	rjmp	.+6      	; 0x4ca0 <nibbleChange+0x16c>
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	01 c0       	rjmp	.+2      	; 0x4ca0 <nibbleChange+0x16c>
    4c9e:	6a e0       	ldi	r22, 0x0A	; 10
    4ca0:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4ca4:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4ca8:	9f 3f       	cpi	r25, 0xFF	; 255
    4caa:	09 f4       	brne	.+2      	; 0x4cae <nibbleChange+0x17a>
    4cac:	ed c0       	rjmp	.+474    	; 0x4e88 <nibbleChange+0x354>
    4cae:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <nibbleChange+0x184>
    4cb6:	e8 c0       	rjmp	.+464    	; 0x4e88 <nibbleChange+0x354>
    4cb8:	28 2f       	mov	r18, r24
    4cba:	22 0f       	add	r18, r18
    4cbc:	82 0f       	add	r24, r18
    4cbe:	28 2f       	mov	r18, r24
    4cc0:	22 0f       	add	r18, r18
    4cc2:	22 0f       	add	r18, r18
    4cc4:	92 0f       	add	r25, r18
    4cc6:	0a f0       	brmi	.+2      	; 0x4cca <nibbleChange+0x196>
    4cc8:	df c0       	rjmp	.+446    	; 0x4e88 <nibbleChange+0x354>
    4cca:	ea ee       	ldi	r30, 0xEA	; 234
    4ccc:	f5 e0       	ldi	r31, 0x05	; 5
    4cce:	87 e0       	ldi	r24, 0x07	; 7
    4cd0:	80 83       	st	Z, r24
    4cd2:	8a e0       	ldi	r24, 0x0A	; 10
    4cd4:	81 83       	std	Z+1, r24	; 0x01
    4cd6:	d8 c0       	rjmp	.+432    	; 0x4e88 <nibbleChange+0x354>
    4cd8:	c1 11       	cpse	r28, r1
    4cda:	07 c0       	rjmp	.+14     	; 0x4cea <nibbleChange+0x1b6>
    4cdc:	ea ee       	ldi	r30, 0xEA	; 234
    4cde:	f5 e0       	ldi	r31, 0x05	; 5
    4ce0:	80 81       	ld	r24, Z
    4ce2:	68 0f       	add	r22, r24
    4ce4:	67 70       	andi	r22, 0x07	; 7
    4ce6:	60 83       	st	Z, r22
    4ce8:	cf c0       	rjmp	.+414    	; 0x4e88 <nibbleChange+0x354>
    4cea:	d0 e0       	ldi	r29, 0x00	; 0
    4cec:	0a ee       	ldi	r16, 0xEA	; 234
    4cee:	15 e0       	ldi	r17, 0x05	; 5
    4cf0:	c6 51       	subi	r28, 0x16	; 22
    4cf2:	da 4f       	sbci	r29, 0xFA	; 250
    4cf4:	88 81       	ld	r24, Y
    4cf6:	86 0f       	add	r24, r22
    4cf8:	14 df       	rcall	.-472    	; 0x4b22 <nibbleCheckOvfl>
    4cfa:	88 83       	st	Y, r24
    4cfc:	f8 01       	movw	r30, r16
    4cfe:	81 81       	ldd	r24, Z+1	; 0x01
    4d00:	92 81       	ldd	r25, Z+2	; 0x02
    4d02:	88 0f       	add	r24, r24
    4d04:	28 2f       	mov	r18, r24
    4d06:	22 0f       	add	r18, r18
    4d08:	22 0f       	add	r18, r18
    4d0a:	82 0f       	add	r24, r18
    4d0c:	89 0f       	add	r24, r25
    4d0e:	80 32       	cpi	r24, 0x20	; 32
    4d10:	2c f0       	brlt	.+10     	; 0x4d1c <nibbleChange+0x1e8>
    4d12:	83 e0       	ldi	r24, 0x03	; 3
    4d14:	81 83       	std	Z+1, r24	; 0x01
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	82 83       	std	Z+2, r24	; 0x02
    4d1a:	b6 c0       	rjmp	.+364    	; 0x4e88 <nibbleChange+0x354>
    4d1c:	88 23       	and	r24, r24
    4d1e:	0c f0       	brlt	.+2      	; 0x4d22 <nibbleChange+0x1ee>
    4d20:	b3 c0       	rjmp	.+358    	; 0x4e88 <nibbleChange+0x354>
    4d22:	ea ee       	ldi	r30, 0xEA	; 234
    4d24:	f5 e0       	ldi	r31, 0x05	; 5
    4d26:	11 82       	std	Z+1, r1	; 0x01
    4d28:	12 82       	std	Z+2, r1	; 0x02
    4d2a:	ae c0       	rjmp	.+348    	; 0x4e88 <nibbleChange+0x354>
    4d2c:	d0 e0       	ldi	r29, 0x00	; 0
    4d2e:	0a ee       	ldi	r16, 0xEA	; 234
    4d30:	15 e0       	ldi	r17, 0x05	; 5
    4d32:	c6 51       	subi	r28, 0x16	; 22
    4d34:	da 4f       	sbci	r29, 0xFA	; 250
    4d36:	88 81       	ld	r24, Y
    4d38:	86 0f       	add	r24, r22
    4d3a:	f3 de       	rcall	.-538    	; 0x4b22 <nibbleCheckOvfl>
    4d3c:	88 83       	st	Y, r24
    4d3e:	f8 01       	movw	r30, r16
    4d40:	20 81       	ld	r18, Z
    4d42:	81 81       	ldd	r24, Z+1	; 0x01
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	ac 01       	movw	r20, r24
    4d48:	44 0f       	add	r20, r20
    4d4a:	55 1f       	adc	r21, r21
    4d4c:	88 0f       	add	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	88 0f       	add	r24, r24
    4d52:	99 1f       	adc	r25, r25
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	84 0f       	add	r24, r20
    4d5a:	95 1f       	adc	r25, r21
    4d5c:	f4 e6       	ldi	r31, 0x64	; 100
    4d5e:	2f 9f       	mul	r18, r31
    4d60:	80 0d       	add	r24, r0
    4d62:	91 1d       	adc	r25, r1
    4d64:	11 24       	eor	r1, r1
    4d66:	f8 01       	movw	r30, r16
    4d68:	22 81       	ldd	r18, Z+2	; 0x02
    4d6a:	82 0f       	add	r24, r18
    4d6c:	91 1d       	adc	r25, r1
    4d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d70:	91 05       	cpc	r25, r1
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <nibbleChange+0x242>
    4d74:	0c f4       	brge	.+2      	; 0x4d78 <nibbleChange+0x244>
    4d76:	88 c0       	rjmp	.+272    	; 0x4e88 <nibbleChange+0x354>
    4d78:	82 e0       	ldi	r24, 0x02	; 2
    4d7a:	80 83       	st	Z, r24
    4d7c:	85 e0       	ldi	r24, 0x05	; 5
    4d7e:	81 83       	std	Z+1, r24	; 0x01
    4d80:	82 83       	std	Z+2, r24	; 0x02
    4d82:	82 c0       	rjmp	.+260    	; 0x4e88 <nibbleChange+0x354>
    4d84:	22 23       	and	r18, r18
    4d86:	a1 f0       	breq	.+40     	; 0x4db0 <nibbleChange+0x27c>
    4d88:	d0 e0       	ldi	r29, 0x00	; 0
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e6 51       	subi	r30, 0x16	; 22
    4d8e:	fa 4f       	sbci	r31, 0xFA	; 250
    4d90:	80 81       	ld	r24, Z
    4d92:	68 0f       	add	r22, r24
    4d94:	60 83       	st	Z, r22
    4d96:	64 30       	cpi	r22, 0x04	; 4
    4d98:	19 f4       	brne	.+6      	; 0x4da0 <nibbleChange+0x26c>
    4d9a:	8f ef       	ldi	r24, 0xFF	; 255
    4d9c:	80 83       	st	Z, r24
    4d9e:	74 c0       	rjmp	.+232    	; 0x4e88 <nibbleChange+0x354>
    4da0:	6e 3f       	cpi	r22, 0xFE	; 254
    4da2:	09 f0       	breq	.+2      	; 0x4da6 <nibbleChange+0x272>
    4da4:	71 c0       	rjmp	.+226    	; 0x4e88 <nibbleChange+0x354>
    4da6:	c6 51       	subi	r28, 0x16	; 22
    4da8:	da 4f       	sbci	r29, 0xFA	; 250
    4daa:	83 e0       	ldi	r24, 0x03	; 3
    4dac:	88 83       	st	Y, r24
    4dae:	6c c0       	rjmp	.+216    	; 0x4e88 <nibbleChange+0x354>
    4db0:	d0 e0       	ldi	r29, 0x00	; 0
    4db2:	fe 01       	movw	r30, r28
    4db4:	e6 51       	subi	r30, 0x16	; 22
    4db6:	fa 4f       	sbci	r31, 0xFA	; 250
    4db8:	80 81       	ld	r24, Z
    4dba:	81 11       	cpse	r24, r1
    4dbc:	05 c0       	rjmp	.+10     	; 0x4dc8 <nibbleChange+0x294>
    4dbe:	6f 3f       	cpi	r22, 0xFF	; 255
    4dc0:	19 f4       	brne	.+6      	; 0x4dc8 <nibbleChange+0x294>
    4dc2:	83 e0       	ldi	r24, 0x03	; 3
    4dc4:	80 83       	st	Z, r24
    4dc6:	60 c0       	rjmp	.+192    	; 0x4e88 <nibbleChange+0x354>
    4dc8:	83 30       	cpi	r24, 0x03	; 3
    4dca:	31 f4       	brne	.+12     	; 0x4dd8 <nibbleChange+0x2a4>
    4dcc:	61 30       	cpi	r22, 0x01	; 1
    4dce:	21 f4       	brne	.+8      	; 0x4dd8 <nibbleChange+0x2a4>
    4dd0:	c6 51       	subi	r28, 0x16	; 22
    4dd2:	da 4f       	sbci	r29, 0xFA	; 250
    4dd4:	18 82       	st	Y, r1
    4dd6:	58 c0       	rjmp	.+176    	; 0x4e88 <nibbleChange+0x354>
    4dd8:	c6 51       	subi	r28, 0x16	; 22
    4dda:	da 4f       	sbci	r29, 0xFA	; 250
    4ddc:	68 0f       	add	r22, r24
    4dde:	68 83       	st	Y, r22
    4de0:	53 c0       	rjmp	.+166    	; 0x4e88 <nibbleChange+0x354>
    4de2:	d0 e0       	ldi	r29, 0x00	; 0
    4de4:	c6 51       	subi	r28, 0x16	; 22
    4de6:	da 4f       	sbci	r29, 0xFA	; 250
    4de8:	88 81       	ld	r24, Y
    4dea:	68 0f       	add	r22, r24
    4dec:	63 70       	andi	r22, 0x03	; 3
    4dee:	68 83       	st	Y, r22
    4df0:	4b c0       	rjmp	.+150    	; 0x4e88 <nibbleChange+0x354>
    4df2:	ea ee       	ldi	r30, 0xEA	; 234
    4df4:	f5 e0       	ldi	r31, 0x05	; 5
    4df6:	80 81       	ld	r24, Z
    4df8:	80 95       	com	r24
    4dfa:	80 83       	st	Z, r24
    4dfc:	45 c0       	rjmp	.+138    	; 0x4e88 <nibbleChange+0x354>
    4dfe:	d0 e0       	ldi	r29, 0x00	; 0
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	61 fd       	sbrc	r22, 1
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	c6 51       	subi	r28, 0x16	; 22
    4e08:	da 4f       	sbci	r29, 0xFA	; 250
    4e0a:	88 83       	st	Y, r24
    4e0c:	3d c0       	rjmp	.+122    	; 0x4e88 <nibbleChange+0x354>
    4e0e:	61 30       	cpi	r22, 0x01	; 1
    4e10:	41 f4       	brne	.+16     	; 0x4e22 <nibbleChange+0x2ee>
    4e12:	d0 e0       	ldi	r29, 0x00	; 0
    4e14:	c6 51       	subi	r28, 0x16	; 22
    4e16:	da 4f       	sbci	r29, 0xFA	; 250
    4e18:	88 81       	ld	r24, Y
    4e1a:	87 70       	andi	r24, 0x07	; 7
    4e1c:	8f 5f       	subi	r24, 0xFF	; 255
    4e1e:	88 83       	st	Y, r24
    4e20:	33 c0       	rjmp	.+102    	; 0x4e88 <nibbleChange+0x354>
    4e22:	ec 2f       	mov	r30, r28
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	e6 51       	subi	r30, 0x16	; 22
    4e28:	fa 4f       	sbci	r31, 0xFA	; 250
    4e2a:	80 81       	ld	r24, Z
    4e2c:	82 50       	subi	r24, 0x02	; 2
    4e2e:	87 70       	andi	r24, 0x07	; 7
    4e30:	8f 5f       	subi	r24, 0xFF	; 255
    4e32:	80 83       	st	Z, r24
    4e34:	29 c0       	rjmp	.+82     	; 0x4e88 <nibbleChange+0x354>
    4e36:	ea ee       	ldi	r30, 0xEA	; 234
    4e38:	f5 e0       	ldi	r31, 0x05	; 5
    4e3a:	90 81       	ld	r25, Z
    4e3c:	81 81       	ldd	r24, Z+1	; 0x01
    4e3e:	99 0f       	add	r25, r25
    4e40:	29 2f       	mov	r18, r25
    4e42:	22 0f       	add	r18, r18
    4e44:	22 0f       	add	r18, r18
    4e46:	92 0f       	add	r25, r18
    4e48:	89 0f       	add	r24, r25
    4e4a:	c1 11       	cpse	r28, r1
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <nibbleChange+0x328>
    4e4e:	66 0f       	add	r22, r22
    4e50:	96 2f       	mov	r25, r22
    4e52:	99 0f       	add	r25, r25
    4e54:	99 0f       	add	r25, r25
    4e56:	69 0f       	add	r22, r25
    4e58:	68 0f       	add	r22, r24
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <nibbleChange+0x32a>
    4e5c:	68 0f       	add	r22, r24
    4e5e:	66 23       	and	r22, r22
    4e60:	1c f0       	brlt	.+6      	; 0x4e68 <nibbleChange+0x334>
    4e62:	61 34       	cpi	r22, 0x41	; 65
    4e64:	1c f4       	brge	.+6      	; 0x4e6c <nibbleChange+0x338>
    4e66:	03 c0       	rjmp	.+6      	; 0x4e6e <nibbleChange+0x33a>
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	01 c0       	rjmp	.+2      	; 0x4e6e <nibbleChange+0x33a>
    4e6c:	60 e0       	ldi	r22, 0x00	; 0
    4e6e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    4e72:	06 c0       	rjmp	.+12     	; 0x4e80 <nibbleChange+0x34c>
    4e74:	ea ee       	ldi	r30, 0xEA	; 234
    4e76:	f5 e0       	ldi	r31, 0x05	; 5
    4e78:	80 81       	ld	r24, Z
    4e7a:	8f 5f       	subi	r24, 0xFF	; 255
    4e7c:	80 83       	st	Z, r24
    4e7e:	6a 50       	subi	r22, 0x0A	; 10
    4e80:	6a 30       	cpi	r22, 0x0A	; 10
    4e82:	c4 f7       	brge	.-16     	; 0x4e74 <nibbleChange+0x340>
    4e84:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	1f 91       	pop	r17
    4e8e:	0f 91       	pop	r16
    4e90:	08 95       	ret

00004e92 <nibbleToData>:
    4e92:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4e96:	8e 2f       	mov	r24, r30
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	32 97       	sbiw	r30, 0x02	; 2
    4e9e:	ed 30       	cpi	r30, 0x0D	; 13
    4ea0:	f1 05       	cpc	r31, r1
    4ea2:	08 f0       	brcs	.+2      	; 0x4ea6 <nibbleToData+0x14>
    4ea4:	da c0       	rjmp	.+436    	; 0x505a <nibbleToData+0x1c8>
    4ea6:	88 27       	eor	r24, r24
    4ea8:	e7 56       	subi	r30, 0x67	; 103
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	8f 4f       	sbci	r24, 0xFF	; 255
    4eae:	0c 94 8b 3f 	jmp	0x7f16	; 0x7f16 <__tablejump2__>
    4eb2:	ea ee       	ldi	r30, 0xEA	; 234
    4eb4:	f5 e0       	ldi	r31, 0x05	; 5
    4eb6:	80 81       	ld	r24, Z
    4eb8:	20 e1       	ldi	r18, 0x10	; 16
    4eba:	82 9f       	mul	r24, r18
    4ebc:	c0 01       	movw	r24, r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	91 81       	ldd	r25, Z+1	; 0x01
    4ec2:	9f 70       	andi	r25, 0x0F	; 15
    4ec4:	89 2b       	or	r24, r25
    4ec6:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4eca:	08 95       	ret
    4ecc:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4ed0:	8f ef       	ldi	r24, 0xFF	; 255
    4ed2:	89 0f       	add	r24, r25
    4ed4:	80 31       	cpi	r24, 0x10	; 16
    4ed6:	18 f0       	brcs	.+6      	; 0x4ede <nibbleToData+0x4c>
    4ed8:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4edc:	08 95       	ret
    4ede:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ee2:	08 95       	ret
    4ee4:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4ee8:	9f 3f       	cpi	r25, 0xFF	; 255
    4eea:	21 f0       	breq	.+8      	; 0x4ef4 <nibbleToData+0x62>
    4eec:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ef2:	21 f4       	brne	.+8      	; 0x4efc <nibbleToData+0x6a>
    4ef4:	8f ef       	ldi	r24, 0xFF	; 255
    4ef6:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4efa:	08 95       	ret
    4efc:	28 2f       	mov	r18, r24
    4efe:	22 0f       	add	r18, r18
    4f00:	82 0f       	add	r24, r18
    4f02:	88 0f       	add	r24, r24
    4f04:	88 0f       	add	r24, r24
    4f06:	89 0f       	add	r24, r25
    4f08:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f0c:	08 95       	ret
    4f0e:	ea ee       	ldi	r30, 0xEA	; 234
    4f10:	f5 e0       	ldi	r31, 0x05	; 5
    4f12:	80 81       	ld	r24, Z
    4f14:	30 e2       	ldi	r19, 0x20	; 32
    4f16:	83 9f       	mul	r24, r19
    4f18:	c0 01       	movw	r24, r0
    4f1a:	11 24       	eor	r1, r1
    4f1c:	21 81       	ldd	r18, Z+1	; 0x01
    4f1e:	32 81       	ldd	r19, Z+2	; 0x02
    4f20:	22 0f       	add	r18, r18
    4f22:	42 2f       	mov	r20, r18
    4f24:	44 0f       	add	r20, r20
    4f26:	44 0f       	add	r20, r20
    4f28:	24 0f       	add	r18, r20
    4f2a:	23 0f       	add	r18, r19
    4f2c:	20 32       	cpi	r18, 0x20	; 32
    4f2e:	20 f0       	brcs	.+8      	; 0x4f38 <nibbleToData+0xa6>
    4f30:	8f 61       	ori	r24, 0x1F	; 31
    4f32:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f36:	08 95       	ret
    4f38:	82 2b       	or	r24, r18
    4f3a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f3e:	08 95       	ret
    4f40:	ea ee       	ldi	r30, 0xEA	; 234
    4f42:	f5 e0       	ldi	r31, 0x05	; 5
    4f44:	20 81       	ld	r18, Z
    4f46:	81 81       	ldd	r24, Z+1	; 0x01
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	ac 01       	movw	r20, r24
    4f4c:	44 0f       	add	r20, r20
    4f4e:	55 1f       	adc	r21, r21
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	88 0f       	add	r24, r24
    4f56:	99 1f       	adc	r25, r25
    4f58:	88 0f       	add	r24, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	84 0f       	add	r24, r20
    4f5e:	95 1f       	adc	r25, r21
    4f60:	34 e6       	ldi	r19, 0x64	; 100
    4f62:	23 9f       	mul	r18, r19
    4f64:	80 0d       	add	r24, r0
    4f66:	91 1d       	adc	r25, r1
    4f68:	11 24       	eor	r1, r1
    4f6a:	22 81       	ldd	r18, Z+2	; 0x02
    4f6c:	82 0f       	add	r24, r18
    4f6e:	91 1d       	adc	r25, r1
    4f70:	8f 3f       	cpi	r24, 0xFF	; 255
    4f72:	91 05       	cpc	r25, r1
    4f74:	29 f0       	breq	.+10     	; 0x4f80 <nibbleToData+0xee>
    4f76:	20 f0       	brcs	.+8      	; 0x4f80 <nibbleToData+0xee>
    4f78:	8f ef       	ldi	r24, 0xFF	; 255
    4f7a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f7e:	08 95       	ret
    4f80:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f84:	08 95       	ret
    4f86:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4f8a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f8e:	84 30       	cpi	r24, 0x04	; 4
    4f90:	08 f4       	brcc	.+2      	; 0x4f94 <nibbleToData+0x102>
    4f92:	63 c0       	rjmp	.+198    	; 0x505a <nibbleToData+0x1c8>
    4f94:	8f ef       	ldi	r24, 0xFF	; 255
    4f96:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f9a:	08 95       	ret
    4f9c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4fa0:	83 70       	andi	r24, 0x03	; 3
    4fa2:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4fa6:	08 95       	ret
    4fa8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4fac:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4fb0:	08 95       	ret
    4fb2:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <dataEntry>
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	0c c0       	rjmp	.+24     	; 0x4fd2 <nibbleToData+0x140>
    4fba:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <dataEntry>
    4fbe:	99 0f       	add	r25, r25
    4fc0:	e8 2f       	mov	r30, r24
    4fc2:	f0 e0       	ldi	r31, 0x00	; 0
    4fc4:	e6 51       	subi	r30, 0x16	; 22
    4fc6:	fa 4f       	sbci	r31, 0xFA	; 250
    4fc8:	20 81       	ld	r18, Z
    4fca:	92 0f       	add	r25, r18
    4fcc:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4fd0:	8f 5f       	subi	r24, 0xFF	; 255
    4fd2:	88 30       	cpi	r24, 0x08	; 8
    4fd4:	90 f3       	brcs	.-28     	; 0x4fba <nibbleToData+0x128>
    4fd6:	08 95       	ret
    4fd8:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <dataEntry32>
    4fdc:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <dataEntry32+0x1>
    4fe0:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <dataEntry32+0x2>
    4fe4:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <dataEntry32+0x3>
    4fe8:	a8 ec       	ldi	r26, 0xC8	; 200
    4fea:	b5 e0       	ldi	r27, 0x05	; 5
    4fec:	88 e0       	ldi	r24, 0x08	; 8
    4fee:	10 c0       	rjmp	.+32     	; 0x5010 <nibbleToData+0x17e>
    4ff0:	82 50       	subi	r24, 0x02	; 2
    4ff2:	f0 e0       	ldi	r31, 0x00	; 0
    4ff4:	e6 51       	subi	r30, 0x16	; 22
    4ff6:	fa 4f       	sbci	r31, 0xFA	; 250
    4ff8:	90 81       	ld	r25, Z
    4ffa:	e8 2f       	mov	r30, r24
    4ffc:	f0 e0       	ldi	r31, 0x00	; 0
    4ffe:	e6 51       	subi	r30, 0x16	; 22
    5000:	fa 4f       	sbci	r31, 0xFA	; 250
    5002:	20 81       	ld	r18, Z
    5004:	30 e1       	ldi	r19, 0x10	; 16
    5006:	23 9f       	mul	r18, r19
    5008:	90 0d       	add	r25, r0
    500a:	11 24       	eor	r1, r1
    500c:	9c 93       	st	X, r25
    500e:	11 96       	adiw	r26, 0x01	; 1
    5010:	ef ef       	ldi	r30, 0xFF	; 255
    5012:	e8 0f       	add	r30, r24
    5014:	81 11       	cpse	r24, r1
    5016:	ec cf       	rjmp	.-40     	; 0x4ff0 <nibbleToData+0x15e>
    5018:	08 95       	ret
    501a:	ea ee       	ldi	r30, 0xEA	; 234
    501c:	f5 e0       	ldi	r31, 0x05	; 5
    501e:	21 81       	ldd	r18, Z+1	; 0x01
    5020:	90 81       	ld	r25, Z
    5022:	89 2f       	mov	r24, r25
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	88 0f       	add	r24, r24
    5032:	99 1f       	adc	r25, r25
    5034:	9f ef       	ldi	r25, 0xFF	; 255
    5036:	92 0f       	add	r25, r18
    5038:	89 2b       	or	r24, r25
    503a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    503e:	08 95       	ret
    5040:	ea ee       	ldi	r30, 0xEA	; 234
    5042:	f5 e0       	ldi	r31, 0x05	; 5
    5044:	80 81       	ld	r24, Z
    5046:	91 81       	ldd	r25, Z+1	; 0x01
    5048:	88 0f       	add	r24, r24
    504a:	28 2f       	mov	r18, r24
    504c:	22 0f       	add	r18, r18
    504e:	22 0f       	add	r18, r18
    5050:	82 0f       	add	r24, r18
    5052:	89 0f       	add	r24, r25
    5054:	81 50       	subi	r24, 0x01	; 1
    5056:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    505a:	08 95       	ret

0000505c <menuTextOut>:
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	8c 01       	movw	r16, r24
    5066:	d6 2f       	mov	r29, r22
    5068:	c0 e0       	ldi	r28, 0x00	; 0
    506a:	0c c0       	rjmp	.+24     	; 0x5084 <menuTextOut+0x28>
    506c:	f8 01       	movw	r30, r16
    506e:	84 91       	lpm	r24, Z
    5070:	88 23       	and	r24, r24
    5072:	19 f0       	breq	.+6      	; 0x507a <menuTextOut+0x1e>
    5074:	0f 5f       	subi	r16, 0xFF	; 255
    5076:	1f 4f       	sbci	r17, 0xFF	; 255
    5078:	02 c0       	rjmp	.+4      	; 0x507e <menuTextOut+0x22>
    507a:	8d 2f       	mov	r24, r29
    507c:	d0 e2       	ldi	r29, 0x20	; 32
    507e:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    5082:	cf 5f       	subi	r28, 0xFF	; 255
    5084:	ca 30       	cpi	r28, 0x0A	; 10
    5086:	90 f3       	brcs	.-28     	; 0x506c <menuTextOut+0x10>
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	1f 91       	pop	r17
    508e:	0f 91       	pop	r16
    5090:	08 95       	ret

00005092 <menuParentMenuToLCD>:
    5092:	80 e4       	ldi	r24, 0x40	; 64
    5094:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    5098:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    509c:	e1 11       	cpse	r30, r1
    509e:	07 c0       	rjmp	.+14     	; 0x50ae <menuParentMenuToLCD+0x1c>
    50a0:	6a e3       	ldi	r22, 0x3A	; 58
    50a2:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <pMenuTopTitle>
    50a6:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <pMenuTopTitle+0x1>
    50aa:	d8 cf       	rjmp	.-80     	; 0x505c <menuTextOut>
    50ac:	08 95       	ret
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	31 97       	sbiw	r30, 0x01	; 1
    50b2:	ee 0f       	add	r30, r30
    50b4:	ff 1f       	adc	r31, r31
    50b6:	ef 55       	subi	r30, 0x5F	; 95
    50b8:	fa 4f       	sbci	r31, 0xFA	; 250
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	6a e3       	ldi	r22, 0x3A	; 58
    50c0:	02 96       	adiw	r24, 0x02	; 2
    50c2:	cc cf       	rjmp	.-104    	; 0x505c <menuTextOut>
    50c4:	08 95       	ret

000050c6 <menuDisplayValue>:
    50c6:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    50ca:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    50ce:	84 91       	lpm	r24, Z
    50d0:	8f 73       	andi	r24, 0x3F	; 63
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	02 97       	sbiw	r24, 0x02	; 2
    50d6:	1c f0       	brlt	.+6      	; 0x50de <menuDisplayValue+0x18>
    50d8:	c8 da       	rcall	.-2672   	; 0x466a <dataToNibbles>
    50da:	ba db       	rcall	.-2188   	; 0x4850 <nibbleToLCDstring>
    50dc:	07 cd       	rjmp	.-1522   	; 0x4aec <LCDStringOut>
    50de:	08 95       	ret

000050e0 <menuCursorSetDataNibble>:
    50e0:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    50e4:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    50e8:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    50ec:	e8 0f       	add	r30, r24
    50ee:	f1 1d       	adc	r31, r1
    50f0:	31 96       	adiw	r30, 0x01	; 1
    50f2:	84 91       	lpm	r24, Z
    50f4:	82 5e       	subi	r24, 0xE2	; 226
    50f6:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    50fa:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5104:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5108:	84 91       	lpm	r24, Z
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	01 97       	sbiw	r24, 0x01	; 1
    510e:	28 17       	cp	r18, r24
    5110:	39 07       	cpc	r19, r25
    5112:	14 f4       	brge	.+4      	; 0x5118 <menuCursorSetDataNibble+0x38>
    5114:	68 da       	rcall	.-2864   	; 0x45e6 <softkeyRight>
    5116:	03 c0       	rjmp	.+6      	; 0x511e <menuCursorSetDataNibble+0x3e>
    5118:	83 e0       	ldi	r24, 0x03	; 3
    511a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    511e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    5122:	88 23       	and	r24, r24
    5124:	11 f0       	breq	.+4      	; 0x512a <menuCursorSetDataNibble+0x4a>
    5126:	59 da       	rcall	.-2894   	; 0x45da <softkeyLeft>
    5128:	03 c0       	rjmp	.+6      	; 0x5130 <menuCursorSetDataNibble+0x50>
    512a:	82 e0       	ldi	r24, 0x02	; 2
    512c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5130:	78 da       	rcall	.-2832   	; 0x4622 <softkeyPlus>
    5132:	89 da       	rcall	.-2798   	; 0x4646 <softkeyMinus>
    5134:	0c 94 28 3f 	jmp	0x7e50	; 0x7e50 <keylabel_toLCD>
    5138:	08 95       	ret

0000513a <menuCursorSetExtra>:
    513a:	84 e1       	ldi	r24, 0x14	; 20
    513c:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <lcd_goto>
    5140:	08 95       	ret

00005142 <menuOnEnterStatusMidiIn>:
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	f8 df       	rcall	.-16     	; 0x513a <menuCursorSetExtra>
    514a:	8d e2       	ldi	r24, 0x2D	; 45
    514c:	94 e0       	ldi	r25, 0x04	; 4
    514e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    5152:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5156:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    515a:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <lcd_wordout>
    515e:	8d e2       	ldi	r24, 0x2D	; 45
    5160:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    5164:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5168:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    516c:	04 97       	sbiw	r24, 0x04	; 4
    516e:	30 f4       	brcc	.+12     	; 0x517c <menuOnEnterStatusMidiIn+0x3a>
    5170:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5174:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    5178:	c8 2f       	mov	r28, r24
    517a:	01 c0       	rjmp	.+2      	; 0x517e <menuOnEnterStatusMidiIn+0x3c>
    517c:	c4 e0       	ldi	r28, 0x04	; 4
    517e:	00 91 6e 16 	lds	r16, 0x166E	; 0x80166e <midiRxInIndex>
    5182:	10 e0       	ldi	r17, 0x00	; 0
    5184:	06 59       	subi	r16, 0x96	; 150
    5186:	1b 4e       	sbci	r17, 0xEB	; 235
    5188:	13 c0       	rjmp	.+38     	; 0x51b0 <menuOnEnterStatusMidiIn+0x6e>
    518a:	84 e1       	ldi	r24, 0x14	; 20
    518c:	0b 36       	cpi	r16, 0x6B	; 107
    518e:	18 07       	cpc	r17, r24
    5190:	10 f0       	brcs	.+4      	; 0x5196 <menuOnEnterStatusMidiIn+0x54>
    5192:	f8 01       	movw	r30, r16
    5194:	02 c0       	rjmp	.+4      	; 0x519a <menuOnEnterStatusMidiIn+0x58>
    5196:	ea e6       	ldi	r30, 0x6A	; 106
    5198:	f5 e1       	ldi	r31, 0x15	; 21
    519a:	8f 01       	movw	r16, r30
    519c:	01 50       	subi	r16, 0x01	; 1
    519e:	11 09       	sbc	r17, r1
    51a0:	80 81       	ld	r24, Z
    51a2:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <lcd_hexout>
    51a6:	c1 50       	subi	r28, 0x01	; 1
    51a8:	19 f0       	breq	.+6      	; 0x51b0 <menuOnEnterStatusMidiIn+0x6e>
    51aa:	80 e2       	ldi	r24, 0x20	; 32
    51ac:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    51b0:	c1 11       	cpse	r28, r1
    51b2:	eb cf       	rjmp	.-42     	; 0x518a <menuOnEnterStatusMidiIn+0x48>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	08 95       	ret

000051be <menuOnEnterStatusMidiOut>:
    51be:	0f 93       	push	r16
    51c0:	1f 93       	push	r17
    51c2:	cf 93       	push	r28
    51c4:	ba df       	rcall	.-140    	; 0x513a <menuCursorSetExtra>
    51c6:	88 e2       	ldi	r24, 0x28	; 40
    51c8:	94 e0       	ldi	r25, 0x04	; 4
    51ca:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    51ce:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    51d2:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    51d6:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <lcd_wordout>
    51da:	8d e2       	ldi	r24, 0x2D	; 45
    51dc:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    51e0:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    51e4:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    51e8:	04 97       	sbiw	r24, 0x04	; 4
    51ea:	30 f4       	brcc	.+12     	; 0x51f8 <menuOnEnterStatusMidiOut+0x3a>
    51ec:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    51f0:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    51f4:	c8 2f       	mov	r28, r24
    51f6:	01 c0       	rjmp	.+2      	; 0x51fa <menuOnEnterStatusMidiOut+0x3c>
    51f8:	c4 e0       	ldi	r28, 0x04	; 4
    51fa:	00 91 19 14 	lds	r16, 0x1419	; 0x801419 <midiTxInIndex>
    51fe:	10 e0       	ldi	r17, 0x00	; 0
    5200:	05 59       	subi	r16, 0x95	; 149
    5202:	1a 4e       	sbci	r17, 0xEA	; 234
    5204:	13 c0       	rjmp	.+38     	; 0x522c <menuOnEnterStatusMidiOut+0x6e>
    5206:	85 e1       	ldi	r24, 0x15	; 21
    5208:	0c 36       	cpi	r16, 0x6C	; 108
    520a:	18 07       	cpc	r17, r24
    520c:	10 f0       	brcs	.+4      	; 0x5212 <menuOnEnterStatusMidiOut+0x54>
    520e:	f8 01       	movw	r30, r16
    5210:	02 c0       	rjmp	.+4      	; 0x5216 <menuOnEnterStatusMidiOut+0x58>
    5212:	eb e6       	ldi	r30, 0x6B	; 107
    5214:	f6 e1       	ldi	r31, 0x16	; 22
    5216:	8f 01       	movw	r16, r30
    5218:	01 50       	subi	r16, 0x01	; 1
    521a:	11 09       	sbc	r17, r1
    521c:	80 81       	ld	r24, Z
    521e:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <lcd_hexout>
    5222:	c1 50       	subi	r28, 0x01	; 1
    5224:	19 f0       	breq	.+6      	; 0x522c <menuOnEnterStatusMidiOut+0x6e>
    5226:	80 e2       	ldi	r24, 0x20	; 32
    5228:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    522c:	c1 11       	cpse	r28, r1
    522e:	eb cf       	rjmp	.-42     	; 0x5206 <menuOnEnterStatusMidiOut+0x48>
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	cf 91       	pop	r28
    5234:	1f 91       	pop	r17
    5236:	0f 91       	pop	r16
    5238:	08 95       	ret

0000523a <menuOnEnterLogDisp>:
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	cf 93       	push	r28
    5240:	8f 3f       	cpi	r24, 0xFF	; 255
    5242:	a9 f4       	brne	.+42     	; 0x526e <menuOnEnterLogDisp+0x34>
    5244:	0e 94 33 16 	call	0x2c66	; 0x2c66 <log_count>
    5248:	81 50       	subi	r24, 0x01	; 1
    524a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3110>
    524e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <showText.3111>
    5252:	60 e8       	ldi	r22, 0x80	; 128
    5254:	74 e1       	ldi	r23, 0x14	; 20
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    525c:	6a e7       	ldi	r22, 0x7A	; 122
    525e:	74 e1       	ldi	r23, 0x14	; 20
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    5266:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    526a:	cf ef       	ldi	r28, 0xFF	; 255
    526c:	2f c0       	rjmp	.+94     	; 0x52cc <menuOnEnterLogDisp+0x92>
    526e:	84 30       	cpi	r24, 0x04	; 4
    5270:	49 f4       	brne	.+18     	; 0x5284 <menuOnEnterLogDisp+0x4a>
    5272:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    5276:	88 23       	and	r24, r24
    5278:	21 f1       	breq	.+72     	; 0x52c2 <menuOnEnterLogDisp+0x88>
    527a:	81 50       	subi	r24, 0x01	; 1
    527c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3110>
    5280:	cf ef       	ldi	r28, 0xFF	; 255
    5282:	24 c0       	rjmp	.+72     	; 0x52cc <menuOnEnterLogDisp+0x92>
    5284:	81 30       	cpi	r24, 0x01	; 1
    5286:	91 f4       	brne	.+36     	; 0x52ac <menuOnEnterLogDisp+0x72>
    5288:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3110>
    528c:	10 e0       	ldi	r17, 0x00	; 0
    528e:	0f 5f       	subi	r16, 0xFF	; 255
    5290:	1f 4f       	sbci	r17, 0xFF	; 255
    5292:	0e 94 33 16 	call	0x2c66	; 0x2c66 <log_count>
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	08 17       	cp	r16, r24
    529a:	19 07       	cpc	r17, r25
    529c:	a4 f4       	brge	.+40     	; 0x52c6 <menuOnEnterLogDisp+0x8c>
    529e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    52a2:	8f 5f       	subi	r24, 0xFF	; 255
    52a4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3110>
    52a8:	cf ef       	ldi	r28, 0xFF	; 255
    52aa:	10 c0       	rjmp	.+32     	; 0x52cc <menuOnEnterLogDisp+0x92>
    52ac:	83 30       	cpi	r24, 0x03	; 3
    52ae:	11 f0       	breq	.+4      	; 0x52b4 <menuOnEnterLogDisp+0x7a>
    52b0:	85 30       	cpi	r24, 0x05	; 5
    52b2:	59 f4       	brne	.+22     	; 0x52ca <menuOnEnterLogDisp+0x90>
    52b4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3111>
    52b8:	80 95       	com	r24
    52ba:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <showText.3111>
    52be:	cf ef       	ldi	r28, 0xFF	; 255
    52c0:	05 c0       	rjmp	.+10     	; 0x52cc <menuOnEnterLogDisp+0x92>
    52c2:	cf ef       	ldi	r28, 0xFF	; 255
    52c4:	03 c0       	rjmp	.+6      	; 0x52cc <menuOnEnterLogDisp+0x92>
    52c6:	cf ef       	ldi	r28, 0xFF	; 255
    52c8:	01 c0       	rjmp	.+2      	; 0x52cc <menuOnEnterLogDisp+0x92>
    52ca:	c0 e0       	ldi	r28, 0x00	; 0
    52cc:	cf 3f       	cpi	r28, 0xFF	; 255
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <menuOnEnterLogDisp+0x98>
    52d0:	54 c0       	rjmp	.+168    	; 0x537a <menuOnEnterLogDisp+0x140>
    52d2:	33 df       	rcall	.-410    	; 0x513a <menuCursorSetExtra>
    52d4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <log_count>
    52d8:	81 11       	cpse	r24, r1
    52da:	06 c0       	rjmp	.+12     	; 0x52e8 <menuOnEnterLogDisp+0xae>
    52dc:	8b ee       	ldi	r24, 0xEB	; 235
    52de:	93 e0       	ldi	r25, 0x03	; 3
    52e0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    52e4:	c0 e0       	ldi	r28, 0x00	; 0
    52e6:	1d c0       	rjmp	.+58     	; 0x5322 <menuOnEnterLogDisp+0xe8>
    52e8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    52ec:	8f 5f       	subi	r24, 0xFF	; 255
    52ee:	0e 94 aa 3c 	call	0x7954	; 0x7954 <lcd_dec2out>
    52f2:	8a e3       	ldi	r24, 0x3A	; 58
    52f4:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    52f8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3111>
    52fc:	81 11       	cpse	r24, r1
    52fe:	08 c0       	rjmp	.+16     	; 0x5310 <menuOnEnterLogDisp+0xd6>
    5300:	60 e2       	ldi	r22, 0x20	; 32
    5302:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    5306:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <log_getShortTextFromIndex>
    530a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <lcd_puts>
    530e:	06 c0       	rjmp	.+12     	; 0x531c <menuOnEnterLogDisp+0xe2>
    5310:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    5314:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <log_getErrorText>
    5318:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <lcd_puts_P>
    531c:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <lcd_clrEol>
    5320:	0c df       	rcall	.-488    	; 0x513a <menuCursorSetExtra>
    5322:	61 e0       	ldi	r22, 0x01	; 1
    5324:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3111>
    5328:	8f 3f       	cpi	r24, 0xFF	; 255
    532a:	09 f0       	breq	.+2      	; 0x532e <menuOnEnterLogDisp+0xf4>
    532c:	60 e0       	ldi	r22, 0x00	; 0
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_statcheck>
    5334:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3110>
    5338:	10 e0       	ldi	r17, 0x00	; 0
    533a:	0f 5f       	subi	r16, 0xFF	; 255
    533c:	1f 4f       	sbci	r17, 0xFF	; 255
    533e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <log_count>
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	08 17       	cp	r16, r24
    5346:	19 07       	cpc	r17, r25
    5348:	34 f4       	brge	.+12     	; 0x5356 <menuOnEnterLogDisp+0x11c>
    534a:	6a e9       	ldi	r22, 0x9A	; 154
    534c:	74 e1       	ldi	r23, 0x14	; 20
    534e:	83 e0       	ldi	r24, 0x03	; 3
    5350:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    5354:	03 c0       	rjmp	.+6      	; 0x535c <menuOnEnterLogDisp+0x122>
    5356:	83 e0       	ldi	r24, 0x03	; 3
    5358:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    535c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3110>
    5360:	88 23       	and	r24, r24
    5362:	31 f0       	breq	.+12     	; 0x5370 <menuOnEnterLogDisp+0x136>
    5364:	68 e9       	ldi	r22, 0x98	; 152
    5366:	74 e1       	ldi	r23, 0x14	; 20
    5368:	82 e0       	ldi	r24, 0x02	; 2
    536a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
    536e:	03 c0       	rjmp	.+6      	; 0x5376 <menuOnEnterLogDisp+0x13c>
    5370:	82 e0       	ldi	r24, 0x02	; 2
    5372:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5376:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    537a:	8c 2f       	mov	r24, r28
    537c:	cf 91       	pop	r28
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	08 95       	ret

00005384 <menuCursorSetMenu>:
    5384:	8a e4       	ldi	r24, 0x4A	; 74
    5386:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <lcd_goto>
    538a:	08 95       	ret

0000538c <menu_OnEnterMidiPanic>:
    538c:	8a e0       	ldi	r24, 0x0A	; 10
    538e:	94 e0       	ldi	r25, 0x04	; 4
    5390:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <lcd_message_P>
    5394:	0e 94 94 38 	call	0x7128	; 0x7128 <midiSendAllNotesOff>
    5398:	f5 df       	rcall	.-22     	; 0x5384 <menuCursorSetMenu>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	08 95       	ret

0000539e <menuClearExtraDisp>:
    539e:	cd de       	rcall	.-614    	; 0x513a <menuCursorSetExtra>
    53a0:	8a e0       	ldi	r24, 0x0A	; 10
    53a2:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <lcd_blank>
    53a6:	08 95       	ret

000053a8 <menu_ClearDataDisp>:
    53a8:	8e e1       	ldi	r24, 0x1E	; 30
    53aa:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    53ae:	8a e0       	ldi	r24, 0x0A	; 10
    53b0:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <lcd_blank>
    53b4:	08 95       	ret

000053b6 <menu_ModuleTestExecute>:
    53b6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    53ba:	8f 3f       	cpi	r24, 0xFF	; 255
    53bc:	11 f0       	breq	.+4      	; 0x53c2 <menu_ModuleTestExecute+0xc>
    53be:	8d 3f       	cpi	r24, 0xFD	; 253
    53c0:	79 f5       	brne	.+94     	; 0x5420 <menu_ModuleTestExecute+0x6a>
    53c2:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <lcd_cursoroff>
    53c6:	f0 df       	rcall	.-32     	; 0x53a8 <menu_ClearDataDisp>
    53c8:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <msgPipe_Handling>
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	ec e6       	ldi	r30, 0x6C	; 108
    53d0:	f2 e0       	ldi	r31, 0x02	; 2
    53d2:	07 c0       	rjmp	.+14     	; 0x53e2 <menu_ModuleTestExecute+0x2c>
    53d4:	21 81       	ldd	r18, Z+1	; 0x01
    53d6:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    53da:	82 2b       	or	r24, r18
    53dc:	81 83       	std	Z+1, r24	; 0x01
    53de:	38 96       	adiw	r30, 0x08	; 8
    53e0:	9f 5f       	subi	r25, 0xFF	; 255
    53e2:	90 32       	cpi	r25, 0x20	; 32
    53e4:	b8 f3       	brcs	.-18     	; 0x53d4 <menu_ModuleTestExecute+0x1e>
    53e6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    53ea:	8f 3f       	cpi	r24, 0xFF	; 255
    53ec:	19 f4       	brne	.+6      	; 0x53f4 <menu_ModuleTestExecute+0x3e>
    53ee:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <menu_TestModuleBitCounter>
    53f2:	5c c0       	rjmp	.+184    	; 0x54ac <menu_ModuleTestExecute+0xf6>
    53f4:	84 e0       	ldi	r24, 0x04	; 4
    53f6:	94 e0       	ldi	r25, 0x04	; 4
    53f8:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <lcd_message_P>
    53fc:	8e ef       	ldi	r24, 0xFE	; 254
    53fe:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    5402:	9f b7       	in	r25, 0x3f	; 63
    5404:	f8 94       	cli
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	06 c0       	rjmp	.+12     	; 0x5416 <menu_ModuleTestExecute+0x60>
    540a:	e0 e5       	ldi	r30, 0x50	; 80
    540c:	f2 e0       	ldi	r31, 0x02	; 2
    540e:	82 e0       	ldi	r24, 0x02	; 2
    5410:	84 87       	std	Z+12, r24	; 0x0c
    5412:	85 87       	std	Z+13, r24	; 0x0d
    5414:	80 e0       	ldi	r24, 0x00	; 0
    5416:	81 11       	cpse	r24, r1
    5418:	f8 cf       	rjmp	.-16     	; 0x540a <menu_ModuleTestExecute+0x54>
    541a:	9f bf       	out	0x3f, r25	; 63
    541c:	b3 df       	rcall	.-154    	; 0x5384 <menuCursorSetMenu>
    541e:	46 c0       	rjmp	.+140    	; 0x54ac <menu_ModuleTestExecute+0xf6>
    5420:	8e 3f       	cpi	r24, 0xFE	; 254
    5422:	41 f4       	brne	.+16     	; 0x5434 <menu_ModuleTestExecute+0x7e>
    5424:	8f ef       	ldi	r24, 0xFF	; 255
    5426:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
    542a:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>
    542e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <lcd_cursosblink>
    5432:	3c c0       	rjmp	.+120    	; 0x54ac <menu_ModuleTestExecute+0xf6>
    5434:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5438:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    543c:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5440:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    5444:	76 95       	lsr	r23
    5446:	67 95       	ror	r22
    5448:	57 95       	ror	r21
    544a:	47 95       	ror	r20
    544c:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    5450:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    5454:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    5458:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    545c:	e8 2f       	mov	r30, r24
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	df 01       	movw	r26, r30
    5462:	aa 0f       	add	r26, r26
    5464:	bb 1f       	adc	r27, r27
    5466:	aa 0f       	add	r26, r26
    5468:	bb 1f       	adc	r27, r27
    546a:	aa 0f       	add	r26, r26
    546c:	bb 1f       	adc	r27, r27
    546e:	a4 59       	subi	r26, 0x94	; 148
    5470:	bd 4f       	sbci	r27, 0xFD	; 253
    5472:	16 96       	adiw	r26, 0x06	; 6
    5474:	2c 91       	ld	r18, X
    5476:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    547a:	29 23       	and	r18, r25
    547c:	49 f4       	brne	.+18     	; 0x5490 <menu_ModuleTestExecute+0xda>
    547e:	70 68       	ori	r23, 0x80	; 128
    5480:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    5484:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    5488:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    548c:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    5490:	ee 0f       	add	r30, r30
    5492:	ff 1f       	adc	r31, r31
    5494:	ee 0f       	add	r30, r30
    5496:	ff 1f       	adc	r31, r31
    5498:	ee 0f       	add	r30, r30
    549a:	ff 1f       	adc	r31, r31
    549c:	e4 59       	subi	r30, 0x94	; 148
    549e:	fd 4f       	sbci	r31, 0xFD	; 253
    54a0:	21 81       	ldd	r18, Z+1	; 0x01
    54a2:	92 2b       	or	r25, r18
    54a4:	91 83       	std	Z+1, r25	; 0x01
    54a6:	8f 5f       	subi	r24, 0xFF	; 255
    54a8:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    54ac:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    54b0:	e0 32       	cpi	r30, 0x20	; 32
    54b2:	28 f5       	brcc	.+74     	; 0x54fe <menu_ModuleTestExecute+0x148>
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	ee 0f       	add	r30, r30
    54b8:	ff 1f       	adc	r31, r31
    54ba:	ee 0f       	add	r30, r30
    54bc:	ff 1f       	adc	r31, r31
    54be:	ee 0f       	add	r30, r30
    54c0:	ff 1f       	adc	r31, r31
    54c2:	e4 59       	subi	r30, 0x94	; 148
    54c4:	fd 4f       	sbci	r31, 0xFD	; 253
    54c6:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    54ca:	98 2f       	mov	r25, r24
    54cc:	90 95       	com	r25
    54ce:	81 81       	ldd	r24, Z+1	; 0x01
    54d0:	89 23       	and	r24, r25
    54d2:	81 83       	std	Z+1, r24	; 0x01
    54d4:	8e e1       	ldi	r24, 0x1E	; 30
    54d6:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    54da:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    54de:	0e 94 aa 3c 	call	0x7954	; 0x7954 <lcd_dec2out>
    54e2:	9f b7       	in	r25, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	06 c0       	rjmp	.+12     	; 0x54f6 <menu_ModuleTestExecute+0x140>
    54ea:	e0 e5       	ldi	r30, 0x50	; 80
    54ec:	f2 e0       	ldi	r31, 0x02	; 2
    54ee:	88 e0       	ldi	r24, 0x08	; 8
    54f0:	84 87       	std	Z+12, r24	; 0x0c
    54f2:	15 86       	std	Z+13, r1	; 0x0d
    54f4:	80 e0       	ldi	r24, 0x00	; 0
    54f6:	81 11       	cpse	r24, r1
    54f8:	f8 cf       	rjmp	.-16     	; 0x54ea <menu_ModuleTestExecute+0x134>
    54fa:	9f bf       	out	0x3f, r25	; 63
    54fc:	08 95       	ret
    54fe:	e0 32       	cpi	r30, 0x20	; 32
    5500:	09 f0       	breq	.+2      	; 0x5504 <menu_ModuleTestExecute+0x14e>
    5502:	41 c0       	rjmp	.+130    	; 0x5586 <menu_ModuleTestExecute+0x1d0>
    5504:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5508:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    550c:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5510:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    5514:	00 97       	sbiw	r24, 0x00	; 0
    5516:	a1 05       	cpc	r26, r1
    5518:	b1 05       	cpc	r27, r1
    551a:	29 f4       	brne	.+10     	; 0x5526 <menu_ModuleTestExecute+0x170>
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	94 e0       	ldi	r25, 0x04	; 4
    5520:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <lcd_message_P>
    5524:	1f c0       	rjmp	.+62     	; 0x5564 <menu_ModuleTestExecute+0x1ae>
    5526:	80 93 06 19 	sts	0x1906, r24	; 0x801906 <editLong>
    552a:	90 93 07 19 	sts	0x1907, r25	; 0x801907 <editLong+0x1>
    552e:	a0 93 08 19 	sts	0x1908, r26	; 0x801908 <editLong+0x2>
    5532:	b0 93 09 19 	sts	0x1909, r27	; 0x801909 <editLong+0x3>
    5536:	6a e0       	ldi	r22, 0x0A	; 10
    5538:	79 e1       	ldi	r23, 0x19	; 25
    553a:	8d ef       	ldi	r24, 0xFD	; 253
    553c:	93 e0       	ldi	r25, 0x03	; 3
    553e:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <putString_P>
    5542:	ac 01       	movw	r20, r24
    5544:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5548:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    554c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5550:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    5554:	0e 94 5f 3d 	call	0x7abe	; 0x7abe <putChar_long>
    5558:	fc 01       	movw	r30, r24
    555a:	10 82       	st	Z, r1
    555c:	8a e0       	ldi	r24, 0x0A	; 10
    555e:	99 e1       	ldi	r25, 0x19	; 25
    5560:	0e 94 00 15 	call	0x2a00	; 0x2a00 <lcd_message>
    5564:	8e ef       	ldi	r24, 0xFE	; 254
    5566:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    556a:	9f b7       	in	r25, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	06 c0       	rjmp	.+12     	; 0x557e <menu_ModuleTestExecute+0x1c8>
    5572:	e0 e5       	ldi	r30, 0x50	; 80
    5574:	f2 e0       	ldi	r31, 0x02	; 2
    5576:	82 e0       	ldi	r24, 0x02	; 2
    5578:	84 87       	std	Z+12, r24	; 0x0c
    557a:	85 87       	std	Z+13, r24	; 0x0d
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	81 11       	cpse	r24, r1
    5580:	f8 cf       	rjmp	.-16     	; 0x5572 <menu_ModuleTestExecute+0x1bc>
    5582:	9f bf       	out	0x3f, r25	; 63
    5584:	ff ce       	rjmp	.-514    	; 0x5384 <menuCursorSetMenu>
    5586:	08 95       	ret

00005588 <menu_ModuleTestPattern>:
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    5590:	02 c0       	rjmp	.+4      	; 0x5596 <menu_ModuleTestPattern+0xe>
    5592:	88 0f       	add	r24, r24
    5594:	99 1f       	adc	r25, r25
    5596:	0a 94       	dec	r0
    5598:	e2 f7       	brpl	.-8      	; 0x5592 <menu_ModuleTestPattern+0xa>
    559a:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <menu_TestModulePattern>
    559e:	8f ef       	ldi	r24, 0xFF	; 255
    55a0:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    55a4:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <menu_TestModuleErrorList>
    55a8:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <menu_TestModuleErrorList+0x1>
    55ac:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <menu_TestModuleErrorList+0x2>
    55b0:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <menu_TestModuleErrorList+0x3>
    55b4:	00 df       	rcall	.-512    	; 0x53b6 <menu_ModuleTestExecute>
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	08 95       	ret

000055ba <menuClearMenuDisp>:
    55ba:	80 e4       	ldi	r24, 0x40	; 64
    55bc:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    55c0:	8a e0       	ldi	r24, 0x0A	; 10
    55c2:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <lcd_blank>
    55c6:	de de       	rcall	.-580    	; 0x5384 <menuCursorSetMenu>
    55c8:	8a e0       	ldi	r24, 0x0A	; 10
    55ca:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <lcd_blank>
    55ce:	08 95       	ret

000055d0 <menu_ClearAllDisp>:
    55d0:	f4 df       	rcall	.-24     	; 0x55ba <menuClearMenuDisp>
    55d2:	ea de       	rcall	.-556    	; 0x53a8 <menu_ClearDataDisp>
    55d4:	e4 ce       	rjmp	.-568    	; 0x539e <menuClearExtraDisp>
    55d6:	08 95       	ret

000055d8 <menuCheckArrowDown>:
    55d8:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    55dc:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    55e0:	84 91       	lpm	r24, Z
    55e2:	8f 73       	andi	r24, 0x3F	; 63
    55e4:	81 30       	cpi	r24, 0x01	; 1
    55e6:	11 f4       	brne	.+4      	; 0x55ec <menuCheckArrowDown+0x14>
    55e8:	04 c8       	rjmp	.-4088   	; 0x45f2 <softkeyDown>
    55ea:	08 95       	ret
    55ec:	3e 96       	adiw	r30, 0x0e	; 14
    55ee:	05 90       	lpm	r0, Z+
    55f0:	f4 91       	lpm	r31, Z
    55f2:	e0 2d       	mov	r30, r0
    55f4:	30 97       	sbiw	r30, 0x00	; 0
    55f6:	69 f0       	breq	.+26     	; 0x5612 <menuCheckArrowDown+0x3a>
    55f8:	89 30       	cpi	r24, 0x09	; 9
    55fa:	41 f4       	brne	.+16     	; 0x560c <menuCheckArrowDown+0x34>
    55fc:	80 81       	ld	r24, Z
    55fe:	81 11       	cpse	r24, r1
    5600:	03 c0       	rjmp	.+6      	; 0x5608 <menuCheckArrowDown+0x30>
    5602:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <softkeyOn>
    5606:	08 95       	ret
    5608:	00 c8       	rjmp	.-4096   	; 0x460a <softkeyOff>
    560a:	08 95       	ret
    560c:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <softkeyDown>
    5610:	08 95       	ret
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <keylabel_clr>
    5618:	08 95       	ret

0000561a <menuCurrMenuToLCD>:
    561a:	cf 93       	push	r28
    561c:	89 e4       	ldi	r24, 0x49	; 73
    561e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    5622:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5626:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    562a:	c4 91       	lpm	r28, Z
    562c:	c0 7c       	andi	r28, 0xC0	; 192
    562e:	c0 38       	cpi	r28, 0x80	; 128
    5630:	39 f4       	brne	.+14     	; 0x5640 <menuCurrMenuToLCD+0x26>
    5632:	80 e2       	ldi	r24, 0x20	; 32
    5634:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    563e:	05 c0       	rjmp	.+10     	; 0x564a <menuCurrMenuToLCD+0x30>
    5640:	8f e7       	ldi	r24, 0x7F	; 127
    5642:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    5646:	0e 94 ed 22 	call	0x45da	; 0x45da <softkeyLeft>
    564a:	c0 3c       	cpi	r28, 0xC0	; 192
    564c:	29 f4       	brne	.+10     	; 0x5658 <menuCurrMenuToLCD+0x3e>
    564e:	83 e0       	ldi	r24, 0x03	; 3
    5650:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5654:	c0 e2       	ldi	r28, 0x20	; 32
    5656:	03 c0       	rjmp	.+6      	; 0x565e <menuCurrMenuToLCD+0x44>
    5658:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <softkeyRight>
    565c:	ce e7       	ldi	r28, 0x7E	; 126
    565e:	0e 94 0b 23 	call	0x4616	; 0x4616 <softkeyUp>
    5662:	ba df       	rcall	.-140    	; 0x55d8 <menuCheckArrowDown>
    5664:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5668:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    566c:	6c 2f       	mov	r22, r28
    566e:	02 96       	adiw	r24, 0x02	; 2
    5670:	f5 dc       	rcall	.-1558   	; 0x505c <menuTextOut>
    5672:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    5676:	86 de       	rcall	.-756    	; 0x5384 <menuCursorSetMenu>
    5678:	cf 91       	pop	r28
    567a:	08 95       	ret

0000567c <menuItemChanged>:
    567c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5680:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5684:	fc 01       	movw	r30, r24
    5686:	24 91       	lpm	r18, Z
    5688:	62 2f       	mov	r22, r18
    568a:	6f 73       	andi	r22, 0x3F	; 63
    568c:	62 30       	cpi	r22, 0x02	; 2
    568e:	08 f4       	brcc	.+2      	; 0x5692 <menuItemChanged+0x16>
    5690:	49 c0       	rjmp	.+146    	; 0x5724 <menuItemChanged+0xa8>
    5692:	9c 01       	movw	r18, r24
    5694:	22 5f       	subi	r18, 0xF2	; 242
    5696:	3f 4f       	sbci	r19, 0xFF	; 255
    5698:	f9 01       	movw	r30, r18
    569a:	45 91       	lpm	r20, Z+
    569c:	55 91       	lpm	r21, Z+
    569e:	41 15       	cp	r20, r1
    56a0:	51 05       	cpc	r21, r1
    56a2:	09 f4       	brne	.+2      	; 0x56a6 <menuItemChanged+0x2a>
    56a4:	3f c0       	rjmp	.+126    	; 0x5724 <menuItemChanged+0xa8>
    56a6:	e6 2f       	mov	r30, r22
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	31 97       	sbiw	r30, 0x01	; 1
    56ac:	9f 01       	movw	r18, r30
    56ae:	22 0f       	add	r18, r18
    56b0:	33 1f       	adc	r19, r19
    56b2:	22 0f       	add	r18, r18
    56b4:	33 1f       	adc	r19, r19
    56b6:	22 0f       	add	r18, r18
    56b8:	33 1f       	adc	r19, r19
    56ba:	e2 0f       	add	r30, r18
    56bc:	f3 1f       	adc	r31, r19
    56be:	e5 5c       	subi	r30, 0xC5	; 197
    56c0:	fb 4f       	sbci	r31, 0xFB	; 251
    56c2:	f0 93 a0 05 	sts	0x05A0, r31	; 0x8005a0 <pNibbleInfo+0x1>
    56c6:	e0 93 9f 05 	sts	0x059F, r30	; 0x80059f <pNibbleInfo>
    56ca:	24 91       	lpm	r18, Z
    56cc:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <nibbleCount>
    56d0:	fc 01       	movw	r30, r24
    56d2:	25 91       	lpm	r18, Z+
    56d4:	2f 73       	andi	r18, 0x3F	; 63
    56d6:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <dataType>
    56da:	24 91       	lpm	r18, Z
    56dc:	22 23       	and	r18, r18
    56de:	2c f4       	brge	.+10     	; 0x56ea <menuItemChanged+0x6e>
    56e0:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <DataAdressOffset>
    56e4:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    56e8:	02 c0       	rjmp	.+4      	; 0x56ee <menuItemChanged+0x72>
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	24 0f       	add	r18, r20
    56f0:	35 1f       	adc	r19, r21
    56f2:	fc 01       	movw	r30, r24
    56f4:	84 91       	lpm	r24, Z
    56f6:	8f 73       	andi	r24, 0x3F	; 63
    56f8:	8b 30       	cpi	r24, 0x0B	; 11
    56fa:	71 f4       	brne	.+28     	; 0x5718 <menuItemChanged+0x9c>
    56fc:	f9 01       	movw	r30, r18
    56fe:	80 81       	ld	r24, Z
    5700:	91 81       	ldd	r25, Z+1	; 0x01
    5702:	a2 81       	ldd	r26, Z+2	; 0x02
    5704:	b3 81       	ldd	r27, Z+3	; 0x03
    5706:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <dataEntry32>
    570a:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <dataEntry32+0x1>
    570e:	a0 93 ca 05 	sts	0x05CA, r26	; 0x8005ca <dataEntry32+0x2>
    5712:	b0 93 cb 05 	sts	0x05CB, r27	; 0x8005cb <dataEntry32+0x3>
    5716:	04 c0       	rjmp	.+8      	; 0x5720 <menuItemChanged+0xa4>
    5718:	f9 01       	movw	r30, r18
    571a:	80 81       	ld	r24, Z
    571c:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    5720:	d2 dc       	rcall	.-1628   	; 0x50c6 <menuDisplayValue>
    5722:	07 c0       	rjmp	.+14     	; 0x5732 <menuItemChanged+0xb6>
    5724:	41 de       	rcall	.-894    	; 0x53a8 <menu_ClearDataDisp>
    5726:	8b e3       	ldi	r24, 0x3B	; 59
    5728:	94 e0       	ldi	r25, 0x04	; 4
    572a:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    572e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    5732:	52 df       	rcall	.-348    	; 0x55d8 <menuCheckArrowDown>
    5734:	27 ce       	rjmp	.-946    	; 0x5384 <menuCursorSetMenu>
    5736:	08 95       	ret

00005738 <menu_InitLCD>:
    5738:	32 de       	rcall	.-924    	; 0x539e <menuClearExtraDisp>
    573a:	a0 df       	rcall	.-192    	; 0x567c <menuItemChanged>
    573c:	aa dc       	rcall	.-1708   	; 0x5092 <menuParentMenuToLCD>
    573e:	6d df       	rcall	.-294    	; 0x561a <menuCurrMenuToLCD>
    5740:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <lcd_cursosblink>
    5744:	08 95       	ret

00005746 <menu_ProcessMessage>:
    5746:	cf 93       	push	r28
    5748:	c8 2f       	mov	r28, r24
    574a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <lcd_cursosblink>
    574e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5752:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5756:	84 91       	lpm	r24, Z
    5758:	8f 73       	andi	r24, 0x3F	; 63
    575a:	81 30       	cpi	r24, 0x01	; 1
    575c:	29 f0       	breq	.+10     	; 0x5768 <menu_ProcessMessage+0x22>
    575e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    5762:	8f 3f       	cpi	r24, 0xFF	; 255
    5764:	09 f0       	breq	.+2      	; 0x5768 <menu_ProcessMessage+0x22>
    5766:	68 c1       	rjmp	.+720    	; 0x5a38 <menu_ProcessMessage+0x2f2>
    5768:	31 96       	adiw	r30, 0x01	; 1
    576a:	84 91       	lpm	r24, Z
    576c:	86 ff       	sbrs	r24, 6
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <menu_ProcessMessage+0x2e>
    5770:	16 de       	rcall	.-980    	; 0x539e <menuClearExtraDisp>
    5772:	08 de       	rcall	.-1008   	; 0x5384 <menuCursorSetMenu>
    5774:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <currentMenu>
    5778:	70 91 d0 05 	lds	r23, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    577c:	cb 01       	movw	r24, r22
    577e:	01 96       	adiw	r24, 0x01	; 1
    5780:	fc 01       	movw	r30, r24
    5782:	84 91       	lpm	r24, Z
    5784:	98 2f       	mov	r25, r24
    5786:	90 72       	andi	r25, 0x20	; 32
    5788:	85 ff       	sbrs	r24, 5
    578a:	1f c0       	rjmp	.+62     	; 0x57ca <menu_ProcessMessage+0x84>
    578c:	9b 01       	movw	r18, r22
    578e:	20 5f       	subi	r18, 0xF0	; 240
    5790:	3f 4f       	sbci	r19, 0xFF	; 255
    5792:	f9 01       	movw	r30, r18
    5794:	25 91       	lpm	r18, Z+
    5796:	35 91       	lpm	r19, Z+
    5798:	21 15       	cp	r18, r1
    579a:	31 05       	cpc	r19, r1
    579c:	b1 f0       	breq	.+44     	; 0x57ca <menu_ProcessMessage+0x84>
    579e:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <nibbleIndex>
    57a2:	4f 3f       	cpi	r20, 0xFF	; 255
    57a4:	91 f0       	breq	.+36     	; 0x57ca <menu_ProcessMessage+0x84>
    57a6:	8c 2f       	mov	r24, r28
    57a8:	f9 01       	movw	r30, r18
    57aa:	19 95       	eicall
    57ac:	8f 3f       	cpi	r24, 0xFF	; 255
    57ae:	21 f4       	brne	.+8      	; 0x57b8 <menu_ProcessMessage+0x72>
    57b0:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	04 c2       	rjmp	.+1032   	; 0x5bc0 <menu_ProcessMessage+0x47a>
    57b8:	f2 dd       	rcall	.-1052   	; 0x539e <menuClearExtraDisp>
    57ba:	f6 dd       	rcall	.-1044   	; 0x53a8 <menu_ClearDataDisp>
    57bc:	e3 dd       	rcall	.-1082   	; 0x5384 <menuCursorSetMenu>
    57be:	8f ef       	ldi	r24, 0xFF	; 255
    57c0:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    57c4:	2a df       	rcall	.-428    	; 0x561a <menuCurrMenuToLCD>
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	fb c1       	rjmp	.+1014   	; 0x5bc0 <menu_ProcessMessage+0x47a>
    57ca:	c3 30       	cpi	r28, 0x03	; 3
    57cc:	09 f4       	brne	.+2      	; 0x57d0 <menu_ProcessMessage+0x8a>
    57ce:	64 c0       	rjmp	.+200    	; 0x5898 <menu_ProcessMessage+0x152>
    57d0:	28 f4       	brcc	.+10     	; 0x57dc <menu_ProcessMessage+0x96>
    57d2:	c1 30       	cpi	r28, 0x01	; 1
    57d4:	51 f0       	breq	.+20     	; 0x57ea <menu_ProcessMessage+0xa4>
    57d6:	c2 30       	cpi	r28, 0x02	; 2
    57d8:	31 f1       	breq	.+76     	; 0x5826 <menu_ProcessMessage+0xe0>
    57da:	db c1       	rjmp	.+950    	; 0x5b92 <menu_ProcessMessage+0x44c>
    57dc:	c5 30       	cpi	r28, 0x05	; 5
    57de:	09 f4       	brne	.+2      	; 0x57e2 <menu_ProcessMessage+0x9c>
    57e0:	5b c0       	rjmp	.+182    	; 0x5898 <menu_ProcessMessage+0x152>
    57e2:	90 f0       	brcs	.+36     	; 0x5808 <menu_ProcessMessage+0xc2>
    57e4:	c6 30       	cpi	r28, 0x06	; 6
    57e6:	f9 f0       	breq	.+62     	; 0x5826 <menu_ProcessMessage+0xe0>
    57e8:	d4 c1       	rjmp	.+936    	; 0x5b92 <menu_ProcessMessage+0x44c>
    57ea:	fb 01       	movw	r30, r22
    57ec:	84 91       	lpm	r24, Z
    57ee:	80 7c       	andi	r24, 0xC0	; 192
    57f0:	80 3c       	cpi	r24, 0xC0	; 192
    57f2:	09 f4       	brne	.+2      	; 0x57f6 <menu_ProcessMessage+0xb0>
    57f4:	d0 c1       	rjmp	.+928    	; 0x5b96 <menu_ProcessMessage+0x450>
    57f6:	74 96       	adiw	r30, 0x14	; 20
    57f8:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    57fc:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5800:	3d df       	rcall	.-390    	; 0x567c <menuItemChanged>
    5802:	0b df       	rcall	.-490    	; 0x561a <menuCurrMenuToLCD>
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	dc c1       	rjmp	.+952    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5808:	fb 01       	movw	r30, r22
    580a:	84 91       	lpm	r24, Z
    580c:	80 7c       	andi	r24, 0xC0	; 192
    580e:	80 38       	cpi	r24, 0x80	; 128
    5810:	09 f4       	brne	.+2      	; 0x5814 <menu_ProcessMessage+0xce>
    5812:	c3 c1       	rjmp	.+902    	; 0x5b9a <menu_ProcessMessage+0x454>
    5814:	74 97       	sbiw	r30, 0x14	; 20
    5816:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    581a:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    581e:	2e df       	rcall	.-420    	; 0x567c <menuItemChanged>
    5820:	fc de       	rcall	.-520    	; 0x561a <menuCurrMenuToLCD>
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	cd c1       	rjmp	.+922    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5826:	84 ff       	sbrs	r24, 4
    5828:	04 c0       	rjmp	.+8      	; 0x5832 <menu_ProcessMessage+0xec>
    582a:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <menuVMenuSoftKey+0x1>
    582e:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <menuVMenuSoftKey>
    5832:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    5836:	ee 23       	and	r30, r30
    5838:	e9 f0       	breq	.+58     	; 0x5874 <menu_ProcessMessage+0x12e>
    583a:	e1 50       	subi	r30, 0x01	; 1
    583c:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    5840:	f0 e0       	ldi	r31, 0x00	; 0
    5842:	ee 0f       	add	r30, r30
    5844:	ff 1f       	adc	r31, r31
    5846:	ef 55       	subi	r30, 0x5F	; 95
    5848:	fa 4f       	sbci	r31, 0xFA	; 250
    584a:	01 90       	ld	r0, Z+
    584c:	f0 81       	ld	r31, Z
    584e:	e0 2d       	mov	r30, r0
    5850:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    5854:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5858:	72 96       	adiw	r30, 0x12	; 18
    585a:	05 90       	lpm	r0, Z+
    585c:	f4 91       	lpm	r31, Z
    585e:	e0 2d       	mov	r30, r0
    5860:	30 97       	sbiw	r30, 0x00	; 0
    5862:	11 f0       	breq	.+4      	; 0x5868 <menu_ProcessMessage+0x122>
    5864:	80 e0       	ldi	r24, 0x00	; 0
    5866:	19 95       	eicall
    5868:	9a dd       	rcall	.-1228   	; 0x539e <menuClearExtraDisp>
    586a:	13 dc       	rcall	.-2010   	; 0x5092 <menuParentMenuToLCD>
    586c:	d6 de       	rcall	.-596    	; 0x561a <menuCurrMenuToLCD>
    586e:	06 df       	rcall	.-500    	; 0x567c <menuItemChanged>
    5870:	80 e0       	ldi	r24, 0x00	; 0
    5872:	a6 c1       	rjmp	.+844    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5880:	82 e0       	ldi	r24, 0x02	; 2
    5882:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5886:	83 e0       	ldi	r24, 0x03	; 3
    5888:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    588c:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    5890:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <lcd_cursoroff>
    5894:	8f ef       	ldi	r24, 0xFF	; 255
    5896:	94 c1       	rjmp	.+808    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5898:	fb 01       	movw	r30, r22
    589a:	24 91       	lpm	r18, Z
    589c:	2f 73       	andi	r18, 0x3F	; 63
    589e:	30 e0       	ldi	r19, 0x00	; 0
    58a0:	22 30       	cpi	r18, 0x02	; 2
    58a2:	31 05       	cpc	r19, r1
    58a4:	0c f4       	brge	.+2      	; 0x58a8 <menu_ProcessMessage+0x162>
    58a6:	48 c0       	rjmp	.+144    	; 0x5938 <menu_ProcessMessage+0x1f2>
    58a8:	70 96       	adiw	r30, 0x10	; 16
    58aa:	05 90       	lpm	r0, Z+
    58ac:	f4 91       	lpm	r31, Z
    58ae:	e0 2d       	mov	r30, r0
    58b0:	30 97       	sbiw	r30, 0x00	; 0
    58b2:	19 f0       	breq	.+6      	; 0x58ba <menu_ProcessMessage+0x174>
    58b4:	8c 2f       	mov	r24, r28
    58b6:	19 95       	eicall
    58b8:	e1 de       	rcall	.-574    	; 0x567c <menuItemChanged>
    58ba:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    58be:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    58c2:	c9 01       	movw	r24, r18
    58c4:	01 96       	adiw	r24, 0x01	; 1
    58c6:	fc 01       	movw	r30, r24
    58c8:	84 91       	lpm	r24, Z
    58ca:	83 fd       	sbrc	r24, 3
    58cc:	68 c1       	rjmp	.+720    	; 0x5b9e <menu_ProcessMessage+0x458>
    58ce:	c9 01       	movw	r24, r18
    58d0:	0e 96       	adiw	r24, 0x0e	; 14
    58d2:	fc 01       	movw	r30, r24
    58d4:	85 91       	lpm	r24, Z+
    58d6:	95 91       	lpm	r25, Z+
    58d8:	89 2b       	or	r24, r25
    58da:	09 f4       	brne	.+2      	; 0x58de <menu_ProcessMessage+0x198>
    58dc:	62 c1       	rjmp	.+708    	; 0x5ba2 <menu_ProcessMessage+0x45c>
    58de:	f9 01       	movw	r30, r18
    58e0:	84 91       	lpm	r24, Z
    58e2:	8f 73       	andi	r24, 0x3F	; 63
    58e4:	89 30       	cpi	r24, 0x09	; 9
    58e6:	19 f5       	brne	.+70     	; 0x592e <menu_ProcessMessage+0x1e8>
    58e8:	61 e0       	ldi	r22, 0x01	; 1
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	23 d9       	rcall	.-3514   	; 0x4b34 <nibbleChange>
    58ee:	d1 da       	rcall	.-2654   	; 0x4e92 <nibbleToData>
    58f0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    58f4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    58f8:	3e 96       	adiw	r30, 0x0e	; 14
    58fa:	05 90       	lpm	r0, Z+
    58fc:	f4 91       	lpm	r31, Z
    58fe:	e0 2d       	mov	r30, r0
    5900:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    5904:	80 83       	st	Z, r24
    5906:	df db       	rcall	.-2114   	; 0x50c6 <menuDisplayValue>
    5908:	67 de       	rcall	.-818    	; 0x55d8 <menuCheckArrowDown>
    590a:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
    590e:	3a dd       	rcall	.-1420   	; 0x5384 <menuCursorSetMenu>
    5910:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5914:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5918:	72 96       	adiw	r30, 0x12	; 18
    591a:	05 90       	lpm	r0, Z+
    591c:	f4 91       	lpm	r31, Z
    591e:	e0 2d       	mov	r30, r0
    5920:	30 97       	sbiw	r30, 0x00	; 0
    5922:	09 f4       	brne	.+2      	; 0x5926 <menu_ProcessMessage+0x1e0>
    5924:	40 c1       	rjmp	.+640    	; 0x5ba6 <menu_ProcessMessage+0x460>
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	19 95       	eicall
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	49 c1       	rjmp	.+658    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    592e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    5932:	d6 db       	rcall	.-2132   	; 0x50e0 <menuCursorSetDataNibble>
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	44 c1       	rjmp	.+648    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5938:	2f ef       	ldi	r18, 0xFF	; 255
    593a:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    593e:	84 ff       	sbrs	r24, 4
    5940:	26 c0       	rjmp	.+76     	; 0x598e <menu_ProcessMessage+0x248>
    5942:	70 93 f4 05 	sts	0x05F4, r23	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5946:	60 93 f3 05 	sts	0x05F3, r22	; 0x8005f3 <menuVMenuSoftKey>
    594a:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    594e:	ee 23       	and	r30, r30
    5950:	09 f4       	brne	.+2      	; 0x5954 <menu_ProcessMessage+0x20e>
    5952:	2b c1       	rjmp	.+598    	; 0x5baa <menu_ProcessMessage+0x464>
    5954:	e1 50       	subi	r30, 0x01	; 1
    5956:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	ee 0f       	add	r30, r30
    595e:	ff 1f       	adc	r31, r31
    5960:	ef 55       	subi	r30, 0x5F	; 95
    5962:	fa 4f       	sbci	r31, 0xFA	; 250
    5964:	01 90       	ld	r0, Z+
    5966:	f0 81       	ld	r31, Z
    5968:	e0 2d       	mov	r30, r0
    596a:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    596e:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5972:	72 96       	adiw	r30, 0x12	; 18
    5974:	05 90       	lpm	r0, Z+
    5976:	f4 91       	lpm	r31, Z
    5978:	e0 2d       	mov	r30, r0
    597a:	30 97       	sbiw	r30, 0x00	; 0
    597c:	11 f0       	breq	.+4      	; 0x5982 <menu_ProcessMessage+0x23c>
    597e:	80 e0       	ldi	r24, 0x00	; 0
    5980:	19 95       	eicall
    5982:	0d dd       	rcall	.-1510   	; 0x539e <menuClearExtraDisp>
    5984:	86 db       	rcall	.-2292   	; 0x5092 <menuParentMenuToLCD>
    5986:	49 de       	rcall	.-878    	; 0x561a <menuCurrMenuToLCD>
    5988:	79 de       	rcall	.-782    	; 0x567c <menuItemChanged>
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	19 c1       	rjmp	.+562    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    598e:	fb 01       	movw	r30, r22
    5990:	70 96       	adiw	r30, 0x10	; 16
    5992:	05 90       	lpm	r0, Z+
    5994:	f4 91       	lpm	r31, Z
    5996:	e0 2d       	mov	r30, r0
    5998:	30 97       	sbiw	r30, 0x00	; 0
    599a:	99 f0       	breq	.+38     	; 0x59c2 <menu_ProcessMessage+0x27c>
    599c:	99 23       	and	r25, r25
    599e:	71 f0       	breq	.+28     	; 0x59bc <menu_ProcessMessage+0x276>
    59a0:	8f ef       	ldi	r24, 0xFF	; 255
    59a2:	19 95       	eicall
    59a4:	8f 3f       	cpi	r24, 0xFF	; 255
    59a6:	19 f4       	brne	.+6      	; 0x59ae <menu_ProcessMessage+0x268>
    59a8:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    59ac:	0a c0       	rjmp	.+20     	; 0x59c2 <menu_ProcessMessage+0x27c>
    59ae:	f7 dc       	rcall	.-1554   	; 0x539e <menuClearExtraDisp>
    59b0:	fb dc       	rcall	.-1546   	; 0x53a8 <menu_ClearDataDisp>
    59b2:	e8 dc       	rcall	.-1584   	; 0x5384 <menuCursorSetMenu>
    59b4:	8f ef       	ldi	r24, 0xFF	; 255
    59b6:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    59ba:	03 c0       	rjmp	.+6      	; 0x59c2 <menu_ProcessMessage+0x27c>
    59bc:	85 e0       	ldi	r24, 0x05	; 5
    59be:	19 95       	eicall
    59c0:	e1 dc       	rcall	.-1598   	; 0x5384 <menuCursorSetMenu>
    59c2:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    59c6:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    59ca:	c9 01       	movw	r24, r18
    59cc:	0c 96       	adiw	r24, 0x0c	; 12
    59ce:	fc 01       	movw	r30, r24
    59d0:	85 91       	lpm	r24, Z+
    59d2:	95 91       	lpm	r25, Z+
    59d4:	89 2b       	or	r24, r25
    59d6:	09 f4       	brne	.+2      	; 0x59da <menu_ProcessMessage+0x294>
    59d8:	ea c0       	rjmp	.+468    	; 0x5bae <menu_ProcessMessage+0x468>
    59da:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <menuStackIndex>
    59de:	a0 31       	cpi	r26, 0x10	; 16
    59e0:	08 f0       	brcs	.+2      	; 0x59e4 <menu_ProcessMessage+0x29e>
    59e2:	e7 c0       	rjmp	.+462    	; 0x5bb2 <menu_ProcessMessage+0x46c>
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	8a 0f       	add	r24, r26
    59e8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <menuStackIndex>
    59ec:	b0 e0       	ldi	r27, 0x00	; 0
    59ee:	aa 0f       	add	r26, r26
    59f0:	bb 1f       	adc	r27, r27
    59f2:	af 55       	subi	r26, 0x5F	; 95
    59f4:	ba 4f       	sbci	r27, 0xFA	; 250
    59f6:	2d 93       	st	X+, r18
    59f8:	3c 93       	st	X, r19
    59fa:	c9 01       	movw	r24, r18
    59fc:	01 96       	adiw	r24, 0x01	; 1
    59fe:	fc 01       	movw	r30, r24
    5a00:	84 91       	lpm	r24, Z
    5a02:	83 ff       	sbrs	r24, 3
    5a04:	0b c0       	rjmp	.+22     	; 0x5a1c <menu_ProcessMessage+0x2d6>
    5a06:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    5a0a:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5a0e:	00 97       	sbiw	r24, 0x00	; 0
    5a10:	29 f0       	breq	.+10     	; 0x5a1c <menu_ProcessMessage+0x2d6>
    5a12:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    5a16:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    5a1a:	08 c0       	rjmp	.+16     	; 0x5a2c <menu_ProcessMessage+0x2e6>
    5a1c:	f9 01       	movw	r30, r18
    5a1e:	3c 96       	adiw	r30, 0x0c	; 12
    5a20:	85 91       	lpm	r24, Z+
    5a22:	95 91       	lpm	r25, Z+
    5a24:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    5a28:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    5a2c:	b8 dc       	rcall	.-1680   	; 0x539e <menuClearExtraDisp>
    5a2e:	31 db       	rcall	.-2462   	; 0x5092 <menuParentMenuToLCD>
    5a30:	f4 dd       	rcall	.-1048   	; 0x561a <menuCurrMenuToLCD>
    5a32:	24 de       	rcall	.-952    	; 0x567c <menuItemChanged>
    5a34:	80 e0       	ldi	r24, 0x00	; 0
    5a36:	c4 c0       	rjmp	.+392    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5a38:	c3 30       	cpi	r28, 0x03	; 3
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <menu_ProcessMessage+0x2f8>
    5a3c:	49 c0       	rjmp	.+146    	; 0x5ad0 <menu_ProcessMessage+0x38a>
    5a3e:	28 f4       	brcc	.+10     	; 0x5a4a <menu_ProcessMessage+0x304>
    5a40:	c1 30       	cpi	r28, 0x01	; 1
    5a42:	59 f0       	breq	.+22     	; 0x5a5a <menu_ProcessMessage+0x314>
    5a44:	c2 30       	cpi	r28, 0x02	; 2
    5a46:	31 f1       	breq	.+76     	; 0x5a94 <menu_ProcessMessage+0x34e>
    5a48:	b6 c0       	rjmp	.+364    	; 0x5bb6 <menu_ProcessMessage+0x470>
    5a4a:	c5 30       	cpi	r28, 0x05	; 5
    5a4c:	09 f4       	brne	.+2      	; 0x5a50 <menu_ProcessMessage+0x30a>
    5a4e:	5e c0       	rjmp	.+188    	; 0x5b0c <menu_ProcessMessage+0x3c6>
    5a50:	c0 f0       	brcs	.+48     	; 0x5a82 <menu_ProcessMessage+0x33c>
    5a52:	c6 30       	cpi	r28, 0x06	; 6
    5a54:	09 f4       	brne	.+2      	; 0x5a58 <menu_ProcessMessage+0x312>
    5a56:	8a c0       	rjmp	.+276    	; 0x5b6c <menu_ProcessMessage+0x426>
    5a58:	ae c0       	rjmp	.+348    	; 0x5bb6 <menu_ProcessMessage+0x470>
    5a5a:	48 2f       	mov	r20, r24
    5a5c:	50 e0       	ldi	r21, 0x00	; 0
    5a5e:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5a62:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5a66:	24 91       	lpm	r18, Z
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	21 50       	subi	r18, 0x01	; 1
    5a6c:	31 09       	sbc	r19, r1
    5a6e:	42 17       	cp	r20, r18
    5a70:	53 07       	cpc	r21, r19
    5a72:	0c f0       	brlt	.+2      	; 0x5a76 <menu_ProcessMessage+0x330>
    5a74:	a2 c0       	rjmp	.+324    	; 0x5bba <menu_ProcessMessage+0x474>
    5a76:	8f 5f       	subi	r24, 0xFF	; 255
    5a78:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5a7c:	31 db       	rcall	.-2462   	; 0x50e0 <menuCursorSetDataNibble>
    5a7e:	80 e0       	ldi	r24, 0x00	; 0
    5a80:	9f c0       	rjmp	.+318    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5a82:	88 23       	and	r24, r24
    5a84:	09 f4       	brne	.+2      	; 0x5a88 <menu_ProcessMessage+0x342>
    5a86:	9b c0       	rjmp	.+310    	; 0x5bbe <menu_ProcessMessage+0x478>
    5a88:	81 50       	subi	r24, 0x01	; 1
    5a8a:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5a8e:	28 db       	rcall	.-2480   	; 0x50e0 <menuCursorSetDataNibble>
    5a90:	80 e0       	ldi	r24, 0x00	; 0
    5a92:	96 c0       	rjmp	.+300    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5a94:	61 e0       	ldi	r22, 0x01	; 1
    5a96:	4e d8       	rcall	.-3940   	; 0x4b34 <nibbleChange>
    5a98:	fc d9       	rcall	.-3080   	; 0x4e92 <nibbleToData>
    5a9a:	15 db       	rcall	.-2518   	; 0x50c6 <menuDisplayValue>
    5a9c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    5aa0:	8a 30       	cpi	r24, 0x0A	; 10
    5aa2:	11 f0       	breq	.+4      	; 0x5aa8 <menu_ProcessMessage+0x362>
    5aa4:	8e 30       	cpi	r24, 0x0E	; 14
    5aa6:	89 f4       	brne	.+34     	; 0x5aca <menu_ProcessMessage+0x384>
    5aa8:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    5aac:	42 2f       	mov	r20, r18
    5aae:	50 e0       	ldi	r21, 0x00	; 0
    5ab0:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5ab4:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5ab8:	84 91       	lpm	r24, Z
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	01 97       	sbiw	r24, 0x01	; 1
    5abe:	48 17       	cp	r20, r24
    5ac0:	59 07       	cpc	r21, r25
    5ac2:	1c f4       	brge	.+6      	; 0x5aca <menu_ProcessMessage+0x384>
    5ac4:	2f 5f       	subi	r18, 0xFF	; 255
    5ac6:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    5aca:	0a db       	rcall	.-2540   	; 0x50e0 <menuCursorSetDataNibble>
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	78 c0       	rjmp	.+240    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5ad0:	6f ef       	ldi	r22, 0xFF	; 255
    5ad2:	30 d8       	rcall	.-4000   	; 0x4b34 <nibbleChange>
    5ad4:	de d9       	rcall	.-3140   	; 0x4e92 <nibbleToData>
    5ad6:	f7 da       	rcall	.-2578   	; 0x50c6 <menuDisplayValue>
    5ad8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    5adc:	8a 30       	cpi	r24, 0x0A	; 10
    5ade:	11 f0       	breq	.+4      	; 0x5ae4 <menu_ProcessMessage+0x39e>
    5ae0:	8e 30       	cpi	r24, 0x0E	; 14
    5ae2:	89 f4       	brne	.+34     	; 0x5b06 <menu_ProcessMessage+0x3c0>
    5ae4:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    5ae8:	42 2f       	mov	r20, r18
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5af0:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5af4:	84 91       	lpm	r24, Z
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	01 97       	sbiw	r24, 0x01	; 1
    5afa:	48 17       	cp	r20, r24
    5afc:	59 07       	cpc	r21, r25
    5afe:	1c f4       	brge	.+6      	; 0x5b06 <menu_ProcessMessage+0x3c0>
    5b00:	2f 5f       	subi	r18, 0xFF	; 255
    5b02:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    5b06:	ec da       	rcall	.-2600   	; 0x50e0 <menuCursorSetDataNibble>
    5b08:	80 e0       	ldi	r24, 0x00	; 0
    5b0a:	5a c0       	rjmp	.+180    	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5b0c:	c2 d9       	rcall	.-3196   	; 0x4e92 <nibbleToData>
    5b0e:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    5b12:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5b16:	c9 01       	movw	r24, r18
    5b18:	0e 96       	adiw	r24, 0x0e	; 14
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	a5 91       	lpm	r26, Z+
    5b1e:	b5 91       	lpm	r27, Z+
    5b20:	10 97       	sbiw	r26, 0x00	; 0
    5b22:	21 f1       	breq	.+72     	; 0x5b6c <menu_ProcessMessage+0x426>
    5b24:	0d 97       	sbiw	r24, 0x0d	; 13
    5b26:	fc 01       	movw	r30, r24
    5b28:	84 91       	lpm	r24, Z
    5b2a:	88 23       	and	r24, r24
    5b2c:	2c f4       	brge	.+10     	; 0x5b38 <menu_ProcessMessage+0x3f2>
    5b2e:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <DataAdressOffset>
    5b32:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    5b36:	02 c0       	rjmp	.+4      	; 0x5b3c <menu_ProcessMessage+0x3f6>
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	a8 0f       	add	r26, r24
    5b3e:	b9 1f       	adc	r27, r25
    5b40:	f9 01       	movw	r30, r18
    5b42:	84 91       	lpm	r24, Z
    5b44:	8f 73       	andi	r24, 0x3F	; 63
    5b46:	8b 30       	cpi	r24, 0x0B	; 11
    5b48:	71 f4       	brne	.+28     	; 0x5b66 <menu_ProcessMessage+0x420>
    5b4a:	40 91 c8 05 	lds	r20, 0x05C8	; 0x8005c8 <dataEntry32>
    5b4e:	50 91 c9 05 	lds	r21, 0x05C9	; 0x8005c9 <dataEntry32+0x1>
    5b52:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <dataEntry32+0x2>
    5b56:	70 91 cb 05 	lds	r23, 0x05CB	; 0x8005cb <dataEntry32+0x3>
    5b5a:	4d 93       	st	X+, r20
    5b5c:	5d 93       	st	X+, r21
    5b5e:	6d 93       	st	X+, r22
    5b60:	7c 93       	st	X, r23
    5b62:	13 97       	sbiw	r26, 0x03	; 3
    5b64:	03 c0       	rjmp	.+6      	; 0x5b6c <menu_ProcessMessage+0x426>
    5b66:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    5b6a:	8c 93       	st	X, r24
    5b6c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5b70:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5b74:	72 96       	adiw	r30, 0x12	; 18
    5b76:	05 90       	lpm	r0, Z+
    5b78:	f4 91       	lpm	r31, Z
    5b7a:	e0 2d       	mov	r30, r0
    5b7c:	30 97       	sbiw	r30, 0x00	; 0
    5b7e:	11 f0       	breq	.+4      	; 0x5b84 <menu_ProcessMessage+0x43e>
    5b80:	8c 2f       	mov	r24, r28
    5b82:	19 95       	eicall
    5b84:	8f ef       	ldi	r24, 0xFF	; 255
    5b86:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5b8a:	47 dd       	rcall	.-1394   	; 0x561a <menuCurrMenuToLCD>
    5b8c:	77 dd       	rcall	.-1298   	; 0x567c <menuItemChanged>
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	17 c0       	rjmp	.+46     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	15 c0       	rjmp	.+42     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5b96:	80 e0       	ldi	r24, 0x00	; 0
    5b98:	13 c0       	rjmp	.+38     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	11 c0       	rjmp	.+34     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5b9e:	80 e0       	ldi	r24, 0x00	; 0
    5ba0:	0f c0       	rjmp	.+30     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	0d c0       	rjmp	.+26     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	0b c0       	rjmp	.+22     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	09 c0       	rjmp	.+18     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	07 c0       	rjmp	.+14     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5bb2:	80 e0       	ldi	r24, 0x00	; 0
    5bb4:	05 c0       	rjmp	.+10     	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	03 c0       	rjmp	.+6      	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5bba:	80 e0       	ldi	r24, 0x00	; 0
    5bbc:	01 c0       	rjmp	.+2      	; 0x5bc0 <menu_ProcessMessage+0x47a>
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	cf 91       	pop	r28
    5bc2:	08 95       	ret

00005bc4 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5bc6:	34 e0       	ldi	r19, 0x04	; 4
    5bc8:	82 3c       	cpi	r24, 0xC2	; 194
    5bca:	93 07       	cpc	r25, r19
    5bcc:	49 f0       	breq	.+18     	; 0x5be0 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5bce:	34 e0       	ldi	r19, 0x04	; 4
    5bd0:	82 3c       	cpi	r24, 0xC2	; 194
    5bd2:	93 07       	cpc	r25, r19
    5bd4:	38 f0       	brcs	.+14     	; 0x5be4 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5bd6:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5bd8:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5bda:	a9 f7       	brne	.-22     	; 0x5bc6 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5bdc:	80 e0       	ldi	r24, 0x00	; 0
    5bde:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5be0:	82 2f       	mov	r24, r18
    5be2:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5be4:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5be6:	08 95       	ret

00005be8 <init_SoftKeys>:

void init_SoftKeys(){
    5be8:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5bea:	0e 94 83 0c 	call	0x1906	; 0x1906 <eeprom_ReadSoftkeys>
    5bee:	8f 3f       	cpi	r24, 0xFF	; 255
    5bf0:	c9 f4       	brne	.+50     	; 0x5c24 <init_SoftKeys+0x3c>
    5bf2:	0f c0       	rjmp	.+30     	; 0x5c12 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5bf4:	82 2f       	mov	r24, r18
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	e7 52       	subi	r30, 0x27	; 39
    5bfc:	fa 4f       	sbci	r31, 0xFA	; 250
    5bfe:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5c00:	88 0f       	add	r24, r24
    5c02:	99 1f       	adc	r25, r25
    5c04:	fc 01       	movw	r30, r24
    5c06:	e0 52       	subi	r30, 0x20	; 32
    5c08:	fa 4f       	sbci	r31, 0xFA	; 250
    5c0a:	11 82       	std	Z+1, r1	; 0x01
    5c0c:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5c0e:	2f 5f       	subi	r18, 0xFF	; 255
    5c10:	01 c0       	rjmp	.+2      	; 0x5c14 <init_SoftKeys+0x2c>
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	24 30       	cpi	r18, 0x04	; 4
    5c16:	70 f3       	brcs	.-36     	; 0x5bf4 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5c18:	40 e0       	ldi	r20, 0x00	; 0
    5c1a:	50 e0       	ldi	r21, 0x00	; 0
    5c1c:	67 e0       	ldi	r22, 0x07	; 7
    5c1e:	81 e0       	ldi	r24, 0x01	; 1
    5c20:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
    5c24:	c0 e0       	ldi	r28, 0x00	; 0
    5c26:	25 c0       	rjmp	.+74     	; 0x5c72 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5c28:	4c 2f       	mov	r20, r28
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	fa 01       	movw	r30, r20
    5c2e:	e7 52       	subi	r30, 0x27	; 39
    5c30:	fa 4f       	sbci	r31, 0xFA	; 250
    5c32:	80 81       	ld	r24, Z
    5c34:	8d 31       	cpi	r24, 0x1D	; 29
    5c36:	70 f4       	brcc	.+28     	; 0x5c54 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    5c38:	24 e1       	ldi	r18, 0x14	; 20
    5c3a:	82 9f       	mul	r24, r18
    5c3c:	c0 01       	movw	r24, r0
    5c3e:	11 24       	eor	r1, r1
    5c40:	8e 53       	subi	r24, 0x3E	; 62
    5c42:	9b 4f       	sbci	r25, 0xFB	; 251
    5c44:	44 0f       	add	r20, r20
    5c46:	55 1f       	adc	r21, r21
    5c48:	fa 01       	movw	r30, r20
    5c4a:	e0 52       	subi	r30, 0x20	; 32
    5c4c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	80 83       	st	Z, r24
    5c52:	0e c0       	rjmp	.+28     	; 0x5c70 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5c54:	fa 01       	movw	r30, r20
    5c56:	ee 0f       	add	r30, r30
    5c58:	ff 1f       	adc	r31, r31
    5c5a:	e0 52       	subi	r30, 0x20	; 32
    5c5c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c5e:	11 82       	std	Z+1, r1	; 0x01
    5c60:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5c62:	4f 5f       	subi	r20, 0xFF	; 255
    5c64:	5f 4f       	sbci	r21, 0xFF	; 255
    5c66:	40 61       	ori	r20, 0x10	; 16
    5c68:	67 e0       	ldi	r22, 0x07	; 7
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5c70:	cf 5f       	subi	r28, 0xFF	; 255
    5c72:	c4 30       	cpi	r28, 0x04	; 4
    5c74:	c8 f2       	brcs	.-78     	; 0x5c28 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5c76:	cf 91       	pop	r28
    5c78:	08 95       	ret

00005c7a <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5c7e:	64 30       	cpi	r22, 0x04	; 4
    5c80:	28 f5       	brcc	.+74     	; 0x5ccc <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5c82:	00 97       	sbiw	r24, 0x00	; 0
    5c84:	b9 f0       	breq	.+46     	; 0x5cb4 <softKey_Set+0x3a>
    5c86:	fc 01       	movw	r30, r24
    5c88:	24 91       	lpm	r18, Z
    5c8a:	2f 73       	andi	r18, 0x3F	; 63
    5c8c:	21 30       	cpi	r18, 0x01	; 1
    5c8e:	91 f4       	brne	.+36     	; 0x5cb4 <softKey_Set+0x3a>
    5c90:	31 96       	adiw	r30, 0x01	; 1
    5c92:	24 91       	lpm	r18, Z
    5c94:	24 ff       	sbrs	r18, 4
    5c96:	0e c0       	rjmp	.+28     	; 0x5cb4 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5c98:	c6 2f       	mov	r28, r22
    5c9a:	d0 e0       	ldi	r29, 0x00	; 0
    5c9c:	fe 01       	movw	r30, r28
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	e0 52       	subi	r30, 0x20	; 32
    5ca4:	fa 4f       	sbci	r31, 0xFA	; 250
    5ca6:	91 83       	std	Z+1, r25	; 0x01
    5ca8:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5caa:	8c df       	rcall	.-232    	; 0x5bc4 <getSoftKeyIndex>
    5cac:	c7 52       	subi	r28, 0x27	; 39
    5cae:	da 4f       	sbci	r29, 0xFA	; 250
    5cb0:	88 83       	st	Y, r24
    5cb2:	0c c0       	rjmp	.+24     	; 0x5ccc <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5cb4:	70 e0       	ldi	r23, 0x00	; 0
    5cb6:	fb 01       	movw	r30, r22
    5cb8:	ee 0f       	add	r30, r30
    5cba:	ff 1f       	adc	r31, r31
    5cbc:	e0 52       	subi	r30, 0x20	; 32
    5cbe:	fa 4f       	sbci	r31, 0xFA	; 250
    5cc0:	11 82       	std	Z+1, r1	; 0x01
    5cc2:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5cc4:	fb 01       	movw	r30, r22
    5cc6:	e7 52       	subi	r30, 0x27	; 39
    5cc8:	fa 4f       	sbci	r31, 0xFA	; 250
    5cca:	10 82       	st	Z, r1
		}
	}
}
    5ccc:	df 91       	pop	r29
    5cce:	cf 91       	pop	r28
    5cd0:	08 95       	ret

00005cd2 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5cd2:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5cd6:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5cda:	3e 96       	adiw	r30, 0x0e	; 14
    5cdc:	65 91       	lpm	r22, Z+
    5cde:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5ce0:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    5ce4:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5ce8:	c8 df       	rcall	.-112    	; 0x5c7a <softKey_Set>
	eeprom_UpdateSoftkeys();
    5cea:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_UpdateSoftkeys>
	return 0;
}
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	08 95       	ret

00005cf2 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5cf8:	c0 e0       	ldi	r28, 0x00	; 0
    5cfa:	32 c0       	rjmp	.+100    	; 0x5d60 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5cfc:	0c 2f       	mov	r16, r28
    5cfe:	10 e0       	ldi	r17, 0x00	; 0
    5d00:	f8 01       	movw	r30, r16
    5d02:	ee 0f       	add	r30, r30
    5d04:	ff 1f       	adc	r31, r31
    5d06:	e0 52       	subi	r30, 0x20	; 32
    5d08:	fa 4f       	sbci	r31, 0xFA	; 250
    5d0a:	01 90       	ld	r0, Z+
    5d0c:	f0 81       	ld	r31, Z
    5d0e:	e0 2d       	mov	r30, r0
    5d10:	30 97       	sbiw	r30, 0x00	; 0
    5d12:	31 f0       	breq	.+12     	; 0x5d20 <softKeys_toLCD+0x2e>
    5d14:	3e 96       	adiw	r30, 0x0e	; 14
    5d16:	65 91       	lpm	r22, Z+
    5d18:	75 91       	lpm	r23, Z+
    5d1a:	61 15       	cp	r22, r1
    5d1c:	71 05       	cpc	r23, r1
    5d1e:	21 f4       	brne	.+8      	; 0x5d28 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5d20:	8c 2f       	mov	r24, r28
    5d22:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <keylabel_clr>
    5d26:	1b c0       	rjmp	.+54     	; 0x5d5e <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5d28:	8c 2f       	mov	r24, r28
    5d2a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5d2e:	00 0f       	add	r16, r16
    5d30:	11 1f       	adc	r17, r17
    5d32:	f8 01       	movw	r30, r16
    5d34:	e0 52       	subi	r30, 0x20	; 32
    5d36:	fa 4f       	sbci	r31, 0xFA	; 250
    5d38:	01 90       	ld	r0, Z+
    5d3a:	f0 81       	ld	r31, Z
    5d3c:	e0 2d       	mov	r30, r0
    5d3e:	70 96       	adiw	r30, 0x10	; 16
    5d40:	05 90       	lpm	r0, Z+
    5d42:	f4 91       	lpm	r31, Z
    5d44:	e0 2d       	mov	r30, r0
    5d46:	30 97       	sbiw	r30, 0x00	; 0
    5d48:	51 f0       	breq	.+20     	; 0x5d5e <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5d4a:	80 e0       	ldi	r24, 0x00	; 0
    5d4c:	19 95       	eicall
    5d4e:	81 38       	cpi	r24, 0x81	; 129
    5d50:	11 f4       	brne	.+4      	; 0x5d56 <softKeys_toLCD+0x64>
    5d52:	6f ef       	ldi	r22, 0xFF	; 255
    5d54:	01 c0       	rjmp	.+2      	; 0x5d58 <softKeys_toLCD+0x66>
    5d56:	60 e0       	ldi	r22, 0x00	; 0
    5d58:	8c 2f       	mov	r24, r28
    5d5a:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5d5e:	cf 5f       	subi	r28, 0xFF	; 255
    5d60:	c4 30       	cpi	r28, 0x04	; 4
    5d62:	60 f2       	brcs	.-104    	; 0x5cfc <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5d64:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
}
    5d68:	cf 91       	pop	r28
    5d6a:	1f 91       	pop	r17
    5d6c:	0f 91       	pop	r16
    5d6e:	08 95       	ret

00005d70 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5d70:	82 30       	cpi	r24, 0x02	; 2
    5d72:	49 f0       	breq	.+18     	; 0x5d86 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5d74:	18 f4       	brcc	.+6      	; 0x5d7c <softKey_MessageKey_ToSoftKeyNr+0xc>
    5d76:	81 30       	cpi	r24, 0x01	; 1
    5d78:	51 f0       	breq	.+20     	; 0x5d8e <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5d7a:	0b c0       	rjmp	.+22     	; 0x5d92 <softKey_MessageKey_ToSoftKeyNr+0x22>
    5d7c:	83 30       	cpi	r24, 0x03	; 3
    5d7e:	59 f0       	breq	.+22     	; 0x5d96 <softKey_MessageKey_ToSoftKeyNr+0x26>
    5d80:	84 30       	cpi	r24, 0x04	; 4
    5d82:	19 f0       	breq	.+6      	; 0x5d8a <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5d84:	06 c0       	rjmp	.+12     	; 0x5d92 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5d86:	80 e0       	ldi	r24, 0x00	; 0
    5d88:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5d8a:	82 e0       	ldi	r24, 0x02	; 2
    5d8c:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5d8e:	83 e0       	ldi	r24, 0x03	; 3
    5d90:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5d92:	8f ef       	ldi	r24, 0xFF	; 255
    5d94:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5d96:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5d98:	08 95       	ret

00005d9a <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5d9a:	0f 93       	push	r16
    5d9c:	1f 93       	push	r17
    5d9e:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5da0:	84 30       	cpi	r24, 0x04	; 4
    5da2:	d0 f5       	brcc	.+116    	; 0x5e18 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5da4:	e8 2f       	mov	r30, r24
    5da6:	f0 e0       	ldi	r31, 0x00	; 0
    5da8:	ee 0f       	add	r30, r30
    5daa:	ff 1f       	adc	r31, r31
    5dac:	e0 52       	subi	r30, 0x20	; 32
    5dae:	fa 4f       	sbci	r31, 0xFA	; 250
    5db0:	00 81       	ld	r16, Z
    5db2:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5db4:	01 15       	cp	r16, r1
    5db6:	11 05       	cpc	r17, r1
    5db8:	89 f1       	breq	.+98     	; 0x5e1c <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5dba:	f8 01       	movw	r30, r16
    5dbc:	94 91       	lpm	r25, Z
    5dbe:	9f 73       	andi	r25, 0x3F	; 63
    5dc0:	91 30       	cpi	r25, 0x01	; 1
    5dc2:	71 f5       	brne	.+92     	; 0x5e20 <softKey_Execute+0x86>
    5dc4:	31 96       	adiw	r30, 0x01	; 1
    5dc6:	94 91       	lpm	r25, Z
    5dc8:	94 ff       	sbrs	r25, 4
    5dca:	2c c0       	rjmp	.+88     	; 0x5e24 <softKey_Execute+0x8a>
    5dcc:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5dce:	3f 96       	adiw	r30, 0x0f	; 15
    5dd0:	05 90       	lpm	r0, Z+
    5dd2:	f4 91       	lpm	r31, Z
    5dd4:	e0 2d       	mov	r30, r0
    5dd6:	30 97       	sbiw	r30, 0x00	; 0
    5dd8:	89 f0       	breq	.+34     	; 0x5dfc <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5dda:	86 2f       	mov	r24, r22
    5ddc:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5dde:	82 38       	cpi	r24, 0x82	; 130
    5de0:	29 f4       	brne	.+10     	; 0x5dec <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5de2:	60 e0       	ldi	r22, 0x00	; 0
    5de4:	8c 2f       	mov	r24, r28
    5de6:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_statcheck>
    5dea:	06 c0       	rjmp	.+12     	; 0x5df8 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5dec:	81 38       	cpi	r24, 0x81	; 129
    5dee:	21 f4       	brne	.+8      	; 0x5df8 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5df0:	6f ef       	ldi	r22, 0xFF	; 255
    5df2:	8c 2f       	mov	r24, r28
    5df4:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_statcheck>
					}
					keylabel_toLCD();
    5df8:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	3c 96       	adiw	r30, 0x0c	; 12
    5e00:	85 91       	lpm	r24, Z+
    5e02:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5e04:	00 97       	sbiw	r24, 0x00	; 0
    5e06:	81 f0       	breq	.+32     	; 0x5e28 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5e08:	b8 01       	movw	r22, r16
    5e0a:	6e 5f       	subi	r22, 0xFE	; 254
    5e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e0e:	0e 94 ca 22 	call	0x4594	; 0x4594 <menu_Init>
					menu_InitLCD(); //display menu
    5e12:	92 dc       	rcall	.-1756   	; 0x5738 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	09 c0       	rjmp	.+18     	; 0x5e2a <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5e18:	8f ef       	ldi	r24, 0xFF	; 255
    5e1a:	07 c0       	rjmp	.+14     	; 0x5e2a <softKey_Execute+0x90>
    5e1c:	8f ef       	ldi	r24, 0xFF	; 255
    5e1e:	05 c0       	rjmp	.+10     	; 0x5e2a <softKey_Execute+0x90>
    5e20:	8f ef       	ldi	r24, 0xFF	; 255
    5e22:	03 c0       	rjmp	.+6      	; 0x5e2a <softKey_Execute+0x90>
    5e24:	8f ef       	ldi	r24, 0xFF	; 255
    5e26:	01 c0       	rjmp	.+2      	; 0x5e2a <softKey_Execute+0x90>
    5e28:	8f ef       	ldi	r24, 0xFF	; 255
}
    5e2a:	cf 91       	pop	r28
    5e2c:	1f 91       	pop	r17
    5e2e:	0f 91       	pop	r16
    5e30:	08 95       	ret

00005e32 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5e32:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5e34:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5e38:	8c e0       	ldi	r24, 0x0C	; 12
    5e3a:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5e3e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    5e42:	84 ff       	sbrs	r24, 4
    5e44:	02 c0       	rjmp	.+4      	; 0x5e4a <menu_showPowerState+0x18>
    5e46:	80 e2       	ldi	r24, 0x20	; 32
    5e48:	01 c0       	rjmp	.+2      	; 0x5e4c <menu_showPowerState+0x1a>
    5e4a:	89 e0       	ldi	r24, 0x09	; 9
    5e4c:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
	lcd_goto(saveCursor);
    5e50:	8c 2f       	mov	r24, r28
    5e52:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>

    5e56:	cf 91       	pop	r28
    5e58:	08 95       	ret

00005e5a <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5e5a:	85 b1       	in	r24, 0x05	; 5
    5e5c:	80 64       	ori	r24, 0x40	; 64
    5e5e:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5e60:	83 e1       	ldi	r24, 0x13	; 19
    5e62:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e66:	e5 df       	rcall	.-54     	; 0x5e32 <menu_showPowerState>
	return 0;
}
    5e68:	80 e0       	ldi	r24, 0x00	; 0
    5e6a:	08 95       	ret

00005e6c <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5e6c:	85 b1       	in	r24, 0x05	; 5
    5e6e:	8f 7b       	andi	r24, 0xBF	; 191
    5e70:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5e72:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e76:	dd df       	rcall	.-70     	; 0x5e32 <menu_showPowerState>
	return 0;
}
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	08 95       	ret

00005e7c <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5e7c:	85 b1       	in	r24, 0x05	; 5
    5e7e:	8f 7b       	andi	r24, 0xBF	; 191
    5e80:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e88:	d4 df       	rcall	.-88     	; 0x5e32 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5e8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e8c:	f8 94       	cli
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	06 c0       	rjmp	.+12     	; 0x5e9e <menuOnEnterPwrRest+0x22>
    5e92:	e0 e5       	ldi	r30, 0x50	; 80
    5e94:	f2 e0       	ldi	r31, 0x02	; 2
    5e96:	88 e2       	ldi	r24, 0x28	; 40
    5e98:	82 83       	std	Z+2, r24	; 0x02
    5e9a:	13 82       	std	Z+3, r1	; 0x03
    5e9c:	80 e0       	ldi	r24, 0x00	; 0
    5e9e:	81 11       	cpse	r24, r1
    5ea0:	f8 cf       	rjmp	.-16     	; 0x5e92 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5ea2:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5ea4:	08 95       	ret

00005ea6 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5ea6:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <msgInIndex>
    5eaa:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <msgOutIndex>
    5eae:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <msgOverflow>
    5eb2:	08 95       	ret

00005eb4 <message_push>:
    5eb4:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <msgInIndex>
    5eb8:	e9 2f       	mov	r30, r25
    5eba:	f0 e0       	ldi	r31, 0x00	; 0
    5ebc:	e7 50       	subi	r30, 0x07	; 7
    5ebe:	f8 4f       	sbci	r31, 0xF8	; 248
    5ec0:	80 83       	st	Z, r24
    5ec2:	9f 5f       	subi	r25, 0xFF	; 255
    5ec4:	9f 71       	andi	r25, 0x1F	; 31
    5ec6:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <msgOutIndex>
    5eca:	98 13       	cpse	r25, r24
    5ecc:	04 c0       	rjmp	.+8      	; 0x5ed6 <message_push+0x22>
    5ece:	8f ef       	ldi	r24, 0xFF	; 255
    5ed0:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <msgOverflow>
    5ed4:	08 95       	ret
    5ed6:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <msgInIndex>
    5eda:	08 95       	ret

00005edc <message_get>:
    5edc:	4f b7       	in	r20, 0x3f	; 63
    5ede:	f8 94       	cli
    5ee0:	21 e0       	ldi	r18, 0x01	; 1
    5ee2:	11 c0       	rjmp	.+34     	; 0x5f06 <message_get+0x2a>
    5ee4:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <msgOutIndex>
    5ee8:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <msgInIndex>
    5eec:	8f ef       	ldi	r24, 0xFF	; 255
    5eee:	20 e0       	ldi	r18, 0x00	; 0
    5ef0:	93 17       	cp	r25, r19
    5ef2:	49 f0       	breq	.+18     	; 0x5f06 <message_get+0x2a>
    5ef4:	e9 2f       	mov	r30, r25
    5ef6:	f0 e0       	ldi	r31, 0x00	; 0
    5ef8:	e7 50       	subi	r30, 0x07	; 7
    5efa:	f8 4f       	sbci	r31, 0xF8	; 248
    5efc:	80 81       	ld	r24, Z
    5efe:	9f 5f       	subi	r25, 0xFF	; 255
    5f00:	9f 71       	andi	r25, 0x1F	; 31
    5f02:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <msgOutIndex>
    5f06:	21 11       	cpse	r18, r1
    5f08:	ed cf       	rjmp	.-38     	; 0x5ee4 <message_get+0x8>
    5f0a:	4f bf       	out	0x3f, r20	; 63
    5f0c:	08 95       	ret

00005f0e <message_status>:
    5f0e:	4f b7       	in	r20, 0x3f	; 63
    5f10:	f8 94       	cli
    5f12:	91 e0       	ldi	r25, 0x01	; 1
    5f14:	08 c0       	rjmp	.+16     	; 0x5f26 <message_status+0x18>
    5f16:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <msgOutIndex>
    5f1a:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <msgInIndex>
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	80 e0       	ldi	r24, 0x00	; 0
    5f22:	32 17       	cp	r19, r18
    5f24:	11 f0       	breq	.+4      	; 0x5f2a <message_status+0x1c>
    5f26:	8f ef       	ldi	r24, 0xFF	; 255
    5f28:	01 c0       	rjmp	.+2      	; 0x5f2c <message_status+0x1e>
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	91 11       	cpse	r25, r1
    5f2e:	f3 cf       	rjmp	.-26     	; 0x5f16 <message_status+0x8>
    5f30:	4f bf       	out	0x3f, r20	; 63
    5f32:	08 95       	ret

00005f34 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5f34:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5f36:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <msgPipe_Handling>
    5f3a:	99 23       	and	r25, r25
    5f3c:	e1 f0       	breq	.+56     	; 0x5f76 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5f3e:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5f42:	21 e0       	ldi	r18, 0x01	; 1
    5f44:	29 0f       	add	r18, r25
    5f46:	20 93 f6 07 	sts	0x07F6, r18	; 0x8007f6 <pipeMsgInIndex>
    5f4a:	e9 2f       	mov	r30, r25
    5f4c:	f0 e0       	ldi	r31, 0x00	; 0
    5f4e:	ee 0f       	add	r30, r30
    5f50:	ff 1f       	adc	r31, r31
    5f52:	ea 50       	subi	r30, 0x0A	; 10
    5f54:	fa 4f       	sbci	r31, 0xFA	; 250
    5f56:	51 83       	std	Z+1, r21	; 0x01
    5f58:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5f5a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5f5e:	28 13       	cpse	r18, r24
    5f60:	0a c0       	rjmp	.+20     	; 0x5f76 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5f62:	90 93 f6 07 	sts	0x07F6, r25	; 0x8007f6 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5f66:	9f 3f       	cpi	r25, 0xFF	; 255
    5f68:	19 f4       	brne	.+6      	; 0x5f70 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5f6a:	8f ef       	ldi	r24, 0xFF	; 255
    5f6c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5f70:	8f ef       	ldi	r24, 0xFF	; 255
    5f72:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <msgPipeOverflow>
    5f76:	08 95       	ret

00005f78 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5f78:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5f7c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5f80:	e8 13       	cpse	r30, r24
    5f82:	03 c0       	rjmp	.+6      	; 0x5f8a <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5f84:	8f ef       	ldi	r24, 0xFF	; 255
    5f86:	9f ef       	ldi	r25, 0xFF	; 255
    5f88:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5f8a:	81 e0       	ldi	r24, 0x01	; 1
    5f8c:	8e 0f       	add	r24, r30
    5f8e:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <pipeMsgOutIndex>
    5f92:	f0 e0       	ldi	r31, 0x00	; 0
    5f94:	ee 0f       	add	r30, r30
    5f96:	ff 1f       	adc	r31, r31
    5f98:	ea 50       	subi	r30, 0x0A	; 10
    5f9a:	fa 4f       	sbci	r31, 0xFA	; 250
    5f9c:	80 81       	ld	r24, Z
    5f9e:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5fa0:	08 95       	ret

00005fa2 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5fa2:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5fa6:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5faa:	98 13       	cpse	r25, r24
    5fac:	02 c0       	rjmp	.+4      	; 0x5fb2 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5fb2:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5fb4:	08 95       	ret

00005fb6 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	e7 e3       	ldi	r30, 0x37	; 55
    5fba:	f8 e0       	ldi	r31, 0x08	; 8
    5fbc:	03 c0       	rjmp	.+6      	; 0x5fc4 <midi_CouplerReset+0xe>
    5fbe:	10 82       	st	Z, r1
    5fc0:	8f 5f       	subi	r24, 0xFF	; 255
    5fc2:	31 96       	adiw	r30, 0x01	; 1
    5fc4:	8c 30       	cpi	r24, 0x0C	; 12
    5fc6:	d8 f3       	brcs	.-10     	; 0x5fbe <midi_CouplerReset+0x8>
    5fc8:	08 95       	ret

00005fca <init_Midi>:
    5fca:	f5 df       	rcall	.-22     	; 0x5fb6 <midi_CouplerReset>
    5fcc:	8f ef       	ldi	r24, 0xFF	; 255
    5fce:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    5fd2:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
    5fd6:	08 95       	ret

00005fd8 <set_Coupler>:
    5fd8:	8c 30       	cpi	r24, 0x0C	; 12
    5fda:	e8 f4       	brcc	.+58     	; 0x6016 <set_Coupler+0x3e>
    5fdc:	e8 2f       	mov	r30, r24
    5fde:	f0 e0       	ldi	r31, 0x00	; 0
    5fe0:	e9 5c       	subi	r30, 0xC9	; 201
    5fe2:	f7 4f       	sbci	r31, 0xF7	; 247
    5fe4:	9f ef       	ldi	r25, 0xFF	; 255
    5fe6:	90 83       	st	Z, r25
    5fe8:	86 30       	cpi	r24, 0x06	; 6
    5fea:	10 f0       	brcs	.+4      	; 0x5ff0 <set_Coupler+0x18>
    5fec:	86 50       	subi	r24, 0x06	; 6
    5fee:	01 c0       	rjmp	.+2      	; 0x5ff2 <set_Coupler+0x1a>
    5ff0:	8a 5f       	subi	r24, 0xFA	; 250
    5ff2:	e8 2f       	mov	r30, r24
    5ff4:	f0 e0       	ldi	r31, 0x00	; 0
    5ff6:	df 01       	movw	r26, r30
    5ff8:	a9 5c       	subi	r26, 0xC9	; 201
    5ffa:	b7 4f       	sbci	r27, 0xF7	; 247
    5ffc:	8c 91       	ld	r24, X
    5ffe:	88 23       	and	r24, r24
    6000:	59 f0       	breq	.+22     	; 0x6018 <set_Coupler+0x40>
    6002:	df 01       	movw	r26, r30
    6004:	a9 5c       	subi	r26, 0xC9	; 201
    6006:	b7 4f       	sbci	r27, 0xF7	; 247
    6008:	1c 92       	st	X, r1
    600a:	ee 0f       	add	r30, r30
    600c:	ff 1f       	adc	r31, r31
    600e:	e2 5a       	subi	r30, 0xA2	; 162
    6010:	fb 4e       	sbci	r31, 0xEB	; 235
    6012:	84 91       	lpm	r24, Z
    6014:	08 95       	ret
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	08 95       	ret

0000601a <getAllCouplers>:
    601a:	80 e0       	ldi	r24, 0x00	; 0
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	4b e0       	ldi	r20, 0x0B	; 11
    6020:	01 c0       	rjmp	.+2      	; 0x6024 <getAllCouplers+0xa>
    6022:	42 2f       	mov	r20, r18
    6024:	28 2f       	mov	r18, r24
    6026:	39 2f       	mov	r19, r25
    6028:	22 0f       	add	r18, r18
    602a:	33 1f       	adc	r19, r19
    602c:	82 2f       	mov	r24, r18
    602e:	93 2f       	mov	r25, r19
    6030:	e4 2f       	mov	r30, r20
    6032:	f0 e0       	ldi	r31, 0x00	; 0
    6034:	e9 5c       	subi	r30, 0xC9	; 201
    6036:	f7 4f       	sbci	r31, 0xF7	; 247
    6038:	50 81       	ld	r21, Z
    603a:	5f 3f       	cpi	r21, 0xFF	; 255
    603c:	09 f4       	brne	.+2      	; 0x6040 <getAllCouplers+0x26>
    603e:	81 60       	ori	r24, 0x01	; 1
    6040:	2f ef       	ldi	r18, 0xFF	; 255
    6042:	24 0f       	add	r18, r20
    6044:	41 11       	cpse	r20, r1
    6046:	ed cf       	rjmp	.-38     	; 0x6022 <getAllCouplers+0x8>
    6048:	08 95       	ret

0000604a <setAllCouplers>:
    604a:	40 e0       	ldi	r20, 0x00	; 0
    604c:	80 ff       	sbrs	r24, 0
    604e:	07 c0       	rjmp	.+14     	; 0x605e <setAllCouplers+0x14>
    6050:	e4 2f       	mov	r30, r20
    6052:	f0 e0       	ldi	r31, 0x00	; 0
    6054:	e9 5c       	subi	r30, 0xC9	; 201
    6056:	f7 4f       	sbci	r31, 0xF7	; 247
    6058:	2f ef       	ldi	r18, 0xFF	; 255
    605a:	20 83       	st	Z, r18
    605c:	05 c0       	rjmp	.+10     	; 0x6068 <setAllCouplers+0x1e>
    605e:	e4 2f       	mov	r30, r20
    6060:	f0 e0       	ldi	r31, 0x00	; 0
    6062:	e9 5c       	subi	r30, 0xC9	; 201
    6064:	f7 4f       	sbci	r31, 0xF7	; 247
    6066:	10 82       	st	Z, r1
    6068:	28 2f       	mov	r18, r24
    606a:	39 2f       	mov	r19, r25
    606c:	36 95       	lsr	r19
    606e:	27 95       	ror	r18
    6070:	82 2f       	mov	r24, r18
    6072:	93 2f       	mov	r25, r19
    6074:	4f 5f       	subi	r20, 0xFF	; 255
    6076:	4c 30       	cpi	r20, 0x0C	; 12
    6078:	48 f3       	brcs	.-46     	; 0x604c <setAllCouplers+0x2>
    607a:	08 95       	ret

0000607c <midiAllReset>:
    607c:	80 e8       	ldi	r24, 0x80	; 128
    607e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    6082:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <init_Pipe>
    6086:	08 95       	ret

00006088 <registers_CalcCount>:
    6088:	20 e0       	ldi	r18, 0x00	; 0
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	12 c0       	rjmp	.+36     	; 0x60b2 <registers_CalcCount+0x2a>
    608e:	82 2f       	mov	r24, r18
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	fc 01       	movw	r30, r24
    6094:	ee 0f       	add	r30, r30
    6096:	ff 1f       	adc	r31, r31
    6098:	8e 0f       	add	r24, r30
    609a:	9f 1f       	adc	r25, r31
    609c:	fc 01       	movw	r30, r24
    609e:	e3 5e       	subi	r30, 0xE3	; 227
    60a0:	f7 4f       	sbci	r31, 0xF7	; 247
    60a2:	81 81       	ldd	r24, Z+1	; 0x01
    60a4:	8f 3f       	cpi	r24, 0xFF	; 255
    60a6:	21 f0       	breq	.+8      	; 0x60b0 <registers_CalcCount+0x28>
    60a8:	83 17       	cp	r24, r19
    60aa:	10 f0       	brcs	.+4      	; 0x60b0 <registers_CalcCount+0x28>
    60ac:	31 e0       	ldi	r19, 0x01	; 1
    60ae:	38 0f       	add	r19, r24
    60b0:	2f 5f       	subi	r18, 0xFF	; 255
    60b2:	28 30       	cpi	r18, 0x08	; 8
    60b4:	60 f3       	brcs	.-40     	; 0x608e <registers_CalcCount+0x6>
    60b6:	30 93 36 08 	sts	0x0836, r19	; 0x800836 <registerCount>
    60ba:	08 95       	ret

000060bc <init_Registers>:
    60bc:	8f ef       	ldi	r24, 0xFF	; 255
    60be:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
    60c2:	20 e0       	ldi	r18, 0x00	; 0
    60c4:	0e c0       	rjmp	.+28     	; 0x60e2 <init_Registers+0x26>
    60c6:	82 2f       	mov	r24, r18
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	fc 01       	movw	r30, r24
    60cc:	ee 0f       	add	r30, r30
    60ce:	ff 1f       	adc	r31, r31
    60d0:	e8 0f       	add	r30, r24
    60d2:	f9 1f       	adc	r31, r25
    60d4:	e3 5e       	subi	r30, 0xE3	; 227
    60d6:	f7 4f       	sbci	r31, 0xF7	; 247
    60d8:	8f ef       	ldi	r24, 0xFF	; 255
    60da:	80 83       	st	Z, r24
    60dc:	81 83       	std	Z+1, r24	; 0x01
    60de:	12 82       	std	Z+2, r1	; 0x02
    60e0:	2f 5f       	subi	r18, 0xFF	; 255
    60e2:	28 30       	cpi	r18, 0x08	; 8
    60e4:	80 f3       	brcs	.-32     	; 0x60c6 <init_Registers+0xa>
    60e6:	0e 94 27 0c 	call	0x184e	; 0x184e <eeprom_ReadReg>
    60ea:	8f 3f       	cpi	r24, 0xFF	; 255
    60ec:	49 f4       	brne	.+18     	; 0x6100 <init_Registers+0x44>
    60ee:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <registerCount>
    60f2:	40 e0       	ldi	r20, 0x00	; 0
    60f4:	50 e0       	ldi	r21, 0x00	; 0
    60f6:	65 e0       	ldi	r22, 0x05	; 5
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
    60fe:	01 c0       	rjmp	.+2      	; 0x6102 <init_Registers+0x46>
    6100:	c3 df       	rcall	.-122    	; 0x6088 <registers_CalcCount>
    6102:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <eeprom_ReadProg>
    6106:	8f 3f       	cpi	r24, 0xFF	; 255
    6108:	a1 f5       	brne	.+104    	; 0x6172 <init_Registers+0xb6>
    610a:	2a c0       	rjmp	.+84     	; 0x6160 <init_Registers+0xa4>
    610c:	83 2f       	mov	r24, r19
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	fc 01       	movw	r30, r24
    6112:	ee 0f       	add	r30, r30
    6114:	ff 1f       	adc	r31, r31
    6116:	88 0f       	add	r24, r24
    6118:	99 1f       	adc	r25, r25
    611a:	88 0f       	add	r24, r24
    611c:	99 1f       	adc	r25, r25
    611e:	88 0f       	add	r24, r24
    6120:	99 1f       	adc	r25, r25
    6122:	e8 0f       	add	r30, r24
    6124:	f9 1f       	adc	r31, r25
    6126:	e2 57       	subi	r30, 0x72	; 114
    6128:	f6 4f       	sbci	r31, 0xF6	; 246
    612a:	e2 0f       	add	r30, r18
    612c:	f1 1d       	adc	r31, r1
    612e:	10 82       	st	Z, r1
    6130:	2f 5f       	subi	r18, 0xFF	; 255
    6132:	01 c0       	rjmp	.+2      	; 0x6136 <init_Registers+0x7a>
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	28 30       	cpi	r18, 0x08	; 8
    6138:	48 f3       	brcs	.-46     	; 0x610c <init_Registers+0x50>
    613a:	83 2f       	mov	r24, r19
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	fc 01       	movw	r30, r24
    6140:	ee 0f       	add	r30, r30
    6142:	ff 1f       	adc	r31, r31
    6144:	88 0f       	add	r24, r24
    6146:	99 1f       	adc	r25, r25
    6148:	88 0f       	add	r24, r24
    614a:	99 1f       	adc	r25, r25
    614c:	88 0f       	add	r24, r24
    614e:	99 1f       	adc	r25, r25
    6150:	e8 0f       	add	r30, r24
    6152:	f9 1f       	adc	r31, r25
    6154:	e2 57       	subi	r30, 0x72	; 114
    6156:	f6 4f       	sbci	r31, 0xF6	; 246
    6158:	11 86       	std	Z+9, r1	; 0x09
    615a:	10 86       	std	Z+8, r1	; 0x08
    615c:	3f 5f       	subi	r19, 0xFF	; 255
    615e:	01 c0       	rjmp	.+2      	; 0x6162 <init_Registers+0xa6>
    6160:	30 e0       	ldi	r19, 0x00	; 0
    6162:	30 34       	cpi	r19, 0x40	; 64
    6164:	38 f3       	brcs	.-50     	; 0x6134 <init_Registers+0x78>
    6166:	40 e0       	ldi	r20, 0x00	; 0
    6168:	50 e0       	ldi	r21, 0x00	; 0
    616a:	66 e0       	ldi	r22, 0x06	; 6
    616c:	81 e0       	ldi	r24, 0x01	; 1
    616e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
    6172:	0e 94 c7 0c 	call	0x198e	; 0x198e <eeprom_ReadCCreg>
    6176:	8f 3f       	cpi	r24, 0xFF	; 255
    6178:	61 f4       	brne	.+24     	; 0x6192 <init_Registers+0xd6>
    617a:	ea e5       	ldi	r30, 0x5A	; 90
    617c:	f9 e0       	ldi	r31, 0x09	; 9
    617e:	81 83       	std	Z+1, r24	; 0x01
    6180:	80 83       	st	Z, r24
    6182:	83 83       	std	Z+3, r24	; 0x03
    6184:	82 83       	std	Z+2, r24	; 0x02
    6186:	40 e0       	ldi	r20, 0x00	; 0
    6188:	50 e0       	ldi	r21, 0x00	; 0
    618a:	6a e0       	ldi	r22, 0x0A	; 10
    618c:	81 e0       	ldi	r24, 0x01	; 1
    618e:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <log_putError>
    6192:	08 95       	ret

00006194 <regNr_to_moduleBit>:
    6194:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6198:	89 17       	cp	r24, r25
    619a:	a0 f4       	brcc	.+40     	; 0x61c4 <regNr_to_moduleBit+0x30>
    619c:	80 34       	cpi	r24, 0x40	; 64
    619e:	90 f4       	brcc	.+36     	; 0x61c4 <regNr_to_moduleBit+0x30>
    61a0:	28 e0       	ldi	r18, 0x08	; 8
    61a2:	ed e1       	ldi	r30, 0x1D	; 29
    61a4:	f8 e0       	ldi	r31, 0x08	; 8
    61a6:	30 81       	ld	r19, Z
    61a8:	83 17       	cp	r24, r19
    61aa:	48 f0       	brcs	.+18     	; 0x61be <regNr_to_moduleBit+0x2a>
    61ac:	91 81       	ldd	r25, Z+1	; 0x01
    61ae:	98 17       	cp	r25, r24
    61b0:	30 f0       	brcs	.+12     	; 0x61be <regNr_to_moduleBit+0x2a>
    61b2:	22 81       	ldd	r18, Z+2	; 0x02
    61b4:	98 2f       	mov	r25, r24
    61b6:	93 1b       	sub	r25, r19
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	92 0f       	add	r25, r18
    61bc:	08 95       	ret
    61be:	33 96       	adiw	r30, 0x03	; 3
    61c0:	21 50       	subi	r18, 0x01	; 1
    61c2:	89 f7       	brne	.-30     	; 0x61a6 <regNr_to_moduleBit+0x12>
    61c4:	8f ef       	ldi	r24, 0xFF	; 255
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	08 95       	ret

000061ca <moduleBit_to_registerNr>:
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	16 c0       	rjmp	.+44     	; 0x61fa <moduleBit_to_registerNr+0x30>
    61ce:	40 91 1f 08 	lds	r20, 0x081F	; 0x80081f <registerMap+0x2>
    61d2:	84 17       	cp	r24, r20
    61d4:	88 f0       	brcs	.+34     	; 0x61f8 <moduleBit_to_registerNr+0x2e>
    61d6:	68 2f       	mov	r22, r24
    61d8:	70 e0       	ldi	r23, 0x00	; 0
    61da:	ed e1       	ldi	r30, 0x1D	; 29
    61dc:	f8 e0       	ldi	r31, 0x08	; 8
    61de:	21 81       	ldd	r18, Z+1	; 0x01
    61e0:	30 e0       	ldi	r19, 0x00	; 0
    61e2:	24 0f       	add	r18, r20
    61e4:	31 1d       	adc	r19, r1
    61e6:	50 81       	ld	r21, Z
    61e8:	25 1b       	sub	r18, r21
    61ea:	31 09       	sbc	r19, r1
    61ec:	26 17       	cp	r18, r22
    61ee:	37 07       	cpc	r19, r23
    61f0:	1c f0       	brlt	.+6      	; 0x61f8 <moduleBit_to_registerNr+0x2e>
    61f2:	84 1b       	sub	r24, r20
    61f4:	85 0f       	add	r24, r21
    61f6:	08 95       	ret
    61f8:	9f 5f       	subi	r25, 0xFF	; 255
    61fa:	98 30       	cpi	r25, 0x08	; 8
    61fc:	40 f3       	brcs	.-48     	; 0x61ce <moduleBit_to_registerNr+0x4>
    61fe:	8f ef       	ldi	r24, 0xFF	; 255
    6200:	08 95       	ret

00006202 <read_Register>:
    6202:	cf 93       	push	r28
    6204:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6208:	89 17       	cp	r24, r25
    620a:	08 f0       	brcs	.+2      	; 0x620e <read_Register+0xc>
    620c:	3f c0       	rjmp	.+126    	; 0x628c <read_Register+0x8a>
    620e:	c6 2f       	mov	r28, r22
    6210:	c1 df       	rcall	.-126    	; 0x6194 <regNr_to_moduleBit>
    6212:	81 11       	cpse	r24, r1
    6214:	33 c0       	rjmp	.+102    	; 0x627c <read_Register+0x7a>
    6216:	29 2f       	mov	r18, r25
    6218:	2f 71       	andi	r18, 0x1F	; 31
    621a:	92 95       	swap	r25
    621c:	96 95       	lsr	r25
    621e:	97 70       	andi	r25, 0x07	; 7
    6220:	41 e0       	ldi	r20, 0x01	; 1
    6222:	50 e0       	ldi	r21, 0x00	; 0
    6224:	02 c0       	rjmp	.+4      	; 0x622a <read_Register+0x28>
    6226:	44 0f       	add	r20, r20
    6228:	55 1f       	adc	r21, r21
    622a:	9a 95       	dec	r25
    622c:	e2 f7       	brpl	.-8      	; 0x6226 <read_Register+0x24>
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	f9 01       	movw	r30, r18
    6232:	ee 0f       	add	r30, r30
    6234:	ff 1f       	adc	r31, r31
    6236:	ee 0f       	add	r30, r30
    6238:	ff 1f       	adc	r31, r31
    623a:	ee 0f       	add	r30, r30
    623c:	ff 1f       	adc	r31, r31
    623e:	e4 59       	subi	r30, 0x94	; 148
    6240:	fd 4f       	sbci	r31, 0xFD	; 253
    6242:	91 81       	ldd	r25, Z+1	; 0x01
    6244:	94 23       	and	r25, r20
    6246:	11 f4       	brne	.+4      	; 0x624c <read_Register+0x4a>
    6248:	c1 fd       	sbrc	r28, 1
    624a:	1a c0       	rjmp	.+52     	; 0x6280 <read_Register+0x7e>
    624c:	22 0f       	add	r18, r18
    624e:	33 1f       	adc	r19, r19
    6250:	22 0f       	add	r18, r18
    6252:	33 1f       	adc	r19, r19
    6254:	22 0f       	add	r18, r18
    6256:	33 1f       	adc	r19, r19
    6258:	f9 01       	movw	r30, r18
    625a:	e4 59       	subi	r30, 0x94	; 148
    625c:	fd 4f       	sbci	r31, 0xFD	; 253
    625e:	36 81       	ldd	r19, Z+6	; 0x06
    6260:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <pipe_Module>
    6264:	43 23       	and	r20, r19
    6266:	42 23       	and	r20, r18
    6268:	11 f0       	breq	.+4      	; 0x626e <read_Register+0x6c>
    626a:	c0 fd       	sbrc	r28, 0
    626c:	0b c0       	rjmp	.+22     	; 0x6284 <read_Register+0x82>
    626e:	99 23       	and	r25, r25
    6270:	71 f0       	breq	.+28     	; 0x628e <read_Register+0x8c>
    6272:	44 23       	and	r20, r20
    6274:	61 f0       	breq	.+24     	; 0x628e <read_Register+0x8c>
    6276:	c4 30       	cpi	r28, 0x04	; 4
    6278:	51 f4       	brne	.+20     	; 0x628e <read_Register+0x8c>
    627a:	06 c0       	rjmp	.+12     	; 0x6288 <read_Register+0x86>
    627c:	80 e0       	ldi	r24, 0x00	; 0
    627e:	07 c0       	rjmp	.+14     	; 0x628e <read_Register+0x8c>
    6280:	81 e0       	ldi	r24, 0x01	; 1
    6282:	05 c0       	rjmp	.+10     	; 0x628e <read_Register+0x8c>
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	03 c0       	rjmp	.+6      	; 0x628e <read_Register+0x8c>
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	01 c0       	rjmp	.+2      	; 0x628e <read_Register+0x8c>
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	cf 91       	pop	r28
    6290:	08 95       	ret

00006292 <get_RegisterStatus>:
    6292:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6296:	89 17       	cp	r24, r25
    6298:	90 f5       	brcc	.+100    	; 0x62fe <get_RegisterStatus+0x6c>
    629a:	7c df       	rcall	.-264    	; 0x6194 <regNr_to_moduleBit>
    629c:	81 11       	cpse	r24, r1
    629e:	2d c0       	rjmp	.+90     	; 0x62fa <get_RegisterStatus+0x68>
    62a0:	29 2f       	mov	r18, r25
    62a2:	2f 71       	andi	r18, 0x1F	; 31
    62a4:	92 95       	swap	r25
    62a6:	96 95       	lsr	r25
    62a8:	97 70       	andi	r25, 0x07	; 7
    62aa:	41 e0       	ldi	r20, 0x01	; 1
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	02 c0       	rjmp	.+4      	; 0x62b4 <get_RegisterStatus+0x22>
    62b0:	44 0f       	add	r20, r20
    62b2:	55 1f       	adc	r21, r21
    62b4:	9a 95       	dec	r25
    62b6:	e2 f7       	brpl	.-8      	; 0x62b0 <get_RegisterStatus+0x1e>
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	f9 01       	movw	r30, r18
    62bc:	ee 0f       	add	r30, r30
    62be:	ff 1f       	adc	r31, r31
    62c0:	ee 0f       	add	r30, r30
    62c2:	ff 1f       	adc	r31, r31
    62c4:	ee 0f       	add	r30, r30
    62c6:	ff 1f       	adc	r31, r31
    62c8:	e4 59       	subi	r30, 0x94	; 148
    62ca:	fd 4f       	sbci	r31, 0xFD	; 253
    62cc:	81 81       	ldd	r24, Z+1	; 0x01
    62ce:	84 23       	and	r24, r20
    62d0:	11 f0       	breq	.+4      	; 0x62d6 <get_RegisterStatus+0x44>
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	01 c0       	rjmp	.+2      	; 0x62d8 <get_RegisterStatus+0x46>
    62d6:	82 e0       	ldi	r24, 0x02	; 2
    62d8:	22 0f       	add	r18, r18
    62da:	33 1f       	adc	r19, r19
    62dc:	22 0f       	add	r18, r18
    62de:	33 1f       	adc	r19, r19
    62e0:	22 0f       	add	r18, r18
    62e2:	33 1f       	adc	r19, r19
    62e4:	f9 01       	movw	r30, r18
    62e6:	e4 59       	subi	r30, 0x94	; 148
    62e8:	fd 4f       	sbci	r31, 0xFD	; 253
    62ea:	26 81       	ldd	r18, Z+6	; 0x06
    62ec:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    62f0:	42 23       	and	r20, r18
    62f2:	49 23       	and	r20, r25
    62f4:	29 f0       	breq	.+10     	; 0x6300 <get_RegisterStatus+0x6e>
    62f6:	81 60       	ori	r24, 0x01	; 1
    62f8:	08 95       	ret
    62fa:	80 e0       	ldi	r24, 0x00	; 0
    62fc:	08 95       	ret
    62fe:	80 e0       	ldi	r24, 0x00	; 0
    6300:	08 95       	ret

00006302 <count_Registers>:
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	18 2f       	mov	r17, r24
    630a:	c0 e0       	ldi	r28, 0x00	; 0
    630c:	d0 e0       	ldi	r29, 0x00	; 0
    630e:	06 c0       	rjmp	.+12     	; 0x631c <count_Registers+0x1a>
    6310:	61 2f       	mov	r22, r17
    6312:	8c 2f       	mov	r24, r28
    6314:	76 df       	rcall	.-276    	; 0x6202 <read_Register>
    6316:	81 11       	cpse	r24, r1
    6318:	df 5f       	subi	r29, 0xFF	; 255
    631a:	cf 5f       	subi	r28, 0xFF	; 255
    631c:	c0 34       	cpi	r28, 0x40	; 64
    631e:	c0 f3       	brcs	.-16     	; 0x6310 <count_Registers+0xe>
    6320:	8d 2f       	mov	r24, r29
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	1f 91       	pop	r17
    6328:	08 95       	ret

0000632a <read_allRegister>:
    632a:	ef 92       	push	r14
    632c:	ff 92       	push	r15
    632e:	0f 93       	push	r16
    6330:	1f 93       	push	r17
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	7c 01       	movw	r14, r24
    6338:	c0 e0       	ldi	r28, 0x00	; 0
    633a:	d0 e0       	ldi	r29, 0x00	; 0
    633c:	00 e0       	ldi	r16, 0x00	; 0
    633e:	17 c0       	rjmp	.+46     	; 0x636e <read_allRegister+0x44>
    6340:	1c 2f       	mov	r17, r28
    6342:	17 70       	andi	r17, 0x07	; 7
    6344:	09 f4       	brne	.+2      	; 0x6348 <read_allRegister+0x1e>
    6346:	d0 e0       	ldi	r29, 0x00	; 0
    6348:	d6 95       	lsr	r29
    634a:	63 e0       	ldi	r22, 0x03	; 3
    634c:	8c 2f       	mov	r24, r28
    634e:	59 df       	rcall	.-334    	; 0x6202 <read_Register>
    6350:	88 23       	and	r24, r24
    6352:	11 f0       	breq	.+4      	; 0x6358 <read_allRegister+0x2e>
    6354:	d0 68       	ori	r29, 0x80	; 128
    6356:	0f 5f       	subi	r16, 0xFF	; 255
    6358:	17 30       	cpi	r17, 0x07	; 7
    635a:	41 f4       	brne	.+16     	; 0x636c <read_allRegister+0x42>
    635c:	e1 14       	cp	r14, r1
    635e:	f1 04       	cpc	r15, r1
    6360:	29 f0       	breq	.+10     	; 0x636c <read_allRegister+0x42>
    6362:	f7 01       	movw	r30, r14
    6364:	d0 83       	st	Z, r29
    6366:	c7 01       	movw	r24, r14
    6368:	01 96       	adiw	r24, 0x01	; 1
    636a:	7c 01       	movw	r14, r24
    636c:	cf 5f       	subi	r28, 0xFF	; 255
    636e:	c0 34       	cpi	r28, 0x40	; 64
    6370:	38 f3       	brcs	.-50     	; 0x6340 <read_allRegister+0x16>
    6372:	80 2f       	mov	r24, r16
    6374:	df 91       	pop	r29
    6376:	cf 91       	pop	r28
    6378:	1f 91       	pop	r17
    637a:	0f 91       	pop	r16
    637c:	ff 90       	pop	r15
    637e:	ef 90       	pop	r14
    6380:	08 95       	ret

00006382 <register_onOff>:
    6382:	cf 93       	push	r28
    6384:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6388:	89 17       	cp	r24, r25
    638a:	f0 f4       	brcc	.+60     	; 0x63c8 <register_onOff+0x46>
    638c:	c6 2f       	mov	r28, r22
    638e:	02 df       	rcall	.-508    	; 0x6194 <regNr_to_moduleBit>
    6390:	81 11       	cpse	r24, r1
    6392:	1a c0       	rjmp	.+52     	; 0x63c8 <register_onOff+0x46>
    6394:	89 2f       	mov	r24, r25
    6396:	8f 71       	andi	r24, 0x1F	; 31
    6398:	92 95       	swap	r25
    639a:	96 95       	lsr	r25
    639c:	97 70       	andi	r25, 0x07	; 7
    639e:	c0 ff       	sbrs	r28, 0
    63a0:	0a c0       	rjmp	.+20     	; 0x63b6 <register_onOff+0x34>
    63a2:	61 e0       	ldi	r22, 0x01	; 1
    63a4:	70 e0       	ldi	r23, 0x00	; 0
    63a6:	02 c0       	rjmp	.+4      	; 0x63ac <register_onOff+0x2a>
    63a8:	66 0f       	add	r22, r22
    63aa:	77 1f       	adc	r23, r23
    63ac:	9a 95       	dec	r25
    63ae:	e2 f7       	brpl	.-8      	; 0x63a8 <register_onOff+0x26>
    63b0:	0e 94 4b 13 	call	0x2696	; 0x2696 <pipe_on>
    63b4:	09 c0       	rjmp	.+18     	; 0x63c8 <register_onOff+0x46>
    63b6:	61 e0       	ldi	r22, 0x01	; 1
    63b8:	70 e0       	ldi	r23, 0x00	; 0
    63ba:	02 c0       	rjmp	.+4      	; 0x63c0 <register_onOff+0x3e>
    63bc:	66 0f       	add	r22, r22
    63be:	77 1f       	adc	r23, r23
    63c0:	9a 95       	dec	r25
    63c2:	e2 f7       	brpl	.-8      	; 0x63bc <register_onOff+0x3a>
    63c4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <pipe_off>
    63c8:	cf 91       	pop	r28
    63ca:	08 95       	ret

000063cc <midi_RegisterMatchProgram>:
		eeprom_UpdateProg();
	}
	return result;
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
    63cc:	ff 92       	push	r15
    63ce:	0f 93       	push	r16
    63d0:	1f 93       	push	r17
    63d2:	cf 93       	push	r28
    63d4:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	8c 01       	movw	r16, r24
    63da:	00 0f       	add	r16, r16
    63dc:	11 1f       	adc	r17, r17
    63de:	88 0f       	add	r24, r24
    63e0:	99 1f       	adc	r25, r25
    63e2:	88 0f       	add	r24, r24
    63e4:	99 1f       	adc	r25, r25
    63e6:	88 0f       	add	r24, r24
    63e8:	99 1f       	adc	r25, r25
    63ea:	08 0f       	add	r16, r24
    63ec:	19 1f       	adc	r17, r25
    63ee:	02 57       	subi	r16, 0x72	; 114
    63f0:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    63f2:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    63f4:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    63f6:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    63f8:	14 c0       	rjmp	.+40     	; 0x6422 <midi_RegisterMatchProgram+0x56>
		if ((i & 0x07) == 0) {
    63fa:	9c 2f       	mov	r25, r28
    63fc:	97 70       	andi	r25, 0x07	; 7
    63fe:	21 f4       	brne	.+8      	; 0x6408 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    6400:	f8 01       	movw	r30, r16
    6402:	d0 81       	ld	r29, Z
    6404:	0f 5f       	subi	r16, 0xFF	; 255
    6406:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    6408:	8c 2f       	mov	r24, r28
    640a:	43 df       	rcall	.-378    	; 0x6292 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    640c:	d0 ff       	sbrs	r29, 0
    640e:	03 c0       	rjmp	.+6      	; 0x6416 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
    6410:	81 fd       	sbrc	r24, 1
    6412:	05 c0       	rjmp	.+10     	; 0x641e <midi_RegisterMatchProgram+0x52>
    6414:	0c c0       	rjmp	.+24     	; 0x642e <midi_RegisterMatchProgram+0x62>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
    6416:	81 fd       	sbrc	r24, 1
    6418:	0c c0       	rjmp	.+24     	; 0x6432 <midi_RegisterMatchProgram+0x66>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg & REGISTER_READ_HWIN) {
    641a:	80 fd       	sbrc	r24, 0
				// is set by HW
				result++; // inc return val
    641c:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    641e:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    6420:	cf 5f       	subi	r28, 0xFF	; 255
    6422:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6426:	c9 17       	cp	r28, r25
    6428:	40 f3       	brcs	.-48     	; 0x63fa <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    642a:	8f 2d       	mov	r24, r15
    642c:	03 c0       	rjmp	.+6      	; 0x6434 <midi_RegisterMatchProgram+0x68>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    642e:	8f ef       	ldi	r24, 0xFF	; 255
    6430:	01 c0       	rjmp	.+2      	; 0x6434 <midi_RegisterMatchProgram+0x68>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    6432:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    6434:	df 91       	pop	r29
    6436:	cf 91       	pop	r28
    6438:	1f 91       	pop	r17
    643a:	0f 91       	pop	r16
    643c:	ff 90       	pop	r15
    643e:	08 95       	ret

00006440 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	fc 01       	movw	r30, r24
    6444:	ee 0f       	add	r30, r30
    6446:	ff 1f       	adc	r31, r31
    6448:	88 0f       	add	r24, r24
    644a:	99 1f       	adc	r25, r25
    644c:	88 0f       	add	r24, r24
    644e:	99 1f       	adc	r25, r25
    6450:	88 0f       	add	r24, r24
    6452:	99 1f       	adc	r25, r25
    6454:	e8 0f       	add	r30, r24
    6456:	f9 1f       	adc	r31, r25
    6458:	e2 57       	subi	r30, 0x72	; 114
    645a:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    645c:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    645e:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6460:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6462:	09 c0       	rjmp	.+18     	; 0x6476 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    6464:	39 2f       	mov	r19, r25
    6466:	37 70       	andi	r19, 0x07	; 7
    6468:	11 f4       	brne	.+4      	; 0x646e <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    646a:	20 81       	ld	r18, Z
    646c:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    646e:	20 fd       	sbrc	r18, 0
			result++;
    6470:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    6472:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6474:	9f 5f       	subi	r25, 0xFF	; 255
    6476:	30 91 36 08 	lds	r19, 0x0836	; 0x800836 <registerCount>
    647a:	93 17       	cp	r25, r19
    647c:	98 f3       	brcs	.-26     	; 0x6464 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    647e:	08 95       	ret

00006480 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6480:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <prog_Display>
    6484:	98 17       	cp	r25, r24
    6486:	29 f0       	breq	.+10     	; 0x6492 <prog_set+0x12>
		prog_Display = prog;
    6488:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
		prog_UpdDisplay = TRUE;
    648c:	8f ef       	ldi	r24, 0xFF	; 255
    648e:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    6492:	08 95       	ret

00006494 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    6494:	bf 92       	push	r11
    6496:	cf 92       	push	r12
    6498:	df 92       	push	r13
    649a:	ef 92       	push	r14
    649c:	ff 92       	push	r15
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    64a6:	80 34       	cpi	r24, 0x40	; 64
    64a8:	08 f0       	brcs	.+2      	; 0x64ac <program_toRegister+0x18>
    64aa:	41 c0       	rjmp	.+130    	; 0x652e <program_toRegister+0x9a>
    64ac:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    64ae:	e8 df       	rcall	.-48     	; 0x6480 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    64b0:	f1 2c       	mov	r15, r1
    64b2:	f7 01       	movw	r30, r14
    64b4:	ee 0f       	add	r30, r30
    64b6:	ff 1f       	adc	r31, r31
    64b8:	c7 01       	movw	r24, r14
    64ba:	88 0f       	add	r24, r24
    64bc:	99 1f       	adc	r25, r25
    64be:	88 0f       	add	r24, r24
    64c0:	99 1f       	adc	r25, r25
    64c2:	88 0f       	add	r24, r24
    64c4:	99 1f       	adc	r25, r25
    64c6:	e8 0f       	add	r30, r24
    64c8:	f9 1f       	adc	r31, r25
    64ca:	e2 57       	subi	r30, 0x72	; 114
    64cc:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    64ce:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    64d0:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    64d2:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    64d4:	18 c0       	rjmp	.+48     	; 0x6506 <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    64d6:	6f 01       	movw	r12, r30
    64d8:	8f ef       	ldi	r24, 0xFF	; 255
    64da:	c8 1a       	sub	r12, r24
    64dc:	d8 0a       	sbc	r13, r24
    64de:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    64e0:	d0 e0       	ldi	r29, 0x00	; 0
    64e2:	0d c0       	rjmp	.+26     	; 0x64fe <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    64e4:	8c 2f       	mov	r24, r28
    64e6:	81 70       	andi	r24, 0x01	; 1
    64e8:	c0 fd       	sbrc	r28, 0
					result++;
    64ea:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    64ec:	61 e0       	ldi	r22, 0x01	; 1
    64ee:	81 11       	cpse	r24, r1
    64f0:	01 c0       	rjmp	.+2      	; 0x64f4 <program_toRegister+0x60>
    64f2:	60 e0       	ldi	r22, 0x00	; 0
    64f4:	81 2f       	mov	r24, r17
    64f6:	45 df       	rcall	.-374    	; 0x6382 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    64f8:	c6 95       	lsr	r28
				regNr++;
    64fa:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    64fc:	df 5f       	subi	r29, 0xFF	; 255
    64fe:	d8 30       	cpi	r29, 0x08	; 8
    6500:	88 f3       	brcs	.-30     	; 0x64e4 <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6502:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    6504:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6506:	87 e0       	ldi	r24, 0x07	; 7
    6508:	8b 15       	cp	r24, r11
    650a:	28 f7       	brcc	.-54     	; 0x64d6 <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    650c:	f7 01       	movw	r30, r14
    650e:	ee 0f       	add	r30, r30
    6510:	ff 1f       	adc	r31, r31
    6512:	ee 0c       	add	r14, r14
    6514:	ff 1c       	adc	r15, r15
    6516:	ee 0c       	add	r14, r14
    6518:	ff 1c       	adc	r15, r15
    651a:	ee 0c       	add	r14, r14
    651c:	ff 1c       	adc	r15, r15
    651e:	ee 0d       	add	r30, r14
    6520:	ff 1d       	adc	r31, r15
    6522:	e2 57       	subi	r30, 0x72	; 114
    6524:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    6526:	80 85       	ldd	r24, Z+8	; 0x08
    6528:	91 85       	ldd	r25, Z+9	; 0x09
    652a:	8f dd       	rcall	.-1250   	; 0x604a <setAllCouplers>
    652c:	01 c0       	rjmp	.+2      	; 0x6530 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    652e:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    6530:	80 2f       	mov	r24, r16
    6532:	df 91       	pop	r29
    6534:	cf 91       	pop	r28
    6536:	1f 91       	pop	r17
    6538:	0f 91       	pop	r16
    653a:	ff 90       	pop	r15
    653c:	ef 90       	pop	r14
    653e:	df 90       	pop	r13
    6540:	cf 90       	pop	r12
    6542:	bf 90       	pop	r11
    6544:	08 95       	ret

00006546 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    6546:	cf 93       	push	r28
    6548:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    654a:	90 91 58 09 	lds	r25, 0x0958	; 0x800958 <midi_Setting+0x2>
    654e:	91 11       	cpse	r25, r1
    6550:	14 c0       	rjmp	.+40     	; 0x657a <midi_ProgramChange+0x34>
    6552:	21 c0       	rjmp	.+66     	; 0x6596 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    6554:	e8 2f       	mov	r30, r24
    6556:	f0 e0       	ldi	r31, 0x00	; 0
    6558:	ee 0f       	add	r30, r30
    655a:	ff 1f       	adc	r31, r31
    655c:	ee 0f       	add	r30, r30
    655e:	ff 1f       	adc	r31, r31
    6560:	e9 0f       	add	r30, r25
    6562:	f1 1d       	adc	r31, r1
    6564:	ee 0f       	add	r30, r30
    6566:	ff 1f       	adc	r31, r31
    6568:	ee 0f       	add	r30, r30
    656a:	ff 1f       	adc	r31, r31
    656c:	e2 5b       	subi	r30, 0xB2	; 178
    656e:	f7 4f       	sbci	r31, 0xF7	; 247
    6570:	20 81       	ld	r18, Z
    6572:	2f 3f       	cpi	r18, 0xFF	; 255
    6574:	39 f4       	brne	.+14     	; 0x6584 <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    6576:	9f 5f       	subi	r25, 0xFF	; 255
    6578:	01 c0       	rjmp	.+2      	; 0x657c <midi_ProgramChange+0x36>
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	94 30       	cpi	r25, 0x04	; 4
    657e:	50 f3       	brcs	.-44     	; 0x6554 <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    6580:	80 e0       	ldi	r24, 0x00	; 0
    6582:	01 c0       	rjmp	.+2      	; 0x6586 <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    6584:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    6586:	8f 3f       	cpi	r24, 0xFF	; 255
    6588:	31 f4       	brne	.+12     	; 0x6596 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    658a:	8c 2f       	mov	r24, r28
    658c:	83 df       	rcall	.-250    	; 0x6494 <program_toRegister>
			prog_set(program);
    658e:	8c 2f       	mov	r24, r28
    6590:	77 df       	rcall	.-274    	; 0x6480 <prog_set>
			midiLastProgram = program;
    6592:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <midiLastProgram>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6596:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    659a:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    659c:	21 f0       	breq	.+8      	; 0x65a6 <midi_ProgramChange+0x60>
    659e:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    65a0:	15 d7       	rcall	.+3626   	; 0x73cc <serial1MIDISend>
    65a2:	8c 2f       	mov	r24, r28
    65a4:	13 d7       	rcall	.+3622   	; 0x73cc <serial1MIDISend>
		}
	//} V 0.73 send program change to "thru" out always
}
    65a6:	cf 91       	pop	r28
    65a8:	08 95       	ret

000065aa <midi_resetRegisters>:


void midi_resetRegisters(){
    65aa:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    65ac:	c0 e0       	ldi	r28, 0x00	; 0
    65ae:	06 c0       	rjmp	.+12     	; 0x65bc <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    65b0:	8f ef       	ldi	r24, 0xFF	; 255
    65b2:	66 df       	rcall	.-308    	; 0x6480 <prog_set>
		register_onOff(i,REGISTER_OFF);
    65b4:	60 e0       	ldi	r22, 0x00	; 0
    65b6:	8c 2f       	mov	r24, r28
    65b8:	e4 de       	rcall	.-568    	; 0x6382 <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    65ba:	cf 5f       	subi	r28, 0xFF	; 255
    65bc:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <registerCount>
    65c0:	c8 17       	cp	r28, r24
    65c2:	b0 f3       	brcs	.-20     	; 0x65b0 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    65c4:	cf 91       	pop	r28
    65c6:	08 95       	ret

000065c8 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    65c8:	0f 93       	push	r16
    65ca:	1f 93       	push	r17
    65cc:	cf 93       	push	r28
    65ce:	df 93       	push	r29
    65d0:	c8 2f       	mov	r28, r24
    65d2:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	// V0.76 reset register ouptu first
	midi_resetRegisters();
    65d4:	ea df       	rcall	.-44     	; 0x65aa <midi_resetRegisters>
	module_WaitOutputInput2Cycles(); // now register read input is HW register only
    65d6:	0e 94 88 10 	call	0x2110	; 0x2110 <module_WaitOutputInput2Cycles>
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    65da:	c0 34       	cpi	r28, 0x40	; 64
    65dc:	90 f4       	brcc	.+36     	; 0x6602 <register_toProgram+0x3a>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    65de:	2c 2f       	mov	r18, r28
    65e0:	30 e0       	ldi	r19, 0x00	; 0
    65e2:	c9 01       	movw	r24, r18
    65e4:	88 0f       	add	r24, r24
    65e6:	99 1f       	adc	r25, r25
    65e8:	22 0f       	add	r18, r18
    65ea:	33 1f       	adc	r19, r19
    65ec:	22 0f       	add	r18, r18
    65ee:	33 1f       	adc	r19, r19
    65f0:	22 0f       	add	r18, r18
    65f2:	33 1f       	adc	r19, r19
    65f4:	82 0f       	add	r24, r18
    65f6:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    65f8:	82 57       	subi	r24, 0x72	; 114
    65fa:	96 4f       	sbci	r25, 0xF6	; 246
    65fc:	96 de       	rcall	.-724    	; 0x632a <read_allRegister>
    65fe:	18 2f       	mov	r17, r24
    6600:	01 c0       	rjmp	.+2      	; 0x6604 <register_toProgram+0x3c>
	}
	programMap[program].couplers = getAllCouplers().wordval;
    6602:	10 e0       	ldi	r17, 0x00	; 0
    6604:	d0 e0       	ldi	r29, 0x00	; 0
    6606:	09 dd       	rcall	.-1518   	; 0x601a <getAllCouplers>
    6608:	9e 01       	movw	r18, r28
    660a:	22 0f       	add	r18, r18
    660c:	33 1f       	adc	r19, r19
    660e:	cc 0f       	add	r28, r28
    6610:	dd 1f       	adc	r29, r29
    6612:	cc 0f       	add	r28, r28
    6614:	dd 1f       	adc	r29, r29
    6616:	cc 0f       	add	r28, r28
    6618:	dd 1f       	adc	r29, r29
    661a:	c2 0f       	add	r28, r18
    661c:	d3 1f       	adc	r29, r19
    661e:	c2 57       	subi	r28, 0x72	; 114
    6620:	d6 4f       	sbci	r29, 0xF6	; 246
    6622:	99 87       	std	Y+9, r25	; 0x09
    6624:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    6626:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    6628:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <eeprom_UpdateProg>
	}
	return result;
}
    662c:	81 2f       	mov	r24, r17
    662e:	df 91       	pop	r29
    6630:	cf 91       	pop	r28
    6632:	1f 91       	pop	r17
    6634:	0f 91       	pop	r16
    6636:	08 95       	ret

00006638 <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display <= PROGR_MAX) {
    6638:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    663c:	80 34       	cpi	r24, 0x40	; 64
    663e:	c8 f4       	brcc	.+50     	; 0x6672 <prog_toLcd+0x3a>
		lcd_putc('P');
    6640:	80 e5       	ldi	r24, 0x50	; 80
    6642:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		lcd_putc('-');
    6646:	8d e2       	ldi	r24, 0x2D	; 45
    6648:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    664c:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6650:	86 95       	lsr	r24
    6652:	86 95       	lsr	r24
    6654:	86 95       	lsr	r24
    6656:	87 70       	andi	r24, 0x07	; 7
    6658:	8f 5b       	subi	r24, 0xBF	; 191
    665a:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    665e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6662:	87 70       	andi	r24, 0x07	; 7
    6664:	8f 5c       	subi	r24, 0xCF	; 207
    6666:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		lcd_putc(' ');
    666a:	80 e2       	ldi	r24, 0x20	; 32
    666c:	0c 94 9f 14 	jmp	0x293e	; 0x293e <lcd_putc>
    6670:	08 95       	ret
	} else {
		lcd_blank(5);
    6672:	85 e0       	ldi	r24, 0x05	; 5
    6674:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <lcd_blank>
    6678:	08 95       	ret

0000667a <init_RegOut>:
RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9},
{0,' ',REGISTER_NONE,REGISTER_NONE},{0,' ',REGISTER_NONE,REGISTER_NONE}};

void init_RegOut(){
	if (eeprom_ReadRegOut() == EE_LOAD_ERROR) {
    667a:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_ReadRegOut>
    667e:	8f 3f       	cpi	r24, 0xFF	; 255
    6680:	31 f4       	brne	.+12     	; 0x668e <init_RegOut+0x14>
		// load some default values for my organ -> alredy done in array declaration
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
    6682:	40 e0       	ldi	r20, 0x00	; 0
    6684:	50 e0       	ldi	r21, 0x00	; 0
    6686:	69 e0       	ldi	r22, 0x09	; 9
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <log_putError>
    668e:	08 95       	ret

00006690 <reg_toLCD>:
}

void reg_toLCD(uint8_t readHWonly){
    6690:	ef 92       	push	r14
    6692:	ff 92       	push	r15
    6694:	0f 93       	push	r16
    6696:	1f 93       	push	r17
    6698:	cf 93       	push	r28
    669a:	df 93       	push	r29
    669c:	f8 2e       	mov	r15, r24
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    669e:	e1 2c       	mov	r14, r1
    66a0:	70 c0       	rjmp	.+224    	; 0x6782 <reg_toLCD+0xf2>
		lcd_goto(reg_Out[i].cursor);
    66a2:	0e 2d       	mov	r16, r14
    66a4:	10 e0       	ldi	r17, 0x00	; 0
    66a6:	e8 01       	movw	r28, r16
    66a8:	cc 0f       	add	r28, r28
    66aa:	dd 1f       	adc	r29, r29
    66ac:	cc 0f       	add	r28, r28
    66ae:	dd 1f       	adc	r29, r29
    66b0:	c0 50       	subi	r28, 0x00	; 0
    66b2:	de 4f       	sbci	r29, 0xFE	; 254
    66b4:	88 81       	ld	r24, Y
    66b6:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    66ba:	89 81       	ldd	r24, Y+1	; 0x01
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    66bc:	9f ed       	ldi	r25, 0xDF	; 223
    66be:	98 0f       	add	r25, r24
    66c0:	9f 35       	cpi	r25, 0x5F	; 95
    66c2:	28 f4       	brcc	.+10     	; 0x66ce <reg_toLCD+0x3e>
			// only if valid char
			lcd_putc(myChar);
    66c4:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
			lcd_putc(' ');
    66c8:	80 e2       	ldi	r24, 0x20	; 32
    66ca:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    66ce:	f8 01       	movw	r30, r16
    66d0:	ee 0f       	add	r30, r30
    66d2:	ff 1f       	adc	r31, r31
    66d4:	ee 0f       	add	r30, r30
    66d6:	ff 1f       	adc	r31, r31
    66d8:	e0 50       	subi	r30, 0x00	; 0
    66da:	fe 4f       	sbci	r31, 0xFE	; 254
    66dc:	c2 81       	ldd	r28, Z+2	; 0x02
		if (reg == REGISTER_NONE) {
    66de:	cf 3f       	cpi	r28, 0xFF	; 255
    66e0:	09 f0       	breq	.+2      	; 0x66e4 <reg_toLCD+0x54>
    66e2:	40 c0       	rjmp	.+128    	; 0x6764 <reg_toLCD+0xd4>
    66e4:	52 c0       	rjmp	.+164    	; 0x678a <reg_toLCD+0xfa>
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
			if (reg == reg_Out[i].regEnd) {
    66e6:	c8 13       	cpse	r28, r24
    66e8:	19 c0       	rjmp	.+50     	; 0x671c <reg_toLCD+0x8c>
				// only one register left for out
				if (readHWonly == TRUE) {
    66ea:	8f ef       	ldi	r24, 0xFF	; 255
    66ec:	f8 12       	cpse	r15, r24
    66ee:	0b c0       	rjmp	.+22     	; 0x6706 <reg_toLCD+0x76>
					lcd_putc(LCD_CHAR_REG_OFF+ ((get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0));
    66f0:	8c 2f       	mov	r24, r28
    66f2:	cf dd       	rcall	.-1122   	; 0x6292 <get_RegisterStatus>
    66f4:	80 ff       	sbrs	r24, 0
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <reg_toLCD+0x6c>
    66f8:	8b e0       	ldi	r24, 0x0B	; 11
    66fa:	01 c0       	rjmp	.+2      	; 0x66fe <reg_toLCD+0x6e>
    66fc:	8a e0       	ldi	r24, 0x0A	; 10
    66fe:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    6702:	dc 2f       	mov	r29, r28
    6704:	2d c0       	rjmp	.+90     	; 0x6760 <reg_toLCD+0xd0>
				} else {
					lcd_putc(LCD_CHAR_REG_OFF+  ((get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0));
    6706:	8c 2f       	mov	r24, r28
    6708:	c4 dd       	rcall	.-1144   	; 0x6292 <get_RegisterStatus>
    670a:	81 ff       	sbrs	r24, 1
    670c:	02 c0       	rjmp	.+4      	; 0x6712 <reg_toLCD+0x82>
    670e:	8b e0       	ldi	r24, 0x0B	; 11
    6710:	01 c0       	rjmp	.+2      	; 0x6714 <reg_toLCD+0x84>
    6712:	8a e0       	ldi	r24, 0x0A	; 10
    6714:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    6718:	dc 2f       	mov	r29, r28
    671a:	22 c0       	rjmp	.+68     	; 0x6760 <reg_toLCD+0xd0>
				}
			} else {
				// at least 2 register left
				if (readHWonly == TRUE) {
    671c:	8f ef       	ldi	r24, 0xFF	; 255
    671e:	f8 12       	cpse	r15, r24
    6720:	11 c0       	rjmp	.+34     	; 0x6744 <reg_toLCD+0xb4>
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_HWIN) ? 2 : 0;
    6722:	d1 e0       	ldi	r29, 0x01	; 1
    6724:	dc 0f       	add	r29, r28
    6726:	8c 2f       	mov	r24, r28
    6728:	b4 dd       	rcall	.-1176   	; 0x6292 <get_RegisterStatus>
    672a:	80 ff       	sbrs	r24, 0
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <reg_toLCD+0xa2>
    672e:	c2 e0       	ldi	r28, 0x02	; 2
    6730:	01 c0       	rjmp	.+2      	; 0x6734 <reg_toLCD+0xa4>
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0;
    6732:	c0 e0       	ldi	r28, 0x00	; 0
    6734:	8d 2f       	mov	r24, r29
    6736:	ad dd       	rcall	.-1190   	; 0x6292 <get_RegisterStatus>
    6738:	81 70       	andi	r24, 0x01	; 1
    673a:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    673c:	84 5f       	subi	r24, 0xF4	; 244
    673e:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
				} else {
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_SWOUT) ? 2 : 0;
    6742:	0e c0       	rjmp	.+28     	; 0x6760 <reg_toLCD+0xd0>
    6744:	d1 e0       	ldi	r29, 0x01	; 1
    6746:	dc 0f       	add	r29, r28
    6748:	8c 2f       	mov	r24, r28
    674a:	a3 dd       	rcall	.-1210   	; 0x6292 <get_RegisterStatus>
    674c:	c8 2f       	mov	r28, r24
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0;
    674e:	c2 70       	andi	r28, 0x02	; 2
    6750:	8d 2f       	mov	r24, r29
    6752:	9f dd       	rcall	.-1218   	; 0x6292 <get_RegisterStatus>
    6754:	86 95       	lsr	r24
    6756:	81 70       	andi	r24, 0x01	; 1
    6758:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    675a:	84 5f       	subi	r24, 0xF4	; 244
    675c:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
				}
			}
			reg++;
    6760:	c1 e0       	ldi	r28, 0x01	; 1
    6762:	cd 0f       	add	r28, r29
		}
		uint8_t reg = reg_Out[i].regStart;
		if (reg == REGISTER_NONE) {
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
    6764:	f8 01       	movw	r30, r16
    6766:	ee 0f       	add	r30, r30
    6768:	ff 1f       	adc	r31, r31
    676a:	ee 0f       	add	r30, r30
    676c:	ff 1f       	adc	r31, r31
    676e:	e0 50       	subi	r30, 0x00	; 0
    6770:	fe 4f       	sbci	r31, 0xFE	; 254
    6772:	83 81       	ldd	r24, Z+3	; 0x03
    6774:	8c 17       	cp	r24, r28
    6776:	08 f0       	brcs	.+2      	; 0x677a <reg_toLCD+0xea>
    6778:	b6 cf       	rjmp	.-148    	; 0x66e6 <reg_toLCD+0x56>
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
				}
			}
			reg++;
		}
		lcd_putc(' ');
    677a:	80 e2       	ldi	r24, 0x20	; 32
    677c:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
}

void reg_toLCD(uint8_t readHWonly){
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6780:	e3 94       	inc	r14
    6782:	87 e0       	ldi	r24, 0x07	; 7
    6784:	8e 15       	cp	r24, r14
    6786:	08 f0       	brcs	.+2      	; 0x678a <reg_toLCD+0xfa>
    6788:	8c cf       	rjmp	.-232    	; 0x66a2 <reg_toLCD+0x12>
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    678a:	df 91       	pop	r29
    678c:	cf 91       	pop	r28
    678e:	1f 91       	pop	r17
    6790:	0f 91       	pop	r16
    6792:	ff 90       	pop	r15
    6794:	ef 90       	pop	r14
    6796:	08 95       	ret

00006798 <reg_ClearOnLCD>:

void reg_ClearOnLCD(){
    6798:	1f 93       	push	r17
    679a:	cf 93       	push	r28
    679c:	df 93       	push	r29
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    679e:	10 e0       	ldi	r17, 0x00	; 0
    67a0:	1e c0       	rjmp	.+60     	; 0x67de <reg_ClearOnLCD+0x46>
		lcd_goto(reg_Out[i].cursor);
    67a2:	c1 2f       	mov	r28, r17
    67a4:	d0 e0       	ldi	r29, 0x00	; 0
    67a6:	cc 0f       	add	r28, r28
    67a8:	dd 1f       	adc	r29, r29
    67aa:	cc 0f       	add	r28, r28
    67ac:	dd 1f       	adc	r29, r29
    67ae:	c0 50       	subi	r28, 0x00	; 0
    67b0:	de 4f       	sbci	r29, 0xFE	; 254
    67b2:	88 81       	ld	r24, Y
    67b4:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    67b8:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    67ba:	8b 81       	ldd	r24, Y+3	; 0x03
    67bc:	9a 81       	ldd	r25, Y+2	; 0x02
    67be:	89 1b       	sub	r24, r25
    67c0:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	01 96       	adiw	r24, 0x01	; 1
    67c6:	95 95       	asr	r25
    67c8:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    67ca:	21 52       	subi	r18, 0x21	; 33
    67cc:	2f 35       	cpi	r18, 0x5F	; 95
    67ce:	10 f4       	brcc	.+4      	; 0x67d4 <reg_ClearOnLCD+0x3c>
    67d0:	22 e0       	ldi	r18, 0x02	; 2
    67d2:	01 c0       	rjmp	.+2      	; 0x67d6 <reg_ClearOnLCD+0x3e>
    67d4:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    67d6:	82 0f       	add	r24, r18
    67d8:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <lcd_blank>
		lcd_putc(' ');
	}
}

void reg_ClearOnLCD(){
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    67dc:	1f 5f       	subi	r17, 0xFF	; 255
    67de:	18 30       	cpi	r17, 0x08	; 8
    67e0:	00 f3       	brcs	.-64     	; 0x67a2 <reg_ClearOnLCD+0xa>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	1f 91       	pop	r17
    67e8:	08 95       	ret

000067ea <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    67ea:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    67ec:	ee e4       	ldi	r30, 0x4E	; 78
    67ee:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    67f0:	07 c0       	rjmp	.+14     	; 0x6800 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    67f2:	8f ef       	ldi	r24, 0xFF	; 255
    67f4:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    67f6:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    67f8:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    67fa:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    67fc:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    67fe:	91 50       	subi	r25, 0x01	; 1
    6800:	91 11       	cpse	r25, r1
    6802:	f7 cf       	rjmp	.-18     	; 0x67f2 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    6804:	0e 94 55 0b 	call	0x16aa	; 0x16aa <eeprom_ReadMidiInMap>
    6808:	8f 3f       	cpi	r24, 0xFF	; 255
    680a:	01 f5       	brne	.+64     	; 0x684c <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    680c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    6810:	ee e4       	ldi	r30, 0x4E	; 78
    6812:	f8 e0       	ldi	r31, 0x08	; 8
    6814:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    6816:	84 e2       	ldi	r24, 0x24	; 36
    6818:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    681a:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    681c:	98 e3       	ldi	r25, 0x38	; 56
    681e:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6820:	21 e0       	ldi	r18, 0x01	; 1
    6822:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6824:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    6826:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6828:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    682a:	22 e0       	ldi	r18, 0x02	; 2
    682c:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    682e:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6830:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6832:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6834:	93 e0       	ldi	r25, 0x03	; 3
    6836:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    6838:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    683a:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    683c:	8e e1       	ldi	r24, 0x1E	; 30
    683e:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6840:	40 e0       	ldi	r20, 0x00	; 0
    6842:	50 e0       	ldi	r21, 0x00	; 0
    6844:	61 e0       	ldi	r22, 0x01	; 1
    6846:	81 e0       	ldi	r24, 0x01	; 1
    6848:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    684c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <eeprom_ReadMidiThrough>
    6850:	8f 3f       	cpi	r24, 0xFF	; 255
    6852:	51 f4       	brne	.+20     	; 0x6868 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6854:	ec e4       	ldi	r30, 0x4C	; 76
    6856:	f8 e0       	ldi	r31, 0x08	; 8
    6858:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    685a:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    685c:	40 e0       	ldi	r20, 0x00	; 0
    685e:	50 e0       	ldi	r21, 0x00	; 0
    6860:	61 e0       	ldi	r22, 0x01	; 1
    6862:	81 e0       	ldi	r24, 0x01	; 1
    6864:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <log_putError>
    6868:	08 95       	ret

0000686a <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    686a:	20 e0       	ldi	r18, 0x00	; 0
    686c:	09 c0       	rjmp	.+18     	; 0x6880 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    686e:	88 0f       	add	r24, r24
    6870:	99 1f       	adc	r25, r25
    6872:	fc 01       	movw	r30, r24
    6874:	e2 5b       	subi	r30, 0xB2	; 178
    6876:	f6 4f       	sbci	r31, 0xF6	; 246
    6878:	8f ef       	ldi	r24, 0xFF	; 255
    687a:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    687c:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    687e:	2f 5f       	subi	r18, 0xFF	; 255
    6880:	82 2f       	mov	r24, r18
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	00 97       	sbiw	r24, 0x00	; 0
    6886:	99 f7       	brne	.-26     	; 0x686e <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    6888:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <eeprom_ReadMidiOutMap>
    688c:	8f 3f       	cpi	r24, 0xFF	; 255
    688e:	b1 f4       	brne	.+44     	; 0x68bc <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6890:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    6894:	ee e4       	ldi	r30, 0x4E	; 78
    6896:	f9 e0       	ldi	r31, 0x09	; 9
    6898:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    689a:	91 e0       	ldi	r25, 0x01	; 1
    689c:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    689e:	92 e0       	ldi	r25, 0x02	; 2
    68a0:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    68a2:	93 e0       	ldi	r25, 0x03	; 3
    68a4:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    68a6:	e6 e5       	ldi	r30, 0x56	; 86
    68a8:	f9 e0       	ldi	r31, 0x09	; 9
    68aa:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    68ac:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    68ae:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    68b0:	40 e0       	ldi	r20, 0x00	; 0
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	62 e0       	ldi	r22, 0x02	; 2
    68b6:	81 e0       	ldi	r24, 0x01	; 1
    68b8:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <log_putError>
    68bc:	08 95       	ret

000068be <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    68be:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    68c0:	8f ef       	ldi	r24, 0xFF	; 255
    68c2:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    68c4:	e4 30       	cpi	r30, 0x04	; 4
    68c6:	50 f4       	brcc	.+20     	; 0x68dc <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    68c8:	f0 e0       	ldi	r31, 0x00	; 0
    68ca:	ee 0f       	add	r30, r30
    68cc:	ff 1f       	adc	r31, r31
    68ce:	e2 5b       	subi	r30, 0xB2	; 178
    68d0:	f6 4f       	sbci	r31, 0xF6	; 246
    68d2:	20 81       	ld	r18, Z
    68d4:	2f 3f       	cpi	r18, 0xFF	; 255
    68d6:	11 f0       	breq	.+4      	; 0x68dc <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    68d8:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    68da:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    68dc:	08 95       	ret

000068de <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    68de:	70 e0       	ldi	r23, 0x00	; 0
    68e0:	52 c0       	rjmp	.+164    	; 0x6986 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    68e2:	87 2f       	mov	r24, r23
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	24 2f       	mov	r18, r20
    68e8:	30 e0       	ldi	r19, 0x00	; 0
    68ea:	f9 01       	movw	r30, r18
    68ec:	ee 0f       	add	r30, r30
    68ee:	ff 1f       	adc	r31, r31
    68f0:	df 01       	movw	r26, r30
    68f2:	a2 0f       	add	r26, r18
    68f4:	b3 1f       	adc	r27, r19
    68f6:	fc 01       	movw	r30, r24
    68f8:	ee 0f       	add	r30, r30
    68fa:	ff 1f       	adc	r31, r31
    68fc:	e8 0f       	add	r30, r24
    68fe:	f9 1f       	adc	r31, r25
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	ee 0f       	add	r30, r30
    6906:	ff 1f       	adc	r31, r31
    6908:	ea 0f       	add	r30, r26
    690a:	fb 1f       	adc	r31, r27
    690c:	e2 5a       	subi	r30, 0xA2	; 162
    690e:	f6 4f       	sbci	r31, 0xF6	; 246
    6910:	a0 81       	ld	r26, Z
    6912:	af 3f       	cpi	r26, 0xFF	; 255
    6914:	d9 f0       	breq	.+54     	; 0x694c <Midi_updateManualRange+0x6e>
    6916:	f9 01       	movw	r30, r18
    6918:	ee 0f       	add	r30, r30
    691a:	ff 1f       	adc	r31, r31
    691c:	e2 0f       	add	r30, r18
    691e:	f3 1f       	adc	r31, r19
    6920:	9c 01       	movw	r18, r24
    6922:	22 0f       	add	r18, r18
    6924:	33 1f       	adc	r19, r19
    6926:	28 0f       	add	r18, r24
    6928:	39 1f       	adc	r19, r25
    692a:	22 0f       	add	r18, r18
    692c:	33 1f       	adc	r19, r19
    692e:	22 0f       	add	r18, r18
    6930:	33 1f       	adc	r19, r19
    6932:	e2 0f       	add	r30, r18
    6934:	f3 1f       	adc	r31, r19
    6936:	e2 5a       	subi	r30, 0xA2	; 162
    6938:	f6 4f       	sbci	r31, 0xF6	; 246
    693a:	21 81       	ldd	r18, Z+1	; 0x01
    693c:	2f 3f       	cpi	r18, 0xFF	; 255
    693e:	31 f0       	breq	.+12     	; 0x694c <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6940:	a6 17       	cp	r26, r22
    6942:	08 f4       	brcc	.+2      	; 0x6946 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6944:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    6946:	52 17       	cp	r21, r18
    6948:	08 f4       	brcc	.+2      	; 0x694c <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    694a:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    694c:	55 23       	and	r21, r21
    694e:	11 f0       	breq	.+4      	; 0x6954 <Midi_updateManualRange+0x76>
    6950:	6f 3f       	cpi	r22, 0xFF	; 255
    6952:	49 f4       	brne	.+18     	; 0x6966 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6954:	88 0f       	add	r24, r24
    6956:	99 1f       	adc	r25, r25
    6958:	fc 01       	movw	r30, r24
    695a:	ec 5b       	subi	r30, 0xBC	; 188
    695c:	f7 4f       	sbci	r31, 0xF7	; 247
    695e:	8f ef       	ldi	r24, 0xFF	; 255
    6960:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6962:	81 83       	std	Z+1, r24	; 0x01
    6964:	07 c0       	rjmp	.+14     	; 0x6974 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    6966:	88 0f       	add	r24, r24
    6968:	99 1f       	adc	r25, r25
    696a:	fc 01       	movw	r30, r24
    696c:	ec 5b       	subi	r30, 0xBC	; 188
    696e:	f7 4f       	sbci	r31, 0xF7	; 247
    6970:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6972:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6974:	4f 5f       	subi	r20, 0xFF	; 255
    6976:	03 c0       	rjmp	.+6      	; 0x697e <Midi_updateManualRange+0xa0>
    6978:	40 e0       	ldi	r20, 0x00	; 0
    697a:	6f ef       	ldi	r22, 0xFF	; 255
    697c:	50 e0       	ldi	r21, 0x00	; 0
    697e:	44 30       	cpi	r20, 0x04	; 4
    6980:	08 f4       	brcc	.+2      	; 0x6984 <Midi_updateManualRange+0xa6>
    6982:	af cf       	rjmp	.-162    	; 0x68e2 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6984:	7f 5f       	subi	r23, 0xFF	; 255
    6986:	74 30       	cpi	r23, 0x04	; 4
    6988:	b8 f3       	brcs	.-18     	; 0x6978 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    698a:	08 95       	ret

0000698c <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    698c:	63 e0       	ldi	r22, 0x03	; 3
    698e:	28 c0       	rjmp	.+80     	; 0x69e0 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6990:	86 2f       	mov	r24, r22
    6992:	06 2e       	mov	r0, r22
    6994:	00 0c       	add	r0, r0
    6996:	99 0b       	sbc	r25, r25
    6998:	42 2f       	mov	r20, r18
    699a:	02 2e       	mov	r0, r18
    699c:	00 0c       	add	r0, r0
    699e:	55 0b       	sbc	r21, r21
    69a0:	fa 01       	movw	r30, r20
    69a2:	ee 0f       	add	r30, r30
    69a4:	ff 1f       	adc	r31, r31
    69a6:	e4 0f       	add	r30, r20
    69a8:	f5 1f       	adc	r31, r21
    69aa:	ac 01       	movw	r20, r24
    69ac:	44 0f       	add	r20, r20
    69ae:	55 1f       	adc	r21, r21
    69b0:	da 01       	movw	r26, r20
    69b2:	a8 0f       	add	r26, r24
    69b4:	b9 1f       	adc	r27, r25
    69b6:	aa 0f       	add	r26, r26
    69b8:	bb 1f       	adc	r27, r27
    69ba:	aa 0f       	add	r26, r26
    69bc:	bb 1f       	adc	r27, r27
    69be:	ae 0f       	add	r26, r30
    69c0:	bf 1f       	adc	r27, r31
    69c2:	a2 5a       	subi	r26, 0xA2	; 162
    69c4:	b6 4f       	sbci	r27, 0xF6	; 246
    69c6:	3f ef       	ldi	r19, 0xFF	; 255
    69c8:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    69ca:	11 96       	adiw	r26, 0x01	; 1
    69cc:	3c 93       	st	X, r19
    69ce:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    69d0:	fd 01       	movw	r30, r26
    69d2:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    69d4:	21 50       	subi	r18, 0x01	; 1
    69d6:	01 c0       	rjmp	.+2      	; 0x69da <init_Manual2Module+0x4e>
    69d8:	23 e0       	ldi	r18, 0x03	; 3
    69da:	22 23       	and	r18, r18
    69dc:	cc f6       	brge	.-78     	; 0x6990 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    69de:	61 50       	subi	r22, 0x01	; 1
    69e0:	66 23       	and	r22, r22
    69e2:	d4 f7       	brge	.-12     	; 0x69d8 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    69e4:	0e 94 2d 0b 	call	0x165a	; 0x165a <eeprom_ReadManualMap>
    69e8:	8f 3f       	cpi	r24, 0xFF	; 255
    69ea:	79 f5       	brne	.+94     	; 0x6a4a <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    69ec:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    69f0:	40 e0       	ldi	r20, 0x00	; 0
    69f2:	50 e0       	ldi	r21, 0x00	; 0
    69f4:	63 e0       	ldi	r22, 0x03	; 3
    69f6:	81 e0       	ldi	r24, 0x01	; 1
    69f8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    69fc:	ee e5       	ldi	r30, 0x5E	; 94
    69fe:	f9 e0       	ldi	r31, 0x09	; 9
    6a00:	84 e2       	ldi	r24, 0x24	; 36
    6a02:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6a04:	33 e4       	ldi	r19, 0x43	; 67
    6a06:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    6a08:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    6a0a:	24 e4       	ldi	r18, 0x44	; 68
    6a0c:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    6a0e:	9b e5       	ldi	r25, 0x5B	; 91
    6a10:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6a12:	40 e2       	ldi	r20, 0x20	; 32
    6a14:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    6a16:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    6a18:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    6a1a:	40 e4       	ldi	r20, 0x40	; 64
    6a1c:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6a1e:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6a20:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6a22:	40 e6       	ldi	r20, 0x60	; 96
    6a24:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6a26:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    6a28:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    6a2a:	30 e8       	ldi	r19, 0x80	; 128
    6a2c:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6a2e:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6a30:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6a32:	90 ea       	ldi	r25, 0xA0	; 160
    6a34:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6a36:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6a38:	81 e4       	ldi	r24, 0x41	; 65
    6a3a:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6a3c:	80 ec       	ldi	r24, 0xC0	; 192
    6a3e:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6a40:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6a42:	8d e1       	ldi	r24, 0x1D	; 29
    6a44:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6a46:	80 ee       	ldi	r24, 0xE0	; 224
    6a48:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    6a4a:	49 cf       	rjmp	.-366    	; 0x68de <Midi_updateManualRange>
    6a4c:	08 95       	ret

00006a4e <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6a4e:	84 30       	cpi	r24, 0x04	; 4
    6a50:	d8 f4       	brcc	.+54     	; 0x6a88 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	fc 01       	movw	r30, r24
    6a56:	ee 0f       	add	r30, r30
    6a58:	ff 1f       	adc	r31, r31
    6a5a:	e8 0f       	add	r30, r24
    6a5c:	f9 1f       	adc	r31, r25
    6a5e:	ee 0f       	add	r30, r30
    6a60:	ff 1f       	adc	r31, r31
    6a62:	ee 0f       	add	r30, r30
    6a64:	ff 1f       	adc	r31, r31
    6a66:	e2 5a       	subi	r30, 0xA2	; 162
    6a68:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    6a6a:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6a6c:	20 81       	ld	r18, Z
    6a6e:	62 17       	cp	r22, r18
    6a70:	40 f0       	brcs	.+16     	; 0x6a82 <manualNote_to_moduleBit+0x34>
    6a72:	91 81       	ldd	r25, Z+1	; 0x01
    6a74:	96 17       	cp	r25, r22
    6a76:	28 f0       	brcs	.+10     	; 0x6a82 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6a78:	92 81       	ldd	r25, Z+2	; 0x02
    6a7a:	62 1b       	sub	r22, r18
				return (result);
    6a7c:	80 e0       	ldi	r24, 0x00	; 0
    6a7e:	96 0f       	add	r25, r22
    6a80:	08 95       	ret
			}
			pRange++;
    6a82:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6a84:	81 50       	subi	r24, 0x01	; 1
    6a86:	91 f7       	brne	.-28     	; 0x6a6c <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    6a88:	8f ef       	ldi	r24, 0xFF	; 255
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
}
    6a8c:	08 95       	ret

00006a8e <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6a8e:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6a90:	ee e5       	ldi	r30, 0x5E	; 94
    6a92:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6a94:	44 e0       	ldi	r20, 0x04	; 4
    6a96:	16 c0       	rjmp	.+44     	; 0x6ac4 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    6a98:	52 81       	ldd	r21, Z+2	; 0x02
    6a9a:	85 17       	cp	r24, r21
    6a9c:	88 f0       	brcs	.+34     	; 0x6ac0 <moduleBit_to_manualNote+0x32>
    6a9e:	68 2f       	mov	r22, r24
    6aa0:	70 e0       	ldi	r23, 0x00	; 0
    6aa2:	21 81       	ldd	r18, Z+1	; 0x01
    6aa4:	a0 81       	ld	r26, Z
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	2a 1b       	sub	r18, r26
    6aaa:	31 09       	sbc	r19, r1
    6aac:	25 0f       	add	r18, r21
    6aae:	31 1d       	adc	r19, r1
    6ab0:	26 17       	cp	r18, r22
    6ab2:	37 07       	cpc	r19, r23
    6ab4:	2c f0       	brlt	.+10     	; 0x6ac0 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6ab6:	98 2f       	mov	r25, r24
    6ab8:	95 1b       	sub	r25, r21
				return(result);
    6aba:	8b 2f       	mov	r24, r27
    6abc:	9a 0f       	add	r25, r26
    6abe:	08 95       	ret
			}
			pRange++;
    6ac0:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6ac2:	41 50       	subi	r20, 0x01	; 1
    6ac4:	41 11       	cpse	r20, r1
    6ac6:	e8 cf       	rjmp	.-48     	; 0x6a98 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    6ac8:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6aca:	b5 30       	cpi	r27, 0x05	; 5
    6acc:	18 f3       	brcs	.-58     	; 0x6a94 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    6ace:	8f ef       	ldi	r24, 0xFF	; 255
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
}
    6ad2:	08 95       	ret

00006ad4 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6ad4:	ef 92       	push	r14
    6ad6:	ff 92       	push	r15
    6ad8:	0f 93       	push	r16
    6ada:	1f 93       	push	r17
    6adc:	cf 93       	push	r28
    6ade:	df 93       	push	r29
    6ae0:	c8 2f       	mov	r28, r24
    6ae2:	06 2f       	mov	r16, r22
    6ae4:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    6ae6:	b3 df       	rcall	.-154    	; 0x6a4e <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    6ae8:	49 2f       	mov	r20, r25
    6aea:	42 95       	swap	r20
    6aec:	46 95       	lsr	r20
    6aee:	47 70       	andi	r20, 0x07	; 7
    6af0:	21 e0       	ldi	r18, 0x01	; 1
    6af2:	30 e0       	ldi	r19, 0x00	; 0
    6af4:	79 01       	movw	r14, r18
    6af6:	02 c0       	rjmp	.+4      	; 0x6afc <manual_NoteOnOff+0x28>
    6af8:	ee 0c       	add	r14, r14
    6afa:	ff 1c       	adc	r15, r15
    6afc:	4a 95       	dec	r20
    6afe:	e2 f7       	brpl	.-8      	; 0x6af8 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6b00:	19 2f       	mov	r17, r25
    6b02:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6b04:	81 11       	cpse	r24, r1
    6b06:	1a c0       	rjmp	.+52     	; 0x6b3c <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    6b08:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <pipe_Module+0x1>
    6b0c:	8e 21       	and	r24, r14
    6b0e:	59 f4       	brne	.+22     	; 0x6b26 <manual_NoteOnOff+0x52>
    6b10:	dd 23       	and	r29, r29
    6b12:	4c f0       	brlt	.+18     	; 0x6b26 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6b14:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    6b16:	d1 30       	cpi	r29, 0x01	; 1
    6b18:	11 f4       	brne	.+4      	; 0x6b1e <manual_NoteOnOff+0x4a>
    6b1a:	90 e2       	ldi	r25, 0x20	; 32
    6b1c:	01 c0       	rjmp	.+2      	; 0x6b20 <manual_NoteOnOff+0x4c>
    6b1e:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6b20:	8e 2d       	mov	r24, r14
    6b22:	91 2b       	or	r25, r17
    6b24:	07 da       	rcall	.-3058   	; 0x5f34 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6b26:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    6b28:	29 f4       	brne	.+10     	; 0x6b34 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    6b2a:	6e 2d       	mov	r22, r14
    6b2c:	81 2f       	mov	r24, r17
    6b2e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <pipe_off>
    6b32:	04 c0       	rjmp	.+8      	; 0x6b3c <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6b34:	6e 2d       	mov	r22, r14
    6b36:	81 2f       	mov	r24, r17
    6b38:	0e 94 4b 13 	call	0x2696	; 0x2696 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6b3c:	ec 2f       	mov	r30, r28
    6b3e:	f0 e0       	ldi	r31, 0x00	; 0
    6b40:	ee 0f       	add	r30, r30
    6b42:	ff 1f       	adc	r31, r31
    6b44:	e2 5b       	subi	r30, 0xB2	; 178
    6b46:	f6 4f       	sbci	r31, 0xF6	; 246
    6b48:	81 81       	ldd	r24, Z+1	; 0x01
    6b4a:	8f 3f       	cpi	r24, 0xFF	; 255
    6b4c:	a9 f0       	breq	.+42     	; 0x6b78 <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    6b4e:	d1 30       	cpi	r29, 0x01	; 1
    6b50:	31 f0       	breq	.+12     	; 0x6b5e <manual_NoteOnOff+0x8a>
    6b52:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6b56:	99 23       	and	r25, r25
    6b58:	21 f0       	breq	.+8      	; 0x6b62 <manual_NoteOnOff+0x8e>
    6b5a:	90 e9       	ldi	r25, 0x90	; 144
    6b5c:	03 c0       	rjmp	.+6      	; 0x6b64 <manual_NoteOnOff+0x90>
    6b5e:	90 e9       	ldi	r25, 0x90	; 144
    6b60:	01 c0       	rjmp	.+2      	; 0x6b64 <manual_NoteOnOff+0x90>
    6b62:	90 e8       	ldi	r25, 0x80	; 128
    6b64:	89 2b       	or	r24, r25
    6b66:	32 d4       	rcall	.+2148   	; 0x73cc <serial1MIDISend>
		serial1MIDISend(note);
    6b68:	80 2f       	mov	r24, r16
    6b6a:	30 d4       	rcall	.+2144   	; 0x73cc <serial1MIDISend>
    6b6c:	d1 11       	cpse	r29, r1
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6b6e:	02 c0       	rjmp	.+4      	; 0x6b74 <manual_NoteOnOff+0xa0>
    6b70:	80 e0       	ldi	r24, 0x00	; 0
    6b72:	01 c0       	rjmp	.+2      	; 0x6b76 <manual_NoteOnOff+0xa2>
    6b74:	80 e4       	ldi	r24, 0x40	; 64
    6b76:	2a d4       	rcall	.+2132   	; 0x73cc <serial1MIDISend>
    6b78:	df 91       	pop	r29
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    6b7a:	cf 91       	pop	r28
    6b7c:	1f 91       	pop	r17
    6b7e:	0f 91       	pop	r16
    6b80:	ff 90       	pop	r15
    6b82:	ef 90       	pop	r14
    6b84:	08 95       	ret

00006b86 <midiAllNotesOff>:
    6b86:	bf 92       	push	r11
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6b88:	cf 92       	push	r12
    6b8a:	df 92       	push	r13
    6b8c:	ef 92       	push	r14
    6b8e:	ff 92       	push	r15
    6b90:	0f 93       	push	r16
    6b92:	1f 93       	push	r17
    6b94:	cf 93       	push	r28
    6b96:	df 93       	push	r29
    6b98:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    6b9a:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6b9c:	4c c0       	rjmp	.+152    	; 0x6c36 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6b9e:	0c 2d       	mov	r16, r12
    6ba0:	10 e0       	ldi	r17, 0x00	; 0
    6ba2:	cd 2d       	mov	r28, r13
    6ba4:	d0 e0       	ldi	r29, 0x00	; 0
    6ba6:	f8 01       	movw	r30, r16
    6ba8:	ee 0f       	add	r30, r30
    6baa:	ff 1f       	adc	r31, r31
    6bac:	ee 0f       	add	r30, r30
    6bae:	ff 1f       	adc	r31, r31
    6bb0:	ec 0f       	add	r30, r28
    6bb2:	fd 1f       	adc	r31, r29
    6bb4:	ee 0f       	add	r30, r30
    6bb6:	ff 1f       	adc	r31, r31
    6bb8:	ee 0f       	add	r30, r30
    6bba:	ff 1f       	adc	r31, r31
    6bbc:	e2 5b       	subi	r30, 0xB2	; 178
    6bbe:	f7 4f       	sbci	r31, 0xF7	; 247
    6bc0:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6bc2:	83 e0       	ldi	r24, 0x03	; 3
    6bc4:	8b 15       	cp	r24, r11
    6bc6:	b0 f1       	brcs	.+108    	; 0x6c34 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6bc8:	f8 01       	movw	r30, r16
    6bca:	ee 0f       	add	r30, r30
    6bcc:	ff 1f       	adc	r31, r31
    6bce:	ee 0f       	add	r30, r30
    6bd0:	ff 1f       	adc	r31, r31
    6bd2:	ec 0f       	add	r30, r28
    6bd4:	fd 1f       	adc	r31, r29
    6bd6:	ee 0f       	add	r30, r30
    6bd8:	ff 1f       	adc	r31, r31
    6bda:	ee 0f       	add	r30, r30
    6bdc:	ff 1f       	adc	r31, r31
    6bde:	e2 5b       	subi	r30, 0xB2	; 178
    6be0:	f7 4f       	sbci	r31, 0xF7	; 247
    6be2:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6be4:	f2 80       	ldd	r15, Z+2	; 0x02
    6be6:	15 c0       	rjmp	.+42     	; 0x6c12 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6be8:	ee 24       	eor	r14, r14
    6bea:	e3 94       	inc	r14
    6bec:	e6 0e       	add	r14, r22
    6bee:	f8 01       	movw	r30, r16
    6bf0:	ee 0f       	add	r30, r30
    6bf2:	ff 1f       	adc	r31, r31
    6bf4:	ee 0f       	add	r30, r30
    6bf6:	ff 1f       	adc	r31, r31
    6bf8:	ec 0f       	add	r30, r28
    6bfa:	fd 1f       	adc	r31, r29
    6bfc:	ee 0f       	add	r30, r30
    6bfe:	ff 1f       	adc	r31, r31
    6c00:	ee 0f       	add	r30, r30
    6c02:	ff 1f       	adc	r31, r31
    6c04:	e2 5b       	subi	r30, 0xB2	; 178
    6c06:	f7 4f       	sbci	r31, 0xF7	; 247
    6c08:	40 e8       	ldi	r20, 0x80	; 128
    6c0a:	80 81       	ld	r24, Z
    6c0c:	63 df       	rcall	.-314    	; 0x6ad4 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6c0e:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6c10:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6c12:	f1 10       	cpse	r15, r1
    6c14:	e9 cf       	rjmp	.-46     	; 0x6be8 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6c16:	eb 2d       	mov	r30, r11
    6c18:	f0 e0       	ldi	r31, 0x00	; 0
    6c1a:	ee 0f       	add	r30, r30
    6c1c:	ff 1f       	adc	r31, r31
    6c1e:	e2 5b       	subi	r30, 0xB2	; 178
    6c20:	f6 4f       	sbci	r31, 0xF6	; 246
    6c22:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6c24:	80 31       	cpi	r24, 0x10	; 16
    6c26:	30 f4       	brcc	.+12     	; 0x6c34 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6c28:	80 6b       	ori	r24, 0xB0	; 176
    6c2a:	d0 d3       	rcall	.+1952   	; 0x73cc <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6c2c:	8b e7       	ldi	r24, 0x7B	; 123
    6c2e:	ce d3       	rcall	.+1948   	; 0x73cc <serial1MIDISend>
				serial1MIDISend(0);
    6c30:	80 e0       	ldi	r24, 0x00	; 0
    6c32:	cc d3       	rcall	.+1944   	; 0x73cc <serial1MIDISend>
    6c34:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6c36:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6c38:	8d 15       	cp	r24, r13
    6c3a:	08 f0       	brcs	.+2      	; 0x6c3e <midiAllNotesOff+0xb8>
    6c3c:	b0 cf       	rjmp	.-160    	; 0x6b9e <midiAllNotesOff+0x18>
    6c3e:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6c40:	cf 91       	pop	r28
    6c42:	1f 91       	pop	r17
    6c44:	0f 91       	pop	r16
    6c46:	ff 90       	pop	r15
    6c48:	ef 90       	pop	r14
    6c4a:	df 90       	pop	r13
    6c4c:	cf 90       	pop	r12
    6c4e:	bf 90       	pop	r11
    6c50:	08 95       	ret

00006c52 <midi_ManualOff>:
    6c52:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6c54:	1f 93       	push	r17
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    6c5c:	84 30       	cpi	r24, 0x04	; 4
    6c5e:	00 f5       	brcc	.+64     	; 0x6ca0 <midi_ManualOff+0x4e>
    6c60:	08 2f       	mov	r16, r24
    6c62:	10 e0       	ldi	r17, 0x00	; 0
    6c64:	f8 01       	movw	r30, r16
    6c66:	ee 0f       	add	r30, r30
    6c68:	ff 1f       	adc	r31, r31
    6c6a:	ec 5b       	subi	r30, 0xBC	; 188
    6c6c:	f7 4f       	sbci	r31, 0xF7	; 247
    6c6e:	d0 81       	ld	r29, Z
    6c70:	df 3f       	cpi	r29, 0xFF	; 255
    6c72:	b1 f0       	breq	.+44     	; 0x6ca0 <midi_ManualOff+0x4e>
    6c74:	f8 01       	movw	r30, r16
    6c76:	ee 0f       	add	r30, r30
    6c78:	ff 1f       	adc	r31, r31
    6c7a:	ec 5b       	subi	r30, 0xBC	; 188
    6c7c:	f7 4f       	sbci	r31, 0xF7	; 247
    6c7e:	81 81       	ldd	r24, Z+1	; 0x01
    6c80:	8f 3f       	cpi	r24, 0xFF	; 255
    6c82:	31 f4       	brne	.+12     	; 0x6c90 <midi_ManualOff+0x3e>
    6c84:	0d c0       	rjmp	.+26     	; 0x6ca0 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6c86:	40 e8       	ldi	r20, 0x80	; 128
    6c88:	6d 2f       	mov	r22, r29
    6c8a:	8c 2f       	mov	r24, r28
    6c8c:	23 df       	rcall	.-442    	; 0x6ad4 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6c8e:	df 5f       	subi	r29, 0xFF	; 255
    6c90:	f8 01       	movw	r30, r16
    6c92:	ee 0f       	add	r30, r30
    6c94:	ff 1f       	adc	r31, r31
    6c96:	ec 5b       	subi	r30, 0xBC	; 188
    6c98:	f7 4f       	sbci	r31, 0xF7	; 247
    6c9a:	81 81       	ldd	r24, Z+1	; 0x01
    6c9c:	8d 17       	cp	r24, r29
    6c9e:	98 f7       	brcc	.-26     	; 0x6c86 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6ca0:	ec 2f       	mov	r30, r28
    6ca2:	f0 e0       	ldi	r31, 0x00	; 0
    6ca4:	ee 0f       	add	r30, r30
    6ca6:	ff 1f       	adc	r31, r31
    6ca8:	e2 5b       	subi	r30, 0xB2	; 178
    6caa:	f6 4f       	sbci	r31, 0xF6	; 246
    6cac:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6cae:	80 31       	cpi	r24, 0x10	; 16
    6cb0:	30 f4       	brcc	.+12     	; 0x6cbe <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6cb2:	80 6b       	ori	r24, 0xB0	; 176
    6cb4:	8b d3       	rcall	.+1814   	; 0x73cc <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6cb6:	8b e7       	ldi	r24, 0x7B	; 123
    6cb8:	89 d3       	rcall	.+1810   	; 0x73cc <serial1MIDISend>
		serial1MIDISend(0);
    6cba:	80 e0       	ldi	r24, 0x00	; 0
    6cbc:	87 d3       	rcall	.+1806   	; 0x73cc <serial1MIDISend>
    6cbe:	df 91       	pop	r29

	}
}
    6cc0:	cf 91       	pop	r28
    6cc2:	1f 91       	pop	r17
    6cc4:	0f 91       	pop	r16
    6cc6:	08 95       	ret

00006cc8 <midi_AllManualsOff>:
    6cc8:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6cca:	c0 e0       	ldi	r28, 0x00	; 0
    6ccc:	03 c0       	rjmp	.+6      	; 0x6cd4 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6cce:	8c 2f       	mov	r24, r28
    6cd0:	c0 df       	rcall	.-128    	; 0x6c52 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6cd2:	cf 5f       	subi	r28, 0xFF	; 255
    6cd4:	c4 30       	cpi	r28, 0x04	; 4
    6cd6:	d8 f3       	brcs	.-10     	; 0x6cce <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    6cd8:	cf 91       	pop	r28
    6cda:	08 95       	ret

00006cdc <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6cdc:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <midiRxActivceSensing>
    6ce0:	88 23       	and	r24, r24
    6ce2:	39 f0       	breq	.+14     	; 0x6cf2 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6ce4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <swTimer+0x6>
    6ce8:	81 11       	cpse	r24, r1
    6cea:	03 c0       	rjmp	.+6      	; 0x6cf2 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6cec:	ed df       	rcall	.-38     	; 0x6cc8 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6cee:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <midiRxActivceSensing>
    6cf2:	08 95       	ret

00006cf4 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6cf4:	0f 93       	push	r16
    6cf6:	1f 93       	push	r17
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	06 2f       	mov	r16, r22
    6cfe:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6d00:	d8 2f       	mov	r29, r24
    6d02:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d04:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6d06:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d08:	3c c0       	rjmp	.+120    	; 0x6d82 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6d0a:	4d 2f       	mov	r20, r29
    6d0c:	50 e0       	ldi	r21, 0x00	; 0
    6d0e:	2c 2f       	mov	r18, r28
    6d10:	30 e0       	ldi	r19, 0x00	; 0
    6d12:	fa 01       	movw	r30, r20
    6d14:	ee 0f       	add	r30, r30
    6d16:	ff 1f       	adc	r31, r31
    6d18:	ee 0f       	add	r30, r30
    6d1a:	ff 1f       	adc	r31, r31
    6d1c:	e2 0f       	add	r30, r18
    6d1e:	f3 1f       	adc	r31, r19
    6d20:	ee 0f       	add	r30, r30
    6d22:	ff 1f       	adc	r31, r31
    6d24:	ee 0f       	add	r30, r30
    6d26:	ff 1f       	adc	r31, r31
    6d28:	e2 5b       	subi	r30, 0xB2	; 178
    6d2a:	f7 4f       	sbci	r31, 0xF7	; 247
    6d2c:	80 81       	ld	r24, Z
    6d2e:	84 30       	cpi	r24, 0x04	; 4
    6d30:	38 f5       	brcc	.+78     	; 0x6d80 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6d32:	df 01       	movw	r26, r30
    6d34:	61 81       	ldd	r22, Z+1	; 0x01
    6d36:	70 2f       	mov	r23, r16
    6d38:	76 1b       	sub	r23, r22
    6d3a:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6d3c:	0a f1       	brmi	.+66     	; 0x6d80 <midiNote_to_Manual+0x8c>
    6d3e:	fd 01       	movw	r30, r26
    6d40:	e2 81       	ldd	r30, Z+2	; 0x02
    6d42:	f0 e0       	ldi	r31, 0x00	; 0
    6d44:	a7 2f       	mov	r26, r23
    6d46:	77 0f       	add	r23, r23
    6d48:	bb 0b       	sbc	r27, r27
    6d4a:	ae 17       	cp	r26, r30
    6d4c:	bf 07       	cpc	r27, r31
    6d4e:	c4 f4       	brge	.+48     	; 0x6d80 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6d50:	fa 01       	movw	r30, r20
    6d52:	ee 0f       	add	r30, r30
    6d54:	ff 1f       	adc	r31, r31
    6d56:	ee 0f       	add	r30, r30
    6d58:	ff 1f       	adc	r31, r31
    6d5a:	e2 0f       	add	r30, r18
    6d5c:	f3 1f       	adc	r31, r19
    6d5e:	ee 0f       	add	r30, r30
    6d60:	ff 1f       	adc	r31, r31
    6d62:	ee 0f       	add	r30, r30
    6d64:	ff 1f       	adc	r31, r31
    6d66:	e2 5b       	subi	r30, 0xB2	; 178
    6d68:	f7 4f       	sbci	r31, 0xF7	; 247
    6d6a:	93 81       	ldd	r25, Z+3	; 0x03
    6d6c:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6d6e:	11 30       	cpi	r17, 0x01	; 1
    6d70:	21 f4       	brne	.+8      	; 0x6d7a <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6d72:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6d76:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    6d7a:	41 2f       	mov	r20, r17
    6d7c:	ab de       	rcall	.-682    	; 0x6ad4 <manual_NoteOnOff>
				found |= 0xFF;
    6d7e:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d80:	cf 5f       	subi	r28, 0xFF	; 255
    6d82:	c4 30       	cpi	r28, 0x04	; 4
    6d84:	08 f4       	brcc	.+2      	; 0x6d88 <midiNote_to_Manual+0x94>
    6d86:	c1 cf       	rjmp	.-126    	; 0x6d0a <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6d88:	11 30       	cpi	r17, 0x01	; 1
    6d8a:	49 f4       	brne	.+18     	; 0x6d9e <midiNote_to_Manual+0xaa>
    6d8c:	91 11       	cpse	r25, r1
    6d8e:	07 c0       	rjmp	.+14     	; 0x6d9e <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6d90:	00 93 23 02 	sts	0x0223, r16	; 0x800223 <midiLastInNote>
		midiLastInChannel = channel;
    6d94:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6d98:	8f ef       	ldi	r24, 0xFF	; 255
    6d9a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6d9e:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <midiThrough>
    6da2:	d8 13       	cpse	r29, r24
    6da4:	1f c0       	rjmp	.+62     	; 0x6de4 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6da6:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    6daa:	8f 3f       	cpi	r24, 0xFF	; 255
    6dac:	d9 f0       	breq	.+54     	; 0x6de4 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6dae:	11 30       	cpi	r17, 0x01	; 1
    6db0:	31 f0       	breq	.+12     	; 0x6dbe <midiNote_to_Manual+0xca>
    6db2:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6db6:	99 23       	and	r25, r25
    6db8:	21 f0       	breq	.+8      	; 0x6dc2 <midiNote_to_Manual+0xce>
    6dba:	90 e9       	ldi	r25, 0x90	; 144
    6dbc:	03 c0       	rjmp	.+6      	; 0x6dc4 <midiNote_to_Manual+0xd0>
    6dbe:	90 e9       	ldi	r25, 0x90	; 144
    6dc0:	01 c0       	rjmp	.+2      	; 0x6dc4 <midiNote_to_Manual+0xd0>
    6dc2:	90 e8       	ldi	r25, 0x80	; 128
    6dc4:	89 2b       	or	r24, r25
    6dc6:	02 d3       	rcall	.+1540   	; 0x73cc <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    6dc8:	80 2f       	mov	r24, r16
    6dca:	00 d3       	rcall	.+1536   	; 0x73cc <serial1MIDISend>
    6dcc:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6dce:	06 c0       	rjmp	.+12     	; 0x6ddc <midiNote_to_Manual+0xe8>
    6dd0:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6dd4:	81 11       	cpse	r24, r1
    6dd6:	04 c0       	rjmp	.+8      	; 0x6de0 <midiNote_to_Manual+0xec>
    6dd8:	80 e4       	ldi	r24, 0x40	; 64
    6dda:	03 c0       	rjmp	.+6      	; 0x6de2 <midiNote_to_Manual+0xee>
    6ddc:	80 e4       	ldi	r24, 0x40	; 64
    6dde:	01 c0       	rjmp	.+2      	; 0x6de2 <midiNote_to_Manual+0xee>
    6de0:	80 e0       	ldi	r24, 0x00	; 0
    6de2:	f4 d2       	rcall	.+1512   	; 0x73cc <serial1MIDISend>
    6de4:	df 91       	pop	r29
		}
	}
}
    6de6:	cf 91       	pop	r28
    6de8:	1f 91       	pop	r17
    6dea:	0f 91       	pop	r16
    6dec:	08 95       	ret

00006dee <midiIn_Process>:
    6dee:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6df0:	0c f0       	brlt	.+2      	; 0x6df4 <midiIn_Process+0x6>
    6df2:	4f c0       	rjmp	.+158    	; 0x6e92 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6df4:	88 3f       	cpi	r24, 0xF8	; 248
    6df6:	b8 f0       	brcs	.+46     	; 0x6e26 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6df8:	8e 3f       	cpi	r24, 0xFE	; 254
    6dfa:	81 f4       	brne	.+32     	; 0x6e1c <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6dfc:	81 e0       	ldi	r24, 0x01	; 1
    6dfe:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6e02:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6e04:	f8 94       	cli
    6e06:	06 c0       	rjmp	.+12     	; 0x6e14 <midiIn_Process+0x26>
    6e08:	e0 e5       	ldi	r30, 0x50	; 80
    6e0a:	f2 e0       	ldi	r31, 0x02	; 2
    6e0c:	89 e1       	ldi	r24, 0x19	; 25
    6e0e:	86 83       	std	Z+6, r24	; 0x06
    6e10:	17 82       	std	Z+7, r1	; 0x07
    6e12:	80 e0       	ldi	r24, 0x00	; 0
    6e14:	81 11       	cpse	r24, r1
    6e16:	f8 cf       	rjmp	.-16     	; 0x6e08 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e18:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6e1a:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    6e1e:	09 f0       	breq	.+2      	; 0x6e22 <midiIn_Process+0x34>
    6e20:	79 c0       	rjmp	.+242    	; 0x6f14 <midiIn_Process+0x126>
				midiAllReset();
    6e22:	2c c9       	rjmp	.-3496   	; 0x607c <midiAllReset>
    6e24:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6e26:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6e2a:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6e2e:	90 e8       	ldi	r25, 0x80	; 128
    6e30:	98 0f       	add	r25, r24
    6e32:	90 34       	cpi	r25, 0x40	; 64
    6e34:	20 f4       	brcc	.+8      	; 0x6e3e <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6e36:	82 e0       	ldi	r24, 0x02	; 2
    6e38:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e3c:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6e3e:	90 e2       	ldi	r25, 0x20	; 32
    6e40:	98 0f       	add	r25, r24
    6e42:	90 31       	cpi	r25, 0x10	; 16
    6e44:	20 f4       	brcc	.+8      	; 0x6e4e <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6e46:	82 e0       	ldi	r24, 0x02	; 2
    6e48:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e4c:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6e4e:	82 3f       	cpi	r24, 0xF2	; 242
    6e50:	21 f4       	brne	.+8      	; 0x6e5a <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6e52:	82 e0       	ldi	r24, 0x02	; 2
    6e54:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e58:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    6e5a:	80 3f       	cpi	r24, 0xF0	; 240
    6e5c:	21 f4       	brne	.+8      	; 0x6e66 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6e5e:	8f ef       	ldi	r24, 0xFF	; 255
    6e60:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e64:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6e66:	90 e4       	ldi	r25, 0x40	; 64
    6e68:	98 0f       	add	r25, r24
    6e6a:	90 32       	cpi	r25, 0x20	; 32
    6e6c:	20 f4       	brcc	.+8      	; 0x6e76 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6e6e:	81 e0       	ldi	r24, 0x01	; 1
    6e70:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e74:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6e76:	81 3f       	cpi	r24, 0xF1	; 241
    6e78:	11 f0       	breq	.+4      	; 0x6e7e <midiIn_Process+0x90>
    6e7a:	83 3f       	cpi	r24, 0xF3	; 243
    6e7c:	21 f4       	brne	.+8      	; 0x6e86 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6e7e:	81 e0       	ldi	r24, 0x01	; 1
    6e80:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e84:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6e86:	87 3f       	cpi	r24, 0xF7	; 247
    6e88:	09 f4       	brne	.+2      	; 0x6e8c <midiIn_Process+0x9e>
    6e8a:	44 c0       	rjmp	.+136    	; 0x6f14 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    6e8c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <midiDataByteExpected>
    6e90:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6e92:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <midiDataByteCount>
    6e96:	e8 30       	cpi	r30, 0x08	; 8
    6e98:	40 f4       	brcc	.+16     	; 0x6eaa <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    6e9a:	91 e0       	ldi	r25, 0x01	; 1
    6e9c:	9e 0f       	add	r25, r30
    6e9e:	90 93 43 08 	sts	0x0843, r25	; 0x800843 <midiDataByteCount>
    6ea2:	f0 e0       	ldi	r31, 0x00	; 0
    6ea4:	e2 5f       	subi	r30, 0xF2	; 242
    6ea6:	f3 4f       	sbci	r31, 0xF3	; 243
    6ea8:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    6eaa:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <midiDataByteExpected>
    6eae:	8f 3f       	cpi	r24, 0xFF	; 255
    6eb0:	89 f1       	breq	.+98     	; 0x6f14 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6eb2:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <midiDataByteCount>
    6eb6:	98 17       	cp	r25, r24
    6eb8:	68 f1       	brcs	.+90     	; 0x6f14 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6eba:	90 91 16 0c 	lds	r25, 0x0C16	; 0x800c16 <midiLastCommand>
    6ebe:	90 3f       	cpi	r25, 0xF0	; 240
    6ec0:	38 f5       	brcc	.+78     	; 0x6f10 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6ec2:	89 2f       	mov	r24, r25
    6ec4:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6ec6:	90 7f       	andi	r25, 0xF0	; 240
    6ec8:	90 39       	cpi	r25, 0x90	; 144
    6eca:	71 f0       	breq	.+28     	; 0x6ee8 <midiIn_Process+0xfa>
    6ecc:	18 f4       	brcc	.+6      	; 0x6ed4 <midiIn_Process+0xe6>
    6ece:	90 38       	cpi	r25, 0x80	; 128
    6ed0:	31 f0       	breq	.+12     	; 0x6ede <midiIn_Process+0xf0>
    6ed2:	1e c0       	rjmp	.+60     	; 0x6f10 <midiIn_Process+0x122>
    6ed4:	90 3b       	cpi	r25, 0xB0	; 176
    6ed6:	99 f0       	breq	.+38     	; 0x6efe <midiIn_Process+0x110>
    6ed8:	90 3c       	cpi	r25, 0xC0	; 192
    6eda:	b9 f0       	breq	.+46     	; 0x6f0a <midiIn_Process+0x11c>
    6edc:	19 c0       	rjmp	.+50     	; 0x6f10 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6ede:	40 e0       	ldi	r20, 0x00	; 0
    6ee0:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6ee4:	07 df       	rcall	.-498    	; 0x6cf4 <midiNote_to_Manual>
						break;
    6ee6:	14 c0       	rjmp	.+40     	; 0x6f10 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6ee8:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <midiDataByte+0x1>
    6eec:	91 11       	cpse	r25, r1
    6eee:	02 c0       	rjmp	.+4      	; 0x6ef4 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6ef0:	40 e0       	ldi	r20, 0x00	; 0
    6ef2:	01 c0       	rjmp	.+2      	; 0x6ef6 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6ef4:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6ef6:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6efa:	fc de       	rcall	.-520    	; 0x6cf4 <midiNote_to_Manual>
						break;
    6efc:	09 c0       	rjmp	.+18     	; 0x6f10 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6efe:	90 91 0e 0c 	lds	r25, 0x0C0E	; 0x800c0e <midiDataByte>
    6f02:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6f04:	29 f4       	brne	.+10     	; 0x6f10 <midiIn_Process+0x122>
    6f06:	3f de       	rcall	.-898    	; 0x6b86 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6f08:	03 c0       	rjmp	.+6      	; 0x6f10 <midiIn_Process+0x122>
    6f0a:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6f0e:	1b db       	rcall	.-2506   	; 0x6546 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6f10:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
    6f14:	08 95       	ret

00006f16 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6f16:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <serESPMidiTmp+0x2>
    6f1a:	89 2f       	mov	r24, r25
    6f1c:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6f1e:	90 7f       	andi	r25, 0xF0	; 240
    6f20:	90 38       	cpi	r25, 0x80	; 128
    6f22:	49 f0       	breq	.+18     	; 0x6f36 <proc_ESPmidi+0x20>
    6f24:	18 f4       	brcc	.+6      	; 0x6f2c <proc_ESPmidi+0x16>
    6f26:	99 23       	and	r25, r25
    6f28:	e1 f0       	breq	.+56     	; 0x6f62 <proc_ESPmidi+0x4c>
    6f2a:	08 95       	ret
    6f2c:	90 39       	cpi	r25, 0x90	; 144
    6f2e:	41 f0       	breq	.+16     	; 0x6f40 <proc_ESPmidi+0x2a>
    6f30:	90 3b       	cpi	r25, 0xB0	; 176
    6f32:	89 f0       	breq	.+34     	; 0x6f56 <proc_ESPmidi+0x40>
    6f34:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6f36:	40 e0       	ldi	r20, 0x00	; 0
    6f38:	60 91 76 16 	lds	r22, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f3c:	db ce       	rjmp	.-586    	; 0x6cf4 <midiNote_to_Manual>
		break;
    6f3e:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6f40:	90 91 75 16 	lds	r25, 0x1675	; 0x801675 <serESPMidiTmp>
    6f44:	91 11       	cpse	r25, r1
    6f46:	02 c0       	rjmp	.+4      	; 0x6f4c <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6f48:	40 e0       	ldi	r20, 0x00	; 0
    6f4a:	01 c0       	rjmp	.+2      	; 0x6f4e <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6f4c:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6f4e:	60 91 76 16 	lds	r22, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f52:	d0 ce       	rjmp	.-608    	; 0x6cf4 <midiNote_to_Manual>
		break;
    6f54:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6f56:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f5a:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6f5c:	61 f4       	brne	.+24     	; 0x6f76 <proc_ESPmidi+0x60>
    6f5e:	13 ce       	rjmp	.-986    	; 0x6b86 <midiAllNotesOff>
    6f60:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6f62:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f66:	89 2f       	mov	r24, r25
    6f68:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    6f6a:	90 7f       	andi	r25, 0xF0	; 240
    6f6c:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6f6e:	19 f4       	brne	.+6      	; 0x6f76 <proc_ESPmidi+0x60>
    6f70:	60 91 75 16 	lds	r22, 0x1675	; 0x801675 <serESPMidiTmp>
    6f74:	e8 ca       	rjmp	.-2608   	; 0x6546 <midi_ProgramChange>
    6f76:	08 95       	ret

00006f78 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6f78:	bf 92       	push	r11
    6f7a:	cf 92       	push	r12
    6f7c:	df 92       	push	r13
    6f7e:	ef 92       	push	r14
    6f80:	ff 92       	push	r15
    6f82:	0f 93       	push	r16
    6f84:	1f 93       	push	r17
    6f86:	cf 93       	push	r28
    6f88:	df 93       	push	r29
    6f8a:	d8 2f       	mov	r29, r24
    6f8c:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6f8e:	81 d2       	rcall	.+1282   	; 0x7492 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6f90:	0c 2f       	mov	r16, r28
    6f92:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6f94:	cf 71       	andi	r28, 0x1F	; 31
    6f96:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6f98:	00 32       	cpi	r16, 0x20	; 32
    6f9a:	09 f4       	brne	.+2      	; 0x6f9e <midiKeyPress_Process+0x26>
    6f9c:	b5 c0       	rjmp	.+362    	; 0x7108 <midiKeyPress_Process+0x190>
    6f9e:	00 23       	and	r16, r16
    6fa0:	09 f4       	brne	.+2      	; 0x6fa4 <midiKeyPress_Process+0x2c>
    6fa2:	b4 c0       	rjmp	.+360    	; 0x710c <midiKeyPress_Process+0x194>
    6fa4:	b7 c0       	rjmp	.+366    	; 0x7114 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6fa6:	d0 ff       	sbrs	r29, 0
    6fa8:	ac c0       	rjmp	.+344    	; 0x7102 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6faa:	20 e2       	ldi	r18, 0x20	; 32
    6fac:	c2 9f       	mul	r28, r18
    6fae:	c0 01       	movw	r24, r0
    6fb0:	11 24       	eor	r1, r1
    6fb2:	fb 2c       	mov	r15, r11
    6fb4:	f8 2a       	or	r15, r24
    6fb6:	8f 2d       	mov	r24, r15
    6fb8:	6a dd       	rcall	.-1324   	; 0x6a8e <moduleBit_to_manualNote>
    6fba:	c8 2e       	mov	r12, r24
    6fbc:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6fbe:	18 2f       	mov	r17, r24
    6fc0:	8f 3f       	cpi	r24, 0xFF	; 255
    6fc2:	09 f4       	brne	.+2      	; 0x6fc6 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6fc4:	94 c0       	rjmp	.+296    	; 0x70ee <midiKeyPress_Process+0x176>
    6fc6:	69 2f       	mov	r22, r25
    6fc8:	7a dc       	rcall	.-1804   	; 0x68be <Manual_to_MidiNote>
    6fca:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    6fce:	09 f1       	breq	.+66     	; 0x7012 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6fd0:	00 32       	cpi	r16, 0x20	; 32
    6fd2:	31 f0       	breq	.+12     	; 0x6fe0 <midiKeyPress_Process+0x68>
    6fd4:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6fd8:	99 23       	and	r25, r25
    6fda:	21 f0       	breq	.+8      	; 0x6fe4 <midiKeyPress_Process+0x6c>
    6fdc:	90 e9       	ldi	r25, 0x90	; 144
    6fde:	03 c0       	rjmp	.+6      	; 0x6fe6 <midiKeyPress_Process+0x6e>
    6fe0:	90 e9       	ldi	r25, 0x90	; 144
    6fe2:	01 c0       	rjmp	.+2      	; 0x6fe6 <midiKeyPress_Process+0x6e>
    6fe4:	90 e8       	ldi	r25, 0x80	; 128
    6fe6:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    6fe8:	f1 d1       	rcall	.+994    	; 0x73cc <serial1MIDISend>
    6fea:	8d 2d       	mov	r24, r13
    6fec:	ef d1       	rcall	.+990    	; 0x73cc <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6fee:	01 11       	cpse	r16, r1
    6ff0:	06 c0       	rjmp	.+12     	; 0x6ffe <midiKeyPress_Process+0x86>
    6ff2:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6ff6:	81 11       	cpse	r24, r1
    6ff8:	04 c0       	rjmp	.+8      	; 0x7002 <midiKeyPress_Process+0x8a>
    6ffa:	80 e4       	ldi	r24, 0x40	; 64
    6ffc:	03 c0       	rjmp	.+6      	; 0x7004 <midiKeyPress_Process+0x8c>
    6ffe:	80 e4       	ldi	r24, 0x40	; 64
    7000:	01 c0       	rjmp	.+2      	; 0x7004 <midiKeyPress_Process+0x8c>
    7002:	80 e0       	ldi	r24, 0x00	; 0
    7004:	e3 d1       	rcall	.+966    	; 0x73cc <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    7006:	00 32       	cpi	r16, 0x20	; 32
    7008:	21 f4       	brne	.+8      	; 0x7012 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    700a:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    700e:	e0 92 25 02 	sts	0x0225, r14	; 0x800225 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    7012:	41 e0       	ldi	r20, 0x01	; 1
    7014:	00 32       	cpi	r16, 0x20	; 32
    7016:	09 f0       	breq	.+2      	; 0x701a <midiKeyPress_Process+0xa2>
    7018:	40 e0       	ldi	r20, 0x00	; 0
    701a:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    701c:	11 11       	cpse	r17, r1
    701e:	19 c0       	rjmp	.+50     	; 0x7052 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    7020:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <midi_Couplers>
    7024:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    7026:	19 f4       	brne	.+6      	; 0x702e <midiKeyPress_Process+0xb6>
    7028:	6e 2d       	mov	r22, r14
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	53 dd       	rcall	.-1370   	; 0x6ad4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    702e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <midi_Couplers+0x1>
    7032:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    7034:	21 f4       	brne	.+8      	; 0x703e <midiKeyPress_Process+0xc6>
    7036:	4d 2d       	mov	r20, r13
    7038:	6e 2d       	mov	r22, r14
    703a:	82 e0       	ldi	r24, 0x02	; 2
    703c:	4b dd       	rcall	.-1386   	; 0x6ad4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    703e:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <midi_Couplers+0x3>
    7042:	8f 3f       	cpi	r24, 0xFF	; 255
    7044:	09 f0       	breq	.+2      	; 0x7048 <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    7046:	53 c0       	rjmp	.+166    	; 0x70ee <midiKeyPress_Process+0x176>
    7048:	4d 2d       	mov	r20, r13
    704a:	6e 2d       	mov	r22, r14
    704c:	83 e0       	ldi	r24, 0x03	; 3
    704e:	42 dd       	rcall	.-1404   	; 0x6ad4 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    7050:	4e c0       	rjmp	.+156    	; 0x70ee <midiKeyPress_Process+0x176>
    7052:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    7054:	c9 f4       	brne	.+50     	; 0x7088 <midiKeyPress_Process+0x110>
    7056:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <midi_Couplers+0x2>
    705a:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    705c:	19 f4       	brne	.+6      	; 0x7064 <midiKeyPress_Process+0xec>
    705e:	6e 2d       	mov	r22, r14
    7060:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    7062:	38 dd       	rcall	.-1424   	; 0x6ad4 <manual_NoteOnOff>
    7064:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <midi_Couplers+0x4>
    7068:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    706a:	21 f4       	brne	.+8      	; 0x7074 <midiKeyPress_Process+0xfc>
    706c:	4d 2d       	mov	r20, r13
    706e:	6e 2d       	mov	r22, r14
    7070:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    7072:	30 dd       	rcall	.-1440   	; 0x6ad4 <manual_NoteOnOff>
    7074:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <midi_Couplers+0x6>
    7078:	8f 3f       	cpi	r24, 0xFF	; 255
    707a:	09 f0       	breq	.+2      	; 0x707e <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    707c:	38 c0       	rjmp	.+112    	; 0x70ee <midiKeyPress_Process+0x176>
    707e:	4d 2d       	mov	r20, r13
    7080:	6e 2d       	mov	r22, r14
    7082:	80 e0       	ldi	r24, 0x00	; 0
    7084:	27 dd       	rcall	.-1458   	; 0x6ad4 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    7086:	33 c0       	rjmp	.+102    	; 0x70ee <midiKeyPress_Process+0x176>
    7088:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    708a:	c1 f4       	brne	.+48     	; 0x70bc <midiKeyPress_Process+0x144>
    708c:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    7090:	8f 3f       	cpi	r24, 0xFF	; 255
    7092:	19 f4       	brne	.+6      	; 0x709a <midiKeyPress_Process+0x122>
    7094:	6e 2d       	mov	r22, r14
    7096:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    7098:	1d dd       	rcall	.-1478   	; 0x6ad4 <manual_NoteOnOff>
    709a:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    709e:	8f 3f       	cpi	r24, 0xFF	; 255
    70a0:	21 f4       	brne	.+8      	; 0x70aa <midiKeyPress_Process+0x132>
    70a2:	4d 2d       	mov	r20, r13
    70a4:	6e 2d       	mov	r22, r14
    70a6:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    70a8:	15 dd       	rcall	.-1494   	; 0x6ad4 <manual_NoteOnOff>
    70aa:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    70ae:	8f 3f       	cpi	r24, 0xFF	; 255
    70b0:	f1 f4       	brne	.+60     	; 0x70ee <midiKeyPress_Process+0x176>
    70b2:	4d 2d       	mov	r20, r13
    70b4:	6e 2d       	mov	r22, r14
    70b6:	81 e0       	ldi	r24, 0x01	; 1
    70b8:	0d dd       	rcall	.-1510   	; 0x6ad4 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    70ba:	19 c0       	rjmp	.+50     	; 0x70ee <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    70bc:	13 30       	cpi	r17, 0x03	; 3
    70be:	b9 f4       	brne	.+46     	; 0x70ee <midiKeyPress_Process+0x176>
    70c0:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    70c4:	8f 3f       	cpi	r24, 0xFF	; 255
    70c6:	19 f4       	brne	.+6      	; 0x70ce <midiKeyPress_Process+0x156>
    70c8:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    70ca:	80 e0       	ldi	r24, 0x00	; 0
    70cc:	03 dd       	rcall	.-1530   	; 0x6ad4 <manual_NoteOnOff>
    70ce:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    70d2:	8f 3f       	cpi	r24, 0xFF	; 255
    70d4:	21 f4       	brne	.+8      	; 0x70de <midiKeyPress_Process+0x166>
    70d6:	4d 2d       	mov	r20, r13
    70d8:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    70da:	81 e0       	ldi	r24, 0x01	; 1
    70dc:	fb dc       	rcall	.-1546   	; 0x6ad4 <manual_NoteOnOff>
    70de:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    70e2:	8f 3f       	cpi	r24, 0xFF	; 255
    70e4:	21 f4       	brne	.+8      	; 0x70ee <midiKeyPress_Process+0x176>
    70e6:	4d 2d       	mov	r20, r13
    70e8:	6e 2d       	mov	r22, r14
    70ea:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    70ec:	f3 dc       	rcall	.-1562   	; 0x6ad4 <manual_NoteOnOff>
    70ee:	8f 2d       	mov	r24, r15
    70f0:	6c d8       	rcall	.-3880   	; 0x61ca <moduleBit_to_registerNr>
    70f2:	00 32       	cpi	r16, 0x20	; 32
    70f4:	11 f4       	brne	.+4      	; 0x70fa <midiKeyPress_Process+0x182>
    70f6:	20 e8       	ldi	r18, 0x80	; 128
    70f8:	01 c0       	rjmp	.+2      	; 0x70fc <midiKeyPress_Process+0x184>
    70fa:	20 e0       	ldi	r18, 0x00	; 0
    70fc:	82 2b       	or	r24, r18
    70fe:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    7102:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    7104:	cf 5f       	subi	r28, 0xFF	; 255
    7106:	03 c0       	rjmp	.+6      	; 0x710e <midiKeyPress_Process+0x196>
    7108:	c0 e0       	ldi	r28, 0x00	; 0
    710a:	01 c0       	rjmp	.+2      	; 0x710e <midiKeyPress_Process+0x196>
    710c:	c0 e0       	ldi	r28, 0x00	; 0
    710e:	c8 30       	cpi	r28, 0x08	; 8
    7110:	08 f4       	brcc	.+2      	; 0x7114 <midiKeyPress_Process+0x19c>
    7112:	49 cf       	rjmp	.-366    	; 0x6fa6 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    7114:	df 91       	pop	r29
    7116:	cf 91       	pop	r28
    7118:	1f 91       	pop	r17
    711a:	0f 91       	pop	r16
    711c:	ff 90       	pop	r15
    711e:	ef 90       	pop	r14
    7120:	df 90       	pop	r13
    7122:	cf 90       	pop	r12
    7124:	bf 90       	pop	r11
    7126:	08 95       	ret

00007128 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    7128:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    712c:	80 31       	cpi	r24, 0x10	; 16
    712e:	30 f4       	brcc	.+12     	; 0x713c <midiSendAllNotesOff+0x14>
		serial1MIDISend(MIDI_CTRLCHG | (midiThrough.OutChannel));
    7130:	80 6b       	ori	r24, 0xB0	; 176
    7132:	4c d1       	rcall	.+664    	; 0x73cc <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    7134:	8b e7       	ldi	r24, 0x7B	; 123
    7136:	4a d1       	rcall	.+660    	; 0x73cc <serial1MIDISend>
		serial1MIDISend(0);
    7138:	80 e0       	ldi	r24, 0x00	; 0
    713a:	48 c1       	rjmp	.+656    	; 0x73cc <serial1MIDISend>
    713c:	08 95       	ret

0000713e <midi_SendActiveSense>:
    713e:	8e ef       	ldi	r24, 0xFE	; 254
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    7140:	45 c1       	rjmp	.+650    	; 0x73cc <serial1MIDISend>
    7142:	08 95       	ret

00007144 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    7144:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    7148:	88 23       	and	r24, r24
    714a:	21 f0       	breq	.+8      	; 0x7154 <midi_CheckTxActiveSense+0x10>
    714c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    7150:	8f 3f       	cpi	r24, 0xFF	; 255
    7152:	99 f4       	brne	.+38     	; 0x717a <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    7154:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7156:	f8 94       	cli
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	06 c0       	rjmp	.+12     	; 0x7168 <midi_CheckTxActiveSense+0x24>
    715c:	e0 e5       	ldi	r30, 0x50	; 80
    715e:	f2 e0       	ldi	r31, 0x02	; 2
    7160:	8a e0       	ldi	r24, 0x0A	; 10
    7162:	80 8b       	std	Z+16, r24	; 0x10
    7164:	11 8a       	std	Z+17, r1	; 0x11
    7166:	80 e0       	ldi	r24, 0x00	; 0
    7168:	81 11       	cpse	r24, r1
    716a:	f8 cf       	rjmp	.-16     	; 0x715c <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    716c:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    716e:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <midi_Setting>
    7172:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    7174:	e4 df       	rcall	.-56     	; 0x713e <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    7176:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    717a:	08 95       	ret

0000717c <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    717c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    7180:	8f e1       	ldi	r24, 0x1F	; 31
    7182:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    7186:	e9 ec       	ldi	r30, 0xC9	; 201
    7188:	f0 e0       	ldi	r31, 0x00	; 0
    718a:	80 81       	ld	r24, Z
    718c:	88 69       	ori	r24, 0x98	; 152
    718e:	80 83       	st	Z, r24
    7190:	ea ec       	ldi	r30, 0xCA	; 202
    7192:	f0 e0       	ldi	r31, 0x00	; 0
    7194:	80 81       	ld	r24, Z
    7196:	86 60       	ori	r24, 0x06	; 6
    7198:	80 83       	st	Z, r24
    719a:	10 92 6e 16 	sts	0x166E, r1	; 0x80166e <midiRxInIndex>
    719e:	10 92 7d 16 	sts	0x167D, r1	; 0x80167d <midiRxOutIndex>
    71a2:	10 92 19 14 	sts	0x1419, r1	; 0x801419 <midiTxInIndex>
    71a6:	10 92 26 14 	sts	0x1426, r1	; 0x801426 <midiTxOutIndex>
    71aa:	10 92 25 14 	sts	0x1425, r1	; 0x801425 <midiRxOvfl>
    71ae:	10 92 2a 14 	sts	0x142A, r1	; 0x80142a <midiTxOvfl>
    71b2:	10 92 79 16 	sts	0x1679, r1	; 0x801679 <midiRxOvflCount>
    71b6:	10 92 80 16 	sts	0x1680, r1	; 0x801680 <midiTxOvflCount>
    71ba:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxBuffUsage>
    71be:	10 92 74 16 	sts	0x1674, r1	; 0x801674 <midiTxBuffUsage>
    71c2:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    71c6:	08 95       	ret

000071c8 <__vector_36>:
    71c8:	1f 92       	push	r1
    71ca:	0f 92       	push	r0
    71cc:	0f b6       	in	r0, 0x3f	; 63
    71ce:	0f 92       	push	r0
    71d0:	11 24       	eor	r1, r1
    71d2:	0b b6       	in	r0, 0x3b	; 59
    71d4:	0f 92       	push	r0
    71d6:	8f 93       	push	r24
    71d8:	9f 93       	push	r25
    71da:	ef 93       	push	r30
    71dc:	ff 93       	push	r31
    71de:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    71e2:	e0 91 6e 16 	lds	r30, 0x166E	; 0x80166e <midiRxInIndex>
    71e6:	f0 e0       	ldi	r31, 0x00	; 0
    71e8:	e5 59       	subi	r30, 0x95	; 149
    71ea:	fb 4e       	sbci	r31, 0xEB	; 235
    71ec:	80 83       	st	Z, r24
    71ee:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    71f2:	8f 5f       	subi	r24, 0xFF	; 255
    71f4:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    71f8:	89 13       	cpse	r24, r25
    71fa:	0e c0       	rjmp	.+28     	; 0x7218 <__vector_36+0x50>
    71fc:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOvflCount>
    7200:	88 23       	and	r24, r24
    7202:	31 f0       	breq	.+12     	; 0x7210 <__vector_36+0x48>
    7204:	8f 3f       	cpi	r24, 0xFF	; 255
    7206:	51 f0       	breq	.+20     	; 0x721c <__vector_36+0x54>
    7208:	8f 5f       	subi	r24, 0xFF	; 255
    720a:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <midiRxOvflCount>
    720e:	06 c0       	rjmp	.+12     	; 0x721c <__vector_36+0x54>
    7210:	81 e0       	ldi	r24, 0x01	; 1
    7212:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <midiRxOvflCount>
    7216:	02 c0       	rjmp	.+4      	; 0x721c <__vector_36+0x54>
    7218:	80 93 6e 16 	sts	0x166E, r24	; 0x80166e <midiRxInIndex>
    721c:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
    7220:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    7224:	89 17       	cp	r24, r25
    7226:	30 f4       	brcc	.+12     	; 0x7234 <__vector_36+0x6c>
    7228:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    722c:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    7230:	89 1b       	sub	r24, r25
    7232:	05 c0       	rjmp	.+10     	; 0x723e <__vector_36+0x76>
    7234:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    7238:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    723c:	89 1b       	sub	r24, r25
    723e:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <midiRxBuffUsage>
    7242:	98 17       	cp	r25, r24
    7244:	10 f4       	brcc	.+4      	; 0x724a <__vector_36+0x82>
    7246:	80 93 6b 15 	sts	0x156B, r24	; 0x80156b <midiRxBuffUsage>
    724a:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    724e:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    7252:	01 96       	adiw	r24, 0x01	; 1
    7254:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <midiRxBytesCount+0x1>
    7258:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <midiRxBytesCount>
    725c:	ff 91       	pop	r31
    725e:	ef 91       	pop	r30
    7260:	9f 91       	pop	r25
    7262:	8f 91       	pop	r24
    7264:	0f 90       	pop	r0
    7266:	0b be       	out	0x3b, r0	; 59
    7268:	0f 90       	pop	r0
    726a:	0f be       	out	0x3f, r0	; 63
    726c:	0f 90       	pop	r0
    726e:	1f 90       	pop	r1
    7270:	18 95       	reti

00007272 <__vector_37>:
    7272:	1f 92       	push	r1
    7274:	0f 92       	push	r0
    7276:	0f b6       	in	r0, 0x3f	; 63
    7278:	0f 92       	push	r0
    727a:	11 24       	eor	r1, r1
    727c:	0b b6       	in	r0, 0x3b	; 59
    727e:	0f 92       	push	r0
    7280:	8f 93       	push	r24
    7282:	9f 93       	push	r25
    7284:	ef 93       	push	r30
    7286:	ff 93       	push	r31
    7288:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    728c:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    7290:	98 17       	cp	r25, r24
    7292:	b9 f0       	breq	.+46     	; 0x72c2 <__vector_37+0x50>
    7294:	e0 91 26 14 	lds	r30, 0x1426	; 0x801426 <midiTxOutIndex>
    7298:	f0 e0       	ldi	r31, 0x00	; 0
    729a:	e4 59       	subi	r30, 0x94	; 148
    729c:	fa 4e       	sbci	r31, 0xEA	; 234
    729e:	80 81       	ld	r24, Z
    72a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    72a4:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <midiTxOutIndex>
    72a8:	8f 5f       	subi	r24, 0xFF	; 255
    72aa:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <midiTxOutIndex>
    72ae:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    72b2:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    72b6:	01 96       	adiw	r24, 0x01	; 1
    72b8:	90 93 7b 16 	sts	0x167B, r25	; 0x80167b <midiTxBytesCount+0x1>
    72bc:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <midiTxBytesCount>
    72c0:	05 c0       	rjmp	.+10     	; 0x72cc <__vector_37+0x5a>
    72c2:	e9 ec       	ldi	r30, 0xC9	; 201
    72c4:	f0 e0       	ldi	r31, 0x00	; 0
    72c6:	80 81       	ld	r24, Z
    72c8:	8f 7d       	andi	r24, 0xDF	; 223
    72ca:	80 83       	st	Z, r24
    72cc:	ff 91       	pop	r31
    72ce:	ef 91       	pop	r30
    72d0:	9f 91       	pop	r25
    72d2:	8f 91       	pop	r24
    72d4:	0f 90       	pop	r0
    72d6:	0b be       	out	0x3b, r0	; 59
    72d8:	0f 90       	pop	r0
    72da:	0f be       	out	0x3f, r0	; 63
    72dc:	0f 90       	pop	r0
    72de:	1f 90       	pop	r1
    72e0:	18 95       	reti

000072e2 <serial0SER_USBSend>:
    72e2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <serUSBTxInIndex>
    72e6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <serUSBTxInIndex+0x1>
    72ea:	a1 ec       	ldi	r26, 0xC1	; 193
    72ec:	b0 e0       	ldi	r27, 0x00	; 0
    72ee:	9c 91       	ld	r25, X
    72f0:	9f 7d       	andi	r25, 0xDF	; 223
    72f2:	9c 93       	st	X, r25
    72f4:	af 01       	movw	r20, r30
    72f6:	4f 5f       	subi	r20, 0xFF	; 255
    72f8:	5f 4f       	sbci	r21, 0xFF	; 255
    72fa:	80 83       	st	Z, r24
    72fc:	84 e1       	ldi	r24, 0x14	; 20
    72fe:	46 31       	cpi	r20, 0x16	; 22
    7300:	58 07       	cpc	r21, r24
    7302:	19 f0       	breq	.+6      	; 0x730a <serial0SER_USBSend+0x28>
    7304:	10 f0       	brcs	.+4      	; 0x730a <serial0SER_USBSend+0x28>
    7306:	47 e1       	ldi	r20, 0x17	; 23
    7308:	5c e0       	ldi	r21, 0x0C	; 12
    730a:	9f b7       	in	r25, 0x3f	; 63
    730c:	f8 94       	cli
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	05 c0       	rjmp	.+10     	; 0x731c <serial0SER_USBSend+0x3a>
    7312:	20 91 17 14 	lds	r18, 0x1417	; 0x801417 <serUSBTxOutIndex>
    7316:	30 91 18 14 	lds	r19, 0x1418	; 0x801418 <serUSBTxOutIndex+0x1>
    731a:	80 e0       	ldi	r24, 0x00	; 0
    731c:	81 11       	cpse	r24, r1
    731e:	f9 cf       	rjmp	.-14     	; 0x7312 <serial0SER_USBSend+0x30>
    7320:	9f bf       	out	0x3f, r25	; 63
    7322:	42 17       	cp	r20, r18
    7324:	53 07       	cpc	r21, r19
    7326:	49 f4       	brne	.+18     	; 0x733a <serial0SER_USBSend+0x58>
    7328:	8f ef       	ldi	r24, 0xFF	; 255
    732a:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSBOvflFlag>
    732e:	e1 ec       	ldi	r30, 0xC1	; 193
    7330:	f0 e0       	ldi	r31, 0x00	; 0
    7332:	80 81       	ld	r24, Z
    7334:	80 62       	ori	r24, 0x20	; 32
    7336:	80 83       	st	Z, r24
    7338:	08 95       	ret
    733a:	50 93 02 19 	sts	0x1902, r21	; 0x801902 <serUSBTxInIndex+0x1>
    733e:	40 93 01 19 	sts	0x1901, r20	; 0x801901 <serUSBTxInIndex>
    7342:	e1 ec       	ldi	r30, 0xC1	; 193
    7344:	f0 e0       	ldi	r31, 0x00	; 0
    7346:	80 81       	ld	r24, Z
    7348:	80 62       	ori	r24, 0x20	; 32
    734a:	80 83       	st	Z, r24
    734c:	08 95       	ret

0000734e <serial0USB_logMIDIin>:
    734e:	cf 93       	push	r28
    7350:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <serUSB_Active>
    7354:	99 23       	and	r25, r25
    7356:	61 f0       	breq	.+24     	; 0x7370 <serial0USB_logMIDIin+0x22>
    7358:	c8 2f       	mov	r28, r24
    735a:	89 e6       	ldi	r24, 0x69	; 105
    735c:	c2 df       	rcall	.-124    	; 0x72e2 <serial0SER_USBSend>
    735e:	8c 2f       	mov	r24, r28
    7360:	82 95       	swap	r24
    7362:	8f 70       	andi	r24, 0x0F	; 15
    7364:	b5 d2       	rcall	.+1386   	; 0x78d0 <nibbleToChr>
    7366:	bd df       	rcall	.-134    	; 0x72e2 <serial0SER_USBSend>
    7368:	8c 2f       	mov	r24, r28
    736a:	8f 70       	andi	r24, 0x0F	; 15
    736c:	b1 d2       	rcall	.+1378   	; 0x78d0 <nibbleToChr>
    736e:	b9 df       	rcall	.-142    	; 0x72e2 <serial0SER_USBSend>
    7370:	cf 91       	pop	r28
    7372:	08 95       	ret

00007374 <serial1MIDIReadRx>:
    7374:	cf 93       	push	r28
    7376:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
    737a:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    737e:	98 17       	cp	r25, r24
    7380:	71 f0       	breq	.+28     	; 0x739e <serial1MIDIReadRx+0x2a>
    7382:	e0 91 7d 16 	lds	r30, 0x167D	; 0x80167d <midiRxOutIndex>
    7386:	f0 e0       	ldi	r31, 0x00	; 0
    7388:	e5 59       	subi	r30, 0x95	; 149
    738a:	fb 4e       	sbci	r31, 0xEB	; 235
    738c:	c0 81       	ld	r28, Z
    738e:	8c 2f       	mov	r24, r28
    7390:	de df       	rcall	.-68     	; 0x734e <serial0USB_logMIDIin>
    7392:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    7396:	8f 5f       	subi	r24, 0xFF	; 255
    7398:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <midiRxOutIndex>
    739c:	01 c0       	rjmp	.+2      	; 0x73a0 <serial1MIDIReadRx+0x2c>
    739e:	cd ef       	ldi	r28, 0xFD	; 253
    73a0:	8c 2f       	mov	r24, r28
    73a2:	cf 91       	pop	r28
    73a4:	08 95       	ret

000073a6 <serial0USB_logMIDIout>:
    73a6:	cf 93       	push	r28
    73a8:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <serUSB_Active>
    73ac:	99 23       	and	r25, r25
    73ae:	61 f0       	breq	.+24     	; 0x73c8 <serial0USB_logMIDIout+0x22>
    73b0:	c8 2f       	mov	r28, r24
    73b2:	8f e6       	ldi	r24, 0x6F	; 111
    73b4:	96 df       	rcall	.-212    	; 0x72e2 <serial0SER_USBSend>
    73b6:	8c 2f       	mov	r24, r28
    73b8:	82 95       	swap	r24
    73ba:	8f 70       	andi	r24, 0x0F	; 15
    73bc:	89 d2       	rcall	.+1298   	; 0x78d0 <nibbleToChr>
    73be:	91 df       	rcall	.-222    	; 0x72e2 <serial0SER_USBSend>
    73c0:	8c 2f       	mov	r24, r28
    73c2:	8f 70       	andi	r24, 0x0F	; 15
    73c4:	85 d2       	rcall	.+1290   	; 0x78d0 <nibbleToChr>
    73c6:	8d df       	rcall	.-230    	; 0x72e2 <serial0SER_USBSend>
    73c8:	cf 91       	pop	r28
    73ca:	08 95       	ret

000073cc <serial1MIDISend>:
    73cc:	cf 93       	push	r28
    73ce:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    73d2:	99 23       	and	r25, r25
    73d4:	71 f0       	breq	.+28     	; 0x73f2 <serial1MIDISend+0x26>
    73d6:	88 23       	and	r24, r24
    73d8:	64 f4       	brge	.+24     	; 0x73f2 <serial1MIDISend+0x26>
    73da:	90 91 27 14 	lds	r25, 0x1427	; 0x801427 <midiTxLastCmd>
    73de:	89 17       	cp	r24, r25
    73e0:	09 f4       	brne	.+2      	; 0x73e4 <serial1MIDISend+0x18>
    73e2:	55 c0       	rjmp	.+170    	; 0x748e <serial1MIDISend+0xc2>
    73e4:	80 3a       	cpi	r24, 0xA0	; 160
    73e6:	18 f4       	brcc	.+6      	; 0x73ee <serial1MIDISend+0x22>
    73e8:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <midiTxLastCmd>
    73ec:	02 c0       	rjmp	.+4      	; 0x73f2 <serial1MIDISend+0x26>
    73ee:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    73f2:	2f b7       	in	r18, 0x3f	; 63
    73f4:	f8 94       	cli
    73f6:	91 e0       	ldi	r25, 0x01	; 1
    73f8:	06 c0       	rjmp	.+12     	; 0x7406 <serial1MIDISend+0x3a>
    73fa:	e0 e5       	ldi	r30, 0x50	; 80
    73fc:	f2 e0       	ldi	r31, 0x02	; 2
    73fe:	9a e0       	ldi	r25, 0x0A	; 10
    7400:	90 8b       	std	Z+16, r25	; 0x10
    7402:	11 8a       	std	Z+17, r1	; 0x11
    7404:	90 e0       	ldi	r25, 0x00	; 0
    7406:	91 11       	cpse	r25, r1
    7408:	f8 cf       	rjmp	.-16     	; 0x73fa <serial1MIDISend+0x2e>
    740a:	c8 2f       	mov	r28, r24
    740c:	2f bf       	out	0x3f, r18	; 63
    740e:	e9 ec       	ldi	r30, 0xC9	; 201
    7410:	f0 e0       	ldi	r31, 0x00	; 0
    7412:	80 81       	ld	r24, Z
    7414:	8f 7d       	andi	r24, 0xDF	; 223
    7416:	80 83       	st	Z, r24
    7418:	8c 2f       	mov	r24, r28
    741a:	c5 df       	rcall	.-118    	; 0x73a6 <serial0USB_logMIDIout>
    741c:	e0 91 19 14 	lds	r30, 0x1419	; 0x801419 <midiTxInIndex>
    7420:	f0 e0       	ldi	r31, 0x00	; 0
    7422:	e4 59       	subi	r30, 0x94	; 148
    7424:	fa 4e       	sbci	r31, 0xEA	; 234
    7426:	c0 83       	st	Z, r28
    7428:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    742c:	8f 5f       	subi	r24, 0xFF	; 255
    742e:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    7432:	89 13       	cpse	r24, r25
    7434:	0e c0       	rjmp	.+28     	; 0x7452 <serial1MIDISend+0x86>
    7436:	80 91 80 16 	lds	r24, 0x1680	; 0x801680 <midiTxOvflCount>
    743a:	88 23       	and	r24, r24
    743c:	31 f0       	breq	.+12     	; 0x744a <serial1MIDISend+0x7e>
    743e:	8f 3f       	cpi	r24, 0xFF	; 255
    7440:	51 f0       	breq	.+20     	; 0x7456 <serial1MIDISend+0x8a>
    7442:	8f 5f       	subi	r24, 0xFF	; 255
    7444:	80 93 80 16 	sts	0x1680, r24	; 0x801680 <midiTxOvflCount>
    7448:	06 c0       	rjmp	.+12     	; 0x7456 <serial1MIDISend+0x8a>
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	80 93 80 16 	sts	0x1680, r24	; 0x801680 <midiTxOvflCount>
    7450:	02 c0       	rjmp	.+4      	; 0x7456 <serial1MIDISend+0x8a>
    7452:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <midiTxInIndex>
    7456:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <midiTxInIndex>
    745a:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <midiTxOutIndex>
    745e:	89 17       	cp	r24, r25
    7460:	30 f4       	brcc	.+12     	; 0x746e <serial1MIDISend+0xa2>
    7462:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    7466:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    746a:	89 1b       	sub	r24, r25
    746c:	05 c0       	rjmp	.+10     	; 0x7478 <serial1MIDISend+0xac>
    746e:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    7472:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    7476:	89 1b       	sub	r24, r25
    7478:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <midiTxBuffUsage>
    747c:	98 17       	cp	r25, r24
    747e:	10 f4       	brcc	.+4      	; 0x7484 <serial1MIDISend+0xb8>
    7480:	80 93 74 16 	sts	0x1674, r24	; 0x801674 <midiTxBuffUsage>
    7484:	e9 ec       	ldi	r30, 0xC9	; 201
    7486:	f0 e0       	ldi	r31, 0x00	; 0
    7488:	80 81       	ld	r24, Z
    748a:	80 62       	ori	r24, 0x20	; 32
    748c:	80 83       	st	Z, r24
    748e:	cf 91       	pop	r28
    7490:	08 95       	ret

00007492 <serial0USB_logPipeIn>:
    7492:	cf 93       	push	r28
    7494:	df 93       	push	r29
    7496:	20 91 7c 16 	lds	r18, 0x167C	; 0x80167c <serUSB_Active>
    749a:	22 23       	and	r18, r18
    749c:	a9 f0       	breq	.+42     	; 0x74c8 <serial0USB_logPipeIn+0x36>
    749e:	c9 2f       	mov	r28, r25
    74a0:	d8 2f       	mov	r29, r24
    74a2:	8b e6       	ldi	r24, 0x6B	; 107
    74a4:	1e df       	rcall	.-452    	; 0x72e2 <serial0SER_USBSend>
    74a6:	8c 2f       	mov	r24, r28
    74a8:	82 95       	swap	r24
    74aa:	8f 70       	andi	r24, 0x0F	; 15
    74ac:	11 d2       	rcall	.+1058   	; 0x78d0 <nibbleToChr>
    74ae:	19 df       	rcall	.-462    	; 0x72e2 <serial0SER_USBSend>
    74b0:	cf 70       	andi	r28, 0x0F	; 15
    74b2:	8c 2f       	mov	r24, r28
    74b4:	0d d2       	rcall	.+1050   	; 0x78d0 <nibbleToChr>
    74b6:	15 df       	rcall	.-470    	; 0x72e2 <serial0SER_USBSend>
    74b8:	8d 2f       	mov	r24, r29
    74ba:	82 95       	swap	r24
    74bc:	8f 70       	andi	r24, 0x0F	; 15
    74be:	08 d2       	rcall	.+1040   	; 0x78d0 <nibbleToChr>
    74c0:	10 df       	rcall	.-480    	; 0x72e2 <serial0SER_USBSend>
    74c2:	8c 2f       	mov	r24, r28
    74c4:	05 d2       	rcall	.+1034   	; 0x78d0 <nibbleToChr>
    74c6:	0d df       	rcall	.-486    	; 0x72e2 <serial0SER_USBSend>
    74c8:	df 91       	pop	r29
    74ca:	cf 91       	pop	r28
    74cc:	08 95       	ret

000074ce <serial0SER_USB_sendStringP>:
    74ce:	cf 93       	push	r28
    74d0:	df 93       	push	r29
    74d2:	fc 01       	movw	r30, r24
    74d4:	02 c0       	rjmp	.+4      	; 0x74da <serial0SER_USB_sendStringP+0xc>
    74d6:	05 df       	rcall	.-502    	; 0x72e2 <serial0SER_USBSend>
    74d8:	fe 01       	movw	r30, r28
    74da:	ef 01       	movw	r28, r30
    74dc:	21 96       	adiw	r28, 0x01	; 1
    74de:	84 91       	lpm	r24, Z
    74e0:	88 23       	and	r24, r24
    74e2:	21 f0       	breq	.+8      	; 0x74ec <serial0SER_USB_sendStringP+0x1e>
    74e4:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSBOvflFlag>
    74e8:	9f 3f       	cpi	r25, 0xFF	; 255
    74ea:	a9 f7       	brne	.-22     	; 0x74d6 <serial0SER_USB_sendStringP+0x8>
    74ec:	df 91       	pop	r29
    74ee:	cf 91       	pop	r28
    74f0:	08 95       	ret

000074f2 <serial0SER_USB_sendCRLF>:
    74f2:	80 ea       	ldi	r24, 0xA0	; 160
    74f4:	94 e1       	ldi	r25, 0x14	; 20
    74f6:	eb cf       	rjmp	.-42     	; 0x74ce <serial0SER_USB_sendStringP>
    74f8:	08 95       	ret

000074fa <init_Serial0SerUSB>:
    74fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    74fe:	88 e0       	ldi	r24, 0x08	; 8
    7500:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    7504:	e1 ec       	ldi	r30, 0xC1	; 193
    7506:	f0 e0       	ldi	r31, 0x00	; 0
    7508:	80 81       	ld	r24, Z
    750a:	88 69       	ori	r24, 0x98	; 152
    750c:	80 83       	st	Z, r24
    750e:	e2 ec       	ldi	r30, 0xC2	; 194
    7510:	f0 e0       	ldi	r31, 0x00	; 0
    7512:	80 81       	ld	r24, Z
    7514:	86 60       	ori	r24, 0x06	; 6
    7516:	80 83       	st	Z, r24
    7518:	8b e2       	ldi	r24, 0x2B	; 43
    751a:	94 e1       	ldi	r25, 0x14	; 20
    751c:	90 93 7f 16 	sts	0x167F, r25	; 0x80167f <serUSBRxInIndex+0x1>
    7520:	80 93 7e 16 	sts	0x167E, r24	; 0x80167e <serUSBRxInIndex>
    7524:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <serUSBRxOutIndex+0x1>
    7528:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <serUSBRxOutIndex>
    752c:	87 e1       	ldi	r24, 0x17	; 23
    752e:	9c e0       	ldi	r25, 0x0C	; 12
    7530:	90 93 18 14 	sts	0x1418, r25	; 0x801418 <serUSBTxOutIndex+0x1>
    7534:	80 93 17 14 	sts	0x1417, r24	; 0x801417 <serUSBTxOutIndex>
    7538:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <serUSBTxInIndex+0x1>
    753c:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <serUSBTxInIndex>
    7540:	10 92 73 16 	sts	0x1673, r1	; 0x801673 <serUSBOvflFlag>
    7544:	0e 94 01 0c 	call	0x1802	; 0x1802 <eeprom_ReadUSB>
    7548:	8f 3f       	cpi	r24, 0xFF	; 255
    754a:	41 f4       	brne	.+16     	; 0x755c <init_Serial0SerUSB+0x62>
    754c:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <serUSB_Active>
    7550:	40 e0       	ldi	r20, 0x00	; 0
    7552:	50 e0       	ldi	r21, 0x00	; 0
    7554:	64 e0       	ldi	r22, 0x04	; 4
    7556:	81 e0       	ldi	r24, 0x01	; 1
    7558:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <log_putError>
    755c:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    7560:	8f 3f       	cpi	r24, 0xFF	; 255
    7562:	41 f4       	brne	.+16     	; 0x7574 <init_Serial0SerUSB+0x7a>
    7564:	8c eb       	ldi	r24, 0xBC	; 188
    7566:	93 e0       	ldi	r25, 0x03	; 3
    7568:	b2 df       	rcall	.-156    	; 0x74ce <serial0SER_USB_sendStringP>
    756a:	88 e5       	ldi	r24, 0x58	; 88
    756c:	94 e1       	ldi	r25, 0x14	; 20
    756e:	af df       	rcall	.-162    	; 0x74ce <serial0SER_USB_sendStringP>
    7570:	c0 df       	rcall	.-128    	; 0x74f2 <serial0SER_USB_sendCRLF>
    7572:	bf cf       	rjmp	.-130    	; 0x74f2 <serial0SER_USB_sendCRLF>
    7574:	08 95       	ret

00007576 <serial0SER_USB_sendString>:
    7576:	1f 93       	push	r17
    7578:	cf 93       	push	r28
    757a:	df 93       	push	r29
    757c:	ec 01       	movw	r28, r24
    757e:	10 e5       	ldi	r17, 0x50	; 80
    7580:	03 c0       	rjmp	.+6      	; 0x7588 <serial0SER_USB_sendString+0x12>
    7582:	21 96       	adiw	r28, 0x01	; 1
    7584:	ae de       	rcall	.-676    	; 0x72e2 <serial0SER_USBSend>
    7586:	11 50       	subi	r17, 0x01	; 1
    7588:	88 81       	ld	r24, Y
    758a:	88 23       	and	r24, r24
    758c:	31 f0       	breq	.+12     	; 0x759a <serial0SER_USB_sendString+0x24>
    758e:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSBOvflFlag>
    7592:	9f 3f       	cpi	r25, 0xFF	; 255
    7594:	11 f0       	breq	.+4      	; 0x759a <serial0SER_USB_sendString+0x24>
    7596:	11 11       	cpse	r17, r1
    7598:	f4 cf       	rjmp	.-24     	; 0x7582 <serial0SER_USB_sendString+0xc>
    759a:	df 91       	pop	r29
    759c:	cf 91       	pop	r28
    759e:	1f 91       	pop	r17
    75a0:	08 95       	ret

000075a2 <__vector_25>:
    75a2:	1f 92       	push	r1
    75a4:	0f 92       	push	r0
    75a6:	0f b6       	in	r0, 0x3f	; 63
    75a8:	0f 92       	push	r0
    75aa:	11 24       	eor	r1, r1
    75ac:	0b b6       	in	r0, 0x3b	; 59
    75ae:	0f 92       	push	r0
    75b0:	2f 93       	push	r18
    75b2:	3f 93       	push	r19
    75b4:	4f 93       	push	r20
    75b6:	5f 93       	push	r21
    75b8:	8f 93       	push	r24
    75ba:	9f 93       	push	r25
    75bc:	ef 93       	push	r30
    75be:	ff 93       	push	r31
    75c0:	e0 91 7e 16 	lds	r30, 0x167E	; 0x80167e <serUSBRxInIndex>
    75c4:	f0 91 7f 16 	lds	r31, 0x167F	; 0x80167f <serUSBRxInIndex+0x1>
    75c8:	af 01       	movw	r20, r30
    75ca:	4f 5f       	subi	r20, 0xFF	; 255
    75cc:	5f 4f       	sbci	r21, 0xFF	; 255
    75ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    75d2:	80 83       	st	Z, r24
    75d4:	84 e1       	ldi	r24, 0x14	; 20
    75d6:	4a 36       	cpi	r20, 0x6A	; 106
    75d8:	58 07       	cpc	r21, r24
    75da:	19 f0       	breq	.+6      	; 0x75e2 <__vector_25+0x40>
    75dc:	10 f0       	brcs	.+4      	; 0x75e2 <__vector_25+0x40>
    75de:	4b e2       	ldi	r20, 0x2B	; 43
    75e0:	54 e1       	ldi	r21, 0x14	; 20
    75e2:	9f b7       	in	r25, 0x3f	; 63
    75e4:	f8 94       	cli
    75e6:	81 e0       	ldi	r24, 0x01	; 1
    75e8:	05 c0       	rjmp	.+10     	; 0x75f4 <__vector_25+0x52>
    75ea:	20 91 71 16 	lds	r18, 0x1671	; 0x801671 <serUSBRxOutIndex>
    75ee:	30 91 72 16 	lds	r19, 0x1672	; 0x801672 <serUSBRxOutIndex+0x1>
    75f2:	80 e0       	ldi	r24, 0x00	; 0
    75f4:	81 11       	cpse	r24, r1
    75f6:	f9 cf       	rjmp	.-14     	; 0x75ea <__vector_25+0x48>
    75f8:	9f bf       	out	0x3f, r25	; 63
    75fa:	42 17       	cp	r20, r18
    75fc:	53 07       	cpc	r21, r19
    75fe:	21 f4       	brne	.+8      	; 0x7608 <__vector_25+0x66>
    7600:	8f ef       	ldi	r24, 0xFF	; 255
    7602:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSBOvflFlag>
    7606:	04 c0       	rjmp	.+8      	; 0x7610 <__vector_25+0x6e>
    7608:	50 93 7f 16 	sts	0x167F, r21	; 0x80167f <serUSBRxInIndex+0x1>
    760c:	40 93 7e 16 	sts	0x167E, r20	; 0x80167e <serUSBRxInIndex>
    7610:	ff 91       	pop	r31
    7612:	ef 91       	pop	r30
    7614:	9f 91       	pop	r25
    7616:	8f 91       	pop	r24
    7618:	5f 91       	pop	r21
    761a:	4f 91       	pop	r20
    761c:	3f 91       	pop	r19
    761e:	2f 91       	pop	r18
    7620:	0f 90       	pop	r0
    7622:	0b be       	out	0x3b, r0	; 59
    7624:	0f 90       	pop	r0
    7626:	0f be       	out	0x3f, r0	; 63
    7628:	0f 90       	pop	r0
    762a:	1f 90       	pop	r1
    762c:	18 95       	reti

0000762e <__vector_26>:
    762e:	1f 92       	push	r1
    7630:	0f 92       	push	r0
    7632:	0f b6       	in	r0, 0x3f	; 63
    7634:	0f 92       	push	r0
    7636:	11 24       	eor	r1, r1
    7638:	0b b6       	in	r0, 0x3b	; 59
    763a:	0f 92       	push	r0
    763c:	2f 93       	push	r18
    763e:	8f 93       	push	r24
    7640:	9f 93       	push	r25
    7642:	ef 93       	push	r30
    7644:	ff 93       	push	r31
    7646:	e0 91 17 14 	lds	r30, 0x1417	; 0x801417 <serUSBTxOutIndex>
    764a:	f0 91 18 14 	lds	r31, 0x1418	; 0x801418 <serUSBTxOutIndex+0x1>
    764e:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <serUSBTxInIndex>
    7652:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <serUSBTxInIndex+0x1>
    7656:	e8 17       	cp	r30, r24
    7658:	f9 07       	cpc	r31, r25
    765a:	89 f0       	breq	.+34     	; 0x767e <__vector_26+0x50>
    765c:	cf 01       	movw	r24, r30
    765e:	01 96       	adiw	r24, 0x01	; 1
    7660:	20 81       	ld	r18, Z
    7662:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7666:	24 e1       	ldi	r18, 0x14	; 20
    7668:	86 31       	cpi	r24, 0x16	; 22
    766a:	92 07       	cpc	r25, r18
    766c:	19 f0       	breq	.+6      	; 0x7674 <__vector_26+0x46>
    766e:	10 f0       	brcs	.+4      	; 0x7674 <__vector_26+0x46>
    7670:	87 e1       	ldi	r24, 0x17	; 23
    7672:	9c e0       	ldi	r25, 0x0C	; 12
    7674:	90 93 18 14 	sts	0x1418, r25	; 0x801418 <serUSBTxOutIndex+0x1>
    7678:	80 93 17 14 	sts	0x1417, r24	; 0x801417 <serUSBTxOutIndex>
    767c:	05 c0       	rjmp	.+10     	; 0x7688 <__vector_26+0x5a>
    767e:	e1 ec       	ldi	r30, 0xC1	; 193
    7680:	f0 e0       	ldi	r31, 0x00	; 0
    7682:	80 81       	ld	r24, Z
    7684:	8f 7d       	andi	r24, 0xDF	; 223
    7686:	80 83       	st	Z, r24
    7688:	ff 91       	pop	r31
    768a:	ef 91       	pop	r30
    768c:	9f 91       	pop	r25
    768e:	8f 91       	pop	r24
    7690:	2f 91       	pop	r18
    7692:	0f 90       	pop	r0
    7694:	0b be       	out	0x3b, r0	; 59
    7696:	0f 90       	pop	r0
    7698:	0f be       	out	0x3f, r0	; 63
    769a:	0f 90       	pop	r0
    769c:	1f 90       	pop	r1
    769e:	18 95       	reti

000076a0 <init_Serial3SerESP>:
    76a0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    76a4:	88 e0       	ldi	r24, 0x08	; 8
    76a6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    76aa:	e1 e3       	ldi	r30, 0x31	; 49
    76ac:	f1 e0       	ldi	r31, 0x01	; 1
    76ae:	80 81       	ld	r24, Z
    76b0:	88 69       	ori	r24, 0x98	; 152
    76b2:	80 83       	st	Z, r24
    76b4:	e2 e3       	ldi	r30, 0x32	; 50
    76b6:	f1 e0       	ldi	r31, 0x01	; 1
    76b8:	80 81       	ld	r24, Z
    76ba:	86 60       	ori	r24, 0x06	; 6
    76bc:	80 83       	st	Z, r24
    76be:	81 e8       	ldi	r24, 0x81	; 129
    76c0:	96 e1       	ldi	r25, 0x16	; 22
    76c2:	90 93 29 14 	sts	0x1429, r25	; 0x801429 <serESPRxInIndex+0x1>
    76c6:	80 93 28 14 	sts	0x1428, r24	; 0x801428 <serESPRxInIndex>
    76ca:	90 93 24 14 	sts	0x1424, r25	; 0x801424 <serESPRxOutIndex+0x1>
    76ce:	80 93 23 14 	sts	0x1423, r24	; 0x801423 <serESPRxOutIndex>
    76d2:	81 e0       	ldi	r24, 0x01	; 1
    76d4:	97 e1       	ldi	r25, 0x17	; 23
    76d6:	90 93 6d 16 	sts	0x166D, r25	; 0x80166d <serESPTxOutIndex+0x1>
    76da:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <serESPTxOutIndex>
    76de:	90 93 70 16 	sts	0x1670, r25	; 0x801670 <serESPTxInIndex+0x1>
    76e2:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <serESPTxInIndex>
    76e6:	10 92 1a 14 	sts	0x141A, r1	; 0x80141a <serESPOvflFlag>
    76ea:	8f ef       	ldi	r24, 0xFF	; 255
    76ec:	80 93 78 16 	sts	0x1678, r24	; 0x801678 <serESP_Active>
    76f0:	80 e0       	ldi	r24, 0x00	; 0
    76f2:	07 c0       	rjmp	.+14     	; 0x7702 <init_Serial3SerESP+0x62>
    76f4:	e8 2f       	mov	r30, r24
    76f6:	f0 e0       	ldi	r31, 0x00	; 0
    76f8:	e5 5e       	subi	r30, 0xE5	; 229
    76fa:	fb 4e       	sbci	r31, 0xEB	; 235
    76fc:	9f ef       	ldi	r25, 0xFF	; 255
    76fe:	90 83       	st	Z, r25
    7700:	8f 5f       	subi	r24, 0xFF	; 255
    7702:	88 30       	cpi	r24, 0x08	; 8
    7704:	b8 f3       	brcs	.-18     	; 0x76f4 <init_Serial3SerESP+0x54>
    7706:	08 95       	ret

00007708 <serial3SER_ESPSend>:
    7708:	e0 91 6f 16 	lds	r30, 0x166F	; 0x80166f <serESPTxInIndex>
    770c:	f0 91 70 16 	lds	r31, 0x1670	; 0x801670 <serESPTxInIndex+0x1>
    7710:	a1 e3       	ldi	r26, 0x31	; 49
    7712:	b1 e0       	ldi	r27, 0x01	; 1
    7714:	9c 91       	ld	r25, X
    7716:	9f 7d       	andi	r25, 0xDF	; 223
    7718:	9c 93       	st	X, r25
    771a:	af 01       	movw	r20, r30
    771c:	4f 5f       	subi	r20, 0xFF	; 255
    771e:	5f 4f       	sbci	r21, 0xFF	; 255
    7720:	80 83       	st	Z, r24
    7722:	89 e1       	ldi	r24, 0x19	; 25
    7724:	40 30       	cpi	r20, 0x00	; 0
    7726:	58 07       	cpc	r21, r24
    7728:	19 f0       	breq	.+6      	; 0x7730 <serial3SER_ESPSend+0x28>
    772a:	10 f0       	brcs	.+4      	; 0x7730 <serial3SER_ESPSend+0x28>
    772c:	41 e0       	ldi	r20, 0x01	; 1
    772e:	57 e1       	ldi	r21, 0x17	; 23
    7730:	9f b7       	in	r25, 0x3f	; 63
    7732:	f8 94       	cli
    7734:	81 e0       	ldi	r24, 0x01	; 1
    7736:	05 c0       	rjmp	.+10     	; 0x7742 <serial3SER_ESPSend+0x3a>
    7738:	20 91 6c 16 	lds	r18, 0x166C	; 0x80166c <serESPTxOutIndex>
    773c:	30 91 6d 16 	lds	r19, 0x166D	; 0x80166d <serESPTxOutIndex+0x1>
    7740:	80 e0       	ldi	r24, 0x00	; 0
    7742:	81 11       	cpse	r24, r1
    7744:	f9 cf       	rjmp	.-14     	; 0x7738 <serial3SER_ESPSend+0x30>
    7746:	9f bf       	out	0x3f, r25	; 63
    7748:	42 17       	cp	r20, r18
    774a:	53 07       	cpc	r21, r19
    774c:	49 f4       	brne	.+18     	; 0x7760 <serial3SER_ESPSend+0x58>
    774e:	8f ef       	ldi	r24, 0xFF	; 255
    7750:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <serESPOvflFlag>
    7754:	e1 e3       	ldi	r30, 0x31	; 49
    7756:	f1 e0       	ldi	r31, 0x01	; 1
    7758:	80 81       	ld	r24, Z
    775a:	80 62       	ori	r24, 0x20	; 32
    775c:	80 83       	st	Z, r24
    775e:	08 95       	ret
    7760:	50 93 70 16 	sts	0x1670, r21	; 0x801670 <serESPTxInIndex+0x1>
    7764:	40 93 6f 16 	sts	0x166F, r20	; 0x80166f <serESPTxInIndex>
    7768:	e1 e3       	ldi	r30, 0x31	; 49
    776a:	f1 e0       	ldi	r31, 0x01	; 1
    776c:	80 81       	ld	r24, Z
    776e:	80 62       	ori	r24, 0x20	; 32
    7770:	80 83       	st	Z, r24
    7772:	08 95       	ret

00007774 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    7774:	e0 91 23 14 	lds	r30, 0x1423	; 0x801423 <serESPRxOutIndex>
    7778:	f0 91 24 14 	lds	r31, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    777c:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <serESPRxInIndex>
    7780:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
    7784:	e8 17       	cp	r30, r24
    7786:	f9 07       	cpc	r31, r25
    7788:	81 f0       	breq	.+32     	; 0x77aa <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    778a:	9f 01       	movw	r18, r30
    778c:	2f 5f       	subi	r18, 0xFF	; 255
    778e:	3f 4f       	sbci	r19, 0xFF	; 255
    7790:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    7792:	97 e1       	ldi	r25, 0x17	; 23
    7794:	20 30       	cpi	r18, 0x00	; 0
    7796:	39 07       	cpc	r19, r25
    7798:	19 f0       	breq	.+6      	; 0x77a0 <serial3SER_ESPReadRx+0x2c>
    779a:	10 f0       	brcs	.+4      	; 0x77a0 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    779c:	21 e8       	ldi	r18, 0x81	; 129
    779e:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    77a0:	30 93 24 14 	sts	0x1424, r19	; 0x801424 <serESPRxOutIndex+0x1>
    77a4:	20 93 23 14 	sts	0x1423, r18	; 0x801423 <serESPRxOutIndex>
    77a8:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    77aa:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    77ac:	08 95       	ret

000077ae <__vector_54>:

ISR(USART3_RX_vect) {
    77ae:	1f 92       	push	r1
    77b0:	0f 92       	push	r0
    77b2:	0f b6       	in	r0, 0x3f	; 63
    77b4:	0f 92       	push	r0
    77b6:	11 24       	eor	r1, r1
    77b8:	0b b6       	in	r0, 0x3b	; 59
    77ba:	0f 92       	push	r0
    77bc:	2f 93       	push	r18
    77be:	3f 93       	push	r19
    77c0:	4f 93       	push	r20
    77c2:	5f 93       	push	r21
    77c4:	6f 93       	push	r22
    77c6:	8f 93       	push	r24
    77c8:	9f 93       	push	r25
    77ca:	af 93       	push	r26
    77cc:	bf 93       	push	r27
    77ce:	ef 93       	push	r30
    77d0:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    77d2:	e0 91 28 14 	lds	r30, 0x1428	; 0x801428 <serESPRxInIndex>
    77d6:	f0 91 29 14 	lds	r31, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    77da:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    77de:	af 01       	movw	r20, r30
    77e0:	4f 5f       	subi	r20, 0xFF	; 255
    77e2:	5f 4f       	sbci	r21, 0xFF	; 255
    77e4:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    77e6:	87 e1       	ldi	r24, 0x17	; 23
    77e8:	40 30       	cpi	r20, 0x00	; 0
    77ea:	58 07       	cpc	r21, r24
    77ec:	19 f0       	breq	.+6      	; 0x77f4 <__vector_54+0x46>
    77ee:	10 f0       	brcs	.+4      	; 0x77f4 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    77f0:	41 e8       	ldi	r20, 0x81	; 129
    77f2:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    77f4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    77f6:	f8 94       	cli
    77f8:	81 e0       	ldi	r24, 0x01	; 1
    77fa:	05 c0       	rjmp	.+10     	; 0x7806 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    77fc:	20 91 23 14 	lds	r18, 0x1423	; 0x801423 <serESPRxOutIndex>
    7800:	30 91 24 14 	lds	r19, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7804:	80 e0       	ldi	r24, 0x00	; 0
    7806:	81 11       	cpse	r24, r1
    7808:	f9 cf       	rjmp	.-14     	; 0x77fc <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    780a:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    780c:	42 17       	cp	r20, r18
    780e:	53 07       	cpc	r21, r19
    7810:	39 f4       	brne	.+14     	; 0x7820 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    7812:	8f ef       	ldi	r24, 0xFF	; 255
    7814:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7818:	80 e0       	ldi	r24, 0x00	; 0
    781a:	a2 e2       	ldi	r26, 0x22	; 34
    781c:	b4 e1       	ldi	r27, 0x14	; 20
    781e:	0a c0       	rjmp	.+20     	; 0x7834 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    7820:	50 93 29 14 	sts	0x1429, r21	; 0x801429 <serESPRxInIndex+0x1>
    7824:	40 93 28 14 	sts	0x1428, r20	; 0x801428 <serESPRxInIndex>
    7828:	f7 cf       	rjmp	.-18     	; 0x7818 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    782a:	fd 01       	movw	r30, r26
    782c:	92 91       	ld	r25, -Z
    782e:	9c 93       	st	X, r25
		inpBufferPtr--;
    7830:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    7832:	8f 5f       	subi	r24, 0xFF	; 255
    7834:	87 30       	cpi	r24, 0x07	; 7
    7836:	c8 f3       	brcs	.-14     	; 0x782a <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7838:	6c 93       	st	X, r22
}
    783a:	ff 91       	pop	r31
    783c:	ef 91       	pop	r30
    783e:	bf 91       	pop	r27
    7840:	af 91       	pop	r26
    7842:	9f 91       	pop	r25
    7844:	8f 91       	pop	r24
    7846:	6f 91       	pop	r22
    7848:	5f 91       	pop	r21
    784a:	4f 91       	pop	r20
    784c:	3f 91       	pop	r19
    784e:	2f 91       	pop	r18
    7850:	0f 90       	pop	r0
    7852:	0b be       	out	0x3b, r0	; 59
    7854:	0f 90       	pop	r0
    7856:	0f be       	out	0x3f, r0	; 63
    7858:	0f 90       	pop	r0
    785a:	1f 90       	pop	r1
    785c:	18 95       	reti

0000785e <__vector_55>:

ISR(USART3_UDRE_vect) {
    785e:	1f 92       	push	r1
    7860:	0f 92       	push	r0
    7862:	0f b6       	in	r0, 0x3f	; 63
    7864:	0f 92       	push	r0
    7866:	11 24       	eor	r1, r1
    7868:	0b b6       	in	r0, 0x3b	; 59
    786a:	0f 92       	push	r0
    786c:	2f 93       	push	r18
    786e:	8f 93       	push	r24
    7870:	9f 93       	push	r25
    7872:	ef 93       	push	r30
    7874:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    7876:	e0 91 6c 16 	lds	r30, 0x166C	; 0x80166c <serESPTxOutIndex>
    787a:	f0 91 6d 16 	lds	r31, 0x166D	; 0x80166d <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    787e:	80 91 6f 16 	lds	r24, 0x166F	; 0x80166f <serESPTxInIndex>
    7882:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <serESPTxInIndex+0x1>
    7886:	e8 17       	cp	r30, r24
    7888:	f9 07       	cpc	r31, r25
    788a:	89 f0       	breq	.+34     	; 0x78ae <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    788c:	cf 01       	movw	r24, r30
    788e:	01 96       	adiw	r24, 0x01	; 1
    7890:	20 81       	ld	r18, Z
    7892:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    7896:	29 e1       	ldi	r18, 0x19	; 25
    7898:	80 30       	cpi	r24, 0x00	; 0
    789a:	92 07       	cpc	r25, r18
    789c:	19 f0       	breq	.+6      	; 0x78a4 <__vector_55+0x46>
    789e:	10 f0       	brcs	.+4      	; 0x78a4 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    78a0:	81 e0       	ldi	r24, 0x01	; 1
    78a2:	97 e1       	ldi	r25, 0x17	; 23
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    78a4:	90 93 6d 16 	sts	0x166D, r25	; 0x80166d <serESPTxOutIndex+0x1>
    78a8:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <serESPTxOutIndex>
    78ac:	05 c0       	rjmp	.+10     	; 0x78b8 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    78ae:	e1 e3       	ldi	r30, 0x31	; 49
    78b0:	f1 e0       	ldi	r31, 0x01	; 1
    78b2:	80 81       	ld	r24, Z
    78b4:	8f 7d       	andi	r24, 0xDF	; 223
    78b6:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    78b8:	ff 91       	pop	r31
    78ba:	ef 91       	pop	r30
    78bc:	9f 91       	pop	r25
    78be:	8f 91       	pop	r24
    78c0:	2f 91       	pop	r18
    78c2:	0f 90       	pop	r0
    78c4:	0b be       	out	0x3b, r0	; 59
    78c6:	0f 90       	pop	r0
    78c8:	0f be       	out	0x3f, r0	; 63
    78ca:	0f 90       	pop	r0
    78cc:	1f 90       	pop	r1
    78ce:	18 95       	reti

000078d0 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    78d0:	8a 30       	cpi	r24, 0x0A	; 10
    78d2:	10 f0       	brcs	.+4      	; 0x78d8 <nibbleToChr+0x8>
    78d4:	89 5c       	subi	r24, 0xC9	; 201
    78d6:	08 95       	ret
    78d8:	80 5d       	subi	r24, 0xD0	; 208
    78da:	08 95       	ret

000078dc <lcd_hexout>:
    78dc:	cf 93       	push	r28
    78de:	c8 2f       	mov	r28, r24
    78e0:	82 95       	swap	r24
    78e2:	8f 70       	andi	r24, 0x0F	; 15
    78e4:	8a 30       	cpi	r24, 0x0A	; 10
    78e6:	10 f0       	brcs	.+4      	; 0x78ec <lcd_hexout+0x10>
    78e8:	89 5c       	subi	r24, 0xC9	; 201
    78ea:	01 c0       	rjmp	.+2      	; 0x78ee <lcd_hexout+0x12>
    78ec:	80 5d       	subi	r24, 0xD0	; 208
    78ee:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    78f2:	cf 70       	andi	r28, 0x0F	; 15
    78f4:	ca 30       	cpi	r28, 0x0A	; 10
    78f6:	18 f0       	brcs	.+6      	; 0x78fe <lcd_hexout+0x22>
    78f8:	87 e3       	ldi	r24, 0x37	; 55
    78fa:	8c 0f       	add	r24, r28
    78fc:	02 c0       	rjmp	.+4      	; 0x7902 <lcd_hexout+0x26>
    78fe:	80 e3       	ldi	r24, 0x30	; 48
    7900:	8c 0f       	add	r24, r28
    7902:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7906:	cf 91       	pop	r28
    7908:	08 95       	ret

0000790a <lcd_longout>:
    790a:	cf 93       	push	r28
    790c:	df 93       	push	r29
    790e:	d3 e0       	ldi	r29, 0x03	; 3
    7910:	1c c0       	rjmp	.+56     	; 0x794a <lcd_longout+0x40>
    7912:	ed 2f       	mov	r30, r29
    7914:	0d 2e       	mov	r0, r29
    7916:	00 0c       	add	r0, r0
    7918:	ff 0b       	sbc	r31, r31
    791a:	ea 5f       	subi	r30, 0xFA	; 250
    791c:	f6 4e       	sbci	r31, 0xE6	; 230
    791e:	c0 81       	ld	r28, Z
    7920:	8c 2f       	mov	r24, r28
    7922:	82 95       	swap	r24
    7924:	8f 70       	andi	r24, 0x0F	; 15
    7926:	8a 30       	cpi	r24, 0x0A	; 10
    7928:	10 f0       	brcs	.+4      	; 0x792e <lcd_longout+0x24>
    792a:	89 5c       	subi	r24, 0xC9	; 201
    792c:	01 c0       	rjmp	.+2      	; 0x7930 <lcd_longout+0x26>
    792e:	80 5d       	subi	r24, 0xD0	; 208
    7930:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7934:	cf 70       	andi	r28, 0x0F	; 15
    7936:	ca 30       	cpi	r28, 0x0A	; 10
    7938:	18 f0       	brcs	.+6      	; 0x7940 <lcd_longout+0x36>
    793a:	87 e3       	ldi	r24, 0x37	; 55
    793c:	8c 0f       	add	r24, r28
    793e:	02 c0       	rjmp	.+4      	; 0x7944 <lcd_longout+0x3a>
    7940:	80 e3       	ldi	r24, 0x30	; 48
    7942:	8c 0f       	add	r24, r28
    7944:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7948:	d1 50       	subi	r29, 0x01	; 1
    794a:	dd 23       	and	r29, r29
    794c:	14 f7       	brge	.-60     	; 0x7912 <lcd_longout+0x8>
    794e:	df 91       	pop	r29
    7950:	cf 91       	pop	r28
    7952:	08 95       	ret

00007954 <lcd_dec2out>:
    7954:	cf 93       	push	r28
    7956:	c8 2f       	mov	r28, r24
    7958:	84 36       	cpi	r24, 0x64	; 100
    795a:	50 f0       	brcs	.+20     	; 0x7970 <lcd_dec2out+0x1c>
    795c:	8d e2       	ldi	r24, 0x2D	; 45
    795e:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7962:	8d e2       	ldi	r24, 0x2D	; 45
    7964:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7968:	0d c0       	rjmp	.+26     	; 0x7984 <lcd_dec2out+0x30>
    796a:	ca 50       	subi	r28, 0x0A	; 10
    796c:	8f 5f       	subi	r24, 0xFF	; 255
    796e:	01 c0       	rjmp	.+2      	; 0x7972 <lcd_dec2out+0x1e>
    7970:	80 e0       	ldi	r24, 0x00	; 0
    7972:	ca 30       	cpi	r28, 0x0A	; 10
    7974:	d0 f7       	brcc	.-12     	; 0x796a <lcd_dec2out+0x16>
    7976:	80 5d       	subi	r24, 0xD0	; 208
    7978:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    797c:	80 e3       	ldi	r24, 0x30	; 48
    797e:	8c 0f       	add	r24, r28
    7980:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7984:	cf 91       	pop	r28
    7986:	08 95       	ret

00007988 <putChar_Dec2>:
    7988:	84 36       	cpi	r24, 0x64	; 100
    798a:	58 f0       	brcs	.+22     	; 0x79a2 <putChar_Dec2+0x1a>
    798c:	8d e2       	ldi	r24, 0x2D	; 45
    798e:	db 01       	movw	r26, r22
    7990:	8c 93       	st	X, r24
    7992:	fb 01       	movw	r30, r22
    7994:	32 96       	adiw	r30, 0x02	; 2
    7996:	11 96       	adiw	r26, 0x01	; 1
    7998:	8c 93       	st	X, r24
    799a:	0f c0       	rjmp	.+30     	; 0x79ba <putChar_Dec2+0x32>
    799c:	8a 50       	subi	r24, 0x0A	; 10
    799e:	9f 5f       	subi	r25, 0xFF	; 255
    79a0:	01 c0       	rjmp	.+2      	; 0x79a4 <putChar_Dec2+0x1c>
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	8a 30       	cpi	r24, 0x0A	; 10
    79a6:	d0 f7       	brcc	.-12     	; 0x799c <putChar_Dec2+0x14>
    79a8:	90 5d       	subi	r25, 0xD0	; 208
    79aa:	fb 01       	movw	r30, r22
    79ac:	90 83       	st	Z, r25
    79ae:	32 96       	adiw	r30, 0x02	; 2
    79b0:	90 e3       	ldi	r25, 0x30	; 48
    79b2:	98 0f       	add	r25, r24
    79b4:	db 01       	movw	r26, r22
    79b6:	11 96       	adiw	r26, 0x01	; 1
    79b8:	9c 93       	st	X, r25
    79ba:	10 82       	st	Z, r1
    79bc:	cf 01       	movw	r24, r30
    79be:	08 95       	ret

000079c0 <putChar_Dec>:
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	02 c0       	rjmp	.+4      	; 0x79c8 <putChar_Dec+0x8>
    79c4:	84 56       	subi	r24, 0x64	; 100
    79c6:	9f 5f       	subi	r25, 0xFF	; 255
    79c8:	84 36       	cpi	r24, 0x64	; 100
    79ca:	e0 f7       	brcc	.-8      	; 0x79c4 <putChar_Dec+0x4>
    79cc:	99 23       	and	r25, r25
    79ce:	39 f0       	breq	.+14     	; 0x79de <putChar_Dec+0x1e>
    79d0:	90 5d       	subi	r25, 0xD0	; 208
    79d2:	db 01       	movw	r26, r22
    79d4:	9c 93       	st	X, r25
    79d6:	6f 5f       	subi	r22, 0xFF	; 255
    79d8:	7f 4f       	sbci	r23, 0xFF	; 255
    79da:	2f ef       	ldi	r18, 0xFF	; 255
    79dc:	01 c0       	rjmp	.+2      	; 0x79e0 <putChar_Dec+0x20>
    79de:	20 e0       	ldi	r18, 0x00	; 0
    79e0:	90 e0       	ldi	r25, 0x00	; 0
    79e2:	02 c0       	rjmp	.+4      	; 0x79e8 <putChar_Dec+0x28>
    79e4:	8a 50       	subi	r24, 0x0A	; 10
    79e6:	9f 5f       	subi	r25, 0xFF	; 255
    79e8:	8a 30       	cpi	r24, 0x0A	; 10
    79ea:	e0 f7       	brcc	.-8      	; 0x79e4 <putChar_Dec+0x24>
    79ec:	91 11       	cpse	r25, r1
    79ee:	02 c0       	rjmp	.+4      	; 0x79f4 <putChar_Dec+0x34>
    79f0:	2f 3f       	cpi	r18, 0xFF	; 255
    79f2:	31 f4       	brne	.+12     	; 0x7a00 <putChar_Dec+0x40>
    79f4:	fb 01       	movw	r30, r22
    79f6:	31 96       	adiw	r30, 0x01	; 1
    79f8:	90 5d       	subi	r25, 0xD0	; 208
    79fa:	db 01       	movw	r26, r22
    79fc:	9c 93       	st	X, r25
    79fe:	01 c0       	rjmp	.+2      	; 0x7a02 <putChar_Dec+0x42>
    7a00:	fb 01       	movw	r30, r22
    7a02:	80 5d       	subi	r24, 0xD0	; 208
    7a04:	80 83       	st	Z, r24
    7a06:	11 82       	std	Z+1, r1	; 0x01
    7a08:	cf 01       	movw	r24, r30
    7a0a:	01 96       	adiw	r24, 0x01	; 1
    7a0c:	08 95       	ret

00007a0e <putChar_hex>:
    7a0e:	fb 01       	movw	r30, r22
    7a10:	98 2f       	mov	r25, r24
    7a12:	92 95       	swap	r25
    7a14:	9f 70       	andi	r25, 0x0F	; 15
    7a16:	9a 30       	cpi	r25, 0x0A	; 10
    7a18:	10 f0       	brcs	.+4      	; 0x7a1e <putChar_hex+0x10>
    7a1a:	99 5c       	subi	r25, 0xC9	; 201
    7a1c:	01 c0       	rjmp	.+2      	; 0x7a20 <putChar_hex+0x12>
    7a1e:	90 5d       	subi	r25, 0xD0	; 208
    7a20:	90 83       	st	Z, r25
    7a22:	98 2f       	mov	r25, r24
    7a24:	9f 70       	andi	r25, 0x0F	; 15
    7a26:	9f 01       	movw	r18, r30
    7a28:	2e 5f       	subi	r18, 0xFE	; 254
    7a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2c:	9a 30       	cpi	r25, 0x0A	; 10
    7a2e:	10 f0       	brcs	.+4      	; 0x7a34 <putChar_hex+0x26>
    7a30:	99 5c       	subi	r25, 0xC9	; 201
    7a32:	01 c0       	rjmp	.+2      	; 0x7a36 <putChar_hex+0x28>
    7a34:	90 5d       	subi	r25, 0xD0	; 208
    7a36:	91 83       	std	Z+1, r25	; 0x01
    7a38:	12 82       	std	Z+2, r1	; 0x02
    7a3a:	c9 01       	movw	r24, r18
    7a3c:	08 95       	ret

00007a3e <putChar_MidiChan>:
    7a3e:	80 31       	cpi	r24, 0x10	; 16
    7a40:	48 f0       	brcs	.+18     	; 0x7a54 <putChar_MidiChan+0x16>
    7a42:	8e e6       	ldi	r24, 0x6E	; 110
    7a44:	db 01       	movw	r26, r22
    7a46:	8c 93       	st	X, r24
    7a48:	fb 01       	movw	r30, r22
    7a4a:	32 96       	adiw	r30, 0x02	; 2
    7a4c:	8f e6       	ldi	r24, 0x6F	; 111
    7a4e:	11 96       	adiw	r26, 0x01	; 1
    7a50:	8c 93       	st	X, r24
    7a52:	15 c0       	rjmp	.+42     	; 0x7a7e <putChar_MidiChan+0x40>
    7a54:	91 e0       	ldi	r25, 0x01	; 1
    7a56:	98 0f       	add	r25, r24
    7a58:	9a 30       	cpi	r25, 0x0A	; 10
    7a5a:	40 f0       	brcs	.+16     	; 0x7a6c <putChar_MidiChan+0x2e>
    7a5c:	db 01       	movw	r26, r22
    7a5e:	11 96       	adiw	r26, 0x01	; 1
    7a60:	91 e3       	ldi	r25, 0x31	; 49
    7a62:	fb 01       	movw	r30, r22
    7a64:	90 83       	st	Z, r25
    7a66:	97 ef       	ldi	r25, 0xF7	; 247
    7a68:	98 0f       	add	r25, r24
    7a6a:	05 c0       	rjmp	.+10     	; 0x7a76 <putChar_MidiChan+0x38>
    7a6c:	db 01       	movw	r26, r22
    7a6e:	11 96       	adiw	r26, 0x01	; 1
    7a70:	80 e2       	ldi	r24, 0x20	; 32
    7a72:	fb 01       	movw	r30, r22
    7a74:	80 83       	st	Z, r24
    7a76:	fd 01       	movw	r30, r26
    7a78:	31 96       	adiw	r30, 0x01	; 1
    7a7a:	90 5d       	subi	r25, 0xD0	; 208
    7a7c:	9c 93       	st	X, r25
    7a7e:	10 82       	st	Z, r1
    7a80:	cf 01       	movw	r24, r30
    7a82:	08 95       	ret

00007a84 <putChar_word>:
    7a84:	ac 01       	movw	r20, r24
    7a86:	fb 01       	movw	r30, r22
    7a88:	34 96       	adiw	r30, 0x04	; 4
    7a8a:	db 01       	movw	r26, r22
    7a8c:	14 96       	adiw	r26, 0x04	; 4
    7a8e:	1c 92       	st	X, r1
    7a90:	20 e0       	ldi	r18, 0x00	; 0
    7a92:	10 c0       	rjmp	.+32     	; 0x7ab4 <putChar_word+0x30>
    7a94:	94 2f       	mov	r25, r20
    7a96:	9f 70       	andi	r25, 0x0F	; 15
    7a98:	31 97       	sbiw	r30, 0x01	; 1
    7a9a:	9a 30       	cpi	r25, 0x0A	; 10
    7a9c:	10 f0       	brcs	.+4      	; 0x7aa2 <putChar_word+0x1e>
    7a9e:	99 5c       	subi	r25, 0xC9	; 201
    7aa0:	01 c0       	rjmp	.+2      	; 0x7aa4 <putChar_word+0x20>
    7aa2:	90 5d       	subi	r25, 0xD0	; 208
    7aa4:	90 83       	st	Z, r25
    7aa6:	52 95       	swap	r21
    7aa8:	42 95       	swap	r20
    7aaa:	4f 70       	andi	r20, 0x0F	; 15
    7aac:	45 27       	eor	r20, r21
    7aae:	5f 70       	andi	r21, 0x0F	; 15
    7ab0:	45 27       	eor	r20, r21
    7ab2:	2f 5f       	subi	r18, 0xFF	; 255
    7ab4:	24 30       	cpi	r18, 0x04	; 4
    7ab6:	70 f3       	brcs	.-36     	; 0x7a94 <putChar_word+0x10>
    7ab8:	cf 01       	movw	r24, r30
    7aba:	04 96       	adiw	r24, 0x04	; 4
    7abc:	08 95       	ret

00007abe <putChar_long>:
    7abe:	0f 93       	push	r16
    7ac0:	1f 93       	push	r17
    7ac2:	8b 01       	movw	r16, r22
    7ac4:	9c 01       	movw	r18, r24
    7ac6:	fa 01       	movw	r30, r20
    7ac8:	38 96       	adiw	r30, 0x08	; 8
    7aca:	da 01       	movw	r26, r20
    7acc:	18 96       	adiw	r26, 0x08	; 8
    7ace:	1c 92       	st	X, r1
    7ad0:	80 e0       	ldi	r24, 0x00	; 0
    7ad2:	12 c0       	rjmp	.+36     	; 0x7af8 <putChar_long+0x3a>
    7ad4:	90 2f       	mov	r25, r16
    7ad6:	9f 70       	andi	r25, 0x0F	; 15
    7ad8:	31 97       	sbiw	r30, 0x01	; 1
    7ada:	9a 30       	cpi	r25, 0x0A	; 10
    7adc:	10 f0       	brcs	.+4      	; 0x7ae2 <putChar_long+0x24>
    7ade:	99 5c       	subi	r25, 0xC9	; 201
    7ae0:	01 c0       	rjmp	.+2      	; 0x7ae4 <putChar_long+0x26>
    7ae2:	90 5d       	subi	r25, 0xD0	; 208
    7ae4:	90 83       	st	Z, r25
    7ae6:	68 94       	set
    7ae8:	13 f8       	bld	r1, 3
    7aea:	36 95       	lsr	r19
    7aec:	27 95       	ror	r18
    7aee:	17 95       	ror	r17
    7af0:	07 95       	ror	r16
    7af2:	16 94       	lsr	r1
    7af4:	d1 f7       	brne	.-12     	; 0x7aea <putChar_long+0x2c>
    7af6:	8f 5f       	subi	r24, 0xFF	; 255
    7af8:	84 30       	cpi	r24, 0x04	; 4
    7afa:	60 f3       	brcs	.-40     	; 0x7ad4 <putChar_long+0x16>
    7afc:	cf 01       	movw	r24, r30
    7afe:	04 96       	adiw	r24, 0x04	; 4
    7b00:	1f 91       	pop	r17
    7b02:	0f 91       	pop	r16
    7b04:	08 95       	ret

00007b06 <putChar_Note>:
    7b06:	88 23       	and	r24, r24
    7b08:	8c f4       	brge	.+34     	; 0x7b2c <putChar_Note+0x26>
    7b0a:	8d e2       	ldi	r24, 0x2D	; 45
    7b0c:	db 01       	movw	r26, r22
    7b0e:	8c 93       	st	X, r24
    7b10:	9e e6       	ldi	r25, 0x6E	; 110
    7b12:	11 96       	adiw	r26, 0x01	; 1
    7b14:	9c 93       	st	X, r25
    7b16:	11 97       	sbiw	r26, 0x01	; 1
    7b18:	12 96       	adiw	r26, 0x02	; 2
    7b1a:	8c 93       	st	X, r24
    7b1c:	12 97       	sbiw	r26, 0x02	; 2
    7b1e:	14 96       	adiw	r26, 0x04	; 4
    7b20:	fb 01       	movw	r30, r22
    7b22:	13 82       	std	Z+3, r1	; 0x03
    7b24:	49 c0       	rjmp	.+146    	; 0x7bb8 <putChar_Note+0xb2>
    7b26:	8c 50       	subi	r24, 0x0C	; 12
    7b28:	9f 5f       	subi	r25, 0xFF	; 255
    7b2a:	01 c0       	rjmp	.+2      	; 0x7b2e <putChar_Note+0x28>
    7b2c:	90 e0       	ldi	r25, 0x00	; 0
    7b2e:	8c 30       	cpi	r24, 0x0C	; 12
    7b30:	d0 f7       	brcc	.-12     	; 0x7b26 <putChar_Note+0x20>
    7b32:	8b 30       	cpi	r24, 0x0B	; 11
    7b34:	39 f4       	brne	.+14     	; 0x7b44 <putChar_Note+0x3e>
    7b36:	fb 01       	movw	r30, r22
    7b38:	31 96       	adiw	r30, 0x01	; 1
    7b3a:	88 e4       	ldi	r24, 0x48	; 72
    7b3c:	db 01       	movw	r26, r22
    7b3e:	8c 93       	st	X, r24
    7b40:	8f e5       	ldi	r24, 0x5F	; 95
    7b42:	27 c0       	rjmp	.+78     	; 0x7b92 <putChar_Note+0x8c>
    7b44:	85 30       	cpi	r24, 0x05	; 5
    7b46:	58 f4       	brcc	.+22     	; 0x7b5e <putChar_Note+0x58>
    7b48:	fb 01       	movw	r30, r22
    7b4a:	31 96       	adiw	r30, 0x01	; 1
    7b4c:	28 2f       	mov	r18, r24
    7b4e:	26 95       	lsr	r18
    7b50:	2d 5b       	subi	r18, 0xBD	; 189
    7b52:	db 01       	movw	r26, r22
    7b54:	2c 93       	st	X, r18
    7b56:	80 fd       	sbrc	r24, 0
    7b58:	19 c0       	rjmp	.+50     	; 0x7b8c <putChar_Note+0x86>
    7b5a:	8f e5       	ldi	r24, 0x5F	; 95
    7b5c:	1a c0       	rjmp	.+52     	; 0x7b92 <putChar_Note+0x8c>
    7b5e:	89 30       	cpi	r24, 0x09	; 9
    7b60:	30 f0       	brcs	.+12     	; 0x7b6e <putChar_Note+0x68>
    7b62:	fb 01       	movw	r30, r22
    7b64:	31 96       	adiw	r30, 0x01	; 1
    7b66:	21 e4       	ldi	r18, 0x41	; 65
    7b68:	db 01       	movw	r26, r22
    7b6a:	2c 93       	st	X, r18
    7b6c:	0b c0       	rjmp	.+22     	; 0x7b84 <putChar_Note+0x7e>
    7b6e:	fb 01       	movw	r30, r22
    7b70:	31 96       	adiw	r30, 0x01	; 1
    7b72:	28 2f       	mov	r18, r24
    7b74:	30 e0       	ldi	r19, 0x00	; 0
    7b76:	25 50       	subi	r18, 0x05	; 5
    7b78:	31 09       	sbc	r19, r1
    7b7a:	35 95       	asr	r19
    7b7c:	27 95       	ror	r18
    7b7e:	2a 5b       	subi	r18, 0xBA	; 186
    7b80:	db 01       	movw	r26, r22
    7b82:	2c 93       	st	X, r18
    7b84:	80 ff       	sbrs	r24, 0
    7b86:	04 c0       	rjmp	.+8      	; 0x7b90 <putChar_Note+0x8a>
    7b88:	8f e5       	ldi	r24, 0x5F	; 95
    7b8a:	03 c0       	rjmp	.+6      	; 0x7b92 <putChar_Note+0x8c>
    7b8c:	83 e2       	ldi	r24, 0x23	; 35
    7b8e:	01 c0       	rjmp	.+2      	; 0x7b92 <putChar_Note+0x8c>
    7b90:	83 e2       	ldi	r24, 0x23	; 35
    7b92:	80 83       	st	Z, r24
    7b94:	91 11       	cpse	r25, r1
    7b96:	05 c0       	rjmp	.+10     	; 0x7ba2 <putChar_Note+0x9c>
    7b98:	df 01       	movw	r26, r30
    7b9a:	12 96       	adiw	r26, 0x02	; 2
    7b9c:	8d e6       	ldi	r24, 0x6D	; 109
    7b9e:	81 83       	std	Z+1, r24	; 0x01
    7ba0:	0b c0       	rjmp	.+22     	; 0x7bb8 <putChar_Note+0xb2>
    7ba2:	9c 30       	cpi	r25, 0x0C	; 12
    7ba4:	28 f4       	brcc	.+10     	; 0x7bb0 <putChar_Note+0xaa>
    7ba6:	df 01       	movw	r26, r30
    7ba8:	12 96       	adiw	r26, 0x02	; 2
    7baa:	91 5d       	subi	r25, 0xD1	; 209
    7bac:	91 83       	std	Z+1, r25	; 0x01
    7bae:	04 c0       	rjmp	.+8      	; 0x7bb8 <putChar_Note+0xb2>
    7bb0:	df 01       	movw	r26, r30
    7bb2:	12 96       	adiw	r26, 0x02	; 2
    7bb4:	8d e2       	ldi	r24, 0x2D	; 45
    7bb6:	81 83       	std	Z+1, r24	; 0x01
    7bb8:	1c 92       	st	X, r1
    7bba:	cd 01       	movw	r24, r26
    7bbc:	08 95       	ret

00007bbe <putChar_Manual>:
    7bbe:	83 30       	cpi	r24, 0x03	; 3
    7bc0:	38 f4       	brcc	.+14     	; 0x7bd0 <putChar_Manual+0x12>
    7bc2:	fb 01       	movw	r30, r22
    7bc4:	31 96       	adiw	r30, 0x01	; 1
    7bc6:	93 e3       	ldi	r25, 0x33	; 51
    7bc8:	98 1b       	sub	r25, r24
    7bca:	db 01       	movw	r26, r22
    7bcc:	9c 93       	st	X, r25
    7bce:	0d c0       	rjmp	.+26     	; 0x7bea <putChar_Manual+0x2c>
    7bd0:	83 30       	cpi	r24, 0x03	; 3
    7bd2:	31 f4       	brne	.+12     	; 0x7be0 <putChar_Manual+0x22>
    7bd4:	fb 01       	movw	r30, r22
    7bd6:	31 96       	adiw	r30, 0x01	; 1
    7bd8:	80 e5       	ldi	r24, 0x50	; 80
    7bda:	db 01       	movw	r26, r22
    7bdc:	8c 93       	st	X, r24
    7bde:	05 c0       	rjmp	.+10     	; 0x7bea <putChar_Manual+0x2c>
    7be0:	fb 01       	movw	r30, r22
    7be2:	31 96       	adiw	r30, 0x01	; 1
    7be4:	8d e2       	ldi	r24, 0x2D	; 45
    7be6:	db 01       	movw	r26, r22
    7be8:	8c 93       	st	X, r24
    7bea:	10 82       	st	Z, r1
    7bec:	cf 01       	movw	r24, r30
    7bee:	08 95       	ret

00007bf0 <putString_P>:
    7bf0:	fc 01       	movw	r30, r24
    7bf2:	db 01       	movw	r26, r22
    7bf4:	20 e0       	ldi	r18, 0x00	; 0
    7bf6:	02 c0       	rjmp	.+4      	; 0x7bfc <putString_P+0xc>
    7bf8:	28 2f       	mov	r18, r24
    7bfa:	da 01       	movw	r26, r20
    7bfc:	94 91       	lpm	r25, Z
    7bfe:	99 23       	and	r25, r25
    7c00:	51 f0       	breq	.+20     	; 0x7c16 <putString_P+0x26>
    7c02:	ad 01       	movw	r20, r26
    7c04:	4f 5f       	subi	r20, 0xFF	; 255
    7c06:	5f 4f       	sbci	r21, 0xFF	; 255
    7c08:	31 96       	adiw	r30, 0x01	; 1
    7c0a:	9c 93       	st	X, r25
    7c0c:	81 e0       	ldi	r24, 0x01	; 1
    7c0e:	82 0f       	add	r24, r18
    7c10:	24 31       	cpi	r18, 0x14	; 20
    7c12:	90 f3       	brcs	.-28     	; 0x7bf8 <putString_P+0x8>
    7c14:	01 c0       	rjmp	.+2      	; 0x7c18 <putString_P+0x28>
    7c16:	ad 01       	movw	r20, r26
    7c18:	ca 01       	movw	r24, r20
    7c1a:	08 95       	ret

00007c1c <putString_Prog>:
    7c1c:	fc 01       	movw	r30, r24
    7c1e:	80 e5       	ldi	r24, 0x50	; 80
    7c20:	80 83       	st	Z, r24
    7c22:	96 2f       	mov	r25, r22
    7c24:	96 95       	lsr	r25
    7c26:	96 95       	lsr	r25
    7c28:	96 95       	lsr	r25
    7c2a:	97 70       	andi	r25, 0x07	; 7
    7c2c:	9f 5b       	subi	r25, 0xBF	; 191
    7c2e:	91 83       	std	Z+1, r25	; 0x01
    7c30:	67 70       	andi	r22, 0x07	; 7
    7c32:	6f 5c       	subi	r22, 0xCF	; 207
    7c34:	62 83       	std	Z+2, r22	; 0x02
    7c36:	cf 01       	movw	r24, r30
    7c38:	03 96       	adiw	r24, 0x03	; 3
    7c3a:	08 95       	ret

00007c3c <lcd_wordout>:
    7c3c:	cf 93       	push	r28
    7c3e:	c8 2f       	mov	r28, r24
    7c40:	89 2f       	mov	r24, r25
    7c42:	4c de       	rcall	.-872    	; 0x78dc <lcd_hexout>
    7c44:	8c 2f       	mov	r24, r28
    7c46:	4a de       	rcall	.-876    	; 0x78dc <lcd_hexout>
    7c48:	cf 91       	pop	r28
    7c4a:	08 95       	ret

00007c4c <lcd_noteOut>:
    7c4c:	cf 93       	push	r28
    7c4e:	df 93       	push	r29
    7c50:	88 23       	and	r24, r24
    7c52:	e4 f1       	brlt	.+120    	; 0x7ccc <lcd_noteOut+0x80>
    7c54:	90 e0       	ldi	r25, 0x00	; 0
    7c56:	02 c0       	rjmp	.+4      	; 0x7c5c <lcd_noteOut+0x10>
    7c58:	9f 5f       	subi	r25, 0xFF	; 255
    7c5a:	8c 50       	subi	r24, 0x0C	; 12
    7c5c:	8c 30       	cpi	r24, 0x0C	; 12
    7c5e:	e0 f7       	brcc	.-8      	; 0x7c58 <lcd_noteOut+0xc>
    7c60:	48 2f       	mov	r20, r24
    7c62:	50 e0       	ldi	r21, 0x00	; 0
    7c64:	4c 30       	cpi	r20, 0x0C	; 12
    7c66:	51 05       	cpc	r21, r1
    7c68:	30 f4       	brcc	.+12     	; 0x7c76 <lcd_noteOut+0x2a>
    7c6a:	fa 01       	movw	r30, r20
    7c6c:	88 27       	eor	r24, r24
    7c6e:	ea 55       	subi	r30, 0x5A	; 90
    7c70:	ff 4f       	sbci	r31, 0xFF	; 255
    7c72:	8f 4f       	sbci	r24, 0xFF	; 255
    7c74:	50 c1       	rjmp	.+672    	; 0x7f16 <__tablejump2__>
    7c76:	d3 e2       	ldi	r29, 0x23	; 35
    7c78:	80 e2       	ldi	r24, 0x20	; 32
    7c7a:	23 c0       	rjmp	.+70     	; 0x7cc2 <lcd_noteOut+0x76>
    7c7c:	d3 e2       	ldi	r29, 0x23	; 35
    7c7e:	84 e4       	ldi	r24, 0x44	; 68
    7c80:	20 c0       	rjmp	.+64     	; 0x7cc2 <lcd_noteOut+0x76>
    7c82:	d3 e2       	ldi	r29, 0x23	; 35
    7c84:	86 e4       	ldi	r24, 0x46	; 70
    7c86:	1d c0       	rjmp	.+58     	; 0x7cc2 <lcd_noteOut+0x76>
    7c88:	d3 e2       	ldi	r29, 0x23	; 35
    7c8a:	87 e4       	ldi	r24, 0x47	; 71
    7c8c:	1a c0       	rjmp	.+52     	; 0x7cc2 <lcd_noteOut+0x76>
    7c8e:	d3 e2       	ldi	r29, 0x23	; 35
    7c90:	81 e4       	ldi	r24, 0x41	; 65
    7c92:	17 c0       	rjmp	.+46     	; 0x7cc2 <lcd_noteOut+0x76>
    7c94:	d5 ea       	ldi	r29, 0xA5	; 165
    7c96:	83 e4       	ldi	r24, 0x43	; 67
    7c98:	14 c0       	rjmp	.+40     	; 0x7cc2 <lcd_noteOut+0x76>
    7c9a:	d5 ea       	ldi	r29, 0xA5	; 165
    7c9c:	84 e4       	ldi	r24, 0x44	; 68
    7c9e:	11 c0       	rjmp	.+34     	; 0x7cc2 <lcd_noteOut+0x76>
    7ca0:	d5 ea       	ldi	r29, 0xA5	; 165
    7ca2:	85 e4       	ldi	r24, 0x45	; 69
    7ca4:	0e c0       	rjmp	.+28     	; 0x7cc2 <lcd_noteOut+0x76>
    7ca6:	d5 ea       	ldi	r29, 0xA5	; 165
    7ca8:	86 e4       	ldi	r24, 0x46	; 70
    7caa:	0b c0       	rjmp	.+22     	; 0x7cc2 <lcd_noteOut+0x76>
    7cac:	d5 ea       	ldi	r29, 0xA5	; 165
    7cae:	87 e4       	ldi	r24, 0x47	; 71
    7cb0:	08 c0       	rjmp	.+16     	; 0x7cc2 <lcd_noteOut+0x76>
    7cb2:	d5 ea       	ldi	r29, 0xA5	; 165
    7cb4:	81 e4       	ldi	r24, 0x41	; 65
    7cb6:	05 c0       	rjmp	.+10     	; 0x7cc2 <lcd_noteOut+0x76>
    7cb8:	d5 ea       	ldi	r29, 0xA5	; 165
    7cba:	88 e4       	ldi	r24, 0x48	; 72
    7cbc:	02 c0       	rjmp	.+4      	; 0x7cc2 <lcd_noteOut+0x76>
    7cbe:	d3 e2       	ldi	r29, 0x23	; 35
    7cc0:	83 e4       	ldi	r24, 0x43	; 67
    7cc2:	99 23       	and	r25, r25
    7cc4:	39 f0       	breq	.+14     	; 0x7cd4 <lcd_noteOut+0x88>
    7cc6:	cf e2       	ldi	r28, 0x2F	; 47
    7cc8:	c9 0f       	add	r28, r25
    7cca:	05 c0       	rjmp	.+10     	; 0x7cd6 <lcd_noteOut+0x8a>
    7ccc:	cd e2       	ldi	r28, 0x2D	; 45
    7cce:	dd e2       	ldi	r29, 0x2D	; 45
    7cd0:	8d e2       	ldi	r24, 0x2D	; 45
    7cd2:	01 c0       	rjmp	.+2      	; 0x7cd6 <lcd_noteOut+0x8a>
    7cd4:	cd e2       	ldi	r28, 0x2D	; 45
    7cd6:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7cda:	8d 2f       	mov	r24, r29
    7cdc:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7ce0:	8c 2f       	mov	r24, r28
    7ce2:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7ce6:	83 e0       	ldi	r24, 0x03	; 3
    7ce8:	df 91       	pop	r29
    7cea:	cf 91       	pop	r28
    7cec:	08 95       	ret

00007cee <lcd_ChannelOut>:
    7cee:	cf 93       	push	r28
    7cf0:	c8 2f       	mov	r28, r24
    7cf2:	cf 70       	andi	r28, 0x0F	; 15
    7cf4:	81 e0       	ldi	r24, 0x01	; 1
    7cf6:	8c 0f       	add	r24, r28
    7cf8:	8a 30       	cpi	r24, 0x0A	; 10
    7cfa:	28 f0       	brcs	.+10     	; 0x7d06 <lcd_ChannelOut+0x18>
    7cfc:	81 e3       	ldi	r24, 0x31	; 49
    7cfe:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7d02:	87 ef       	ldi	r24, 0xF7	; 247
    7d04:	8c 0f       	add	r24, r28
    7d06:	80 5d       	subi	r24, 0xD0	; 208
    7d08:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7d0c:	cf 91       	pop	r28
    7d0e:	08 95       	ret

00007d10 <lcd_ManualOutDec>:
    7d10:	84 30       	cpi	r24, 0x04	; 4
    7d12:	20 f0       	brcs	.+8      	; 0x7d1c <lcd_ManualOutDec+0xc>
    7d14:	8d e2       	ldi	r24, 0x2D	; 45
    7d16:	0c 94 9f 14 	jmp	0x293e	; 0x293e <lcd_putc>
    7d1a:	08 95       	ret
    7d1c:	83 30       	cpi	r24, 0x03	; 3
    7d1e:	21 f4       	brne	.+8      	; 0x7d28 <lcd_ManualOutDec+0x18>
    7d20:	80 e5       	ldi	r24, 0x50	; 80
    7d22:	0c 94 9f 14 	jmp	0x293e	; 0x293e <lcd_putc>
    7d26:	08 95       	ret
    7d28:	93 e3       	ldi	r25, 0x33	; 51
    7d2a:	98 1b       	sub	r25, r24
    7d2c:	89 2f       	mov	r24, r25
    7d2e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <lcd_putc>
    7d32:	08 95       	ret

00007d34 <lcd_blank>:
    7d34:	cf 93       	push	r28
    7d36:	04 c0       	rjmp	.+8      	; 0x7d40 <lcd_blank+0xc>
    7d38:	80 e2       	ldi	r24, 0x20	; 32
    7d3a:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7d3e:	8c 2f       	mov	r24, r28
    7d40:	cf ef       	ldi	r28, 0xFF	; 255
    7d42:	c8 0f       	add	r28, r24
    7d44:	81 11       	cpse	r24, r1
    7d46:	f8 cf       	rjmp	.-16     	; 0x7d38 <lcd_blank+0x4>
    7d48:	cf 91       	pop	r28
    7d4a:	08 95       	ret

00007d4c <lcd_clrEol>:
    7d4c:	cf 93       	push	r28
    7d4e:	90 e0       	ldi	r25, 0x00	; 0
    7d50:	04 c0       	rjmp	.+8      	; 0x7d5a <lcd_clrEol+0xe>
    7d52:	80 e2       	ldi	r24, 0x20	; 32
    7d54:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7d58:	9c 2f       	mov	r25, r28
    7d5a:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7d5e:	84 31       	cpi	r24, 0x14	; 20
    7d60:	51 f0       	breq	.+20     	; 0x7d76 <lcd_clrEol+0x2a>
    7d62:	84 35       	cpi	r24, 0x54	; 84
    7d64:	41 f0       	breq	.+16     	; 0x7d76 <lcd_clrEol+0x2a>
    7d66:	88 32       	cpi	r24, 0x28	; 40
    7d68:	31 f0       	breq	.+12     	; 0x7d76 <lcd_clrEol+0x2a>
    7d6a:	88 36       	cpi	r24, 0x68	; 104
    7d6c:	21 f0       	breq	.+8      	; 0x7d76 <lcd_clrEol+0x2a>
    7d6e:	c1 e0       	ldi	r28, 0x01	; 1
    7d70:	c9 0f       	add	r28, r25
    7d72:	94 31       	cpi	r25, 0x14	; 20
    7d74:	70 f3       	brcs	.-36     	; 0x7d52 <lcd_clrEol+0x6>
    7d76:	cf 91       	pop	r28
    7d78:	08 95       	ret

00007d7a <lcd_waitSymbolOn>:
    7d7a:	cf 93       	push	r28
    7d7c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7d80:	8c e0       	ldi	r24, 0x0C	; 12
    7d82:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    7d86:	81 ea       	ldi	r24, 0xA1	; 161
    7d88:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7d8c:	8c 2f       	mov	r24, r28
    7d8e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    7d92:	cf 91       	pop	r28
    7d94:	08 95       	ret

00007d96 <lcd_waitSymbolOff>:
    7d96:	cf 93       	push	r28
    7d98:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7d9c:	8c e0       	ldi	r24, 0x0C	; 12
    7d9e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    7da2:	80 e2       	ldi	r24, 0x20	; 32
    7da4:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>
    7da8:	8c 2f       	mov	r24, r28
    7daa:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
    7dae:	cf 91       	pop	r28
    7db0:	08 95       	ret

00007db2 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    7db2:	84 30       	cpi	r24, 0x04	; 4
    7db4:	28 f0       	brcs	.+10     	; 0x7dc0 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	0d c0       	rjmp	.+26     	; 0x7dd4 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7dba:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7dbc:	fa 01       	movw	r30, r20
    7dbe:	02 c0       	rjmp	.+4      	; 0x7dc4 <keylabel_set+0x12>
    7dc0:	fb 01       	movw	r30, r22
    7dc2:	20 e0       	ldi	r18, 0x00	; 0
    7dc4:	af 01       	movw	r20, r30
    7dc6:	4f 5f       	subi	r20, 0xFF	; 255
    7dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dca:	94 91       	lpm	r25, Z
    7dcc:	99 23       	and	r25, r25
    7dce:	11 f0       	breq	.+4      	; 0x7dd4 <keylabel_set+0x22>
    7dd0:	25 30       	cpi	r18, 0x05	; 5
    7dd2:	98 f3       	brcs	.-26     	; 0x7dba <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7dd4:	90 e0       	ldi	r25, 0x00	; 0
    7dd6:	dc 01       	movw	r26, r24
    7dd8:	aa 0f       	add	r26, r26
    7dda:	bb 1f       	adc	r27, r27
    7ddc:	aa 0f       	add	r26, r26
    7dde:	bb 1f       	adc	r27, r27
    7de0:	8a 0f       	add	r24, r26
    7de2:	9b 1f       	adc	r25, r27
    7de4:	dc 01       	movw	r26, r24
    7de6:	ae 5c       	subi	r26, 0xCE	; 206
    7de8:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7dea:	45 e0       	ldi	r20, 0x05	; 5
    7dec:	50 e0       	ldi	r21, 0x00	; 0
    7dee:	42 1b       	sub	r20, r18
    7df0:	51 09       	sbc	r21, r1
    7df2:	ca 01       	movw	r24, r20
    7df4:	99 23       	and	r25, r25
    7df6:	0c f4       	brge	.+2      	; 0x7dfa <keylabel_set+0x48>
    7df8:	01 96       	adiw	r24, 0x01	; 1
    7dfa:	95 95       	asr	r25
    7dfc:	87 95       	ror	r24
    7dfe:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7e00:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7e02:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7e04:	0e c0       	rjmp	.+28     	; 0x7e22 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7e06:	93 17       	cp	r25, r19
    7e08:	10 f0       	brcs	.+4      	; 0x7e0e <keylabel_set+0x5c>
    7e0a:	98 17       	cp	r25, r24
    7e0c:	18 f0       	brcs	.+6      	; 0x7e14 <keylabel_set+0x62>
			*charBufPtr = ' ';
    7e0e:	20 e2       	ldi	r18, 0x20	; 32
    7e10:	2c 93       	st	X, r18
    7e12:	05 c0       	rjmp	.+10     	; 0x7e1e <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7e14:	fb 01       	movw	r30, r22
    7e16:	24 91       	lpm	r18, Z
    7e18:	2c 93       	st	X, r18
    7e1a:	6f 5f       	subi	r22, 0xFF	; 255
    7e1c:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    7e1e:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7e20:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7e22:	95 30       	cpi	r25, 0x05	; 5
    7e24:	80 f3       	brcs	.-32     	; 0x7e06 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7e26:	08 95       	ret

00007e28 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	fc 01       	movw	r30, r24
    7e2c:	ee 0f       	add	r30, r30
    7e2e:	ff 1f       	adc	r31, r31
    7e30:	ee 0f       	add	r30, r30
    7e32:	ff 1f       	adc	r31, r31
    7e34:	8e 0f       	add	r24, r30
    7e36:	9f 1f       	adc	r25, r31
    7e38:	fc 01       	movw	r30, r24
    7e3a:	ee 5c       	subi	r30, 0xCE	; 206
    7e3c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7e3e:	80 e0       	ldi	r24, 0x00	; 0
    7e40:	04 c0       	rjmp	.+8      	; 0x7e4a <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7e42:	90 e2       	ldi	r25, 0x20	; 32
    7e44:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7e46:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7e48:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7e4a:	85 30       	cpi	r24, 0x05	; 5
    7e4c:	d0 f3       	brcs	.-12     	; 0x7e42 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    7e4e:	08 95       	ret

00007e50 <keylabel_toLCD>:

void keylabel_toLCD(){
    7e50:	0f 93       	push	r16
    7e52:	1f 93       	push	r17
    7e54:	cf 93       	push	r28
    7e56:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7e58:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7e5c:	84 e5       	ldi	r24, 0x54	; 84
    7e5e:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7e62:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7e64:	e2 e3       	ldi	r30, 0x32	; 50
    7e66:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7e68:	08 c0       	rjmp	.+16     	; 0x7e7a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7e6a:	8f 01       	movw	r16, r30
    7e6c:	0f 5f       	subi	r16, 0xFF	; 255
    7e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e70:	80 81       	ld	r24, Z
    7e72:	0e 94 9f 14 	call	0x293e	; 0x293e <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7e76:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7e78:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7e7a:	c4 31       	cpi	r28, 0x14	; 20
    7e7c:	b0 f3       	brcs	.-20     	; 0x7e6a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7e7e:	8d 2f       	mov	r24, r29
    7e80:	0e 94 75 14 	call	0x28ea	; 0x28ea <lcd_goto>
}
    7e84:	df 91       	pop	r29
    7e86:	cf 91       	pop	r28
    7e88:	1f 91       	pop	r17
    7e8a:	0f 91       	pop	r16
    7e8c:	08 95       	ret

00007e8e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	fc 01       	movw	r30, r24
    7e92:	ee 0f       	add	r30, r30
    7e94:	ff 1f       	adc	r31, r31
    7e96:	ee 0f       	add	r30, r30
    7e98:	ff 1f       	adc	r31, r31
    7e9a:	8e 0f       	add	r24, r30
    7e9c:	9f 1f       	adc	r25, r31
    7e9e:	fc 01       	movw	r30, r24
    7ea0:	ee 5c       	subi	r30, 0xCE	; 206
    7ea2:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7ea6:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7ea8:	12 c0       	rjmp	.+36     	; 0x7ece <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7eaa:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7eac:	61 11       	cpse	r22, r1
    7eae:	06 c0       	rjmp	.+12     	; 0x7ebc <keylabel_statcheck+0x2e>
    7eb0:	2a 32       	cpi	r18, 0x2A	; 42
    7eb2:	21 f4       	brne	.+8      	; 0x7ebc <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7eb4:	80 e8       	ldi	r24, 0x80	; 128
    7eb6:	80 83       	st	Z, r24
			result = 0xFF;
    7eb8:	8f ef       	ldi	r24, 0xFF	; 255
    7eba:	07 c0       	rjmp	.+14     	; 0x7eca <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7ebc:	66 23       	and	r22, r22
    7ebe:	29 f0       	breq	.+10     	; 0x7eca <keylabel_statcheck+0x3c>
    7ec0:	20 38       	cpi	r18, 0x80	; 128
    7ec2:	19 f4       	brne	.+6      	; 0x7eca <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7ec4:	8a e2       	ldi	r24, 0x2A	; 42
    7ec6:	80 83       	st	Z, r24
			result = 0xFF;
    7ec8:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7eca:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7ecc:	9f 5f       	subi	r25, 0xFF	; 255
    7ece:	95 30       	cpi	r25, 0x05	; 5
    7ed0:	60 f3       	brcs	.-40     	; 0x7eaa <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7ed2:	08 95       	ret

00007ed4 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7ed4:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7ed6:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7ed8:	94 91       	lpm	r25, Z
    7eda:	99 23       	and	r25, r25
    7edc:	21 f0       	breq	.+8      	; 0x7ee6 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7ede:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7ee0:	8f 5f       	subi	r24, 0xFF	; 255
    7ee2:	80 32       	cpi	r24, 0x20	; 32
    7ee4:	c8 f3       	brcs	.-14     	; 0x7ed8 <get_StrLenP+0x4>
	return result;
}
    7ee6:	08 95       	ret

00007ee8 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7ee8:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7eea:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7eec:	90 81       	ld	r25, Z
    7eee:	99 23       	and	r25, r25
    7ef0:	21 f0       	breq	.+8      	; 0x7efa <get_StrLen+0x12>
			return result;
		}
		pString++;
    7ef2:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7ef4:	8f 5f       	subi	r24, 0xFF	; 255
    7ef6:	80 32       	cpi	r24, 0x20	; 32
    7ef8:	c8 f3       	brcs	.-14     	; 0x7eec <get_StrLen+0x4>
	return result;
}
    7efa:	08 95       	ret

00007efc <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7efc:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7efe:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7f00:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7f02:	06 c0       	rjmp	.+12     	; 0x7f10 <reverse_Bits+0x14>
		result = result << 1;
    7f04:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7f06:	32 2f       	mov	r19, r18
    7f08:	31 70       	andi	r19, 0x01	; 1
    7f0a:	83 2b       	or	r24, r19
		val = val >> 1;
    7f0c:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7f0e:	9f 5f       	subi	r25, 0xFF	; 255
    7f10:	98 30       	cpi	r25, 0x08	; 8
    7f12:	c0 f3       	brcs	.-16     	; 0x7f04 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7f14:	08 95       	ret

00007f16 <__tablejump2__>:
    7f16:	ee 0f       	add	r30, r30
    7f18:	ff 1f       	adc	r31, r31
    7f1a:	88 1f       	adc	r24, r24
    7f1c:	8b bf       	out	0x3b, r24	; 59
    7f1e:	07 90       	elpm	r0, Z+
    7f20:	f6 91       	elpm	r31, Z
    7f22:	e0 2d       	mov	r30, r0
    7f24:	19 94       	eijmp

00007f26 <eeprom_read_block>:
    7f26:	dc 01       	movw	r26, r24
    7f28:	cb 01       	movw	r24, r22

00007f2a <eeprom_read_blraw>:
    7f2a:	fc 01       	movw	r30, r24
    7f2c:	f9 99       	sbic	0x1f, 1	; 31
    7f2e:	fe cf       	rjmp	.-4      	; 0x7f2c <eeprom_read_blraw+0x2>
    7f30:	06 c0       	rjmp	.+12     	; 0x7f3e <eeprom_read_blraw+0x14>
    7f32:	f2 bd       	out	0x22, r31	; 34
    7f34:	e1 bd       	out	0x21, r30	; 33
    7f36:	f8 9a       	sbi	0x1f, 0	; 31
    7f38:	31 96       	adiw	r30, 0x01	; 1
    7f3a:	00 b4       	in	r0, 0x20	; 32
    7f3c:	0d 92       	st	X+, r0
    7f3e:	41 50       	subi	r20, 0x01	; 1
    7f40:	50 40       	sbci	r21, 0x00	; 0
    7f42:	b8 f7       	brcc	.-18     	; 0x7f32 <eeprom_read_blraw+0x8>
    7f44:	08 95       	ret

00007f46 <eeprom_read_byte>:
    7f46:	f9 99       	sbic	0x1f, 1	; 31
    7f48:	fe cf       	rjmp	.-4      	; 0x7f46 <eeprom_read_byte>
    7f4a:	92 bd       	out	0x22, r25	; 34
    7f4c:	81 bd       	out	0x21, r24	; 33
    7f4e:	f8 9a       	sbi	0x1f, 0	; 31
    7f50:	99 27       	eor	r25, r25
    7f52:	80 b5       	in	r24, 0x20	; 32
    7f54:	08 95       	ret

00007f56 <eeprom_read_word>:
    7f56:	a8 e1       	ldi	r26, 0x18	; 24
    7f58:	b0 e0       	ldi	r27, 0x00	; 0
    7f5a:	42 e0       	ldi	r20, 0x02	; 2
    7f5c:	50 e0       	ldi	r21, 0x00	; 0
    7f5e:	e5 cf       	rjmp	.-54     	; 0x7f2a <eeprom_read_blraw>

00007f60 <eeprom_update_block>:
    7f60:	dc 01       	movw	r26, r24
    7f62:	a4 0f       	add	r26, r20
    7f64:	b5 1f       	adc	r27, r21
    7f66:	41 50       	subi	r20, 0x01	; 1
    7f68:	50 40       	sbci	r21, 0x00	; 0
    7f6a:	40 f0       	brcs	.+16     	; 0x7f7c <eeprom_update_block+0x1c>
    7f6c:	cb 01       	movw	r24, r22
    7f6e:	84 0f       	add	r24, r20
    7f70:	95 1f       	adc	r25, r21
    7f72:	2e 91       	ld	r18, -X
    7f74:	05 d0       	rcall	.+10     	; 0x7f80 <eeprom_update_r18>
    7f76:	41 50       	subi	r20, 0x01	; 1
    7f78:	50 40       	sbci	r21, 0x00	; 0
    7f7a:	d8 f7       	brcc	.-10     	; 0x7f72 <eeprom_update_block+0x12>
    7f7c:	08 95       	ret

00007f7e <eeprom_update_byte>:
    7f7e:	26 2f       	mov	r18, r22

00007f80 <eeprom_update_r18>:
    7f80:	f9 99       	sbic	0x1f, 1	; 31
    7f82:	fe cf       	rjmp	.-4      	; 0x7f80 <eeprom_update_r18>
    7f84:	92 bd       	out	0x22, r25	; 34
    7f86:	81 bd       	out	0x21, r24	; 33
    7f88:	f8 9a       	sbi	0x1f, 0	; 31
    7f8a:	01 97       	sbiw	r24, 0x01	; 1
    7f8c:	00 b4       	in	r0, 0x20	; 32
    7f8e:	02 16       	cp	r0, r18
    7f90:	39 f0       	breq	.+14     	; 0x7fa0 <eeprom_update_r18+0x20>
    7f92:	1f ba       	out	0x1f, r1	; 31
    7f94:	20 bd       	out	0x20, r18	; 32
    7f96:	0f b6       	in	r0, 0x3f	; 63
    7f98:	f8 94       	cli
    7f9a:	fa 9a       	sbi	0x1f, 2	; 31
    7f9c:	f9 9a       	sbi	0x1f, 1	; 31
    7f9e:	0f be       	out	0x3f, r0	; 63
    7fa0:	08 95       	ret

00007fa2 <eeprom_update_word>:
    7fa2:	01 96       	adiw	r24, 0x01	; 1
    7fa4:	27 2f       	mov	r18, r23
    7fa6:	ec df       	rcall	.-40     	; 0x7f80 <eeprom_update_r18>
    7fa8:	ea cf       	rjmp	.-44     	; 0x7f7e <eeprom_update_byte>

00007faa <_exit>:
    7faa:	f8 94       	cli

00007fac <__stop_program>:
    7fac:	ff cf       	rjmp	.-2      	; 0x7fac <__stop_program>
