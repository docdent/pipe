
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00005678  0000572c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005678  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad7  00800206  00800206  00005732  2**0
                  ALLOC
  3 .eeprom       00000800  00810000  00810000  00005732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00005f32  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f64  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000870  00000000  00000000  00005fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b134  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002375  00000000  00000000  0001194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000067c7  00000000  00000000  00013cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000138c  00000000  00000000  0001a488  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000279d  00000000  00000000  0001b814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067f1  00000000  00000000  0001dfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  000247a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5c c6       	rjmp	.+3256   	; 0xcba <__ctors_end>
       2:	00 00       	nop
       4:	7b c6       	rjmp	.+3318   	; 0xcfc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c6       	rjmp	.+3314   	; 0xcfc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c6       	rjmp	.+3310   	; 0xcfc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c6       	rjmp	.+3306   	; 0xcfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c6       	rjmp	.+3302   	; 0xcfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c6       	rjmp	.+3298   	; 0xcfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c6       	rjmp	.+3294   	; 0xcfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c6       	rjmp	.+3290   	; 0xcfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c6       	rjmp	.+3286   	; 0xcfc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c6       	rjmp	.+3282   	; 0xcfc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c6       	rjmp	.+3278   	; 0xcfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c6       	rjmp	.+3274   	; 0xcfc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c6       	rjmp	.+3270   	; 0xcfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c6       	rjmp	.+3266   	; 0xcfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c6       	rjmp	.+3262   	; 0xcfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c6       	rjmp	.+3258   	; 0xcfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c6       	rjmp	.+3254   	; 0xcfc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c6       	rjmp	.+3250   	; 0xcfc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c6       	rjmp	.+3246   	; 0xcfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c6       	rjmp	.+3242   	; 0xcfc <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_21>
      58:	51 c6       	rjmp	.+3234   	; 0xcfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c6       	rjmp	.+3230   	; 0xcfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c6       	rjmp	.+3226   	; 0xcfc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e9 27 	jmp	0x4fd2	; 0x4fd2 <__vector_25>
      68:	0c 94 14 28 	jmp	0x5028	; 0x5028 <__vector_26>
      6c:	47 c6       	rjmp	.+3214   	; 0xcfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c6       	rjmp	.+3210   	; 0xcfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c6       	rjmp	.+3206   	; 0xcfc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c6       	rjmp	.+3202   	; 0xcfc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c6       	rjmp	.+3198   	; 0xcfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c6       	rjmp	.+3194   	; 0xcfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c6       	rjmp	.+3190   	; 0xcfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c6       	rjmp	.+3186   	; 0xcfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 c6       	rjmp	.+3182   	; 0xcfc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__vector_36>
      94:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__vector_37>
      98:	31 c6       	rjmp	.+3170   	; 0xcfc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2f c6       	rjmp	.+3166   	; 0xcfc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2d c6       	rjmp	.+3162   	; 0xcfc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2b c6       	rjmp	.+3158   	; 0xcfc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	29 c6       	rjmp	.+3154   	; 0xcfc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	27 c6       	rjmp	.+3150   	; 0xcfc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	25 c6       	rjmp	.+3146   	; 0xcfc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	23 c6       	rjmp	.+3142   	; 0xcfc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	21 c6       	rjmp	.+3138   	; 0xcfc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1f c6       	rjmp	.+3134   	; 0xcfc <__bad_interrupt>
      be:	00 00       	nop
      c0:	1d c6       	rjmp	.+3130   	; 0xcfc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1b c6       	rjmp	.+3126   	; 0xcfc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	19 c6       	rjmp	.+3122   	; 0xcfc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	17 c6       	rjmp	.+3118   	; 0xcfc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	15 c6       	rjmp	.+3114   	; 0xcfc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	13 c6       	rjmp	.+3110   	; 0xcfc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	11 c6       	rjmp	.+3106   	; 0xcfc <__bad_interrupt>
      da:	00 00       	nop
      dc:	0f c6       	rjmp	.+3102   	; 0xcfc <__bad_interrupt>
      de:	00 00       	nop
      e0:	0d c6       	rjmp	.+3098   	; 0xcfc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ed 16       	cp	r14, r29
      e6:	f8 16       	cp	r15, r24
      e8:	04 17       	cp	r16, r20
      ea:	20 17       	cp	r18, r16
      ec:	3d 17       	cp	r19, r29
      ee:	5e 17       	cp	r21, r30
      f0:	69 17       	cp	r22, r25
      f2:	74 17       	cp	r23, r20
      f4:	89 17       	cp	r24, r25
      f6:	9f 17       	cp	r25, r31
      f8:	bd 17       	cp	r27, r29
      fa:	cd 17       	cp	r28, r29
      fc:	f1 17       	cp	r31, r17
      fe:	43 18       	sub	r4, r3
     100:	5c 18       	sub	r5, r12
     102:	71 18       	sub	r7, r1
     104:	8a 18       	sub	r8, r10
     106:	92 18       	sub	r9, r2
     108:	b3 18       	sub	r11, r3
     10a:	b3 18       	sub	r11, r3
     10c:	fc 18       	sub	r15, r12
     10e:	04 19       	sub	r16, r4
     110:	4e 19       	sub	r20, r14
     112:	b0 19       	sub	r27, r0
     114:	da 19       	sub	r29, r10
     116:	06 1a       	sub	r0, r22
     118:	34 1a       	sub	r3, r20
     11a:	3c 1a       	sub	r3, r28
     11c:	42 1a       	sub	r4, r18
     11e:	fc 18       	sub	r15, r12
     120:	5e 1a       	sub	r5, r30
     122:	6b 1a       	sub	r6, r27
     124:	76 1a       	sub	r7, r22
     126:	8b 1a       	sub	r8, r27
     128:	a4 1a       	sub	r10, r20
     12a:	c7 1a       	sub	r12, r23
     12c:	d2 1a       	sub	r13, r18
     12e:	d8 1a       	sub	r13, r24
     130:	dd 1a       	sub	r13, r29
     132:	f0 1a       	sub	r15, r16
     134:	c2 29       	or	r28, r2
     136:	d7 29       	or	r29, r7
     138:	c5 29       	or	r28, r5
     13a:	b6 29       	or	r27, r6
     13c:	c8 29       	or	r28, r8
     13e:	cb 29       	or	r28, r11
     140:	b9 29       	or	r27, r9
     142:	ce 29       	or	r28, r14
     144:	bc 29       	or	r27, r12
     146:	d1 29       	or	r29, r1
     148:	bf 29       	or	r27, r15
     14a:	d4 29       	or	r29, r4

0000014c <__trampolines_end>:
     14c:	4c 6f       	ori	r20, 0xFC	; 252
     14e:	67 3a       	cpi	r22, 0xA7	; 167
     150:	20 00       	.word	0x0020	; ????

00000152 <ErrorText>:
     152:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     162:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     172:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     182:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     192:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1a2:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1b2:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1c2:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1d2:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1e2:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     1f2:	00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00 00 00     ....Mod:Fail....
     202:	00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e 6f 77     ......Mod:Unknow
     212:	49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d 69 64     Inp.....OVFL:Mid
     222:	69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c 3a 4d     iIn.......OVFL:M
     232:	69 64 69 4f 75 74 00 00 00 00 04 00 4f 56 46 4c     idiOut......OVFL
     242:	3a 50 69 70 65 4d 73 67 00 00 00 00 05 00 50 77     :PipeMsg......Pw
     252:	72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00           r:OuptutOn....

00000260 <releaseKeyString>:
     260:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     270:	6e 00                                               n.

00000272 <prog_name>:
     272:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000281 <usbHWBits>:
     281:	2c 42 69 74 73 3a 00                                ,Bits:.

00000288 <usbHWmodule>:
     288:	4d 6f 64 75 6c 65 3a 00                             Module:.

00000290 <usbHWempty>:
     290:	65 6d 70 74 79 00                                   empty.

00000296 <usbHWRange>:
     296:	52 61 6e 67 65 3a 20 00                             Range: .

0000029e <usbHWManual>:
     29e:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

000002a7 <usbHWmodulCheck>:
     2a7:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     2b7:	20 00                                                .

000002b9 <usbHWmodulInst>:
     2b9:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     2c9:	3a 20 00                                            : .

000002cc <usbHWtitel>:
     2cc:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     2dc:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000002e5 <HelloMsg>:
     2e5:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     2f5:	65 72 66 61 63 65 0d 0a 00                          erface...

000002fe <usbLog>:
     2fe:	4c 6f 67 0d 0a 00                                   Log...

00000304 <usbEmpty>:
     304:	65 6d 70 74 79 0d 0a 00                             empty...

0000030c <msg_programming2>:
     30c:	6f 6b 20 20 20 20 20 00                             ok     .

00000314 <msg_programming1>:
     314:	73 61 76 65 2e 2e 2e 00                             save....

0000031c <logNone>:
     31c:	3c 6e 6f 6e 65 3e 00                                <none>.

00000323 <stringNotAssigen>:
     323:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

0000032e <menuMessageMIDIpanic>:
     32e:	4e 2e 6f 66 66 20 73 65 6e 74 00                    N.off sent.

00000339 <MenuMIDIOutText>:
     339:	4f 75 74 3a 00                                      Out:.

0000033e <MenuMIDIInText>:
     33e:	49 6e 3a 00                                         In:.

00000342 <initMenuText>:
     342:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

0000034c <nibbleInfo>:
	...
     354:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     364:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     374:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     384:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     394:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     3a4:	06 07 08 00 01 02 03 04 05 06 07 00 00 00 00 00     ................
     3b4:	00 00 00 00                                         ....

000003b8 <menu_selFunc>:
     3b8:	81 10 4d 65 6e 75 00 00 00 00 00 00 e4 04 da 04     ..Menu..........
     3c8:	00 00 00 00 01 10 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     3d8:	68 08 d0 04 00 00 00 00 01 10 4b 6f 70 70 65 6c     h.........Koppel
     3e8:	32 3c 33 00 00 00 b2 04 01 16 00 00 01 10 4b 6f     2<3...........Ko
     3f8:	70 70 65 6c 31 3c 33 00 00 00 a8 04 0e 16 00 00     ppel1<3.........
     408:	01 10 4b 6f 70 70 65 6c 50 3c 33 00 00 00 9e 04     ..KoppelP<3.....
     418:	1b 16 00 00 01 10 4b 6f 70 70 65 6c 31 3c 32 00     ......Koppel1<2.
     428:	00 00 94 04 28 16 00 00 01 10 4b 6f 70 70 65 6c     ....(.....Koppel
     438:	50 3c 32 00 00 00 8a 04 35 16 00 00 01 10 4b 6f     P<2.....5.....Ko
     448:	70 70 65 6c 50 3c 31 00 00 00 80 04 42 16 00 00     ppelP<1.....B...
     458:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 bc 04     ..MIDI Off......
     468:	87 1c 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     478:	08 09 c6 04 00 00 00 00                             ........

00000480 <shortKeyTextCplP1>:
     480:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

0000048a <shortKeyTextCplP2>:
     48a:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000494 <shortKeyTextCpl12>:
     494:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

0000049e <shortKeyTextCplP3>:
     49e:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000004a8 <shortKeyTextCpl13>:
     4a8:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000004b2 <shortKeyTextCpl23>:
     4b2:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000004bc <shortKeyTextMIDIoff>:
     4bc:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000004c6 <shortKeyTextSetup>:
     4c6:	53 65 74 75 00 00 00 00 00 00                       Setu......

000004d0 <shortKeyTextStim>:
     4d0:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000004da <shortKeyTextMenu>:
     4da:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000004e4 <menu_main>:
     4e4:	81 00 4d 49 44 49 00 00 00 00 00 00 e8 05 00 00     ..MIDI..........
     4f4:	00 00 00 00 01 00 4d 61 6e 75 61 6c 00 00 00 00     ......Manual....
     504:	48 05 00 00 00 00 00 00 01 00 54 61 73 74 65 6e     H.........Tasten
     514:	00 00 00 00 18 08 00 00 00 00 3f 13 01 00 53 74     ..........?...St
     524:	61 74 75 73 00 00 00 00 3c 0c 00 00 00 00 00 00     atus....<.......
     534:	c1 00 53 65 74 75 70 00 00 00 00 00 08 09 00 00     ..Setup.........
     544:	00 00 00 00                                         ....

00000548 <menu_manual>:
     548:	81 00 4b 6f 70 70 6c 65 72 00 00 00 70 05 00 00     ..Koppler...p...
     558:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     568:	68 08 00 00 00 00 00 00                             h.......

00000570 <menu_coupler>:
     570:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 e1 07     ..2<3...........
     580:	00 00 59 12 09 00 31 3c 33 00 00 00 00 00 00 00     ..Y...1<3.......
     590:	00 00 1b 0b 00 00 59 12 09 00 31 3c 32 00 00 00     ......Y...1<2...
     5a0:	00 00 00 00 00 00 d6 07 00 00 59 12 09 00 50 3c     ..........Y...P<
     5b0:	33 00 00 00 00 00 00 00 00 00 19 0b 00 00 59 12     3.............Y.
     5c0:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 e2 07     ..P<2...........
     5d0:	00 00 59 12 09 00 50 3c 31 00 00 00 00 00 00 00     ..Y...P<1.......
     5e0:	00 00 1a 0b 00 00 59 12                             ......Y.

000005e8 <menu_midi>:
     5e8:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     5f8:	87 1c 00 00 09 00 41 63 74 2e 53 65 6e 73 65 00     ......Act.Sense.
     608:	00 00 95 07 00 00 a5 14 01 00 4d 49 44 49 69 6e     ..........MIDIin
     618:	00 00 00 00 38 06 00 00 00 00 ad 14 c1 00 4d 49     ....8.........MI
     628:	44 49 6f 75 74 00 00 00 b8 08 00 00 00 00 a9 14     DIout...........

00000638 <menu_midiIn>:
     638:	81 00 43 68 2e 31 00 00 00 00 00 00 78 07 00 00     ..Ch.1......x...
     648:	cf 12 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     658:	78 07 01 00 cf 12 00 00 01 00 43 68 2e 33 00 00     x.........Ch.3..
     668:	00 00 00 00 78 07 02 00 cf 12 00 00 01 00 43 68     ....x.........Ch
     678:	2e 34 00 00 00 00 00 00 78 07 03 00 cf 12 00 00     .4......x.......
     688:	01 00 43 68 2e 35 00 00 00 00 00 00 78 07 04 00     ..Ch.5......x...
     698:	cf 12 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     6a8:	78 07 05 00 cf 12 00 00 01 00 43 68 2e 37 00 00     x.........Ch.7..
     6b8:	00 00 00 00 78 07 06 00 cf 12 00 00 01 00 43 68     ....x.........Ch
     6c8:	2e 38 00 00 00 00 00 00 78 07 07 00 cf 12 00 00     .8......x.......
     6d8:	01 00 43 68 2e 39 00 00 00 00 00 00 78 07 08 00     ..Ch.9......x...
     6e8:	cf 12 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     6f8:	78 07 09 00 cf 12 00 00 01 00 43 68 2e 31 31 00     x.........Ch.11.
     708:	00 00 00 00 78 07 0a 00 cf 12 00 00 01 00 43 68     ....x.........Ch
     718:	2e 31 32 00 00 00 00 00 78 07 0b 00 cf 12 00 00     .12.....x.......
     728:	01 00 43 68 2e 31 33 00 00 00 00 00 78 07 0c 00     ..Ch.13.....x...
     738:	cf 12 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     748:	78 07 0d 00 cf 12 00 00 01 00 43 68 2e 31 35 00     x.........Ch.15.
     758:	00 00 00 00 78 07 0e 00 cf 12 00 00 c1 00 43 68     ....x.........Ch
     768:	2e 31 36 00 00 00 00 00 78 07 0f 00 cf 12 00 00     .16.....x.......

00000778 <menu_midiInSec>:
     778:	81 00 53 65 63 74 2e 31 00 00 00 00 c8 07 00 00     ..Sect.1........
     788:	da 12 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     798:	c8 07 01 00 da 12 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     7a8:	00 00 00 00 c8 07 02 00 da 12 00 00 c1 00 53 65     ..............Se
     7b8:	63 74 2e 34 00 00 00 00 c8 07 03 00 da 12 00 00     ct.4............

000007c8 <menu_midiInVar>:
     7c8:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 e3 07     ..Manual........
     7d8:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     7e8:	00 00 e4 07 00 00 00 00 06 80 52 61 6e 67 65 00     ..........Range.
     7f8:	00 00 00 00 00 00 e5 07 00 00 00 00 c4 90 4d 61     ..............Ma
     808:	6e 4e 6f 74 65 00 00 00 00 00 e6 07 00 00 00 00     nNote...........

00000818 <menu_key>:
     818:	81 08 54 61 73 74 65 31 00 00 00 00 b8 03 00 00     ..Taste1........
     828:	28 13 e5 20 01 08 54 61 73 74 65 32 00 00 00 00     (.. ..Taste2....
     838:	b8 03 01 00 28 13 e5 20 01 08 54 61 73 74 65 33     ....(.. ..Taste3
     848:	00 00 00 00 b8 03 02 00 28 13 e5 20 c1 08 54 61     ........(.. ..Ta
     858:	73 74 65 34 00 00 00 00 b8 03 03 00 28 13 e5 20     ste4........(.. 

00000868 <menu_tune>:
     868:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     878:	89 13 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     888:	00 00 01 00 89 13 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     898:	00 00 00 00 00 00 02 00 89 13 00 00 c1 20 50 65     ............. Pe
     8a8:	64 61 6c 00 00 00 00 00 00 00 03 00 89 13 00 00     dal.............

000008b8 <menu_midiOut>:
     8b8:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 e3 08     ..III...........
     8c8:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     8d8:	00 00 e4 08 00 00 00 00 03 10 49 00 00 00 00 00     ..........I.....
     8e8:	00 00 00 00 00 00 e5 08 00 00 00 00 c3 10 50 00     ..............P.
	...
     900:	00 00 e6 08 00 00 00 00                             ........

00000908 <menu_setup>:
     908:	81 00 4d 6f 64 75 6c 65 00 00 00 00 d0 09 00 00     ..Module........
     918:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     928:	24 0b 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     $.........Power.
     938:	00 00 00 00 94 09 00 00 00 00 00 00 c1 00 45 45     ..............EE
     948:	70 72 6f 6d 00 00 00 00 58 09 00 00 00 00 00 00     prom....X.......

00000958 <menu_eeprom>:
     958:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     968:	76 16 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     v.....EEBackup..
     978:	00 00 00 00 62 16 00 00 c1 00 45 45 52 65 73 74     ....b.....EERest
     988:	6f 72 65 00 00 00 00 00 6c 16 00 00                 ore.....l...

00000994 <menu_Power>:
     994:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     9a4:	a7 21 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .!....PowerOff..
     9b4:	00 00 00 00 b0 21 00 00 c1 00 50 2e 52 65 73 74     .....!....P.Rest
     9c4:	61 72 74 00 00 00 00 00 b8 21 00 00                 art......!..

000009d0 <menu_module>:
     9d0:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 4e 03     ..ModRead.....N.
     9e0:	00 00 b7 14 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     9f0:	00 00 4d 03 00 00 00 00 0a 08 4d 6f 64 4f 4b 00     ..M.......ModOK.
     a00:	00 00 00 00 00 00 46 02 00 00 00 00 01 00 4d 6f     ......F.......Mo
     a10:	64 54 65 73 74 00 00 00 34 0a 00 00 00 00 00 00     dTest...4.......
     a20:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 60 0b 00 00     ..ModAssign.`...
     a30:	00 00 b1 14                                         ....

00000a34 <menu_ModeSel>:
     a34:	81 00 4d 6f 64 2e 30 00 00 00 00 00 d4 0a 00 00     ..Mod.0.........
     a44:	c4 12 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     a54:	d4 0a 01 00 c4 12 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     a64:	00 00 00 00 d4 0a 02 00 c4 12 00 00 01 00 4d 6f     ..............Mo
     a74:	64 2e 33 00 00 00 00 00 d4 0a 03 00 c4 12 00 00     d.3.............
     a84:	01 00 4d 6f 64 2e 34 00 00 00 00 00 d4 0a 04 00     ..Mod.4.........
     a94:	c4 12 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     aa4:	d4 0a 05 00 c4 12 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     ab4:	00 00 00 00 d4 0a 06 00 c4 12 00 00 c1 00 4d 6f     ..............Mo
     ac4:	64 2e 37 00 00 00 00 00 d4 0a 07 00 c4 12 00 00     d.7.............

00000ad4 <menu_ModTestSelcted>:
     ad4:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     ae4:	43 13 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     C.....Write.....
     af4:	00 00 58 05 5b 12 97 12 01 00 54 65 73 74 50 74     ..X.[.....TestPt
     b04:	72 6e 00 00 00 00 00 00 e2 1d 00 00 c1 00 4c 6f     rn............Lo
     b14:	6f 70 54 73 74 00 00 00 00 00 00 00 77 13 00 00     opTst.......w...

00000b24 <menu_USBser>:
     b24:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 63 0b     ..Active......c.
     b34:	00 00 d9 14 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
     b44:	00 00 00 00 bb 14 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
     b54:	66 67 00 00 00 00 00 00 ed 14 00 00                 fg..........

00000b60 <menu_modAssign>:
     b60:	81 00 4d 61 6e 2e 33 00 00 00 00 00 b0 0b 00 00     ..Man.3.........
     b70:	f8 12 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     b80:	b0 0b 01 00 f8 12 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
     b90:	00 00 00 00 b0 0b 02 00 f8 12 00 00 c1 00 50 65     ..............Pe
     ba0:	64 61 6c 00 00 00 00 00 b0 0b 03 00 f8 12 00 00     dal.............

00000bb0 <menu_modSection>:
     bb0:	81 00 53 65 63 74 2e 31 00 00 00 00 00 0c 00 00     ..Sect.1........
     bc0:	03 13 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     bd0:	00 0c 01 00 03 13 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     be0:	00 00 00 00 00 0c 02 00 03 13 00 00 c1 00 53 65     ..............Se
     bf0:	63 74 2e 34 00 00 00 00 00 0c 03 00 03 13 00 00     ct.4............

00000c00 <menu_modDefine>:
     c00:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 e7 08     ..NoteBeg.......
     c10:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
     c20:	00 00 e8 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
     c30:	2f 42 69 74 00 00 e9 08 00 00 00 00                 /Bit........

00000c3c <menu_status>:
     c3c:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
     c4c:	00 1c 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     .....@MIDI-In...
     c5c:	00 00 00 00 84 1b 00 00 c2 40 4d 49 44 49 2d 4f     .........@MIDI-O
     c6c:	75 74 00 00 00 00 00 00 c2 1b 00 00                 ut..........

00000c78 <sw_version>:
     c78:	56 30 2e 35 36 00                                   V0.56.

00000c7e <keylabel_1>:
     c7e:	31 00                                               1.

00000c80 <keylabel_0>:
     c80:	30 00                                               0.

00000c82 <keylabel_text>:
     c82:	54 65 78 74 80 00                                   Text..

00000c88 <keylabel_exit>:
     c88:	45 78 69 74 00                                      Exit.

00000c8d <keylabel_onoff>:
     c8d:	45 69 6e 80 00                                      Ein..

00000c92 <keylabel_minus>:
     c92:	2d 00                                               -.

00000c94 <keylabel_plus>:
     c94:	2b 00                                               +.

00000c96 <keylabel_left>:
     c96:	7f 00                                               ..

00000c98 <keylabel_right>:
     c98:	7e 00                                               ~.

00000c9a <keylabel_down>:
     c9a:	09 00                                               ..

00000c9c <keylabel_up>:
     c9c:	08 00                                               ..

00000c9e <cgPattern_Block>:
     c9e:	00 00 0e 0e 0e 0e 00 00                             ........

00000ca6 <cgPattern_Down>:
     ca6:	04 04 04 04 15 0e 04 00                             ........

00000cae <cgPattern_Up>:
     cae:	04 0e 15 04 04 04 04 00                             ........

00000cb6 <cr_lf>:
     cb6:	0d 0a 00 00                                         ....

00000cba <__ctors_end>:
     cba:	11 24       	eor	r1, r1
     cbc:	1f be       	out	0x3f, r1	; 63
     cbe:	cf ef       	ldi	r28, 0xFF	; 255
     cc0:	d1 e2       	ldi	r29, 0x21	; 33
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	00 e0       	ldi	r16, 0x00	; 0
     cc8:	0c bf       	out	0x3c, r16	; 60

00000cca <__do_copy_data>:
     cca:	12 e0       	ldi	r17, 0x02	; 2
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b2 e0       	ldi	r27, 0x02	; 2
     cd0:	e8 e7       	ldi	r30, 0x78	; 120
     cd2:	f6 e5       	ldi	r31, 0x56	; 86
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	0b bf       	out	0x3b, r16	; 59
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <__do_copy_data+0x14>
     cda:	07 90       	elpm	r0, Z+
     cdc:	0d 92       	st	X+, r0
     cde:	a6 30       	cpi	r26, 0x06	; 6
     ce0:	b1 07       	cpc	r27, r17
     ce2:	d9 f7       	brne	.-10     	; 0xcda <__do_copy_data+0x10>

00000ce4 <__do_clear_bss>:
     ce4:	2c e0       	ldi	r18, 0x0C	; 12
     ce6:	a6 e0       	ldi	r26, 0x06	; 6
     ce8:	b2 e0       	ldi	r27, 0x02	; 2
     cea:	01 c0       	rjmp	.+2      	; 0xcee <.do_clear_bss_start>

00000cec <.do_clear_bss_loop>:
     cec:	1d 92       	st	X+, r1

00000cee <.do_clear_bss_start>:
     cee:	ad 3d       	cpi	r26, 0xDD	; 221
     cf0:	b2 07       	cpc	r27, r18
     cf2:	e1 f7       	brne	.-8      	; 0xcec <.do_clear_bss_loop>
     cf4:	0e 94 a4 10 	call	0x2148	; 0x2148 <main>
     cf8:	0c 94 3a 2b 	jmp	0x5674	; 0x5674 <_exit>

00000cfc <__bad_interrupt>:
     cfc:	81 c9       	rjmp	.-3326   	; 0x0 <__vectors>

00000cfe <crc16_ram>:
		return(EE_LOAD_OK);
	} else {
		ee_initError |= EE_ERROR_PROG;
		return (EE_LOAD_ERROR);
	}
}
     cfe:	fc 01       	movw	r30, r24
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	9f ef       	ldi	r25, 0xFF	; 255
     d04:	1c c0       	rjmp	.+56     	; 0xd3e <crc16_ram+0x40>
     d06:	df 01       	movw	r26, r30
     d08:	11 96       	adiw	r26, 0x01	; 1
     d0a:	20 81       	ld	r18, Z
     d0c:	82 27       	eor	r24, r18
     d0e:	28 2f       	mov	r18, r24
     d10:	22 95       	swap	r18
     d12:	28 27       	eor	r18, r24
     d14:	02 2e       	mov	r0, r18
     d16:	26 95       	lsr	r18
     d18:	26 95       	lsr	r18
     d1a:	20 25       	eor	r18, r0
     d1c:	02 2e       	mov	r0, r18
     d1e:	26 95       	lsr	r18
     d20:	20 25       	eor	r18, r0
     d22:	27 70       	andi	r18, 0x07	; 7
     d24:	08 2e       	mov	r0, r24
     d26:	89 2f       	mov	r24, r25
     d28:	26 95       	lsr	r18
     d2a:	07 94       	ror	r0
     d2c:	27 95       	ror	r18
     d2e:	90 2d       	mov	r25, r0
     d30:	82 27       	eor	r24, r18
     d32:	06 94       	lsr	r0
     d34:	27 95       	ror	r18
     d36:	90 25       	eor	r25, r0
     d38:	82 27       	eor	r24, r18
     d3a:	ba 01       	movw	r22, r20
     d3c:	fd 01       	movw	r30, r26
     d3e:	ab 01       	movw	r20, r22
     d40:	41 50       	subi	r20, 0x01	; 1
     d42:	51 09       	sbc	r21, r1
     d44:	67 2b       	or	r22, r23
     d46:	f9 f6       	brne	.-66     	; 0xd06 <crc16_ram+0x8>
     d48:	08 95       	ret

00000d4a <crc16_eeprom>:
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cf ef       	ldi	r28, 0xFF	; 255
     d58:	df ef       	ldi	r29, 0xFF	; 255
     d5a:	21 c0       	rjmp	.+66     	; 0xd9e <crc16_eeprom+0x54>
     d5c:	7c 01       	movw	r14, r24
     d5e:	2f ef       	ldi	r18, 0xFF	; 255
     d60:	e2 1a       	sub	r14, r18
     d62:	f2 0a       	sbc	r15, r18
     d64:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     d68:	9e 01       	movw	r18, r28
     d6a:	28 27       	eor	r18, r24
     d6c:	82 2f       	mov	r24, r18
     d6e:	82 95       	swap	r24
     d70:	82 27       	eor	r24, r18
     d72:	08 2e       	mov	r0, r24
     d74:	86 95       	lsr	r24
     d76:	86 95       	lsr	r24
     d78:	80 25       	eor	r24, r0
     d7a:	08 2e       	mov	r0, r24
     d7c:	86 95       	lsr	r24
     d7e:	80 25       	eor	r24, r0
     d80:	87 70       	andi	r24, 0x07	; 7
     d82:	02 2e       	mov	r0, r18
     d84:	23 2f       	mov	r18, r19
     d86:	86 95       	lsr	r24
     d88:	07 94       	ror	r0
     d8a:	87 95       	ror	r24
     d8c:	30 2d       	mov	r19, r0
     d8e:	28 27       	eor	r18, r24
     d90:	06 94       	lsr	r0
     d92:	87 95       	ror	r24
     d94:	30 25       	eor	r19, r0
     d96:	28 27       	eor	r18, r24
     d98:	e9 01       	movw	r28, r18
     d9a:	b8 01       	movw	r22, r16
     d9c:	c7 01       	movw	r24, r14
     d9e:	8b 01       	movw	r16, r22
     da0:	01 50       	subi	r16, 0x01	; 1
     da2:	11 09       	sbc	r17, r1
     da4:	67 2b       	or	r22, r23
     da6:	d1 f6       	brne	.-76     	; 0xd5c <crc16_eeprom+0x12>
     da8:	ce 01       	movw	r24, r28
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <crc16_ram_startVal>:
     db8:	fc 01       	movw	r30, r24
     dba:	ca 01       	movw	r24, r20
     dbc:	1c c0       	rjmp	.+56     	; 0xdf6 <crc16_ram_startVal+0x3e>
     dbe:	df 01       	movw	r26, r30
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	20 81       	ld	r18, Z
     dc4:	82 27       	eor	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	22 95       	swap	r18
     dca:	28 27       	eor	r18, r24
     dcc:	02 2e       	mov	r0, r18
     dce:	26 95       	lsr	r18
     dd0:	26 95       	lsr	r18
     dd2:	20 25       	eor	r18, r0
     dd4:	02 2e       	mov	r0, r18
     dd6:	26 95       	lsr	r18
     dd8:	20 25       	eor	r18, r0
     dda:	27 70       	andi	r18, 0x07	; 7
     ddc:	08 2e       	mov	r0, r24
     dde:	89 2f       	mov	r24, r25
     de0:	26 95       	lsr	r18
     de2:	07 94       	ror	r0
     de4:	27 95       	ror	r18
     de6:	90 2d       	mov	r25, r0
     de8:	82 27       	eor	r24, r18
     dea:	06 94       	lsr	r0
     dec:	27 95       	ror	r18
     dee:	90 25       	eor	r25, r0
     df0:	82 27       	eor	r24, r18
     df2:	ba 01       	movw	r22, r20
     df4:	fd 01       	movw	r30, r26
     df6:	ab 01       	movw	r20, r22
     df8:	41 50       	subi	r20, 0x01	; 1
     dfa:	51 09       	sbc	r21, r1
     dfc:	67 2b       	or	r22, r23
     dfe:	f9 f6       	brne	.-66     	; 0xdbe <crc16_ram_startVal+0x6>
     e00:	08 95       	ret

00000e02 <eeprom_ReadManualMap>:
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	82 e3       	ldi	r24, 0x32	; 50
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     e0e:	ec 01       	movw	r28, r24
     e10:	60 e3       	ldi	r22, 0x30	; 48
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 df       	rcall	.-208    	; 0xd4a <crc16_eeprom>
     e1a:	c8 17       	cp	r28, r24
     e1c:	d9 07       	cpc	r29, r25
     e1e:	81 f4       	brne	.+32     	; 0xe40 <eeprom_ReadManualMap+0x3e>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     e28:	8d 34       	cpi	r24, 0x4D	; 77
     e2a:	51 f4       	brne	.+20     	; 0xe40 <eeprom_ReadManualMap+0x3e>
     e2c:	40 e3       	ldi	r20, 0x30	; 48
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	87 ee       	ldi	r24, 0xE7	; 231
     e36:	98 e0       	ldi	r25, 0x08	; 8
     e38:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <eeprom_read_block>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <eeprom_ReadManualMap+0x4a>
     e40:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <eeprom_ReadMidiInMap>:
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	85 e3       	ldi	r24, 0x35	; 53
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     e5e:	ec 01       	movw	r28, r24
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	85 e3       	ldi	r24, 0x35	; 53
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	70 df       	rcall	.-288    	; 0xd4a <crc16_eeprom>
     e6a:	c8 17       	cp	r28, r24
     e6c:	d9 07       	cpc	r29, r25
     e6e:	81 f4       	brne	.+32     	; 0xe90 <eeprom_ReadMidiInMap+0x3e>
     e70:	84 e3       	ldi	r24, 0x34	; 52
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     e78:	89 34       	cpi	r24, 0x49	; 73
     e7a:	51 f4       	brne	.+20     	; 0xe90 <eeprom_ReadMidiInMap+0x3e>
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	51 e0       	ldi	r21, 0x01	; 1
     e80:	65 e3       	ldi	r22, 0x35	; 53
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	83 ee       	ldi	r24, 0xE3	; 227
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <eeprom_read_block>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <eeprom_ReadMidiInMap+0x4a>
     e90:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <eeprom_ReadMidiOutMap>:
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	8d e3       	ldi	r24, 0x3D	; 61
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     eae:	ec 01       	movw	r28, r24
     eb0:	65 e0       	ldi	r22, 0x05	; 5
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	88 e3       	ldi	r24, 0x38	; 56
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	48 df       	rcall	.-368    	; 0xd4a <crc16_eeprom>
     eba:	c8 17       	cp	r28, r24
     ebc:	d9 07       	cpc	r29, r25
     ebe:	b1 f4       	brne	.+44     	; 0xeec <eeprom_ReadMidiOutMap+0x4a>
     ec0:	87 e3       	ldi	r24, 0x37	; 55
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     ec8:	8f 34       	cpi	r24, 0x4F	; 79
     eca:	81 f4       	brne	.+32     	; 0xeec <eeprom_ReadMidiOutMap+0x4a>
     ecc:	44 e0       	ldi	r20, 0x04	; 4
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	68 e3       	ldi	r22, 0x38	; 56
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	83 ee       	ldi	r24, 0xE3	; 227
     ed6:	98 e0       	ldi	r25, 0x08	; 8
     ed8:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <eeprom_read_block>
     edc:	8c e3       	ldi	r24, 0x3C	; 60
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     ee4:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <midi_TxActivceSense>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <eeprom_ReadMidiOutMap+0x56>
     eec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     ef0:	84 60       	ori	r24, 0x04	; 4
     ef2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <eeprom_ReadModules>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	82 e4       	ldi	r24, 0x42	; 66
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     f0a:	ec 01       	movw	r28, r24
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	80 e4       	ldi	r24, 0x40	; 64
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	1a df       	rcall	.-460    	; 0xd4a <crc16_eeprom>
     f16:	c8 17       	cp	r28, r24
     f18:	d9 07       	cpc	r29, r25
     f1a:	a1 f4       	brne	.+40     	; 0xf44 <eeprom_ReadModules+0x46>
     f1c:	8f e3       	ldi	r24, 0x3F	; 63
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     f24:	89 36       	cpi	r24, 0x69	; 105
     f26:	71 f4       	brne	.+28     	; 0xf44 <eeprom_ReadModules+0x46>
     f28:	80 e4       	ldi	r24, 0x40	; 64
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     f30:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <pipe_ModuleAssnRead>
     f34:	81 e4       	ldi	r24, 0x41	; 65
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     f3c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <pipe_ModuleAssnWrite>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <eeprom_ReadModules+0x52>
     f44:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <eeprom_ReadUSB>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	86 e4       	ldi	r24, 0x46	; 70
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     f62:	ec 01       	movw	r28, r24
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	85 e4       	ldi	r24, 0x45	; 69
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	ee de       	rcall	.-548    	; 0xd4a <crc16_eeprom>
     f6e:	c8 17       	cp	r28, r24
     f70:	d9 07       	cpc	r29, r25
     f72:	71 f4       	brne	.+28     	; 0xf90 <eeprom_ReadUSB+0x3a>
     f74:	84 e4       	ldi	r24, 0x44	; 68
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     f7c:	85 35       	cpi	r24, 0x55	; 85
     f7e:	41 f4       	brne	.+16     	; 0xf90 <eeprom_ReadUSB+0x3a>
     f80:	85 e4       	ldi	r24, 0x45	; 69
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
     f88:	80 93 63 0b 	sts	0x0B63, r24	; 0x800b63 <serusb_Active>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <eeprom_ReadUSB+0x46>
     f90:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeys, sizeof (ee.eeData.ee.softKeys)))){
     fa6:	88 e9       	ldi	r24, 0x98	; 152
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	0e 94 10 2b 	call	0x5620	; 0x5620 <eeprom_read_word>
     fae:	ec 01       	movw	r28, r24
     fb0:	68 e0       	ldi	r22, 0x08	; 8
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 e9       	ldi	r24, 0x90	; 144
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	c8 de       	rcall	.-624    	; 0xd4a <crc16_eeprom>
     fba:	c8 17       	cp	r28, r24
     fbc:	d9 07       	cpc	r29, r25
     fbe:	51 f4       	brne	.+20     	; 0xfd4 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_Key, (uint8_t*) &ee.eeData.ee.softKeys, sizeof (ee.eeData.ee.softKeys));
     fc0:	48 e0       	ldi	r20, 0x08	; 8
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	60 e9       	ldi	r22, 0x90	; 144
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	81 e4       	ldi	r24, 0x41	; 65
     fca:	95 e0       	ldi	r25, 0x05	; 5
     fcc:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <eeprom_read_block>
		return(EE_LOAD_OK);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
     fd4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
     fde:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
     ff0:	65 e6       	ldi	r22, 0x65	; 101
     ff2:	8a e9       	ldi	r24, 0x9A	; 154
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <eeprom_update_byte>
     ffa:	08 95       	ret

00000ffc <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1000:	60 e3       	ldi	r22, 0x30	; 48
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	87 ee       	ldi	r24, 0xE7	; 231
    1006:	98 e0       	ldi	r25, 0x08	; 8
    1008:	7a de       	rcall	.-780    	; 0xcfe <crc16_ram>
    100a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    100c:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1010:	6d e4       	ldi	r22, 0x4D	; 77
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    101a:	40 e3       	ldi	r20, 0x30	; 48
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	62 e0       	ldi	r22, 0x02	; 2
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	87 ee       	ldi	r24, 0xE7	; 231
    1024:	98 e0       	ldi	r25, 0x08	; 8
    1026:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    102a:	be 01       	movw	r22, r28
    102c:	82 e3       	ldi	r24, 0x32	; 50
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1034:	d8 df       	rcall	.-80     	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1036:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	83 ee       	ldi	r24, 0xE3	; 227
    104a:	97 e0       	ldi	r25, 0x07	; 7
    104c:	58 de       	rcall	.-848    	; 0xcfe <crc16_ram>
    104e:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1050:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1054:	69 e4       	ldi	r22, 0x49	; 73
    1056:	84 e3       	ldi	r24, 0x34	; 52
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	51 e0       	ldi	r21, 0x01	; 1
    1062:	65 e3       	ldi	r22, 0x35	; 53
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	83 ee       	ldi	r24, 0xE3	; 227
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    106e:	be 01       	movw	r22, r28
    1070:	85 e3       	ldi	r24, 0x35	; 53
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1078:	b6 df       	rcall	.-148    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    107a:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    1088:	64 e0       	ldi	r22, 0x04	; 4
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	83 ee       	ldi	r24, 0xE3	; 227
    108e:	98 e0       	ldi	r25, 0x08	; 8
    1090:	36 de       	rcall	.-916    	; 0xcfe <crc16_ram>
	crc = crc16_ram_startVal(&midi_TxActivceSense,sizeof(midi_TxActivceSense),crc);
    1092:	ac 01       	movw	r20, r24
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	85 e9       	ldi	r24, 0x95	; 149
    109a:	97 e0       	ldi	r25, 0x07	; 7
    109c:	8d de       	rcall	.-742    	; 0xdb8 <crc16_ram_startVal>
    109e:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    10a0:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    10a4:	6f e4       	ldi	r22, 0x4F	; 79
    10a6:	87 e3       	ldi	r24, 0x37	; 55
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    10ae:	44 e0       	ldi	r20, 0x04	; 4
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	68 e3       	ldi	r22, 0x38	; 56
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	83 ee       	ldi	r24, 0xE3	; 227
    10b8:	98 e0       	ldi	r25, 0x08	; 8
    10ba:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.midiTXActivSense), midi_TxActivceSense);
    10be:	60 91 95 07 	lds	r22, 0x0795	; 0x800795 <midi_TxActivceSense>
    10c2:	8c e3       	ldi	r24, 0x3C	; 60
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    10ca:	be 01       	movw	r22, r28
    10cc:	8d e3       	ldi	r24, 0x3D	; 61
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    10d4:	88 df       	rcall	.-240    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    10d6:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_ModuleAssnRead, sizeof(pipe_ModuleAssnRead));
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	8e e4       	ldi	r24, 0x4E	; 78
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	08 de       	rcall	.-1008   	; 0xcfe <crc16_ram>
    10ee:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    10f0:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    10f4:	69 e6       	ldi	r22, 0x69	; 105
    10f6:	8f e3       	ldi	r24, 0x3F	; 63
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_ModuleAssnRead);
    10fe:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    1102:	80 e4       	ldi	r24, 0x40	; 64
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_ModuleAssnWrite);
    110a:	60 91 4d 03 	lds	r22, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    110e:	81 e4       	ldi	r24, 0x41	; 65
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1116:	be 01       	movw	r22, r28
    1118:	82 e4       	ldi	r24, 0x42	; 66
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1120:	62 df       	rcall	.-316    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1122:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serusb_Active, sizeof(serusb_Active));
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	83 e6       	ldi	r24, 0x63	; 99
    1136:	9b e0       	ldi	r25, 0x0B	; 11
    1138:	e2 dd       	rcall	.-1084   	; 0xcfe <crc16_ram>
    113a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    113c:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1140:	65 e5       	ldi	r22, 0x55	; 85
    1142:	84 e4       	ldi	r24, 0x44	; 68
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serusb_Active);
    114a:	60 91 63 0b 	lds	r22, 0x0B63	; 0x800b63 <serusb_Active>
    114e:	85 e4       	ldi	r24, 0x45	; 69
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1156:	be 01       	movw	r22, r28
    1158:	86 e4       	ldi	r24, 0x46	; 70
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1160:	42 df       	rcall	.-380    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1162:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	87 ed       	ldi	r24, 0xD7	; 215
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	c2 dd       	rcall	.-1148   	; 0xcfe <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    117a:	ac 01       	movw	r20, r24
    117c:	60 e4       	ldi	r22, 0x40	; 64
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	86 e9       	ldi	r24, 0x96	; 150
    1182:	97 e0       	ldi	r25, 0x07	; 7
    1184:	19 de       	rcall	.-974    	; 0xdb8 <crc16_ram_startVal>
    1186:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1188:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    118c:	62 e5       	ldi	r22, 0x52	; 82
    118e:	88 e4       	ldi	r24, 0x48	; 72
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1196:	60 91 d7 07 	lds	r22, 0x07D7	; 0x8007d7 <registerCount>
    119a:	89 e4       	ldi	r24, 0x49	; 73
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    11a2:	40 e4       	ldi	r20, 0x40	; 64
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	6a e4       	ldi	r22, 0x4A	; 74
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	86 e9       	ldi	r24, 0x96	; 150
    11ac:	97 e0       	ldi	r25, 0x07	; 7
    11ae:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    11b2:	be 01       	movw	r22, r28
    11b4:	8a e8       	ldi	r24, 0x8A	; 138
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    11bc:	14 df       	rcall	.-472    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    11be:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	72 e0       	ldi	r23, 0x02	; 2
    11d0:	87 e1       	ldi	r24, 0x17	; 23
    11d2:	99 e0       	ldi	r25, 0x09	; 9
    11d4:	94 dd       	rcall	.-1240   	; 0xcfe <crc16_ram>
    11d6:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    11d8:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    11dc:	60 e5       	ldi	r22, 0x50	; 80
    11de:	8c e8       	ldi	r24, 0x8C	; 140
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	52 e0       	ldi	r21, 0x02	; 2
    11ea:	6d e8       	ldi	r22, 0x8D	; 141
    11ec:	71 e0       	ldi	r23, 0x01	; 1
    11ee:	87 e1       	ldi	r24, 0x17	; 23
    11f0:	99 e0       	ldi	r25, 0x09	; 9
    11f2:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    11f6:	be 01       	movw	r22, r28
    11f8:	8d e8       	ldi	r24, 0x8D	; 141
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1200:	f2 de       	rcall	.-540    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1202:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_Key, sizeof(soft_Key));
    1210:	68 e0       	ldi	r22, 0x08	; 8
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	81 e4       	ldi	r24, 0x41	; 65
    1216:	95 e0       	ldi	r25, 0x05	; 5
    1218:	72 dd       	rcall	.-1308   	; 0xcfe <crc16_ram>
    121a:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    121c:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1220:	6b e4       	ldi	r22, 0x4B	; 75
    1222:	8f e8       	ldi	r24, 0x8F	; 143
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_Key, (uint8_t*) &ee.eeData.ee.softKeys, sizeof(soft_Key));
    122a:	48 e0       	ldi	r20, 0x08	; 8
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	60 e9       	ldi	r22, 0x90	; 144
    1230:	73 e0       	ldi	r23, 0x03	; 3
    1232:	81 e4       	ldi	r24, 0x41	; 65
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	0e 94 15 2b 	call	0x562a	; 0x562a <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    123a:	be 01       	movw	r22, r28
    123c:	88 e9       	ldi	r24, 0x98	; 152
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	0e 94 36 2b 	call	0x566c	; 0x566c <eeprom_update_word>
	eepromWriteSignature();
    1244:	d0 de       	rcall	.-608    	; 0xfe6 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1246:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1250:	d5 de       	rcall	.-598    	; 0xffc <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1252:	f6 de       	rcall	.-532    	; 0x1040 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1254:	17 df       	rcall	.-466    	; 0x1084 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1256:	44 df       	rcall	.-376    	; 0x10e0 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1258:	69 df       	rcall	.-302    	; 0x112c <eeprom_UpdateUSB>
    125a:	88 df       	rcall	.-240    	; 0x116c <eeprom_UpdateReg>
	eeprom_UpdateReg();
    125c:	b5 df       	rcall	.-150    	; 0x11c8 <eeprom_UpdateProg>
    125e:	d6 cf       	rjmp	.-84     	; 0x120c <eeprom_UpdateSoftkeys>
	eeprom_UpdateProg();
    1260:	08 95       	ret

00001262 <eepromCopy>:
    1262:	cf 92       	push	r12
	eeprom_UpdateSoftkeys();
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1276:	7c 01       	movw	r14, r24
    1278:	2f ef       	ldi	r18, 0xFF	; 255
    127a:	e2 1a       	sub	r14, r18
    127c:	f2 0a       	sbc	r15, r18
    127e:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_read_byte>
    1282:	6e 01       	movw	r12, r28
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	c9 1a       	sub	r12, r25
    1288:	d9 0a       	sbc	r13, r25
    128a:	68 2f       	mov	r22, r24
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 24 2b 	call	0x5648	; 0x5648 <eeprom_update_byte>
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1292:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1294:	e6 01       	movw	r28, r12
    1296:	c7 01       	movw	r24, r14
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1298:	8a 01       	movw	r16, r20
    129a:	01 50       	subi	r16, 0x01	; 1
    129c:	11 09       	sbc	r17, r1
    129e:	45 2b       	or	r20, r21
    12a0:	51 f7       	brne	.-44     	; 0x1276 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	08 95       	ret

000012b4 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    12b4:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	54 e0       	ldi	r21, 0x04	; 4
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	74 e0       	ldi	r23, 0x04	; 4
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	ce df       	rcall	.-100    	; 0x1262 <eepromCopy>
	lcd_waitSymbolOff();
    12c6:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
    12ca:	08 95       	ret

000012cc <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    12cc:	0e 94 43 2a 	call	0x5486	; 0x5486 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	54 e0       	ldi	r21, 0x04	; 4
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	c2 df       	rcall	.-124    	; 0x1262 <eepromCopy>
	lcd_waitSymbolOff();
    12de:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <lcd_waitSymbolOff>
    12e2:	08 95       	ret

000012e4 <init_Timers>:
	}
	pipeProcessing = PIPE_IO_START;
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
		// wait for Data read back from input
	}
}
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0a c0       	rjmp	.+20     	; 0x12fc <init_Timers+0x18>
    12e8:	e8 2f       	mov	r30, r24
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	e3 5d       	subi	r30, 0xD3	; 211
    12f2:	fd 4f       	sbci	r31, 0xFD	; 253
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	90 83       	st	Z, r25
    12f8:	11 82       	std	Z+1, r1	; 0x01
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	89 30       	cpi	r24, 0x09	; 9
    12fe:	a0 f3       	brcs	.-24     	; 0x12e8 <init_Timers+0x4>
    1300:	ef e3       	ldi	r30, 0x3F	; 63
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	10 82       	st	Z, r1
    1306:	11 82       	std	Z+1, r1	; 0x01
    1308:	12 82       	std	Z+2, r1	; 0x02
    130a:	13 82       	std	Z+3, r1	; 0x03
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <time_UpTimeUpdated>
    1312:	08 95       	ret

00001314 <init_HwTimer>:
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	84 bd       	out	0x24, r24	; 36
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	95 bd       	out	0x25, r25	; 37
    131c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1320:	89 ef       	ldi	r24, 0xF9	; 249
    1322:	87 bd       	out	0x27, r24	; 39
    1324:	85 b1       	in	r24, 0x05	; 5
    1326:	8f 77       	andi	r24, 0x7F	; 127
    1328:	85 b9       	out	0x05, r24	; 5
    132a:	84 b1       	in	r24, 0x04	; 4
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	84 b9       	out	0x04, r24	; 4
    1330:	08 95       	ret

00001332 <init_ADC>:
    1332:	87 e8       	ldi	r24, 0x87	; 135
    1334:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1338:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    133c:	8f e7       	ldi	r24, 0x7F	; 127
    133e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1348:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    134c:	e7 e4       	ldi	r30, 0x47	; 71
    134e:	f3 e0       	ldi	r31, 0x03	; 3
    1350:	10 82       	st	Z, r1
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	81 83       	std	Z+1, r24	; 0x01
    1356:	82 83       	std	Z+2, r24	; 0x02
    1358:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcNr>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	10 c0       	rjmp	.+32     	; 0x1380 <init_ADC+0x4e>
    1360:	85 30       	cpi	r24, 0x05	; 5
    1362:	39 f4       	brne	.+14     	; 0x1372 <init_ADC+0x40>
    1364:	e8 2f       	mov	r30, r24
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	e1 5b       	subi	r30, 0xB1	; 177
    136a:	fc 4f       	sbci	r31, 0xFC	; 252
    136c:	96 e0       	ldi	r25, 0x06	; 6
    136e:	90 83       	st	Z, r25
    1370:	06 c0       	rjmp	.+12     	; 0x137e <init_ADC+0x4c>
    1372:	e8 2f       	mov	r30, r24
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	e1 5b       	subi	r30, 0xB1	; 177
    1378:	fc 4f       	sbci	r31, 0xFC	; 252
    137a:	9a e0       	ldi	r25, 0x0A	; 10
    137c:	90 83       	st	Z, r25
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	86 30       	cpi	r24, 0x06	; 6
    1382:	70 f3       	brcs	.-36     	; 0x1360 <init_ADC+0x2e>
    1384:	08 95       	ret

00001386 <init_Pipe>:
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	88 b9       	out	0x08, r24	; 8
    138a:	87 b9       	out	0x07, r24	; 7
    138c:	82 b9       	out	0x02, r24	; 2
    138e:	11 b8       	out	0x01, r1	; 1
    1390:	84 b3       	in	r24, 0x14	; 20
    1392:	87 60       	ori	r24, 0x07	; 7
    1394:	84 bb       	out	0x14, r24	; 20
    1396:	83 b3       	in	r24, 0x13	; 19
    1398:	87 60       	ori	r24, 0x07	; 7
    139a:	83 bb       	out	0x13, r24	; 19
    139c:	8b b1       	in	r24, 0x0b	; 11
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	8b b9       	out	0x0b, r24	; 11
    13a2:	8a b1       	in	r24, 0x0a	; 10
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	8a b9       	out	0x0a, r24	; 10
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <init_Pipe+0x42>
    13ac:	e8 2f       	mov	r30, r24
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e9 5b       	subi	r30, 0xB9	; 185
    13be:	fd 4f       	sbci	r31, 0xFD	; 253
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	90 83       	st	Z, r25
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 32       	cpi	r24, 0x20	; 32
    13ca:	80 f3       	brcs	.-32     	; 0x13ac <init_Pipe+0x26>
    13cc:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <pipeProcessing>
    13d0:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <pipe_PowerStatus>
    13d4:	08 95       	ret

000013d6 <init_PipeModules>:
    13d6:	93 dd       	rcall	.-1242   	; 0xefe <eeprom_ReadModules>
    13d8:	8f 3f       	cpi	r24, 0xFF	; 255
    13da:	51 f4       	brne	.+20     	; 0x13f0 <init_PipeModules+0x1a>
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	98 d6       	rcall	.+3376   	; 0x2116 <log_putError>
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <pipe_ModuleAssnRead>
    13ec:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <pipe_ModuleAssnWrite>
    13f0:	8b b1       	in	r24, 0x0b	; 11
    13f2:	8f 77       	andi	r24, 0x7F	; 127
    13f4:	8b b9       	out	0x0b, r24	; 11
    13f6:	84 b3       	in	r24, 0x14	; 20
    13f8:	87 60       	ori	r24, 0x07	; 7
    13fa:	84 bb       	out	0x14, r24	; 20
    13fc:	84 b3       	in	r24, 0x14	; 20
    13fe:	8b 7f       	andi	r24, 0xFB	; 251
    1400:	84 bb       	out	0x14, r24	; 20
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	8a 95       	dec	r24
    1406:	f1 f7       	brne	.-4      	; 0x1404 <init_PipeModules+0x2e>
    1408:	00 00       	nop
    140a:	84 b3       	in	r24, 0x14	; 20
    140c:	84 60       	ori	r24, 0x04	; 4
    140e:	84 bb       	out	0x14, r24	; 20
    1410:	90 e2       	ldi	r25, 0x20	; 32
    1412:	84 b3       	in	r24, 0x14	; 20
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	84 bb       	out	0x14, r24	; 20
    1418:	90 fd       	sbrc	r25, 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <init_PipeModules+0x4a>
    141c:	85 e5       	ldi	r24, 0x55	; 85
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <init_PipeModules+0x4c>
    1420:	8a ea       	ldi	r24, 0xAA	; 170
    1422:	88 b9       	out	0x08, r24	; 8
    1424:	80 b1       	in	r24, 0x00	; 0
    1426:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xff>
    142a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfe>
    142e:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfd>
    1432:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfc>
    1436:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <pipe+0xfb>
    143a:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <pipe+0xfa>
    143e:	84 b3       	in	r24, 0x14	; 20
    1440:	8e 7f       	andi	r24, 0xFE	; 254
    1442:	84 bb       	out	0x14, r24	; 20
    1444:	85 e0       	ldi	r24, 0x05	; 5
    1446:	8a 95       	dec	r24
    1448:	f1 f7       	brne	.-4      	; 0x1446 <init_PipeModules+0x70>
    144a:	00 00       	nop
    144c:	91 50       	subi	r25, 0x01	; 1
    144e:	09 f7       	brne	.-62     	; 0x1412 <init_PipeModules+0x3c>
    1450:	90 e2       	ldi	r25, 0x20	; 32
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <init_PipeModules+0x9c>
    1454:	84 b3       	in	r24, 0x14	; 20
    1456:	81 60       	ori	r24, 0x01	; 1
    1458:	84 bb       	out	0x14, r24	; 20
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	8a 95       	dec	r24
    145e:	f1 f7       	brne	.-4      	; 0x145c <init_PipeModules+0x86>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <init_PipeModules+0x8c>
    1462:	84 b3       	in	r24, 0x14	; 20
    1464:	8e 7f       	andi	r24, 0xFE	; 254
    1466:	84 bb       	out	0x14, r24	; 20
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	8a 95       	dec	r24
    146c:	f1 f7       	brne	.-4      	; 0x146a <init_PipeModules+0x94>
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <init_PipeModules+0x9a>
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	91 11       	cpse	r25, r1
    1474:	ef cf       	rjmp	.-34     	; 0x1454 <init_PipeModules+0x7e>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipe_ModuleTested>
    147c:	90 e2       	ldi	r25, 0x20	; 32
    147e:	84 b3       	in	r24, 0x14	; 20
    1480:	81 60       	ori	r24, 0x01	; 1
    1482:	84 bb       	out	0x14, r24	; 20
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	88 b9       	out	0x08, r24	; 8
    1488:	20 b1       	in	r18, 0x00	; 0
    148a:	90 fd       	sbrc	r25, 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <init_PipeModules+0xbc>
    148e:	8a ea       	ldi	r24, 0xAA	; 170
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <init_PipeModules+0xbe>
    1492:	85 e5       	ldi	r24, 0x55	; 85
    1494:	82 27       	eor	r24, r18
    1496:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <pipe_ModuleTested>
    149a:	82 23       	and	r24, r18
    149c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipe_ModuleTested>
    14a0:	84 b3       	in	r24, 0x14	; 20
    14a2:	8e 7f       	andi	r24, 0xFE	; 254
    14a4:	84 bb       	out	0x14, r24	; 20
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	8a 95       	dec	r24
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <init_PipeModules+0xd2>
    14ac:	00 00       	nop
    14ae:	91 50       	subi	r25, 0x01	; 1
    14b0:	31 f7       	brne	.-52     	; 0x147e <init_PipeModules+0xa8>
    14b2:	00 00       	nop
    14b4:	00 00       	nop
    14b6:	84 b3       	in	r24, 0x14	; 20
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	84 bb       	out	0x14, r24	; 20
    14bc:	84 b3       	in	r24, 0x14	; 20
    14be:	87 60       	ori	r24, 0x07	; 7
    14c0:	84 bb       	out	0x14, r24	; 20
    14c2:	84 b3       	in	r24, 0x14	; 20
    14c4:	8b 7f       	andi	r24, 0xFB	; 251
    14c6:	84 bb       	out	0x14, r24	; 20
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	8a 95       	dec	r24
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <init_PipeModules+0xf4>
    14ce:	00 c0       	rjmp	.+0      	; 0x14d0 <init_PipeModules+0xfa>
    14d0:	84 b3       	in	r24, 0x14	; 20
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	84 bb       	out	0x14, r24	; 20
    14d6:	90 e2       	ldi	r25, 0x20	; 32
    14d8:	ef e3       	ldi	r30, 0x3F	; 63
    14da:	f3 e0       	ldi	r31, 0x03	; 3
    14dc:	83 81       	ldd	r24, Z+3	; 0x03
    14de:	82 83       	std	Z+2, r24	; 0x02
    14e0:	84 81       	ldd	r24, Z+4	; 0x04
    14e2:	83 83       	std	Z+3, r24	; 0x03
    14e4:	84 b3       	in	r24, 0x14	; 20
    14e6:	81 60       	ori	r24, 0x01	; 1
    14e8:	84 bb       	out	0x14, r24	; 20
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	81 83       	std	Z+1, r24	; 0x01
    14ee:	88 b9       	out	0x08, r24	; 8
    14f0:	85 81       	ldd	r24, Z+5	; 0x05
    14f2:	84 83       	std	Z+4, r24	; 0x04
    14f4:	86 81       	ldd	r24, Z+6	; 0x06
    14f6:	85 83       	std	Z+5, r24	; 0x05
    14f8:	80 b1       	in	r24, 0x00	; 0
    14fa:	86 83       	std	Z+6, r24	; 0x06
    14fc:	82 83       	std	Z+2, r24	; 0x02
    14fe:	83 83       	std	Z+3, r24	; 0x03
    1500:	84 83       	std	Z+4, r24	; 0x04
    1502:	85 83       	std	Z+5, r24	; 0x05
    1504:	87 83       	std	Z+7, r24	; 0x07
    1506:	84 b3       	in	r24, 0x14	; 20
    1508:	8e 7f       	andi	r24, 0xFE	; 254
    150a:	84 bb       	out	0x14, r24	; 20
    150c:	38 97       	sbiw	r30, 0x08	; 8
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	29 f7       	brne	.-54     	; 0x14dc <init_PipeModules+0x106>
    1512:	00 00       	nop
    1514:	00 00       	nop
    1516:	84 b3       	in	r24, 0x14	; 20
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	84 bb       	out	0x14, r24	; 20
    151c:	84 b3       	in	r24, 0x14	; 20
    151e:	8d 7f       	andi	r24, 0xFD	; 253
    1520:	84 bb       	out	0x14, r24	; 20
    1522:	18 b8       	out	0x08, r1	; 8
    1524:	85 e0       	ldi	r24, 0x05	; 5
    1526:	8a 95       	dec	r24
    1528:	f1 f7       	brne	.-4      	; 0x1526 <init_PipeModules+0x150>
    152a:	00 00       	nop
    152c:	84 b3       	in	r24, 0x14	; 20
    152e:	82 60       	ori	r24, 0x02	; 2
    1530:	84 bb       	out	0x14, r24	; 20
    1532:	40 91 4e 03 	lds	r20, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    1536:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    153a:	84 2b       	or	r24, r20
    153c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <pipe_ModuleTested>
    1540:	89 17       	cp	r24, r25
    1542:	39 f0       	breq	.+14     	; 0x1552 <init_PipeModules+0x17c>
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	54 2f       	mov	r21, r20
    1548:	44 27       	eor	r20, r20
    154a:	49 2b       	or	r20, r25
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	e2 c5       	rjmp	.+3012   	; 0x2116 <log_putError>
    1552:	08 95       	ret

00001554 <test_PipeModule>:
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <test_PipeModule+0x6>
    1558:	6a c0       	rjmp	.+212    	; 0x162e <test_PipeModule+0xda>
    155a:	31 e0       	ldi	r19, 0x01	; 1
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <test_PipeModule+0xc>
    155e:	33 0f       	add	r19, r19
    1560:	8a 95       	dec	r24
    1562:	ea f7       	brpl	.-6      	; 0x155e <test_PipeModule+0xa>
    1564:	80 e8       	ldi	r24, 0x80	; 128
    1566:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
    156a:	8b b1       	in	r24, 0x0b	; 11
    156c:	8f 77       	andi	r24, 0x7F	; 127
    156e:	8b b9       	out	0x0b, r24	; 11
    1570:	84 b3       	in	r24, 0x14	; 20
    1572:	87 60       	ori	r24, 0x07	; 7
    1574:	84 bb       	out	0x14, r24	; 20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	1d c0       	rjmp	.+58     	; 0x15b4 <test_PipeModule+0x60>
    157a:	20 fd       	sbrc	r18, 0
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <test_PipeModule+0x30>
    157e:	83 2f       	mov	r24, r19
    1580:	80 95       	com	r24
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <test_PipeModule+0x32>
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	88 b9       	out	0x08, r24	; 8
    1588:	26 95       	lsr	r18
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	8a 95       	dec	r24
    158e:	f1 f7       	brne	.-4      	; 0x158c <test_PipeModule+0x38>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <test_PipeModule+0x3e>
    1592:	84 b3       	in	r24, 0x14	; 20
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	84 bb       	out	0x14, r24	; 20
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	8a 95       	dec	r24
    159c:	f1 f7       	brne	.-4      	; 0x159a <test_PipeModule+0x46>
    159e:	00 c0       	rjmp	.+0      	; 0x15a0 <test_PipeModule+0x4c>
    15a0:	84 b3       	in	r24, 0x14	; 20
    15a2:	81 60       	ori	r24, 0x01	; 1
    15a4:	84 bb       	out	0x14, r24	; 20
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <test_PipeModule+0x5a>
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	25 ea       	ldi	r18, 0xA5	; 165
    15ae:	98 30       	cpi	r25, 0x08	; 8
    15b0:	20 f3       	brcs	.-56     	; 0x157a <test_PipeModule+0x26>
    15b2:	4f 5f       	subi	r20, 0xFF	; 255
    15b4:	44 30       	cpi	r20, 0x04	; 4
    15b6:	c8 f3       	brcs	.-14     	; 0x15aa <test_PipeModule+0x56>
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <test_PipeModule+0x86>
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	8a 95       	dec	r24
    15c0:	f1 f7       	brne	.-4      	; 0x15be <test_PipeModule+0x6a>
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <test_PipeModule+0x70>
    15c4:	84 b3       	in	r24, 0x14	; 20
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	84 bb       	out	0x14, r24	; 20
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	8a 95       	dec	r24
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <test_PipeModule+0x78>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <test_PipeModule+0x7e>
    15d2:	84 b3       	in	r24, 0x14	; 20
    15d4:	81 60       	ori	r24, 0x01	; 1
    15d6:	84 bb       	out	0x14, r24	; 20
    15d8:	9f 5f       	subi	r25, 0xFF	; 255
    15da:	90 32       	cpi	r25, 0x20	; 32
    15dc:	78 f3       	brcs	.-34     	; 0x15bc <test_PipeModule+0x68>
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	ba 01       	movw	r22, r20
    15e6:	17 c0       	rjmp	.+46     	; 0x1616 <test_PipeModule+0xc2>
    15e8:	44 0f       	add	r20, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	8a 95       	dec	r24
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <test_PipeModule+0x9e>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <test_PipeModule+0xa4>
    15f8:	84 b3       	in	r24, 0x14	; 20
    15fa:	8e 7f       	andi	r24, 0xFE	; 254
    15fc:	84 bb       	out	0x14, r24	; 20
    15fe:	80 b1       	in	r24, 0x00	; 0
    1600:	83 23       	and	r24, r19
    1602:	09 f0       	breq	.+2      	; 0x1606 <test_PipeModule+0xb2>
    1604:	41 60       	ori	r20, 0x01	; 1
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	8a 95       	dec	r24
    160a:	f1 f7       	brne	.-4      	; 0x1608 <test_PipeModule+0xb4>
    160c:	00 c0       	rjmp	.+0      	; 0x160e <test_PipeModule+0xba>
    160e:	84 b3       	in	r24, 0x14	; 20
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	84 bb       	out	0x14, r24	; 20
    1614:	9f 5f       	subi	r25, 0xFF	; 255
    1616:	90 32       	cpi	r25, 0x20	; 32
    1618:	38 f3       	brcs	.-50     	; 0x15e8 <test_PipeModule+0x94>
    161a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <pipeProcessing>
    161e:	8b b1       	in	r24, 0x0b	; 11
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8b b9       	out	0x0b, r24	; 11
    1624:	34 2f       	mov	r19, r20
    1626:	25 2f       	mov	r18, r21
    1628:	86 2f       	mov	r24, r22
    162a:	97 2f       	mov	r25, r23
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <test_PipeModule+0xe2>
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	63 2f       	mov	r22, r19
    1638:	72 2f       	mov	r23, r18
    163a:	08 95       	ret

0000163c <module_TestAllInputs>:
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	e7 e4       	ldi	r30, 0x47	; 71
    1640:	f2 e0       	ldi	r31, 0x02	; 2
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <module_TestAllInputs+0x16>
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	21 83       	std	Z+1, r18	; 0x01
    164a:	26 81       	ldd	r18, Z+6	; 0x06
    164c:	82 2b       	or	r24, r18
    164e:	38 96       	adiw	r30, 0x08	; 8
    1650:	9f 5f       	subi	r25, 0xFF	; 255
    1652:	90 32       	cpi	r25, 0x20	; 32
    1654:	c0 f3       	brcs	.-16     	; 0x1646 <module_TestAllInputs+0xa>
    1656:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    165a:	89 23       	and	r24, r25
    165c:	08 95       	ret

0000165e <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1664:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1666:	f8 94       	cli
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <module_StartPowerOn+0x18>
    166a:	ed e2       	ldi	r30, 0x2D	; 45
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	82 e3       	ldi	r24, 0x32	; 50
    1670:	82 83       	std	Z+2, r24	; 0x02
    1672:	13 82       	std	Z+3, r1	; 0x03
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	81 11       	cpse	r24, r1
    1678:	f8 cf       	rjmp	.-16     	; 0x166a <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    167a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    167c:	08 95       	ret

0000167e <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    167e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	31 f5       	brne	.+76     	; 0x16d2 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1686:	da df       	rcall	.-76     	; 0x163c <module_TestAllInputs>
    1688:	81 11       	cpse	r24, r1
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    168c:	85 b1       	in	r24, 0x05	; 5
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1692:	82 e1       	ldi	r24, 0x12	; 18
    1694:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1698:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    169a:	f8 94       	cli
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <module_PowerControl+0x2e>
    16a0:	ed e2       	ldi	r30, 0x2D	; 45
    16a2:	f2 e0       	ldi	r31, 0x02	; 2
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	82 83       	std	Z+2, r24	; 0x02
    16a8:	13 82       	std	Z+3, r1	; 0x03
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	81 11       	cpse	r24, r1
    16ae:	f8 cf       	rjmp	.-16     	; 0x16a0 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16b0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    16b2:	08 95       	ret
		} else {
			// keys are not released	
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    16b4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16b6:	f8 94       	cli
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <module_PowerControl+0x4c>
    16bc:	ed e2       	ldi	r30, 0x2D	; 45
    16be:	f2 e0       	ldi	r31, 0x02	; 2
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	82 83       	std	Z+2, r24	; 0x02
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	83 83       	std	Z+3, r24	; 0x03
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	81 11       	cpse	r24, r1
    16cc:	f7 cf       	rjmp	.-18     	; 0x16bc <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16ce:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    16d0:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    16d2:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    16d4:	b1 f4       	brne	.+44     	; 0x1702 <module_PowerControl+0x84>
    16d6:	b2 df       	rcall	.-156    	; 0x163c <module_TestAllInputs>
		if (testResult == 0){
    16d8:	81 11       	cpse	r24, r1
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    16dc:	84 e1       	ldi	r24, 0x14	; 20
    16de:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    16e4:	48 2f       	mov	r20, r24
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	85 e0       	ldi	r24, 0x05	; 5
    16ec:	14 d5       	rcall	.+2600   	; 0x2116 <log_putError>
			POWER_OFF
    16ee:	85 b1       	in	r24, 0x05	; 5
    16f0:	8f 7b       	andi	r24, 0xBF	; 191
    16f2:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    16f4:	80 e8       	ldi	r24, 0x80	; 128
    16f6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <swTimer+0x2>
    1700:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <swTimer+0x2>
    1708:	08 95       	ret

0000170a <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	ef 93       	push	r30
    173a:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    173c:	85 b1       	in	r24, 0x05	; 5
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1742:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <msecCtr>
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <msecCtr>
    174c:	83 70       	andi	r24, 0x03	; 3
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	09 f4       	brne	.+2      	; 0x1754 <__vector_21+0x4a>
    1752:	58 c1       	rjmp	.+688    	; 0x1a04 <__vector_21+0x2fa>
    1754:	38 f0       	brcs	.+14     	; 0x1764 <__vector_21+0x5a>
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	09 f4       	brne	.+2      	; 0x175c <__vector_21+0x52>
    175a:	a5 c1       	rjmp	.+842    	; 0x1aa6 <__vector_21+0x39c>
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	09 f4       	brne	.+2      	; 0x1762 <__vector_21+0x58>
    1760:	c9 c1       	rjmp	.+914    	; 0x1af4 <__vector_21+0x3ea>
    1762:	01 c2       	rjmp	.+1026   	; 0x1b66 <__vector_21+0x45c>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1764:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    1768:	81 11       	cpse	r24, r1
    176a:	1a c1       	rjmp	.+564    	; 0x19a0 <__vector_21+0x296>
    176c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1770:	96 fd       	sbrc	r25, 6
    1772:	16 c1       	rjmp	.+556    	; 0x19a0 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	f9 01       	movw	r30, r18
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	e2 0f       	add	r30, r18
    1780:	f3 1f       	adc	r31, r19
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	e9 5b       	subi	r30, 0xB9	; 185
    1788:	fc 4f       	sbci	r31, 0xFC	; 252
    178a:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    178c:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1790:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1792:	49 17       	cp	r20, r25
    1794:	10 f4       	brcc	.+4      	; 0x179a <__vector_21+0x90>
		return data1-data2;
    1796:	94 1b       	sub	r25, r20
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <__vector_21+0x96>
	} else {
		return data2-data1;
    179a:	54 2f       	mov	r21, r20
    179c:	59 1b       	sub	r21, r25
    179e:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    17a0:	94 30       	cpi	r25, 0x04	; 4
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <__vector_21+0x9c>
    17a4:	fd c0       	rjmp	.+506    	; 0x19a0 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    17a6:	81 11       	cpse	r24, r1
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    17aa:	42 32       	cpi	r20, 0x22	; 34
    17ac:	70 f0       	brcs	.+28     	; 0x17ca <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    17ae:	4f 33       	cpi	r20, 0x3F	; 63
    17b0:	70 f0       	brcs	.+28     	; 0x17ce <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    17b2:	48 36       	cpi	r20, 0x68	; 104
    17b4:	70 f0       	brcs	.+28     	; 0x17d2 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    17b6:	46 39       	cpi	r20, 0x96	; 150
    17b8:	70 f0       	brcs	.+28     	; 0x17d6 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    17ba:	4f 3b       	cpi	r20, 0xBF	; 191
    17bc:	70 f0       	brcs	.+28     	; 0x17da <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    17be:	48 3e       	cpi	r20, 0xE8	; 232
    17c0:	70 f4       	brcc	.+28     	; 0x17de <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    17c2:	c6 e0       	ldi	r28, 0x06	; 6
    17c4:	0d c0       	rjmp	.+26     	; 0x17e0 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    17c6:	cf ef       	ldi	r28, 0xFF	; 255
    17c8:	0b c0       	rjmp	.+22     	; 0x17e0 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    17ca:	c4 e0       	ldi	r28, 0x04	; 4
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    17ce:	c3 e0       	ldi	r28, 0x03	; 3
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    17d2:	c5 e0       	ldi	r28, 0x05	; 5
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    17d6:	c1 e0       	ldi	r28, 0x01	; 1
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    17da:	c2 e0       	ldi	r28, 0x02	; 2
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    17de:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    17e0:	f9 01       	movw	r30, r18
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	e2 0f       	add	r30, r18
    17e8:	f3 1f       	adc	r31, r19
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	e9 5b       	subi	r30, 0xB9	; 185
    17f0:	fc 4f       	sbci	r31, 0xFC	; 252
    17f2:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    17f4:	dc 17       	cp	r29, r28
    17f6:	09 f4       	brne	.+2      	; 0x17fa <__vector_21+0xf0>
    17f8:	48 c0       	rjmp	.+144    	; 0x188a <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    17fa:	df 3f       	cpi	r29, 0xFF	; 255
    17fc:	19 f0       	breq	.+6      	; 0x1804 <__vector_21+0xfa>
    17fe:	cf 3f       	cpi	r28, 0xFF	; 255
    1800:	09 f0       	breq	.+2      	; 0x1804 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1802:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1804:	f9 01       	movw	r30, r18
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	e2 0f       	add	r30, r18
    180c:	f3 1f       	adc	r31, r19
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	e9 5b       	subi	r30, 0xB9	; 185
    1814:	fc 4f       	sbci	r31, 0xFC	; 252
    1816:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1818:	df 3f       	cpi	r29, 0xFF	; 255
    181a:	f9 f4       	brne	.+62     	; 0x185a <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    181c:	c9 01       	movw	r24, r18
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	e9 5b       	subi	r30, 0xB9	; 185
    182e:	fc 4f       	sbci	r31, 0xFC	; 252
    1830:	15 82       	std	Z+5, r1	; 0x05
    1832:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1834:	fc 01       	movw	r30, r24
    1836:	e2 0f       	add	r30, r18
    1838:	f3 1f       	adc	r31, r19
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	e9 5b       	subi	r30, 0xB9	; 185
    1840:	fc 4f       	sbci	r31, 0xFC	; 252
    1842:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1844:	ec 2f       	mov	r30, r28
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	e2 5b       	subi	r30, 0xB2	; 178
    184a:	fc 4f       	sbci	r31, 0xFC	; 252
    184c:	80 81       	ld	r24, Z
    184e:	80 ff       	sbrs	r24, 0
    1850:	a7 c0       	rjmp	.+334    	; 0x19a0 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1852:	8c 2f       	mov	r24, r28
    1854:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <message_push>
    1858:	a3 c0       	rjmp	.+326    	; 0x19a0 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    185a:	ed 2f       	mov	r30, r29
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	e2 5b       	subi	r30, 0xB2	; 178
    1860:	fc 4f       	sbci	r31, 0xFC	; 252
    1862:	80 81       	ld	r24, Z
    1864:	81 ff       	sbrs	r24, 1
    1866:	9c c0       	rjmp	.+312    	; 0x19a0 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1868:	f9 01       	movw	r30, r18
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	e9 5b       	subi	r30, 0xB9	; 185
    1878:	fc 4f       	sbci	r31, 0xFC	; 252
    187a:	83 81       	ldd	r24, Z+3	; 0x03
    187c:	83 70       	andi	r24, 0x03	; 3
    187e:	09 f0       	breq	.+2      	; 0x1882 <__vector_21+0x178>
    1880:	8f c0       	rjmp	.+286    	; 0x19a0 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1882:	8d 2f       	mov	r24, r29
    1884:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <message_push>
    1888:	8b c0       	rjmp	.+278    	; 0x19a0 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    188a:	cf 3f       	cpi	r28, 0xFF	; 255
    188c:	09 f4       	brne	.+2      	; 0x1890 <__vector_21+0x186>
    188e:	88 c0       	rjmp	.+272    	; 0x19a0 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1890:	f9 01       	movw	r30, r18
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	df 01       	movw	r26, r30
    1898:	a2 0f       	add	r26, r18
    189a:	b3 1f       	adc	r27, r19
    189c:	aa 0f       	add	r26, r26
    189e:	bb 1f       	adc	r27, r27
    18a0:	a9 5b       	subi	r26, 0xB9	; 185
    18a2:	bc 4f       	sbci	r27, 0xFC	; 252
    18a4:	14 96       	adiw	r26, 0x04	; 4
    18a6:	8d 91       	ld	r24, X+
    18a8:	9c 91       	ld	r25, X
    18aa:	15 97       	sbiw	r26, 0x05	; 5
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	15 96       	adiw	r26, 0x05	; 5
    18b0:	9c 93       	st	X, r25
    18b2:	8e 93       	st	-X, r24
    18b4:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    18b6:	fd 01       	movw	r30, r26
    18b8:	84 81       	ldd	r24, Z+4	; 0x04
    18ba:	95 81       	ldd	r25, Z+5	; 0x05
    18bc:	8d 35       	cpi	r24, 0x5D	; 93
    18be:	91 05       	cpc	r25, r1
    18c0:	a9 f4       	brne	.+42     	; 0x18ec <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    18c2:	ed 2f       	mov	r30, r29
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	e2 5b       	subi	r30, 0xB2	; 178
    18c8:	fc 4f       	sbci	r31, 0xFC	; 252
    18ca:	80 81       	ld	r24, Z
    18cc:	82 ff       	sbrs	r24, 2
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    18d0:	8c 2f       	mov	r24, r28
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    18d8:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <adcNr>
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	e8 9f       	mul	r30, r24
    18e0:	f0 01       	movw	r30, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	e9 5b       	subi	r30, 0xB9	; 185
    18e6:	fc 4f       	sbci	r31, 0xFC	; 252
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    18ec:	ed 2f       	mov	r30, r29
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	e2 5b       	subi	r30, 0xB2	; 178
    18f2:	fc 4f       	sbci	r31, 0xFC	; 252
    18f4:	80 81       	ld	r24, Z
    18f6:	83 ff       	sbrs	r24, 3
    18f8:	53 c0       	rjmp	.+166    	; 0x19a0 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    18fa:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	e8 0f       	add	r30, r24
    1908:	f9 1f       	adc	r31, r25
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	e9 5b       	subi	r30, 0xB9	; 185
    1910:	fc 4f       	sbci	r31, 0xFC	; 252
    1912:	23 81       	ldd	r18, Z+3	; 0x03
    1914:	21 11       	cpse	r18, r1
    1916:	1e c0       	rjmp	.+60     	; 0x1954 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    1918:	fc 01       	movw	r30, r24
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e8 0f       	add	r30, r24
    1920:	f9 1f       	adc	r31, r25
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	e9 5b       	subi	r30, 0xB9	; 185
    1928:	fc 4f       	sbci	r31, 0xFC	; 252
    192a:	24 81       	ldd	r18, Z+4	; 0x04
    192c:	35 81       	ldd	r19, Z+5	; 0x05
    192e:	2b 34       	cpi	r18, 0x4B	; 75
    1930:	31 05       	cpc	r19, r1
    1932:	b1 f5       	brne	.+108    	; 0x19a0 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    1934:	26 e0       	ldi	r18, 0x06	; 6
    1936:	28 9f       	mul	r18, r24
    1938:	f0 01       	movw	r30, r0
    193a:	29 9f       	mul	r18, r25
    193c:	f0 0d       	add	r31, r0
    193e:	11 24       	eor	r1, r1
    1940:	e9 5b       	subi	r30, 0xB9	; 185
    1942:	fc 4f       	sbci	r31, 0xFC	; 252
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    1948:	15 82       	std	Z+5, r1	; 0x05
    194a:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    194c:	8c 2f       	mov	r24, r28
    194e:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <message_push>
    1952:	26 c0       	rjmp	.+76     	; 0x19a0 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    1954:	fc 01       	movw	r30, r24
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	e9 5b       	subi	r30, 0xB9	; 185
    1964:	fc 4f       	sbci	r31, 0xFC	; 252
    1966:	23 81       	ldd	r18, Z+3	; 0x03
    1968:	21 30       	cpi	r18, 0x01	; 1
    196a:	d1 f4       	brne	.+52     	; 0x19a0 <__vector_21+0x296>
    196c:	26 e0       	ldi	r18, 0x06	; 6
    196e:	28 9f       	mul	r18, r24
    1970:	f0 01       	movw	r30, r0
    1972:	29 9f       	mul	r18, r25
    1974:	f0 0d       	add	r31, r0
    1976:	11 24       	eor	r1, r1
    1978:	e9 5b       	subi	r30, 0xB9	; 185
    197a:	fc 4f       	sbci	r31, 0xFC	; 252
    197c:	24 81       	ldd	r18, Z+4	; 0x04
    197e:	35 81       	ldd	r19, Z+5	; 0x05
    1980:	2c 30       	cpi	r18, 0x0C	; 12
    1982:	31 05       	cpc	r19, r1
    1984:	69 f4       	brne	.+26     	; 0x19a0 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    1986:	26 e0       	ldi	r18, 0x06	; 6
    1988:	28 9f       	mul	r18, r24
    198a:	f0 01       	movw	r30, r0
    198c:	29 9f       	mul	r18, r25
    198e:	f0 0d       	add	r31, r0
    1990:	11 24       	eor	r1, r1
    1992:	e9 5b       	subi	r30, 0xB9	; 185
    1994:	fc 4f       	sbci	r31, 0xFC	; 252
    1996:	15 82       	std	Z+5, r1	; 0x05
    1998:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    199a:	8c 2f       	mov	r24, r28
    199c:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    19a0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcNr>
    19aa:	84 30       	cpi	r24, 0x04	; 4
    19ac:	10 f0       	brcs	.+4      	; 0x19b2 <__vector_21+0x2a8>
		adcNr = 0;
    19ae:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    19b2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    19b6:	81 11       	cpse	r24, r1
    19b8:	0c c0       	rjmp	.+24     	; 0x19d2 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	fc 01       	movw	r30, r24
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	e8 0f       	add	r30, r24
    19c4:	f9 1f       	adc	r31, r25
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	e9 5b       	subi	r30, 0xB9	; 185
    19cc:	fc 4f       	sbci	r31, 0xFC	; 252
    19ce:	80 81       	ld	r24, Z
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    19d2:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    19d4:	98 2f       	mov	r25, r24
    19d6:	9f 71       	andi	r25, 0x1F	; 31
    19d8:	90 66       	ori	r25, 0x60	; 96
    19da:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    19de:	eb e7       	ldi	r30, 0x7B	; 123
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	20 81       	ld	r18, Z
    19e4:	80 72       	andi	r24, 0x20	; 32
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	95 95       	asr	r25
    19ea:	87 95       	ror	r24
    19ec:	95 95       	asr	r25
    19ee:	87 95       	ror	r24
    19f0:	92 2f       	mov	r25, r18
    19f2:	9f 7d       	andi	r25, 0xDF	; 223
    19f4:	89 2b       	or	r24, r25
    19f6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    19f8:	ea e7       	ldi	r30, 0x7A	; 122
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 64       	ori	r24, 0x40	; 64
    1a00:	80 83       	st	Z, r24
    1a02:	b1 c0       	rjmp	.+354    	; 0x1b66 <__vector_21+0x45c>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    1a04:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1a08:	80 38       	cpi	r24, 0x80	; 128
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__vector_21+0x304>
    1a0c:	ac c0       	rjmp	.+344    	; 0x1b66 <__vector_21+0x45c>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    1a0e:	84 b3       	in	r24, 0x14	; 20
    1a10:	87 60       	ori	r24, 0x07	; 7
    1a12:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    1a14:	84 b3       	in	r24, 0x14	; 20
    1a16:	8b 7f       	andi	r24, 0xFB	; 251
    1a18:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
    1a1a:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    1a1e:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a20:	e2 e0       	ldi	r30, 0x02	; 2
    1a22:	ea 95       	dec	r30
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <__vector_21+0x318>
    1a26:	00 c0       	rjmp	.+0      	; 0x1a28 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    1a28:	84 b3       	in	r24, 0x14	; 20
    1a2a:	84 60       	ori	r24, 0x04	; 4
    1a2c:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    1a2e:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    1a30:	ef e3       	ldi	r30, 0x3F	; 63
    1a32:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    1a34:	83 81       	ldd	r24, Z+3	; 0x03
    1a36:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    1a38:	84 81       	ldd	r24, Z+4	; 0x04
    1a3a:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    1a3c:	84 b3       	in	r24, 0x14	; 20
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    1a42:	81 81       	ldd	r24, Z+1	; 0x01
    1a44:	82 2b       	or	r24, r18
    1a46:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    1a48:	85 81       	ldd	r24, Z+5	; 0x05
    1a4a:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    1a4c:	86 81       	ldd	r24, Z+6	; 0x06
    1a4e:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    1a50:	80 b1       	in	r24, 0x00	; 0
    1a52:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    1a54:	84 b3       	in	r24, 0x14	; 20
    1a56:	8e 7f       	andi	r24, 0xFE	; 254
    1a58:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    1a5a:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	51 f7       	brne	.-44     	; 0x1a34 <__vector_21+0x32a>
	asm("nop");
    1a60:	00 00       	nop
	asm("nop");
    1a62:	00 00       	nop
	PIPE_CLOCK_H
    1a64:	84 b3       	in	r24, 0x14	; 20
    1a66:	81 60       	ori	r24, 0x01	; 1
    1a68:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    1a6a:	84 b3       	in	r24, 0x14	; 20
    1a6c:	8d 7f       	andi	r24, 0xFD	; 253
    1a6e:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    1a70:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1a74:	82 60       	ori	r24, 0x02	; 2
    1a76:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    1a7a:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    1a7c:	8b b1       	in	r24, 0x0b	; 11
    1a7e:	80 68       	ori	r24, 0x80	; 128
    1a80:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    1a82:	84 b3       	in	r24, 0x14	; 20
    1a84:	82 60       	ori	r24, 0x02	; 2
    1a86:	84 bb       	out	0x14, r24	; 20
    1a88:	6e c0       	rjmp	.+220    	; 0x1b66 <__vector_21+0x45c>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 50       	subi	r24, 0x01	; 1
    1a8e:	8e 3f       	cpi	r24, 0xFE	; 254
    1a90:	38 f4       	brcc	.+14     	; 0x1aa0 <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1a92:	21 81       	ldd	r18, Z+1	; 0x01
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1a96:	25 30       	cpi	r18, 0x05	; 5
    1a98:	10 f0       	brcs	.+4      	; 0x1a9e <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1a9a:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1a9e:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    1aa0:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    1aa2:	9f 5f       	subi	r25, 0xFF	; 255
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <__vector_21+0x3a2>
    1aa6:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    1aa8:	ed e2       	ldi	r30, 0x2D	; 45
    1aaa:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    1aac:	99 30       	cpi	r25, 0x09	; 9
    1aae:	68 f3       	brcs	.-38     	; 0x1a8a <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    1ab0:	ef e3       	ldi	r30, 0x3F	; 63
    1ab2:	f2 e0       	ldi	r31, 0x02	; 2
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	80 83       	st	Z, r24
    1aba:	8a 3f       	cpi	r24, 0xFA	; 250
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_21+0x3b6>
    1abe:	53 c0       	rjmp	.+166    	; 0x1b66 <__vector_21+0x45c>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    1ac6:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    1ac8:	81 81       	ldd	r24, Z+1	; 0x01
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	81 83       	std	Z+1, r24	; 0x01
    1ace:	8c 33       	cpi	r24, 0x3C	; 60
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <__vector_21+0x3ca>
    1ad2:	49 c0       	rjmp	.+146    	; 0x1b66 <__vector_21+0x45c>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    1ad4:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	82 83       	std	Z+2, r24	; 0x02
    1adc:	8c 33       	cpi	r24, 0x3C	; 60
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <__vector_21+0x3d8>
    1ae0:	42 c0       	rjmp	.+132    	; 0x1b66 <__vector_21+0x45c>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    1ae2:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	83 83       	std	Z+3, r24	; 0x03
    1aea:	84 36       	cpi	r24, 0x64	; 100
    1aec:	e0 f1       	brcs	.+120    	; 0x1b66 <__vector_21+0x45c>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    1aee:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <time_Uptime+0x3>
    1af2:	39 c0       	rjmp	.+114    	; 0x1b66 <__vector_21+0x45c>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    1af4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1af8:	80 38       	cpi	r24, 0x80	; 128
    1afa:	a9 f1       	breq	.+106    	; 0x1b66 <__vector_21+0x45c>
//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
    1afc:	e0 90 4e 03 	lds	r14, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1b00:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    1b02:	07 e4       	ldi	r16, 0x47	; 71
    1b04:	12 e0       	ldi	r17, 0x02	; 2
    1b06:	2c c0       	rjmp	.+88     	; 0x1b60 <__vector_21+0x456>
// 			| (curPipe->pipeInM12) | (curPipe->pipeInM16) ; // 1 if key pressed at least onece in last 16m, 0 if key was never pressed
		// new V 0.56
		uint8_t newOnState = 0xFF;
		uint8_t newOffState = 0;
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    1b08:	f8 01       	movw	r30, r16
    1b0a:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    1b0c:	83 81       	ldd	r24, Z+3	; 0x03
    1b0e:	9c 2f       	mov	r25, r28
    1b10:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    1b12:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    1b14:	84 81       	ldd	r24, Z+4	; 0x04
    1b16:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    1b18:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    1b1a:	25 81       	ldd	r18, Z+5	; 0x05
    1b1c:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    1b1e:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    1b20:	86 81       	ldd	r24, Z+6	; 0x06
    1b22:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    1b24:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    1b26:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1
    1b28:	cd 23       	and	r28, r29
    1b2a:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    1b2c:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    1b2e:	8d 2f       	mov	r24, r29
    1b30:	80 95       	com	r24
    1b32:	8c 23       	and	r24, r28
    1b34:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    1b36:	21 f0       	breq	.+8      	; 0x1b40 <__vector_21+0x436>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1b38:	9f 2d       	mov	r25, r15
    1b3a:	90 62       	ori	r25, 0x20	; 32
    1b3c:	0e 94 14 22 	call	0x4428	; 0x4428 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    1b40:	c0 95       	com	r28
    1b42:	cd 23       	and	r28, r29
    1b44:	8c 2f       	mov	r24, r28
    1b46:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <__vector_21+0x446>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1b4a:	9f 2d       	mov	r25, r15
    1b4c:	0e 94 14 22 	call	0x4428	; 0x4428 <pipeMsgPush>
		}
		//curPipe->pipeInStat = newPipeStat;
		curPipe++;
    1b50:	08 5f       	subi	r16, 0xF8	; 248
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    1b54:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1b5e:	f3 94       	inc	r15
    1b60:	ff e1       	ldi	r31, 0x1F	; 31
    1b62:	ff 15       	cp	r31, r15
    1b64:	88 f6       	brcc	.-94     	; 0x1b08 <__vector_21+0x3fe>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    1b66:	85 b1       	in	r24, 0x05	; 5
    1b68:	8f 77       	andi	r24, 0x7F	; 127
    1b6a:	85 b9       	out	0x05, r24	; 5

}
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	0f 90       	pop	r0
    1b92:	0b be       	out	0x3b, r0	; 59
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    1ba2:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    1ba4:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    1ba6:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    1ba8:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    1baa:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    1bac:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    1bae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    1bb2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    1bb6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    1bba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    1bbe:	8a b1       	in	r24, 0x0a	; 10
    1bc0:	80 68       	ori	r24, 0x80	; 128
    1bc2:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    1bc4:	8b b1       	in	r24, 0x0b	; 11
    1bc6:	8f 77       	andi	r24, 0x7F	; 127
    1bc8:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    1bca:	84 b1       	in	r24, 0x04	; 4
    1bcc:	80 64       	ori	r24, 0x40	; 64
    1bce:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    1bd0:	85 b1       	in	r24, 0x05	; 5
    1bd2:	8f 7b       	andi	r24, 0xBF	; 191
    1bd4:	85 b9       	out	0x05, r24	; 5
    1bd6:	08 95       	ret

00001bd8 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    1bd8:	88 23       	and	r24, r24
    1bda:	34 f4       	brge	.+12     	; 0x1be8 <lcd_write_nibble+0x10>
    1bdc:	e2 e0       	ldi	r30, 0x02	; 2
    1bde:	f1 e0       	ldi	r31, 0x01	; 1
    1be0:	90 81       	ld	r25, Z
    1be2:	90 61       	ori	r25, 0x10	; 16
    1be4:	90 83       	st	Z, r25
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <lcd_write_nibble+0x1a>
    1be8:	e2 e0       	ldi	r30, 0x02	; 2
    1bea:	f1 e0       	ldi	r31, 0x01	; 1
    1bec:	90 81       	ld	r25, Z
    1bee:	9f 7e       	andi	r25, 0xEF	; 239
    1bf0:	90 83       	st	Z, r25
    1bf2:	86 ff       	sbrs	r24, 6
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <lcd_write_nibble+0x2a>
    1bf6:	e2 e0       	ldi	r30, 0x02	; 2
    1bf8:	f1 e0       	ldi	r31, 0x01	; 1
    1bfa:	90 81       	ld	r25, Z
    1bfc:	98 60       	ori	r25, 0x08	; 8
    1bfe:	90 83       	st	Z, r25
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <lcd_write_nibble+0x34>
    1c02:	e2 e0       	ldi	r30, 0x02	; 2
    1c04:	f1 e0       	ldi	r31, 0x01	; 1
    1c06:	90 81       	ld	r25, Z
    1c08:	97 7f       	andi	r25, 0xF7	; 247
    1c0a:	90 83       	st	Z, r25
    1c0c:	85 ff       	sbrs	r24, 5
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <lcd_write_nibble+0x40>
    1c10:	9e b1       	in	r25, 0x0e	; 14
    1c12:	98 60       	ori	r25, 0x08	; 8
    1c14:	9e b9       	out	0x0e, r25	; 14
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <lcd_write_nibble+0x46>
    1c18:	9e b1       	in	r25, 0x0e	; 14
    1c1a:	97 7f       	andi	r25, 0xF7	; 247
    1c1c:	9e b9       	out	0x0e, r25	; 14
    1c1e:	84 ff       	sbrs	r24, 4
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <lcd_write_nibble+0x52>
    1c22:	84 b3       	in	r24, 0x14	; 20
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	84 bb       	out	0x14, r24	; 20
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <lcd_write_nibble+0x58>
    1c2a:	84 b3       	in	r24, 0x14	; 20
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	84 bb       	out	0x14, r24	; 20
    1c30:	e2 e0       	ldi	r30, 0x02	; 2
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	80 81       	ld	r24, Z
    1c36:	80 64       	ori	r24, 0x40	; 64
    1c38:	80 83       	st	Z, r24
    1c3a:	85 e0       	ldi	r24, 0x05	; 5
    1c3c:	8a 95       	dec	r24
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <lcd_write_nibble+0x64>
    1c40:	00 00       	nop
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7b       	andi	r24, 0xBF	; 191
    1c46:	80 83       	st	Z, r24
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	8a 95       	dec	r24
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <lcd_write_nibble+0x72>
    1c4e:	00 00       	nop
    1c50:	08 95       	ret

00001c52 <lcd_write_character>:
    1c52:	cf 93       	push	r28
    1c54:	c8 2f       	mov	r28, r24
    1c56:	e2 e0       	ldi	r30, 0x02	; 2
    1c58:	f1 e0       	ldi	r31, 0x01	; 1
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	80 83       	st	Z, r24
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7b       	andi	r24, 0xBF	; 191
    1c64:	80 83       	st	Z, r24
    1c66:	8c 2f       	mov	r24, r28
    1c68:	b7 df       	rcall	.-146    	; 0x1bd8 <lcd_write_nibble>
    1c6a:	8c 2f       	mov	r24, r28
    1c6c:	82 95       	swap	r24
    1c6e:	80 7f       	andi	r24, 0xF0	; 240
    1c70:	b3 df       	rcall	.-154    	; 0x1bd8 <lcd_write_nibble>
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <lcd_write_character+0x24>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <lcd_write_character+0x2a>
    1c7c:	00 00       	nop
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <lcd_write_command>:
    1c82:	cf 93       	push	r28
    1c84:	c8 2f       	mov	r28, r24
    1c86:	e2 e0       	ldi	r30, 0x02	; 2
    1c88:	f1 e0       	ldi	r31, 0x01	; 1
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8f 7d       	andi	r24, 0xDF	; 223
    1c8e:	80 83       	st	Z, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7b       	andi	r24, 0xBF	; 191
    1c94:	80 83       	st	Z, r24
    1c96:	8c 2f       	mov	r24, r28
    1c98:	9f df       	rcall	.-194    	; 0x1bd8 <lcd_write_nibble>
    1c9a:	8c 2f       	mov	r24, r28
    1c9c:	82 95       	swap	r24
    1c9e:	80 7f       	andi	r24, 0xF0	; 240
    1ca0:	9b df       	rcall	.-202    	; 0x1bd8 <lcd_write_nibble>
    1ca2:	c1 50       	subi	r28, 0x01	; 1
    1ca4:	c2 30       	cpi	r28, 0x02	; 2
    1ca6:	38 f4       	brcc	.+14     	; 0x1cb6 <lcd_write_command+0x34>
    1ca8:	8f e0       	ldi	r24, 0x0F	; 15
    1caa:	97 e2       	ldi	r25, 0x27	; 39
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <lcd_write_command+0x2a>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <lcd_write_command+0x30>
    1cb2:	00 00       	nop
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <lcd_write_command+0x40>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <lcd_write_command+0x38>
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <lcd_write_command+0x3e>
    1cc0:	00 00       	nop
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <lcd_init>:
    1cc6:	e1 e0       	ldi	r30, 0x01	; 1
    1cc8:	f1 e0       	ldi	r31, 0x01	; 1
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 61       	ori	r24, 0x10	; 16
    1cce:	80 83       	st	Z, r24
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 60       	ori	r24, 0x08	; 8
    1cd4:	80 83       	st	Z, r24
    1cd6:	8d b1       	in	r24, 0x0d	; 13
    1cd8:	88 60       	ori	r24, 0x08	; 8
    1cda:	8d b9       	out	0x0d, r24	; 13
    1cdc:	83 b3       	in	r24, 0x13	; 19
    1cde:	80 62       	ori	r24, 0x20	; 32
    1ce0:	83 bb       	out	0x13, r24	; 19
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 64       	ori	r24, 0x40	; 64
    1ce6:	80 83       	st	Z, r24
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 62       	ori	r24, 0x20	; 32
    1cec:	80 83       	st	Z, r24
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	81 ee       	ldi	r24, 0xE1	; 225
    1cf2:	94 e0       	ldi	r25, 0x04	; 4
    1cf4:	21 50       	subi	r18, 0x01	; 1
    1cf6:	80 40       	sbci	r24, 0x00	; 0
    1cf8:	90 40       	sbci	r25, 0x00	; 0
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <lcd_init+0x2e>
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <lcd_init+0x38>
    1cfe:	00 00       	nop
    1d00:	e2 e0       	ldi	r30, 0x02	; 2
    1d02:	f1 e0       	ldi	r31, 0x01	; 1
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 7d       	andi	r24, 0xDF	; 223
    1d08:	80 83       	st	Z, r24
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 7b       	andi	r24, 0xBF	; 191
    1d0e:	80 83       	st	Z, r24
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	62 df       	rcall	.-316    	; 0x1bd8 <lcd_write_nibble>
    1d14:	8f e1       	ldi	r24, 0x1F	; 31
    1d16:	9e e4       	ldi	r25, 0x4E	; 78
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <lcd_init+0x52>
    1d1c:	00 c0       	rjmp	.+0      	; 0x1d1e <lcd_init+0x58>
    1d1e:	00 00       	nop
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	5a df       	rcall	.-332    	; 0x1bd8 <lcd_write_nibble>
    1d24:	8f e1       	ldi	r24, 0x1F	; 31
    1d26:	9e e4       	ldi	r25, 0x4E	; 78
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <lcd_init+0x62>
    1d2c:	00 c0       	rjmp	.+0      	; 0x1d2e <lcd_init+0x68>
    1d2e:	00 00       	nop
    1d30:	80 e3       	ldi	r24, 0x30	; 48
    1d32:	52 df       	rcall	.-348    	; 0x1bd8 <lcd_write_nibble>
    1d34:	8f e1       	ldi	r24, 0x1F	; 31
    1d36:	9e e4       	ldi	r25, 0x4E	; 78
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <lcd_init+0x72>
    1d3c:	00 c0       	rjmp	.+0      	; 0x1d3e <lcd_init+0x78>
    1d3e:	00 00       	nop
    1d40:	88 e2       	ldi	r24, 0x28	; 40
    1d42:	4a df       	rcall	.-364    	; 0x1bd8 <lcd_write_nibble>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <lcd_init+0x82>
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <lcd_init+0x88>
    1d4e:	00 00       	nop
    1d50:	88 e2       	ldi	r24, 0x28	; 40
    1d52:	97 df       	rcall	.-210    	; 0x1c82 <lcd_write_command>
    1d54:	88 e0       	ldi	r24, 0x08	; 8
    1d56:	95 df       	rcall	.-214    	; 0x1c82 <lcd_write_command>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	93 df       	rcall	.-218    	; 0x1c82 <lcd_write_command>
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	91 df       	rcall	.-222    	; 0x1c82 <lcd_write_command>
    1d60:	8c e0       	ldi	r24, 0x0C	; 12
    1d62:	8f cf       	rjmp	.-226    	; 0x1c82 <lcd_write_command>
    1d64:	08 95       	ret

00001d66 <lcd_goto>:
    1d66:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <lcd_cursorPos>
    1d6a:	80 58       	subi	r24, 0x80	; 128
    1d6c:	8a cf       	rjmp	.-236    	; 0x1c82 <lcd_write_command>
    1d6e:	08 95       	ret

00001d70 <lcd_clrscr>:
    1d70:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <lcd_cursorPos>
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	85 cf       	rjmp	.-246    	; 0x1c82 <lcd_write_command>
    1d78:	08 95       	ret

00001d7a <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
	lcd_cursorPos =  (lcd_cursorPos+1) &0x3F;
    1d7a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <lcd_cursorPos>
    1d7e:	9f 5f       	subi	r25, 0xFF	; 255
    1d80:	9f 73       	andi	r25, 0x3F	; 63
    1d82:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <lcd_cursorPos>
	lcd_write_character(c);
    1d86:	65 cf       	rjmp	.-310    	; 0x1c52 <lcd_write_character>
    1d88:	08 95       	ret

00001d8a <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	fc 01       	movw	r30, r24
	if (s != NULL){
    1d90:	89 2b       	or	r24, r25
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <lcd_puts+0x10>
    1d94:	07 c0       	rjmp	.+14     	; 0x1da4 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    1d96:	f1 df       	rcall	.-30     	; 0x1d7a <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ef 01       	movw	r28, r30
    1d9c:	21 96       	adiw	r28, 0x01	; 1
    1d9e:	80 81       	ld	r24, Z
    1da0:	81 11       	cpse	r24, r1
    1da2:	f9 cf       	rjmp	.-14     	; 0x1d96 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    1db0:	89 2b       	or	r24, r25
    1db2:	19 f4       	brne	.+6      	; 0x1dba <lcd_puts_P+0x10>
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    1db6:	e1 df       	rcall	.-62     	; 0x1d7a <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    1db8:	fe 01       	movw	r30, r28
    1dba:	ef 01       	movw	r28, r30
    1dbc:	21 96       	adiw	r28, 0x01	; 1
    1dbe:	84 91       	lpm	r24, Z
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	f9 cf       	rjmp	.-14     	; 0x1db6 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    1dca:	80 e8       	ldi	r24, 0x80	; 128
    1dcc:	93 e0       	ldi	r25, 0x03	; 3
    1dce:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    1dd2:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    1dd6:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    1dda:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    1dde:	08 95       	ret

00001de0 <log_count>:
    1de0:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    1de4:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    1de8:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <pLogStart>
    1dec:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <pLogStart+0x1>
    1df0:	82 17       	cp	r24, r18
    1df2:	93 07       	cpc	r25, r19
    1df4:	48 f0       	brcs	.+18     	; 0x1e08 <log_count+0x28>
    1df6:	82 1b       	sub	r24, r18
    1df8:	93 0b       	sbc	r25, r19
    1dfa:	95 95       	asr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	9d ec       	ldi	r25, 0xCD	; 205
    1e00:	89 9f       	mul	r24, r25
    1e02:	80 2d       	mov	r24, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	08 95       	ret
    1e08:	80 57       	subi	r24, 0x70	; 112
    1e0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e0c:	82 1b       	sub	r24, r18
    1e0e:	93 0b       	sbc	r25, r19
    1e10:	95 95       	asr	r25
    1e12:	87 95       	ror	r24
    1e14:	9d ec       	ldi	r25, 0xCD	; 205
    1e16:	89 9f       	mul	r24, r25
    1e18:	80 2d       	mov	r24, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	08 95       	ret

00001e1e <log_getLog>:
    1e1e:	cf 93       	push	r28
    1e20:	c8 2f       	mov	r28, r24
    1e22:	de df       	rcall	.-68     	; 0x1de0 <log_count>
    1e24:	c8 17       	cp	r28, r24
    1e26:	f8 f4       	brcc	.+62     	; 0x1e66 <log_getLog+0x48>
    1e28:	40 91 12 05 	lds	r20, 0x0512	; 0x800512 <pLogStart>
    1e2c:	50 91 13 05 	lds	r21, 0x0513	; 0x800513 <pLogStart+0x1>
    1e30:	8c 2f       	mov	r24, r28
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9c 01       	movw	r18, r24
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	28 0f       	add	r18, r24
    1e48:	39 1f       	adc	r19, r25
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	82 0f       	add	r24, r18
    1e4e:	93 1f       	adc	r25, r19
    1e50:	65 e0       	ldi	r22, 0x05	; 5
    1e52:	86 30       	cpi	r24, 0x06	; 6
    1e54:	96 07       	cpc	r25, r22
    1e56:	49 f0       	breq	.+18     	; 0x1e6a <log_getLog+0x4c>
    1e58:	40 f0       	brcs	.+16     	; 0x1e6a <log_getLog+0x4c>
    1e5a:	20 59       	subi	r18, 0x90	; 144
    1e5c:	31 40       	sbci	r19, 0x01	; 1
    1e5e:	ca 01       	movw	r24, r20
    1e60:	82 0f       	add	r24, r18
    1e62:	93 1f       	adc	r25, r19
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <log_getLog+0x4c>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <getErrorText>:
    1e6e:	d7 df       	rcall	.-82     	; 0x1e1e <log_getLog>
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	f1 f1       	breq	.+124    	; 0x1ef0 <getErrorText+0x82>
    1e74:	fc 01       	movw	r30, r24
    1e76:	36 81       	ldd	r19, Z+6	; 0x06
    1e78:	67 81       	ldd	r22, Z+7	; 0x07
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	34 c0       	rjmp	.+104    	; 0x1ee6 <getErrorText+0x78>
    1e7e:	42 2f       	mov	r20, r18
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	fa 01       	movw	r30, r20
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	cf 01       	movw	r24, r30
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	e8 0f       	add	r30, r24
    1e98:	f9 1f       	adc	r31, r25
    1e9a:	ee 5a       	subi	r30, 0xAE	; 174
    1e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9e:	84 91       	lpm	r24, Z
    1ea0:	38 13       	cpse	r19, r24
    1ea2:	20 c0       	rjmp	.+64     	; 0x1ee4 <getErrorText+0x76>
    1ea4:	fa 01       	movw	r30, r20
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	cf 01       	movw	r24, r30
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	e8 0f       	add	r30, r24
    1eba:	f9 1f       	adc	r31, r25
    1ebc:	ed 5a       	subi	r30, 0xAD	; 173
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	84 91       	lpm	r24, Z
    1ec2:	68 13       	cpse	r22, r24
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <getErrorText+0x76>
    1ec6:	44 0f       	add	r20, r20
    1ec8:	55 1f       	adc	r21, r21
    1eca:	ca 01       	movw	r24, r20
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	48 0f       	add	r20, r24
    1eda:	59 1f       	adc	r21, r25
    1edc:	ca 01       	movw	r24, r20
    1ede:	8c 5a       	subi	r24, 0xAC	; 172
    1ee0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee2:	08 95       	ret
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	2f 30       	cpi	r18, 0x0F	; 15
    1ee8:	50 f2       	brcs	.-108    	; 0x1e7e <getErrorText+0x10>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	08 95       	ret
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	08 95       	ret

00001ef6 <logCheckUnreadErrorLogs>:
    1ef6:	cf 93       	push	r28
    1ef8:	73 df       	rcall	.-282    	; 0x1de0 <log_count>
    1efa:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <log_unreadErrors>
    1efe:	81 11       	cpse	r24, r1
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <logCheckUnreadErrorLogs+0x34>
    1f02:	17 c0       	rjmp	.+46     	; 0x1f32 <logCheckUnreadErrorLogs+0x3c>
    1f04:	8c 2f       	mov	r24, r28
    1f06:	8b df       	rcall	.-234    	; 0x1e1e <log_getLog>
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	61 f0       	breq	.+24     	; 0x1f24 <logCheckUnreadErrorLogs+0x2e>
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	24 81       	ldd	r18, Z+4	; 0x04
    1f10:	20 32       	cpi	r18, 0x20	; 32
    1f12:	51 f0       	breq	.+20     	; 0x1f28 <logCheckUnreadErrorLogs+0x32>
    1f14:	95 81       	ldd	r25, Z+5	; 0x05
    1f16:	8c 2f       	mov	r24, r28
    1f18:	95 34       	cpi	r25, 0x45	; 69
    1f1a:	39 f4       	brne	.+14     	; 0x1f2a <logCheckUnreadErrorLogs+0x34>
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <log_unreadErrors>
    1f22:	07 c0       	rjmp	.+14     	; 0x1f32 <logCheckUnreadErrorLogs+0x3c>
    1f24:	8c 2f       	mov	r24, r28
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <logCheckUnreadErrorLogs+0x34>
    1f28:	8c 2f       	mov	r24, r28
    1f2a:	cf ef       	ldi	r28, 0xFF	; 255
    1f2c:	c8 0f       	add	r28, r24
    1f2e:	81 11       	cpse	r24, r1
    1f30:	e9 cf       	rjmp	.-46     	; 0x1f04 <logCheckUnreadErrorLogs+0xe>
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <log_getShortTextFromPtr>:
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <log_getShortTextFromPtr+0xc>
    1f40:	7b c0       	rjmp	.+246    	; 0x2038 <log_getShortTextFromPtr+0x102>
    1f42:	16 2f       	mov	r17, r22
    1f44:	ec 01       	movw	r28, r24
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	88 23       	and	r24, r24
    1f4a:	79 f0       	breq	.+30     	; 0x1f6a <log_getShortTextFromPtr+0x34>
    1f4c:	68 e5       	ldi	r22, 0x58	; 88
    1f4e:	73 e0       	ldi	r23, 0x03	; 3
    1f50:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    1f54:	bc 01       	movw	r22, r24
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	28 e6       	ldi	r18, 0x68	; 104
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	20 83       	st	Z, r18
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    1f66:	dc 01       	movw	r26, r24
    1f68:	2f c0       	rjmp	.+94     	; 0x1fc8 <log_getShortTextFromPtr+0x92>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	88 23       	and	r24, r24
    1f6e:	79 f0       	breq	.+30     	; 0x1f8e <log_getShortTextFromPtr+0x58>
    1f70:	68 e5       	ldi	r22, 0x58	; 88
    1f72:	73 e0       	ldi	r23, 0x03	; 3
    1f74:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    1f78:	bc 01       	movw	r22, r24
    1f7a:	6f 5f       	subi	r22, 0xFF	; 255
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	2d e6       	ldi	r18, 0x6D	; 109
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	1d c0       	rjmp	.+58     	; 0x1fc8 <log_getShortTextFromPtr+0x92>
    1f8e:	68 e5       	ldi	r22, 0x58	; 88
    1f90:	73 e0       	ldi	r23, 0x03	; 3
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    1f98:	fc 01       	movw	r30, r24
    1f9a:	83 e7       	ldi	r24, 0x73	; 115
    1f9c:	80 83       	st	Z, r24
    1f9e:	98 81       	ld	r25, Y
    1fa0:	99 0f       	add	r25, r25
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <log_getShortTextFromPtr+0x74>
    1fa6:	99 51       	subi	r25, 0x19	; 25
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	99 31       	cpi	r25, 0x19	; 25
    1fac:	e0 f7       	brcc	.-8      	; 0x1fa6 <log_getShortTextFromPtr+0x70>
    1fae:	20 5d       	subi	r18, 0xD0	; 208
    1fb0:	21 83       	std	Z+1, r18	; 0x01
    1fb2:	99 0f       	add	r25, r25
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <log_getShortTextFromPtr+0x86>
    1fb8:	95 50       	subi	r25, 0x05	; 5
    1fba:	2f 5f       	subi	r18, 0xFF	; 255
    1fbc:	95 30       	cpi	r25, 0x05	; 5
    1fbe:	e0 f7       	brcc	.-8      	; 0x1fb8 <log_getShortTextFromPtr+0x82>
    1fc0:	df 01       	movw	r26, r30
    1fc2:	13 96       	adiw	r26, 0x03	; 3
    1fc4:	20 5d       	subi	r18, 0xD0	; 208
    1fc6:	22 83       	std	Z+2, r18	; 0x02
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	90 34       	cpi	r25, 0x40	; 64
    1fcc:	51 f0       	breq	.+20     	; 0x1fe2 <log_getShortTextFromPtr+0xac>
    1fce:	90 38       	cpi	r25, 0x80	; 128
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <log_getShortTextFromPtr+0xa2>
    1fd2:	90 32       	cpi	r25, 0x20	; 32
    1fd4:	81 f4       	brne	.+32     	; 0x1ff6 <log_getShortTextFromPtr+0xc0>
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <log_getShortTextFromPtr+0xb6>
    1fd8:	fd 01       	movw	r30, r26
    1fda:	31 96       	adiw	r30, 0x01	; 1
    1fdc:	8a e2       	ldi	r24, 0x2A	; 42
    1fde:	8c 93       	st	X, r24
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <log_getShortTextFromPtr+0xc8>
    1fe2:	fd 01       	movw	r30, r26
    1fe4:	31 96       	adiw	r30, 0x01	; 1
    1fe6:	85 ea       	ldi	r24, 0xA5	; 165
    1fe8:	8c 93       	st	X, r24
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <log_getShortTextFromPtr+0xc8>
    1fec:	fd 01       	movw	r30, r26
    1fee:	31 96       	adiw	r30, 0x01	; 1
    1ff0:	80 e2       	ldi	r24, 0x20	; 32
    1ff2:	8c 93       	st	X, r24
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <log_getShortTextFromPtr+0xc8>
    1ff6:	fd 01       	movw	r30, r26
    1ff8:	31 96       	adiw	r30, 0x01	; 1
    1ffa:	8f e3       	ldi	r24, 0x3F	; 63
    1ffc:	8c 93       	st	X, r24
    1ffe:	bf 01       	movw	r22, r30
    2000:	6f 5f       	subi	r22, 0xFF	; 255
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	80 83       	st	Z, r24
    2008:	8e 81       	ldd	r24, Y+6	; 0x06
    200a:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    200e:	bc 01       	movw	r22, r24
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2016:	bc 01       	movw	r22, r24
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	2d e2       	ldi	r18, 0x2D	; 45
    201e:	fc 01       	movw	r30, r24
    2020:	20 83       	st	Z, r18
    2022:	88 85       	ldd	r24, Y+8	; 0x08
    2024:	99 85       	ldd	r25, Y+9	; 0x09
    2026:	0e 94 05 29 	call	0x520a	; 0x520a <putChar_long>
    202a:	fc 01       	movw	r30, r24
    202c:	10 82       	st	Z, r1
    202e:	1f 3f       	cpi	r17, 0xFF	; 255
    2030:	41 f0       	breq	.+16     	; 0x2042 <log_getShortTextFromPtr+0x10c>
    2032:	1c 83       	std	Y+4, r17	; 0x04
    2034:	60 df       	rcall	.-320    	; 0x1ef6 <logCheckUnreadErrorLogs>
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <log_getShortTextFromPtr+0x10c>
    2038:	e8 e5       	ldi	r30, 0x58	; 88
    203a:	f3 e0       	ldi	r31, 0x03	; 3
    203c:	8d e2       	ldi	r24, 0x2D	; 45
    203e:	80 83       	st	Z, r24
    2040:	11 82       	std	Z+1, r1	; 0x01
    2042:	88 e5       	ldi	r24, 0x58	; 88
    2044:	93 e0       	ldi	r25, 0x03	; 3
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	08 95       	ret

0000204e <log_put>:
    204e:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    2052:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    2056:	af e3       	ldi	r26, 0x3F	; 63
    2058:	b2 e0       	ldi	r27, 0x02	; 2
    205a:	9c 91       	ld	r25, X
    205c:	90 83       	st	Z, r25
    205e:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    2062:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	9c 91       	ld	r25, X
    206a:	11 97       	sbiw	r26, 0x01	; 1
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    2072:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    2076:	12 96       	adiw	r26, 0x02	; 2
    2078:	9c 91       	ld	r25, X
    207a:	12 97       	sbiw	r26, 0x02	; 2
    207c:	92 83       	std	Z+2, r25	; 0x02
    207e:	13 96       	adiw	r26, 0x03	; 3
    2080:	9c 91       	ld	r25, X
    2082:	93 83       	std	Z+3, r25	; 0x03
    2084:	25 83       	std	Z+5, r18	; 0x05
    2086:	86 83       	std	Z+6, r24	; 0x06
    2088:	67 83       	std	Z+7, r22	; 0x07
    208a:	51 87       	std	Z+9, r21	; 0x09
    208c:	40 87       	std	Z+8, r20	; 0x08
    208e:	80 e8       	ldi	r24, 0x80	; 128
    2090:	84 83       	std	Z+4, r24	; 0x04
    2092:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <serusb_Active>
    2096:	8f 3f       	cpi	r24, 0xFF	; 255
    2098:	81 f4       	brne	.+32     	; 0x20ba <log_put+0x6c>
    209a:	8c e4       	ldi	r24, 0x4C	; 76
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    20a8:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    20ac:	44 df       	rcall	.-376    	; 0x1f36 <log_getShortTextFromPtr>
    20ae:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    20b2:	86 eb       	ldi	r24, 0xB6	; 182
    20b4:	9c e0       	ldi	r25, 0x0C	; 12
    20b6:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    20ba:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    20be:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    20c2:	0a 96       	adiw	r24, 0x0a	; 10
    20c4:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    20c8:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    20cc:	86 50       	subi	r24, 0x06	; 6
    20ce:	95 40       	sbci	r25, 0x05	; 5
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <log_put+0x92>
    20d2:	30 f0       	brcs	.+12     	; 0x20e0 <log_put+0x92>
    20d4:	80 e8       	ldi	r24, 0x80	; 128
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    20dc:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    20e0:	20 91 10 05 	lds	r18, 0x0510	; 0x800510 <pLogEnd>
    20e4:	30 91 11 05 	lds	r19, 0x0511	; 0x800511 <pLogEnd+0x1>
    20e8:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <pLogStart>
    20ec:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <pLogStart+0x1>
    20f0:	28 17       	cp	r18, r24
    20f2:	39 07       	cpc	r19, r25
    20f4:	79 f4       	brne	.+30     	; 0x2114 <log_put+0xc6>
    20f6:	0a 96       	adiw	r24, 0x0a	; 10
    20f8:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    20fc:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    2100:	86 50       	subi	r24, 0x06	; 6
    2102:	95 40       	sbci	r25, 0x05	; 5
    2104:	39 f0       	breq	.+14     	; 0x2114 <log_put+0xc6>
    2106:	30 f0       	brcs	.+12     	; 0x2114 <log_put+0xc6>
    2108:	80 e8       	ldi	r24, 0x80	; 128
    210a:	93 e0       	ldi	r25, 0x03	; 3
    210c:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    2110:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    2114:	08 95       	ret

00002116 <log_putError>:
    2116:	25 e4       	ldi	r18, 0x45	; 69
    2118:	9a df       	rcall	.-204    	; 0x204e <log_put>
    211a:	8f ef       	ldi	r24, 0xFF	; 255
    211c:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <log_unreadErrors>
    2120:	08 95       	ret

00002122 <log_putWarning>:
    2122:	27 e5       	ldi	r18, 0x57	; 87
    2124:	94 cf       	rjmp	.-216    	; 0x204e <log_put>
    2126:	08 95       	ret

00002128 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2128:	cf 93       	push	r28
    212a:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    212c:	78 de       	rcall	.-784    	; 0x1e1e <log_getLog>
	if (pLogEntry != NULL){
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	19 f0       	breq	.+6      	; 0x2138 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2132:	6c 2f       	mov	r22, r28
    2134:	00 df       	rcall	.-512    	; 0x1f36 <log_getShortTextFromPtr>
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2138:	e8 e5       	ldi	r30, 0x58	; 88
    213a:	f3 e0       	ldi	r31, 0x03	; 3
    213c:	8d e2       	ldi	r24, 0x2D	; 45
    213e:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2140:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2142:	cf 01       	movw	r24, r30
	}
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2148:	2a dd       	rcall	.-1452   	; 0x1b9e <init_iopins>
	init_log();
    214a:	3f de       	rcall	.-898    	; 0x1dca <init_log>
    214c:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    2150:	0e 94 cd 21 	call	0x439a	; 0x439a <init_message>
	init_message();
	init_HwTimer();
    2154:	df d8       	rcall	.-3650   	; 0x1314 <init_HwTimer>
	init_Timers();
    2156:	c6 d8       	rcall	.-3700   	; 0x12e4 <init_Timers>
    2158:	ec d8       	rcall	.-3624   	; 0x1332 <init_ADC>
	init_ADC();
    215a:	15 d9       	rcall	.-3542   	; 0x1386 <init_Pipe>
	init_Pipe();
    215c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <init_Serial1MIDI>
	init_Serial1MIDI();
    2160:	3a d9       	rcall	.-3468   	; 0x13d6 <init_PipeModules>
	init_PipeModules();
    2162:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <init_Midi2Manual>
	init_Midi2Manual();
    2166:	0e 94 12 23 	call	0x4624	; 0x4624 <init_Manual2Midi>
	init_Manual2Midi();
    216a:	0e 94 55 22 	call	0x44aa	; 0x44aa <init_Midi>
	init_Midi();
    216e:	0e 94 9b 23 	call	0x4736	; 0x4736 <init_Manual2Module>
	init_Manual2Module();
    2172:	0e 94 81 20 	call	0x4102	; 0x4102 <init_SoftKeys>
	init_SoftKeys();
    2176:	6c d8       	rcall	.-3880   	; 0x1250 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2178:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <menu_TestModulePattern>
	INIT_MENU


	// BOOT MESSAGE

	lcd_init ();
    217c:	a4 dd       	rcall	.-1208   	; 0x1cc6 <lcd_init>
	lcd_initCG();
    217e:	0e 94 6e 28 	call	0x50dc	; 0x50dc <lcd_initCG>
	lcd_clrscr ();
    2182:	f6 dd       	rcall	.-1044   	; 0x1d70 <lcd_clrscr>
	lcd_goto(LCD_LINE1+3);
    2184:	83 e4       	ldi	r24, 0x43	; 67
    2186:	ef dd       	rcall	.-1058   	; 0x1d66 <lcd_goto>
	lcd_puts_P(prog_name);
    2188:	82 e7       	ldi	r24, 0x72	; 114
    218a:	92 e0       	ldi	r25, 0x02	; 2
    218c:	0e de       	rcall	.-996    	; 0x1daa <lcd_puts_P>
	lcd_goto(LCD_LINE2+7);
    218e:	8b e1       	ldi	r24, 0x1B	; 27
    2190:	ea dd       	rcall	.-1068   	; 0x1d66 <lcd_goto>
    2192:	88 e7       	ldi	r24, 0x78	; 120
	lcd_puts_P(sw_version);
    2194:	9c e0       	ldi	r25, 0x0C	; 12
    2196:	09 de       	rcall	.-1006   	; 0x1daa <lcd_puts_P>
    2198:	78 94       	sei
    219a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    219c:	87 ea       	ldi	r24, 0xA7	; 167
    219e:	91 e6       	ldi	r25, 0x61	; 97
    21a0:	21 50       	subi	r18, 0x01	; 1
    21a2:	80 40       	sbci	r24, 0x00	; 0
    21a4:	90 40       	sbci	r25, 0x00	; 0
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <main+0x58>
    21a8:	00 c0       	rjmp	.+0      	; 0x21aa <main+0x62>
    21aa:	00 00       	nop
	sei();
	_delay_ms(2000);
	lcd_clrscr ();
    21ac:	e1 dd       	rcall	.-1086   	; 0x1d70 <lcd_clrscr>
    21ae:	57 da       	rcall	.-2898   	; 0x165e <module_StartPowerOn>
	
	// TURN ON POWER
	
	module_StartPowerOn();
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    21b6:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>

	menuNotActive = TRUE;
    21ba:	df ef       	ldi	r29, 0xFF	; 255
    21bc:	0e 94 01 22 	call	0x4402	; 0x4402 <message_status>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    while (1)
    {
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    21c0:	88 23       	and	r24, r24
    21c2:	b9 f1       	breq	.+110    	; 0x2232 <__stack+0x33>
    21c4:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <message_get>
			uint8_t keyMessage = message_get();
    21c8:	c8 2f       	mov	r28, r24
    21ca:	86 38       	cpi	r24, 0x86	; 134
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <main+0x90>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0e 94 87 1c 	call	0x390e	; 0x390e <menu_OnEnterMidiPanic>
				menu_OnEnterMidiPanic(0);
    21d4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <midi_AllManualsOff>
				midi_AllManualsOff();
    21d8:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
			}
			if (menuNotActive == TRUE) {
    21dc:	8f 3f       	cpi	r24, 0xFF	; 255
    21de:	d1 f4       	brne	.+52     	; 0x2214 <__stack+0x15>
    21e0:	8c 2f       	mov	r24, r28
				// --- MESSAGE 
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    21e2:	8f 73       	andi	r24, 0x3F	; 63
    21e4:	c5 30       	cpi	r28, 0x05	; 5
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    21e6:	51 f4       	brne	.+20     	; 0x21fc <main+0xb4>
    21e8:	60 e0       	ldi	r22, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	87 d5       	rcall	.+2830   	; 0x2d00 <menu_Init>
    21f2:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <menu_InitLCD>
					menu_InitLCD(); //display menu
    21f6:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    21fa:	1b c0       	rjmp	.+54     	; 0x2232 <__stack+0x33>
    21fc:	9f ef       	ldi	r25, 0xFF	; 255
    21fe:	98 0f       	add	r25, r24
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2200:	94 30       	cpi	r25, 0x04	; 4
    2202:	b8 f4       	brcc	.+46     	; 0x2232 <__stack+0x33>
    2204:	0e 94 32 21 	call	0x4264	; 0x4264 <softKey_MessageKey_ToSoftKeyNr>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2208:	6c 2f       	mov	r22, r28
    220a:	0e 94 47 21 	call	0x428e	; 0x428e <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    220e:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <__stack+0x33>
    2214:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_TestModulePattern>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2218:	81 11       	cpse	r24, r1
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <__stack+0x29>
    221c:	8c 2f       	mov	r24, r28
    221e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2222:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <__stack+0x33>
    2228:	8d ef       	ldi	r24, 0xFD	; 253
    222a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    222e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2232:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2236:	8f 3f       	cpi	r24, 0xFF	; 255
    2238:	41 f4       	brne	.+16     	; 0x224a <__stack+0x4b>
    223a:	df 3f       	cpi	r29, 0xFF	; 255
    223c:	39 f4       	brne	.+14     	; 0x224c <__stack+0x4d>
			// Startpage is beeing displayed
			if (updateStatus == TRUE) {
    223e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2242:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <softKeys_toLCD>
				softKeys_toLCD();
    2246:	d0 e0       	ldi	r29, 0x00	; 0
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2248:	01 c0       	rjmp	.+2      	; 0x224c <__stack+0x4d>
    224a:	df ef       	ldi	r29, 0xFF	; 255
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    224c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xe>
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2250:	81 11       	cpse	r24, r1
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <__stack+0x67>
    2254:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2258:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <menu_ClearDataDisp>
				menu_ClearDataDisp();
    225c:	8c 2f       	mov	r24, r28
				lcd_goto(saveCursor);
    225e:	83 dd       	rcall	.-1274   	; 0x1d66 <lcd_goto>
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2266:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    226a:	81 11       	cpse	r24, r1
    226c:	0a c0       	rjmp	.+20     	; 0x2282 <__stack+0x83>
    226e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2272:	88 23       	and	r24, r24
    2274:	19 f0       	breq	.+6      	; 0x227c <__stack+0x7d>
    2276:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    227a:	03 c0       	rjmp	.+6      	; 0x2282 <__stack+0x83>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    227e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xc>
    2282:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <swTimer+0x2>
			}
		}
		
		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2286:	81 11       	cpse	r24, r1
    2288:	1a c0       	rjmp	.+52     	; 0x22be <__stack+0xbf>
			module_PowerControl();
    228a:	f9 d9       	rcall	.-3086   	; 0x167e <module_PowerControl>
    228c:	0e 94 93 21 	call	0x4326	; 0x4326 <menu_showPowerState>
			menu_showPowerState();
			if (menuNotActive == TRUE) {
    2290:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
    2294:	8f 3f       	cpi	r24, 0xFF	; 255
    2296:	99 f4       	brne	.+38     	; 0x22be <__stack+0xbf>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2298:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    229c:	84 e1       	ldi	r24, 0x14	; 20
    229e:	63 dd       	rcall	.-1338   	; 0x1d66 <lcd_goto>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    22a0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	21 f4       	brne	.+8      	; 0x22b0 <__stack+0xb1>
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    22a8:	80 e6       	ldi	r24, 0x60	; 96
    22aa:	92 e0       	ldi	r25, 0x02	; 2
    22ac:	7e dd       	rcall	.-1284   	; 0x1daa <lcd_puts_P>
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <__stack+0xbb>
    22b0:	82 31       	cpi	r24, 0x12	; 18
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    22b2:	19 f4       	brne	.+6      	; 0x22ba <__stack+0xbb>
					uint8_t saveCursor = lcd_cursorPos;
					lcd_blank(LCD_LINELEN);
    22b4:	84 e1       	ldi	r24, 0x14	; 20
    22b6:	0e 94 13 2a 	call	0x5426	; 0x5426 <lcd_blank>
				}
				lcd_goto(saveCursor);
    22ba:	8c 2f       	mov	r24, r28
    22bc:	54 dd       	rcall	.-1368   	; 0x1d66 <lcd_goto>
    22be:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <midi_CheckTxActiveSense>
			}
		}
		
		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    22c2:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
		
		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    22c6:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
		if (midiLastInNote != MIDI_NOTE_NONE){
    22ca:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
    22ce:	8f 3f       	cpi	r24, 0xFF	; 255
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    22d0:	91 f1       	breq	.+100    	; 0x2336 <__stack+0x137>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	48 dd       	rcall	.-1392   	; 0x1d66 <lcd_goto>
			if (midiLastInManual == MANUAL_NONE) {
    22d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    22da:	8f 3f       	cpi	r24, 0xFF	; 255
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    22dc:	69 f4       	brne	.+26     	; 0x22f8 <__stack+0xf9>
    22de:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInChannel>
    22e2:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <lcd_ChannelOut>
				lcd_putc('?');
    22e6:	8f e3       	ldi	r24, 0x3F	; 63
				lcd_noteOut(midiLastInNote);
    22e8:	48 dd       	rcall	.-1392   	; 0x1d7a <lcd_putc>
    22ea:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
				lcd_putc(' ');
    22ee:	0e 94 9f 29 	call	0x533e	; 0x533e <lcd_noteOut>
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	42 dd       	rcall	.-1404   	; 0x1d7a <lcd_putc>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    22f6:	0c c0       	rjmp	.+24     	; 0x2310 <__stack+0x111>
    22f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
    22fc:	0e 94 9f 29 	call	0x533e	; 0x533e <lcd_noteOut>
				lcd_putc(MENU_MIDI_IO_SIGN);
    2300:	8e e7       	ldi	r24, 0x7E	; 126
    2302:	3b dd       	rcall	.-1418   	; 0x1d7a <lcd_putc>
				lcd_ManualOutDec(midiLastInManual);
    2304:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2308:	0e 94 01 2a 	call	0x5402	; 0x5402 <lcd_ManualOutDec>
				lcd_putc(' ');
    230c:	80 e2       	ldi	r24, 0x20	; 32
    230e:	35 dd       	rcall	.-1430   	; 0x1d7a <lcd_putc>
    2310:	8c 2f       	mov	r24, r28
			}
			lcd_goto(oldcursor);
    2312:	29 dd       	rcall	.-1454   	; 0x1d66 <lcd_goto>
    2314:	8f ef       	ldi	r24, 0xFF	; 255
			midiLastInNote = MIDI_NOTE_NONE;
    2316:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <midiLastInNote>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    231a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    231c:	f8 94       	cli
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	06 c0       	rjmp	.+12     	; 0x232e <__stack+0x12f>
    2322:	ed e2       	ldi	r30, 0x2D	; 45
    2324:	f2 e0       	ldi	r31, 0x02	; 2
    2326:	82 e3       	ldi	r24, 0x32	; 50
    2328:	80 87       	std	Z+8, r24	; 0x08
    232a:	11 86       	std	Z+9, r1	; 0x09
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2330:	f8 cf       	rjmp	.-16     	; 0x2322 <__stack+0x123>
    __asm__ volatile ("" ::: "memory");
    2332:	9f bf       	out	0x3f, r25	; 63
		} else if TIMER_ELAPSED(TIMER_MIDIIN_DISP) {
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__stack+0x151>
    2336:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x8>
			// timer for showing note has elapsed
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    233a:	81 11       	cpse	r24, r1
    233c:	09 c0       	rjmp	.+18     	; 0x2350 <__stack+0x151>
			lcd_blank(6);
    233e:	13 dd       	rcall	.-1498   	; 0x1d66 <lcd_goto>
    2340:	86 e0       	ldi	r24, 0x06	; 6
			lcd_goto(oldcursor);
    2342:	0e 94 13 2a 	call	0x5426	; 0x5426 <lcd_blank>
    2346:	8c 2f       	mov	r24, r28
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2348:	0e dd       	rcall	.-1508   	; 0x1d66 <lcd_goto>
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <swTimer+0x8>
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    2350:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutNote>
    2354:	8f 3f       	cpi	r24, 0xFF	; 255
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2356:	f9 f0       	breq	.+62     	; 0x2396 <__stack+0x197>
    2358:	8f e0       	ldi	r24, 0x0F	; 15
    235a:	05 dd       	rcall	.-1526   	; 0x1d66 <lcd_goto>
			lcd_ManualOutDec(midiLastOutManual);
    235c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastOutManual>
    2360:	0e 94 01 2a 	call	0x5402	; 0x5402 <lcd_ManualOutDec>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2364:	8e e7       	ldi	r24, 0x7E	; 126
    2366:	09 dd       	rcall	.-1518   	; 0x1d7a <lcd_putc>
    2368:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutNote>
			lcd_noteOut(midiLastOutNote);
    236c:	0e 94 9f 29 	call	0x533e	; 0x533e <lcd_noteOut>
			lcd_goto(oldcursor);
    2370:	8c 2f       	mov	r24, r28
    2372:	f9 dc       	rcall	.-1550   	; 0x1d66 <lcd_goto>
			midiLastOutNote = MIDI_NOTE_NONE;
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <midiLastOutNote>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    237a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    237c:	f8 94       	cli
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	06 c0       	rjmp	.+12     	; 0x238e <__stack+0x18f>
    2382:	ed e2       	ldi	r30, 0x2D	; 45
    2384:	f2 e0       	ldi	r31, 0x02	; 2
    2386:	82 e3       	ldi	r24, 0x32	; 50
    2388:	82 87       	std	Z+10, r24	; 0x0a
    238a:	13 86       	std	Z+11, r1	; 0x0b
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	81 11       	cpse	r24, r1
    2390:	f8 cf       	rjmp	.-16     	; 0x2382 <__stack+0x183>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2392:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2394:	0e c0       	rjmp	.+28     	; 0x23b2 <__stack+0x1b3>
		} else if TIMER_ELAPSED(TIMER_MIDIOUT_DISP) {
    2396:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0xa>
    239a:	81 11       	cpse	r24, r1
    239c:	0a c0       	rjmp	.+20     	; 0x23b2 <__stack+0x1b3>
			// timer for showing note has elapsed
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    239e:	8f e0       	ldi	r24, 0x0F	; 15
    23a0:	e2 dc       	rcall	.-1596   	; 0x1d66 <lcd_goto>
    23a2:	85 e0       	ldi	r24, 0x05	; 5
			lcd_blank(5);
    23a4:	0e 94 13 2a 	call	0x5426	; 0x5426 <lcd_blank>
    23a8:	8c 2f       	mov	r24, r28
			lcd_goto(oldcursor);
    23aa:	dd dc       	rcall	.-1606   	; 0x1d66 <lcd_goto>
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0xa>
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    23b2:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <time_UpTimeUpdated>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    23b6:	8f 3f       	cpi	r24, 0xFF	; 255
    23b8:	09 f0       	breq	.+2      	; 0x23bc <__stack+0x1bd>
    23ba:	5c c0       	rjmp	.+184    	; 0x2474 <__stack+0x275>
    23bc:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <time_UpTimeUpdated>
			time_UpTimeUpdated = FALSE;
    23c0:	f0 90 56 03 	lds	r15, 0x0356	; 0x800356 <lcd_cursorPos>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    23c4:	c0 91 af 0c 	lds	r28, 0x0CAF	; 0x800caf <lcd_cursorIsOn>
			uint8_t oldBlink = lcd_cursorIsOn;
    23c8:	cf 3f       	cpi	r28, 0xFF	; 255
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <__stack+0x1d1>
			if (oldBlink == TRUE) {
    23cc:	0e 94 3d 2a 	call	0x547a	; 0x547a <lcd_cursoroff>
				lcd_cursoroff();
    23d0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    23d4:	88 23       	and	r24, r24
    23d6:	59 f0       	breq	.+22     	; 0x23ee <__stack+0x1ef>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    23d8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_Uptime+0x1>
    23dc:	80 fd       	sbrc	r24, 0
    23de:	0e c0       	rjmp	.+28     	; 0x23fc <__stack+0x1fd>
				// when displaying hr:min blink ":"
				separator = ':';
    23e0:	0f 2e       	mov	r0, r31
    23e2:	fa e3       	ldi	r31, 0x3A	; 58
    23e4:	ef 2e       	mov	r14, r31
    23e6:	f0 2d       	mov	r31, r0

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    23e8:	02 e4       	ldi	r16, 0x42	; 66
    23ea:	12 e0       	ldi	r17, 0x02	; 2
    23ec:	0c c0       	rjmp	.+24     	; 0x2406 <__stack+0x207>
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    23ee:	0f 2e       	mov	r0, r31
    23f0:	fa e3       	ldi	r31, 0x3A	; 58
    23f2:	ef 2e       	mov	r14, r31
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    23f4:	f0 2d       	mov	r31, r0
    23f6:	01 e4       	ldi	r16, 0x41	; 65
    23f8:	12 e0       	ldi	r17, 0x02	; 2
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <__stack+0x207>
    23fc:	68 94       	set
    23fe:	ee 24       	eor	r14, r14

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2400:	e5 f8       	bld	r14, 5
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2402:	02 e4       	ldi	r16, 0x42	; 66
    2404:	12 e0       	ldi	r17, 0x02	; 2
    2406:	87 e0       	ldi	r24, 0x07	; 7
			lcd_dec2out(*(pTime--));
    2408:	ae dc       	rcall	.-1700   	; 0x1d66 <lcd_goto>
    240a:	f8 01       	movw	r30, r16
    240c:	80 81       	ld	r24, Z
    240e:	0e 94 b7 28 	call	0x516e	; 0x516e <lcd_dec2out>
			lcd_putc(separator);
    2412:	8e 2d       	mov	r24, r14
			lcd_dec2out(*pTime);
    2414:	b2 dc       	rcall	.-1692   	; 0x1d7a <lcd_putc>
    2416:	f8 01       	movw	r30, r16
    2418:	31 97       	sbiw	r30, 0x01	; 1
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 b7 28 	call	0x516e	; 0x516e <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2420:	40 91 a6 0b 	lds	r20, 0x0BA6	; 0x800ba6 <midiRxOvflCount>
			if (ovflCount > 0){
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2424:	44 23       	and	r20, r20
    2426:	31 f0       	breq	.+12     	; 0x2434 <__stack+0x235>
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	60 e0       	ldi	r22, 0x00	; 0
				midiRxOvflCount = 0;
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	73 de       	rcall	.-794    	; 0x2116 <log_putError>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2430:	10 92 a6 0b 	sts	0x0BA6, r1	; 0x800ba6 <midiRxOvflCount>
			if (ovflCount > 0){
    2434:	40 91 ab 0c 	lds	r20, 0x0CAB	; 0x800cab <midiTxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2438:	44 23       	and	r20, r20
    243a:	31 f0       	breq	.+12     	; 0x2448 <__stack+0x249>
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	61 e0       	ldi	r22, 0x01	; 1
				midiTxOvflCount = 0;
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	69 de       	rcall	.-814    	; 0x2116 <log_putError>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2444:	10 92 ab 0c 	sts	0x0CAB, r1	; 0x800cab <midiTxOvflCount>
    2448:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    244c:	84 ff       	sbrs	r24, 4
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <__stack+0x255>
    2450:	80 e2       	ldi	r24, 0x20	; 32
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <__stack+0x257>
    2454:	89 e0       	ldi	r24, 0x09	; 9
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2456:	91 dc       	rcall	.-1758   	; 0x1d7a <lcd_putc>
    2458:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <log_unreadErrors>
    245c:	8f 3f       	cpi	r24, 0xFF	; 255
    245e:	11 f4       	brne	.+4      	; 0x2464 <__stack+0x265>
    2460:	85 e4       	ldi	r24, 0x45	; 69
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <__stack+0x267>
    2464:	80 e2       	ldi	r24, 0x20	; 32
    2466:	89 dc       	rcall	.-1774   	; 0x1d7a <lcd_putc>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2468:	8f 2d       	mov	r24, r15
    246a:	7d dc       	rcall	.-1798   	; 0x1d66 <lcd_goto>
    246c:	cf 3f       	cpi	r28, 0xFF	; 255
			if (oldBlink == TRUE) {
    246e:	11 f4       	brne	.+4      	; 0x2474 <__stack+0x275>
    2470:	0e 94 36 2a 	call	0x546c	; 0x546c <lcd_cursosblink>
				lcd_cursosblink();
    2474:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <msgPipeOverflow>
			}
		}
		
		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2478:	8f 3f       	cpi	r24, 0xFF	; 255
    247a:	39 f4       	brne	.+14     	; 0x248a <__stack+0x28b>
    247c:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <msgPipeOverflow>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2480:	40 e0       	ldi	r20, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	84 e0       	ldi	r24, 0x04	; 4
    2488:	46 de       	rcall	.-884    	; 0x2116 <log_putError>
    248a:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <midiRxInIndex>
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    248e:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <midiRxOutIndex>
    2492:	98 17       	cp	r25, r24
    2494:	21 f0       	breq	.+8      	; 0x249e <__stack+0x29f>
    2496:	0e 94 d7 26 	call	0x4dae	; 0x4dae <serial1MIDIReadRx>
			midiIn_Process(serial1MIDIReadRx());
    249a:	0e 94 48 25 	call	0x4a90	; 0x4a90 <midiIn_Process>
    249e:	0e 94 4b 22 	call	0x4496	; 0x4496 <pipeMsgStatus>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    24a2:	8f 3f       	cpi	r24, 0xFF	; 255
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <__stack+0x2a9>
    24a6:	8a ce       	rjmp	.-748    	; 0x21bc <main+0x74>
    24a8:	0e 94 36 22 	call	0x446c	; 0x446c <pipeMsgGet>
			midiKeyPress_Process(pipeMsgGet());
    24ac:	0e 94 d6 25 	call	0x4bac	; 0x4bac <midiKeyPress_Process>
    24b0:	85 ce       	rjmp	.-758    	; 0x21bc <main+0x74>

000024b2 <menuOnExitCoupler>:
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	08 95       	ret

000024b6 <menu_enterWriteModule>:

void menuResetVars(){
	// reset all vars that mihgt be used in this menu level
	menuMidiChan = 0;
	menuSection = 0;
	DataAdressOffset = 0;
    24b6:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <menuModVal>
    24ba:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <menuModVal+0x1>
    24be:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <menuModVal+0x2>
    24c2:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <menuModVal+0x3>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <menu_enterWriteModule+0x1e>
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	0a 94       	dec	r0
    24d6:	e2 f7       	brpl	.-8      	; 0x24d0 <menu_enterWriteModule+0x1a>
    24d8:	48 2f       	mov	r20, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	ef e3       	ldi	r30, 0x3F	; 63
    24de:	f3 e0       	ldi	r31, 0x03	; 3
    24e0:	22 c0       	rjmp	.+68     	; 0x2526 <menu_enterWriteModule+0x70>
    24e2:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <menuModVal>
    24e6:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <menuModVal+0x1>
    24ea:	a0 91 5a 05 	lds	r26, 0x055A	; 0x80055a <menuModVal+0x2>
    24ee:	b0 91 5b 05 	lds	r27, 0x055B	; 0x80055b <menuModVal+0x3>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	aa 1f       	adc	r26, r26
    24f8:	bb 1f       	adc	r27, r27
    24fa:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <menuModVal>
    24fe:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <menuModVal+0x1>
    2502:	a0 93 5a 05 	sts	0x055A, r26	; 0x80055a <menuModVal+0x2>
    2506:	b0 93 5b 05 	sts	0x055B, r27	; 0x80055b <menuModVal+0x3>
    250a:	21 81       	ldd	r18, Z+1	; 0x01
    250c:	24 23       	and	r18, r20
    250e:	49 f0       	breq	.+18     	; 0x2522 <menu_enterWriteModule+0x6c>
    2510:	81 60       	ori	r24, 0x01	; 1
    2512:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <menuModVal>
    2516:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <menuModVal+0x1>
    251a:	a0 93 5a 05 	sts	0x055A, r26	; 0x80055a <menuModVal+0x2>
    251e:	b0 93 5b 05 	sts	0x055B, r27	; 0x80055b <menuModVal+0x3>
    2522:	38 97       	sbiw	r30, 0x08	; 8
    2524:	3f 5f       	subi	r19, 0xFF	; 255
    2526:	30 32       	cpi	r19, 0x20	; 32
    2528:	e0 f2       	brcs	.-72     	; 0x24e2 <menu_enterWriteModule+0x2c>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	08 95       	ret

0000252e <menu_exitWriteModule>:
    252e:	40 91 58 05 	lds	r20, 0x0558	; 0x800558 <menuModVal>
    2532:	50 91 59 05 	lds	r21, 0x0559	; 0x800559 <menuModVal+0x1>
    2536:	60 91 5a 05 	lds	r22, 0x055A	; 0x80055a <menuModVal+0x2>
    253a:	70 91 5b 05 	lds	r23, 0x055B	; 0x80055b <menuModVal+0x3>
    253e:	85 30       	cpi	r24, 0x05	; 5
    2540:	09 f5       	brne	.+66     	; 0x2584 <menu_exitWriteModule+0x56>
    2542:	a1 e0       	ldi	r26, 0x01	; 1
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <menu_exitWriteModule+0x22>
    254c:	aa 0f       	add	r26, r26
    254e:	bb 1f       	adc	r27, r27
    2550:	0a 94       	dec	r0
    2552:	e2 f7       	brpl	.-8      	; 0x254c <menu_exitWriteModule+0x1e>
    2554:	3a 2f       	mov	r19, r26
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	ef e3       	ldi	r30, 0x3F	; 63
    255a:	f3 e0       	ldi	r31, 0x03	; 3
    255c:	11 c0       	rjmp	.+34     	; 0x2580 <menu_exitWriteModule+0x52>
    255e:	77 23       	and	r23, r23
    2560:	24 f4       	brge	.+8      	; 0x256a <menu_exitWriteModule+0x3c>
    2562:	81 81       	ldd	r24, Z+1	; 0x01
    2564:	83 2b       	or	r24, r19
    2566:	81 83       	std	Z+1, r24	; 0x01
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <menu_exitWriteModule+0x46>
    256a:	21 81       	ldd	r18, Z+1	; 0x01
    256c:	8a 2f       	mov	r24, r26
    256e:	80 95       	com	r24
    2570:	82 23       	and	r24, r18
    2572:	81 83       	std	Z+1, r24	; 0x01
    2574:	44 0f       	add	r20, r20
    2576:	55 1f       	adc	r21, r21
    2578:	66 1f       	adc	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	38 97       	sbiw	r30, 0x08	; 8
    257e:	9f 5f       	subi	r25, 0xFF	; 255
    2580:	90 32       	cpi	r25, 0x20	; 32
    2582:	68 f3       	brcs	.-38     	; 0x255e <menu_exitWriteModule+0x30>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	08 95       	ret

00002588 <menuOnEnterModSel>:
    2588:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    258c:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    2590:	3e 96       	adiw	r30, 0x0e	; 14
    2592:	85 91       	lpm	r24, Z+
    2594:	95 91       	lpm	r25, Z+
    2596:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <menuVmodule>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	08 95       	ret

0000259e <menuOnEnterMidiInCh>:
    259e:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    25a2:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    25a6:	3e 96       	adiw	r30, 0x0e	; 14
    25a8:	85 91       	lpm	r24, Z+
    25aa:	95 91       	lpm	r25, Z+
    25ac:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <menuVmidiChan>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	08 95       	ret

000025b4 <menuOnEnterMidiInSec>:
    25b4:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    25b8:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    25bc:	3e 96       	adiw	r30, 0x0e	; 14
    25be:	25 91       	lpm	r18, Z+
    25c0:	35 91       	lpm	r19, Z+
    25c2:	20 93 5e 05 	sts	0x055E, r18	; 0x80055e <menuVsection>
    25c6:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <menuVmidiChan>
    25ca:	8f 70       	andi	r24, 0x0F	; 15
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	23 70       	andi	r18, 0x03	; 3
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	82 0f       	add	r24, r18
    25da:	91 1d       	adc	r25, r1
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <DataAdressOffset+0x1>
    25e8:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <DataAdressOffset>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret

000025f0 <menuOnEnterModManual>:
    25f0:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    25f4:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    25f8:	3e 96       	adiw	r30, 0x0e	; 14
    25fa:	85 91       	lpm	r24, Z+
    25fc:	95 91       	lpm	r25, Z+
    25fe:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <menuVmanual>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	08 95       	ret

00002606 <menuOnEnterModSec>:
    2606:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    260a:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    260e:	3e 96       	adiw	r30, 0x0e	; 14
    2610:	85 91       	lpm	r24, Z+
    2612:	95 91       	lpm	r25, Z+
    2614:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <menuVsection>
    2618:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <menuVmanual>
    261c:	2f 70       	andi	r18, 0x0F	; 15
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	83 70       	andi	r24, 0x03	; 3
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a9 01       	movw	r20, r18
    2626:	44 0f       	add	r20, r20
    2628:	55 1f       	adc	r21, r21
    262a:	24 0f       	add	r18, r20
    262c:	35 1f       	adc	r19, r21
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	22 0f       	add	r18, r18
    2634:	33 1f       	adc	r19, r19
    2636:	ac 01       	movw	r20, r24
    2638:	44 0f       	add	r20, r20
    263a:	55 1f       	adc	r21, r21
    263c:	84 0f       	add	r24, r20
    263e:	95 1f       	adc	r25, r21
    2640:	82 0f       	add	r24, r18
    2642:	93 1f       	adc	r25, r19
    2644:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <DataAdressOffset+0x1>
    2648:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <DataAdressOffset>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	08 95       	ret

00002650 <menuOnEnterKey>:
    2650:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    2654:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    2658:	3e 96       	adiw	r30, 0x0e	; 14
    265a:	85 91       	lpm	r24, Z+
    265c:	95 91       	lpm	r25, Z+
    265e:	84 30       	cpi	r24, 0x04	; 4
    2660:	60 f4       	brcc	.+24     	; 0x267a <menuOnEnterKey+0x2a>
    2662:	fc 01       	movw	r30, r24
    2664:	ff 27       	eor	r31, r31
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	ef 5b       	subi	r30, 0xBF	; 191
    266c:	fa 4f       	sbci	r31, 0xFA	; 250
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <menuVMenuSoftKey+0x1>
    2676:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <menuVMenuSoftKey>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret

0000267e <menuOnExitKeys>:
    267e:	0e 94 06 09 	call	0x120c	; 0x120c <eeprom_UpdateSoftkeys>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	08 95       	ret

00002686 <menu_readModule>:
    2686:	cf 92       	push	r12
    2688:	df 92       	push	r13
    268a:	ef 92       	push	r14
    268c:	ff 92       	push	r15
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    2696:	02 c0       	rjmp	.+4      	; 0x269c <menu_readModule+0x16>
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	0a 94       	dec	r0
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <menu_readModule+0x12>
    26a0:	28 2f       	mov	r18, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	ef e3       	ldi	r30, 0x3F	; 63
    26a6:	f3 e0       	ldi	r31, 0x03	; 3
    26a8:	c1 2c       	mov	r12, r1
    26aa:	d1 2c       	mov	r13, r1
    26ac:	76 01       	movw	r14, r12
    26ae:	0b c0       	rjmp	.+22     	; 0x26c6 <menu_readModule+0x40>
    26b0:	cc 0c       	add	r12, r12
    26b2:	dd 1c       	adc	r13, r13
    26b4:	ee 1c       	adc	r14, r14
    26b6:	ff 1c       	adc	r15, r15
    26b8:	86 81       	ldd	r24, Z+6	; 0x06
    26ba:	82 23       	and	r24, r18
    26bc:	11 f0       	breq	.+4      	; 0x26c2 <menu_readModule+0x3c>
    26be:	68 94       	set
    26c0:	c0 f8       	bld	r12, 0
    26c2:	38 97       	sbiw	r30, 0x08	; 8
    26c4:	9f 5f       	subi	r25, 0xFF	; 255
    26c6:	90 32       	cpi	r25, 0x20	; 32
    26c8:	98 f3       	brcs	.-26     	; 0x26b0 <menu_readModule+0x2a>
    26ca:	8e e1       	ldi	r24, 0x1E	; 30
    26cc:	4c db       	rcall	.-2408   	; 0x1d66 <lcd_goto>
    26ce:	c0 92 b1 0c 	sts	0x0CB1, r12	; 0x800cb1 <editLong>
    26d2:	d0 92 b2 0c 	sts	0x0CB2, r13	; 0x800cb2 <editLong+0x1>
    26d6:	e0 92 b3 0c 	sts	0x0CB3, r14	; 0x800cb3 <editLong+0x2>
    26da:	f0 92 b4 0c 	sts	0x0CB4, r15	; 0x800cb4 <editLong+0x3>
    26de:	0e 94 92 28 	call	0x5124	; 0x5124 <lcd_longout>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	08 95       	ret

000026ee <menu_testModule>:
    26ee:	8e e1       	ldi	r24, 0x1E	; 30
    26f0:	3a db       	rcall	.-2444   	; 0x1d66 <lcd_goto>
    26f2:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <menuVmodule>
    26f6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <test_PipeModule>
    26fa:	60 93 b1 0c 	sts	0x0CB1, r22	; 0x800cb1 <editLong>
    26fe:	70 93 b2 0c 	sts	0x0CB2, r23	; 0x800cb2 <editLong+0x1>
    2702:	80 93 b3 0c 	sts	0x0CB3, r24	; 0x800cb3 <editLong+0x2>
    2706:	90 93 b4 0c 	sts	0x0CB4, r25	; 0x800cb4 <editLong+0x3>
    270a:	0e 94 92 28 	call	0x5124	; 0x5124 <lcd_longout>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	08 95       	ret

00002712 <menuOnEnterTune>:
    2712:	cf 93       	push	r28
    2714:	8f 3f       	cpi	r24, 0xFF	; 255
    2716:	09 f0       	breq	.+2      	; 0x271a <menuOnEnterTune+0x8>
    2718:	77 c0       	rjmp	.+238    	; 0x2808 <menuOnEnterTune+0xf6>
    271a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <minManNote.2676>
    271e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <maxManNote.2677>
    2722:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    2726:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    272a:	3e 96       	adiw	r30, 0x0e	; 14
    272c:	85 91       	lpm	r24, Z+
    272e:	95 91       	lpm	r25, Z+
    2730:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <menuVmanual>
    2734:	84 30       	cpi	r24, 0x04	; 4
    2736:	10 f0       	brcs	.+4      	; 0x273c <menuOnEnterTune+0x2a>
    2738:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <menuVmanual>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	39 c0       	rjmp	.+114    	; 0x27b2 <menuOnEnterTune+0xa0>
    2740:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	e2 2f       	mov	r30, r18
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	df 01       	movw	r26, r30
    274c:	aa 0f       	add	r26, r26
    274e:	bb 1f       	adc	r27, r27
    2750:	ad 01       	movw	r20, r26
    2752:	4e 0f       	add	r20, r30
    2754:	5f 1f       	adc	r21, r31
    2756:	dc 01       	movw	r26, r24
    2758:	aa 0f       	add	r26, r26
    275a:	bb 1f       	adc	r27, r27
    275c:	a8 0f       	add	r26, r24
    275e:	b9 1f       	adc	r27, r25
    2760:	aa 0f       	add	r26, r26
    2762:	bb 1f       	adc	r27, r27
    2764:	aa 0f       	add	r26, r26
    2766:	bb 1f       	adc	r27, r27
    2768:	a4 0f       	add	r26, r20
    276a:	b5 1f       	adc	r27, r21
    276c:	a9 51       	subi	r26, 0x19	; 25
    276e:	b7 4f       	sbci	r27, 0xF7	; 247
    2770:	3c 91       	ld	r19, X
    2772:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <minManNote.2676>
    2776:	34 17       	cp	r19, r20
    2778:	10 f4       	brcc	.+4      	; 0x277e <menuOnEnterTune+0x6c>
    277a:	30 93 0c 02 	sts	0x020C, r19	; 0x80020c <minManNote.2676>
    277e:	af 01       	movw	r20, r30
    2780:	44 0f       	add	r20, r20
    2782:	55 1f       	adc	r21, r21
    2784:	e4 0f       	add	r30, r20
    2786:	f5 1f       	adc	r31, r21
    2788:	ac 01       	movw	r20, r24
    278a:	44 0f       	add	r20, r20
    278c:	55 1f       	adc	r21, r21
    278e:	84 0f       	add	r24, r20
    2790:	95 1f       	adc	r25, r21
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	e8 0f       	add	r30, r24
    279c:	f9 1f       	adc	r31, r25
    279e:	e9 51       	subi	r30, 0x19	; 25
    27a0:	f7 4f       	sbci	r31, 0xF7	; 247
    27a2:	81 81       	ldd	r24, Z+1	; 0x01
    27a4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <maxManNote.2677>
    27a8:	98 17       	cp	r25, r24
    27aa:	10 f4       	brcc	.+4      	; 0x27b0 <menuOnEnterTune+0x9e>
    27ac:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <maxManNote.2677>
    27b0:	2f 5f       	subi	r18, 0xFF	; 255
    27b2:	24 30       	cpi	r18, 0x04	; 4
    27b4:	28 f2       	brcs	.-118    	; 0x2740 <menuOnEnterTune+0x2e>
    27b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <minManNote.2676>
    27ba:	88 23       	and	r24, r24
    27bc:	4c f4       	brge	.+18     	; 0x27d0 <menuOnEnterTune+0xbe>
    27be:	8e e1       	ldi	r24, 0x1E	; 30
    27c0:	d2 da       	rcall	.-2652   	; 0x1d66 <lcd_goto>
    27c2:	83 e2       	ldi	r24, 0x23	; 35
    27c4:	93 e0       	ldi	r25, 0x03	; 3
    27c6:	f1 da       	rcall	.-2590   	; 0x1daa <lcd_puts_P>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <menuNote>
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <menuOnEnterTune+0xc6>
    27d0:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <menuNote>
    27d4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <notOnOff.2678>
    27d8:	68 e8       	ldi	r22, 0x88	; 136
    27da:	7c e0       	ldi	r23, 0x0C	; 12
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    27e2:	6d e8       	ldi	r22, 0x8D	; 141
    27e4:	7c e0       	ldi	r23, 0x0C	; 12
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    27ec:	62 e9       	ldi	r22, 0x92	; 146
    27ee:	7c e0       	ldi	r23, 0x0C	; 12
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    27f6:	64 e9       	ldi	r22, 0x94	; 148
    27f8:	7c e0       	ldi	r23, 0x0C	; 12
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    2800:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    2804:	cf ef       	ldi	r28, 0xFF	; 255
    2806:	71 c0       	rjmp	.+226    	; 0x28ea <menuOnEnterTune+0x1d8>
    2808:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <menuNote>
    280c:	6f 3f       	cpi	r22, 0xFF	; 255
    280e:	09 f4       	brne	.+2      	; 0x2812 <menuOnEnterTune+0x100>
    2810:	61 c0       	rjmp	.+194    	; 0x28d4 <menuOnEnterTune+0x1c2>
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	d9 f4       	brne	.+54     	; 0x284c <menuOnEnterTune+0x13a>
    2816:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <maxManNote.2677>
    281a:	68 17       	cp	r22, r24
    281c:	08 f0       	brcs	.+2      	; 0x2820 <menuOnEnterTune+0x10e>
    281e:	5c c0       	rjmp	.+184    	; 0x28d8 <menuOnEnterTune+0x1c6>
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2826:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    282a:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <menuNote>
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	60 93 4b 05 	sts	0x054B, r22	; 0x80054b <menuNote>
    2834:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2678>
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	09 f0       	breq	.+2      	; 0x283e <menuOnEnterTune+0x12c>
    283c:	4f c0       	rjmp	.+158    	; 0x28dc <menuOnEnterTune+0x1ca>
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2844:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    2848:	cf ef       	ldi	r28, 0xFF	; 255
    284a:	4f c0       	rjmp	.+158    	; 0x28ea <menuOnEnterTune+0x1d8>
    284c:	84 30       	cpi	r24, 0x04	; 4
    284e:	d1 f4       	brne	.+52     	; 0x2884 <menuOnEnterTune+0x172>
    2850:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <minManNote.2676>
    2854:	86 17       	cp	r24, r22
    2856:	08 f0       	brcs	.+2      	; 0x285a <menuOnEnterTune+0x148>
    2858:	43 c0       	rjmp	.+134    	; 0x28e0 <menuOnEnterTune+0x1ce>
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2860:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    2864:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <menuNote>
    2868:	61 50       	subi	r22, 0x01	; 1
    286a:	60 93 4b 05 	sts	0x054B, r22	; 0x80054b <menuNote>
    286e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2678>
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	b9 f5       	brne	.+110    	; 0x28e4 <menuOnEnterTune+0x1d2>
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    287c:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    2880:	cf ef       	ldi	r28, 0xFF	; 255
    2882:	33 c0       	rjmp	.+102    	; 0x28ea <menuOnEnterTune+0x1d8>
    2884:	83 30       	cpi	r24, 0x03	; 3
    2886:	91 f4       	brne	.+36     	; 0x28ac <menuOnEnterTune+0x19a>
    2888:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2678>
    288c:	81 11       	cpse	r24, r1
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <menuOnEnterTune+0x186>
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <notOnOff.2678>
    2896:	02 c0       	rjmp	.+4      	; 0x289c <menuOnEnterTune+0x18a>
    2898:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <notOnOff.2678>
    289c:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <notOnOff.2678>
    28a0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    28a4:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    28a8:	cf ef       	ldi	r28, 0xFF	; 255
    28aa:	1f c0       	rjmp	.+62     	; 0x28ea <menuOnEnterTune+0x1d8>
    28ac:	82 30       	cpi	r24, 0x02	; 2
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <menuOnEnterTune+0x1a2>
    28b0:	86 30       	cpi	r24, 0x06	; 6
    28b2:	39 f4       	brne	.+14     	; 0x28c2 <menuOnEnterTune+0x1b0>
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    28ba:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    28be:	c0 e0       	ldi	r28, 0x00	; 0
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <menuOnEnterTune+0x1d8>
    28c2:	85 30       	cpi	r24, 0x05	; 5
    28c4:	89 f4       	brne	.+34     	; 0x28e8 <menuOnEnterTune+0x1d6>
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    28cc:	0e 94 1e 24 	call	0x483c	; 0x483c <manual_NoteOnOff>
    28d0:	c0 e0       	ldi	r28, 0x00	; 0
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <menuOnEnterTune+0x1d8>
    28d4:	c0 e0       	ldi	r28, 0x00	; 0
    28d6:	09 c0       	rjmp	.+18     	; 0x28ea <menuOnEnterTune+0x1d8>
    28d8:	cf ef       	ldi	r28, 0xFF	; 255
    28da:	07 c0       	rjmp	.+14     	; 0x28ea <menuOnEnterTune+0x1d8>
    28dc:	cf ef       	ldi	r28, 0xFF	; 255
    28de:	05 c0       	rjmp	.+10     	; 0x28ea <menuOnEnterTune+0x1d8>
    28e0:	cf ef       	ldi	r28, 0xFF	; 255
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <menuOnEnterTune+0x1d8>
    28e4:	cf ef       	ldi	r28, 0xFF	; 255
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <menuOnEnterTune+0x1d8>
    28e8:	cf ef       	ldi	r28, 0xFF	; 255
    28ea:	cf 3f       	cpi	r28, 0xFF	; 255
    28ec:	59 f5       	brne	.+86     	; 0x2944 <menuOnEnterTune+0x232>
    28ee:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <menuNote>
    28f2:	8f 3f       	cpi	r24, 0xFF	; 255
    28f4:	29 f1       	breq	.+74     	; 0x2940 <menuOnEnterTune+0x22e>
    28f6:	8e e1       	ldi	r24, 0x1E	; 30
    28f8:	36 da       	rcall	.-2964   	; 0x1d66 <lcd_goto>
    28fa:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <menuNote>
    28fe:	0e 94 9f 29 	call	0x533e	; 0x533e <lcd_noteOut>
    2902:	80 e2       	ldi	r24, 0x20	; 32
    2904:	3a da       	rcall	.-2956   	; 0x1d7a <lcd_putc>
    2906:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2678>
    290a:	81 11       	cpse	r24, r1
    290c:	07 c0       	rjmp	.+14     	; 0x291c <menuOnEnterTune+0x20a>
    290e:	81 e6       	ldi	r24, 0x61	; 97
    2910:	34 da       	rcall	.-2968   	; 0x1d7a <lcd_putc>
    2912:	85 e7       	ldi	r24, 0x75	; 117
    2914:	32 da       	rcall	.-2972   	; 0x1d7a <lcd_putc>
    2916:	83 e7       	ldi	r24, 0x73	; 115
    2918:	30 da       	rcall	.-2976   	; 0x1d7a <lcd_putc>
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <menuOnEnterTune+0x216>
    291c:	85 e6       	ldi	r24, 0x65	; 101
    291e:	2d da       	rcall	.-2982   	; 0x1d7a <lcd_putc>
    2920:	89 e6       	ldi	r24, 0x69	; 105
    2922:	2b da       	rcall	.-2986   	; 0x1d7a <lcd_putc>
    2924:	8e e6       	ldi	r24, 0x6E	; 110
    2926:	29 da       	rcall	.-2990   	; 0x1d7a <lcd_putc>
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2678>
    292e:	81 11       	cpse	r24, r1
    2930:	01 c0       	rjmp	.+2      	; 0x2934 <menuOnEnterTune+0x222>
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	0e 94 cd 2a 	call	0x559a	; 0x559a <keylabel_statcheck>
    293a:	81 11       	cpse	r24, r1
    293c:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    2940:	8e e1       	ldi	r24, 0x1E	; 30
    2942:	11 da       	rcall	.-3038   	; 0x1d66 <lcd_goto>
    2944:	8c 2f       	mov	r24, r28
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <menuOnExitMidiActiveSense>:
    294a:	0e 94 42 08 	call	0x1084	; 0x1084 <eeprom_UpdateMidiOutMap>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	08 95       	ret

00002952 <menuOnExitMidiOut>:
    2952:	0e 94 42 08 	call	0x1084	; 0x1084 <eeprom_UpdateMidiOutMap>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	08 95       	ret

0000295a <menuOnExitMidiIn>:
    295a:	0e 94 20 08 	call	0x1040	; 0x1040 <eeprom_UpdateMidiInMap>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	08 95       	ret

00002962 <menuOnExitManual>:
    2962:	0e 94 fe 07 	call	0xffc	; 0xffc <eeprom_UpdateManualMap>
    2966:	0e 94 44 23 	call	0x4688	; 0x4688 <Midi_updateManualRange>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	08 95       	ret

0000296e <menuOnExitModules>:
    296e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <eeprom_UpdateModules>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	08 95       	ret

00002976 <menuOnEnterUSBprotokoll>:
    2976:	cf 93       	push	r28
    2978:	8e ef       	ldi	r24, 0xFE	; 254
    297a:	92 e0       	ldi	r25, 0x02	; 2
    297c:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2980:	2f da       	rcall	.-2978   	; 0x1de0 <log_count>
    2982:	81 11       	cpse	r24, r1
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <menuOnEnterUSBprotokoll+0x2e>
    2986:	84 e0       	ldi	r24, 0x04	; 4
    2988:	93 e0       	ldi	r25, 0x03	; 3
    298a:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    298e:	0e c0       	rjmp	.+28     	; 0x29ac <menuOnEnterUSBprotokoll+0x36>
    2990:	6f ef       	ldi	r22, 0xFF	; 255
    2992:	8c 2f       	mov	r24, r28
    2994:	c9 db       	rcall	.-2158   	; 0x2128 <log_getShortTextFromIndex>
    2996:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    299a:	86 eb       	ldi	r24, 0xB6	; 182
    299c:	9c e0       	ldi	r25, 0x0C	; 12
    299e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    29a2:	8c 2f       	mov	r24, r28
    29a4:	cf ef       	ldi	r28, 0xFF	; 255
    29a6:	c8 0f       	add	r28, r24
    29a8:	81 11       	cpse	r24, r1
    29aa:	f2 cf       	rjmp	.-28     	; 0x2990 <menuOnEnterUSBprotokoll+0x1a>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <menuOnExitUSBactive>:
    29b2:	0e 94 96 08 	call	0x112c	; 0x112c <eeprom_UpdateUSB>
    29b6:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <serusb_Active>
    29ba:	8f 3f       	cpi	r24, 0xFF	; 255
    29bc:	61 f4       	brne	.+24     	; 0x29d6 <menuOnExitUSBactive+0x24>
    29be:	85 ee       	ldi	r24, 0xE5	; 229
    29c0:	92 e0       	ldi	r25, 0x02	; 2
    29c2:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    29c6:	88 e7       	ldi	r24, 0x78	; 120
    29c8:	9c e0       	ldi	r25, 0x0C	; 12
    29ca:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    29ce:	86 eb       	ldi	r24, 0xB6	; 182
    29d0:	9c e0       	ldi	r25, 0x0C	; 12
    29d2:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	08 95       	ret

000029da <menuOnEnterUSBsendHW>:
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	8c ec       	ldi	r24, 0xCC	; 204
    29f2:	92 e0       	ldi	r25, 0x02	; 2
    29f4:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    29f8:	89 eb       	ldi	r24, 0xB9	; 185
    29fa:	92 e0       	ldi	r25, 0x02	; 2
    29fc:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2a00:	65 eb       	ldi	r22, 0xB5	; 181
    2a02:	7c e0       	ldi	r23, 0x0C	; 12
    2a04:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    2a08:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2a0c:	22 e7       	ldi	r18, 0x72	; 114
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
    2a12:	bc 01       	movw	r22, r24
    2a14:	6e 5f       	subi	r22, 0xFE	; 254
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	20 e2       	ldi	r18, 0x20	; 32
    2a1a:	21 83       	std	Z+1, r18	; 0x01
    2a1c:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    2a20:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2a24:	27 e7       	ldi	r18, 0x77	; 119
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 83       	st	Z, r18
    2a2a:	85 eb       	ldi	r24, 0xB5	; 181
    2a2c:	9c e0       	ldi	r25, 0x0C	; 12
    2a2e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2a32:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <serial0SER_USB_sendCRLF>
    2a36:	87 ea       	ldi	r24, 0xA7	; 167
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2a3e:	65 eb       	ldi	r22, 0xB5	; 181
    2a40:	7c e0       	ldi	r23, 0x0C	; 12
    2a42:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipe_ModuleTested>
    2a46:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2a4a:	85 eb       	ldi	r24, 0xB5	; 181
    2a4c:	9c e0       	ldi	r25, 0x0C	; 12
    2a4e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2a52:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <serial0SER_USB_sendCRLF>
    2a56:	e1 2c       	mov	r14, r1
    2a58:	b5 c0       	rjmp	.+362    	; 0x2bc4 <menuOnEnterUSBsendHW+0x1ea>
    2a5a:	8e e9       	ldi	r24, 0x9E	; 158
    2a5c:	92 e0       	ldi	r25, 0x02	; 2
    2a5e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2a62:	65 eb       	ldi	r22, 0xB5	; 181
    2a64:	7c e0       	ldi	r23, 0x0C	; 12
    2a66:	8e 2d       	mov	r24, r14
    2a68:	0e 94 7e 29 	call	0x52fc	; 0x52fc <putChar_Manual>
    2a6c:	85 eb       	ldi	r24, 0xB5	; 181
    2a6e:	9c e0       	ldi	r25, 0x0C	; 12
    2a70:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2a74:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <serial0SER_USB_sendCRLF>
    2a78:	f1 2c       	mov	r15, r1
    2a7a:	9f c0       	rjmp	.+318    	; 0x2bba <menuOnEnterUSBsendHW+0x1e0>
    2a7c:	86 e9       	ldi	r24, 0x96	; 150
    2a7e:	92 e0       	ldi	r25, 0x02	; 2
    2a80:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2a84:	80 e3       	ldi	r24, 0x30	; 48
    2a86:	8f 0d       	add	r24, r15
    2a88:	0e 94 65 27 	call	0x4eca	; 0x4eca <serial0SER_USBSend>
    2a8c:	8d e2       	ldi	r24, 0x2D	; 45
    2a8e:	0e 94 65 27 	call	0x4eca	; 0x4eca <serial0SER_USBSend>
    2a92:	80 e2       	ldi	r24, 0x20	; 32
    2a94:	0e 94 65 27 	call	0x4eca	; 0x4eca <serial0SER_USBSend>
    2a98:	0e 2d       	mov	r16, r14
    2a9a:	10 e0       	ldi	r17, 0x00	; 0
    2a9c:	cf 2c       	mov	r12, r15
    2a9e:	d1 2c       	mov	r13, r1
    2aa0:	e6 01       	movw	r28, r12
    2aa2:	cc 0f       	add	r28, r28
    2aa4:	dd 1f       	adc	r29, r29
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	8c 0d       	add	r24, r12
    2aaa:	9d 1d       	adc	r25, r13
    2aac:	e8 01       	movw	r28, r16
    2aae:	cc 0f       	add	r28, r28
    2ab0:	dd 1f       	adc	r29, r29
    2ab2:	c0 0f       	add	r28, r16
    2ab4:	d1 1f       	adc	r29, r17
    2ab6:	cc 0f       	add	r28, r28
    2ab8:	dd 1f       	adc	r29, r29
    2aba:	cc 0f       	add	r28, r28
    2abc:	dd 1f       	adc	r29, r29
    2abe:	c8 0f       	add	r28, r24
    2ac0:	d9 1f       	adc	r29, r25
    2ac2:	c9 51       	subi	r28, 0x19	; 25
    2ac4:	d7 4f       	sbci	r29, 0xF7	; 247
    2ac6:	65 eb       	ldi	r22, 0xB5	; 181
    2ac8:	7c e0       	ldi	r23, 0x0C	; 12
    2aca:	88 81       	ld	r24, Y
    2acc:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	6f 5f       	subi	r22, 0xFF	; 255
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	68 94       	set
    2ad8:	bb 24       	eor	r11, r11
    2ada:	b5 f8       	bld	r11, 5
    2adc:	fc 01       	movw	r30, r24
    2ade:	b0 82       	st	Z, r11
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	6f 5f       	subi	r22, 0xFF	; 255
    2aea:	7f 4f       	sbci	r23, 0xFF	; 255
    2aec:	fc 01       	movw	r30, r24
    2aee:	b0 82       	st	Z, r11
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	0e 94 ed 28 	call	0x51da	; 0x51da <putChar_hex>
    2af6:	2d e3       	ldi	r18, 0x3D	; 61
    2af8:	fc 01       	movw	r30, r24
    2afa:	20 83       	st	Z, r18
    2afc:	85 eb       	ldi	r24, 0xB5	; 181
    2afe:	9c e0       	ldi	r25, 0x0C	; 12
    2b00:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2b04:	88 81       	ld	r24, Y
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <menuOnEnterUSBsendHW+0x13a>
    2b0a:	80 e9       	ldi	r24, 0x90	; 144
    2b0c:	92 e0       	ldi	r25, 0x02	; 2
    2b0e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2b12:	50 c0       	rjmp	.+160    	; 0x2bb4 <menuOnEnterUSBsendHW+0x1da>
    2b14:	65 eb       	ldi	r22, 0xB5	; 181
    2b16:	7c e0       	ldi	r23, 0x0C	; 12
    2b18:	0e 94 22 29 	call	0x5244	; 0x5244 <putChar_Note>
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	6f 5f       	subi	r22, 0xFF	; 255
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	0f 2e       	mov	r0, r31
    2b24:	fd e2       	ldi	r31, 0x2D	; 45
    2b26:	9f 2e       	mov	r9, r31
    2b28:	f0 2d       	mov	r31, r0
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	90 82       	st	Z, r9
    2b2e:	f6 01       	movw	r30, r12
    2b30:	ee 0f       	add	r30, r30
    2b32:	ff 1f       	adc	r31, r31
    2b34:	ce 0e       	add	r12, r30
    2b36:	df 1e       	adc	r13, r31
    2b38:	58 01       	movw	r10, r16
    2b3a:	aa 0c       	add	r10, r10
    2b3c:	bb 1c       	adc	r11, r11
    2b3e:	e5 01       	movw	r28, r10
    2b40:	c0 0f       	add	r28, r16
    2b42:	d1 1f       	adc	r29, r17
    2b44:	cc 0f       	add	r28, r28
    2b46:	dd 1f       	adc	r29, r29
    2b48:	cc 0f       	add	r28, r28
    2b4a:	dd 1f       	adc	r29, r29
    2b4c:	cc 0d       	add	r28, r12
    2b4e:	dd 1d       	adc	r29, r13
    2b50:	c9 51       	subi	r28, 0x19	; 25
    2b52:	d7 4f       	sbci	r29, 0xF7	; 247
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	0e 94 22 29 	call	0x5244	; 0x5244 <putChar_Note>
    2b5a:	20 e2       	ldi	r18, 0x20	; 32
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	20 83       	st	Z, r18
    2b60:	85 eb       	ldi	r24, 0xB5	; 181
    2b62:	9c e0       	ldi	r25, 0x0C	; 12
    2b64:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2b68:	88 e8       	ldi	r24, 0x88	; 136
    2b6a:	92 e0       	ldi	r25, 0x02	; 2
    2b6c:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	82 95       	swap	r24
    2b74:	86 95       	lsr	r24
    2b76:	87 70       	andi	r24, 0x07	; 7
    2b78:	80 5d       	subi	r24, 0xD0	; 208
    2b7a:	0e 94 65 27 	call	0x4eca	; 0x4eca <serial0SER_USBSend>
    2b7e:	81 e8       	ldi	r24, 0x81	; 129
    2b80:	92 e0       	ldi	r25, 0x02	; 2
    2b82:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <serial0SER_USB_sendStringP>
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	65 eb       	ldi	r22, 0xB5	; 181
    2b8a:	7c e0       	ldi	r23, 0x0C	; 12
    2b8c:	8f 71       	andi	r24, 0x1F	; 31
    2b8e:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    2b92:	bc 01       	movw	r22, r24
    2b94:	6f 5f       	subi	r22, 0xFF	; 255
    2b96:	7f 4f       	sbci	r23, 0xFF	; 255
    2b98:	fc 01       	movw	r30, r24
    2b9a:	90 82       	st	Z, r9
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	99 81       	ldd	r25, Y+1	; 0x01
    2ba0:	28 81       	ld	r18, Y
    2ba2:	8f 71       	andi	r24, 0x1F	; 31
    2ba4:	89 0f       	add	r24, r25
    2ba6:	82 1b       	sub	r24, r18
    2ba8:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <putChar_Dec2>
    2bac:	85 eb       	ldi	r24, 0xB5	; 181
    2bae:	9c e0       	ldi	r25, 0x0C	; 12
    2bb0:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <serial0SER_USB_sendString>
    2bb4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <serial0SER_USB_sendCRLF>
    2bb8:	f3 94       	inc	r15
    2bba:	f3 e0       	ldi	r31, 0x03	; 3
    2bbc:	ff 15       	cp	r31, r15
    2bbe:	08 f0       	brcs	.+2      	; 0x2bc2 <menuOnEnterUSBsendHW+0x1e8>
    2bc0:	5d cf       	rjmp	.-326    	; 0x2a7c <menuOnEnterUSBsendHW+0xa2>
    2bc2:	e3 94       	inc	r14
    2bc4:	83 e0       	ldi	r24, 0x03	; 3
    2bc6:	8e 15       	cp	r24, r14
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <menuOnEnterUSBsendHW+0x1f2>
    2bca:	47 cf       	rjmp	.-370    	; 0x2a5a <menuOnEnterUSBsendHW+0x80>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	df 90       	pop	r13
    2bdc:	cf 90       	pop	r12
    2bde:	bf 90       	pop	r11
    2be0:	af 90       	pop	r10
    2be2:	9f 90       	pop	r9
    2be4:	08 95       	ret

00002be6 <softkeyCoupler>:
    2be6:	88 23       	and	r24, r24
    2be8:	21 f0       	breq	.+8      	; 0x2bf2 <softkeyCoupler+0xc>
    2bea:	fb 01       	movw	r30, r22
    2bec:	80 81       	ld	r24, Z
    2bee:	80 95       	com	r24
    2bf0:	80 83       	st	Z, r24
    2bf2:	fb 01       	movw	r30, r22
    2bf4:	80 81       	ld	r24, Z
    2bf6:	81 11       	cpse	r24, r1
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <softkeyCoupler+0x18>
    2bfa:	82 e8       	ldi	r24, 0x82	; 130
    2bfc:	08 95       	ret
    2bfe:	81 e8       	ldi	r24, 0x81	; 129
    2c00:	08 95       	ret

00002c02 <softKeyCoupler2from3>:
    2c02:	cf 93       	push	r28
    2c04:	61 ee       	ldi	r22, 0xE1	; 225
    2c06:	77 e0       	ldi	r23, 0x07	; 7
    2c08:	ee df       	rcall	.-36     	; 0x2be6 <softkeyCoupler>
    2c0a:	c8 2f       	mov	r28, r24
    2c0c:	82 38       	cpi	r24, 0x82	; 130
    2c0e:	19 f4       	brne	.+6      	; 0x2c16 <softKeyCoupler2from3+0x14>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c16:	8c 2f       	mov	r24, r28
    2c18:	cf 91       	pop	r28
    2c1a:	08 95       	ret

00002c1c <softKeyCoupler1from3>:
    2c1c:	cf 93       	push	r28
    2c1e:	6b e1       	ldi	r22, 0x1B	; 27
    2c20:	7b e0       	ldi	r23, 0x0B	; 11
    2c22:	e1 df       	rcall	.-62     	; 0x2be6 <softkeyCoupler>
    2c24:	c8 2f       	mov	r28, r24
    2c26:	82 38       	cpi	r24, 0x82	; 130
    2c28:	19 f4       	brne	.+6      	; 0x2c30 <softKeyCoupler1from3+0x14>
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c30:	8c 2f       	mov	r24, r28
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <softKeyCouplerPfrom3>:
    2c36:	cf 93       	push	r28
    2c38:	69 e1       	ldi	r22, 0x19	; 25
    2c3a:	7b e0       	ldi	r23, 0x0B	; 11
    2c3c:	d4 df       	rcall	.-88     	; 0x2be6 <softkeyCoupler>
    2c3e:	c8 2f       	mov	r28, r24
    2c40:	82 38       	cpi	r24, 0x82	; 130
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <softKeyCouplerPfrom3+0x14>
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c4a:	8c 2f       	mov	r24, r28
    2c4c:	cf 91       	pop	r28
    2c4e:	08 95       	ret

00002c50 <softKeyCoupler1from2>:
    2c50:	cf 93       	push	r28
    2c52:	66 ed       	ldi	r22, 0xD6	; 214
    2c54:	77 e0       	ldi	r23, 0x07	; 7
    2c56:	c7 df       	rcall	.-114    	; 0x2be6 <softkeyCoupler>
    2c58:	c8 2f       	mov	r28, r24
    2c5a:	82 38       	cpi	r24, 0x82	; 130
    2c5c:	19 f4       	brne	.+6      	; 0x2c64 <softKeyCoupler1from2+0x14>
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c64:	8c 2f       	mov	r24, r28
    2c66:	cf 91       	pop	r28
    2c68:	08 95       	ret

00002c6a <softKeyCouplerPfrom2>:
    2c6a:	cf 93       	push	r28
    2c6c:	62 ee       	ldi	r22, 0xE2	; 226
    2c6e:	77 e0       	ldi	r23, 0x07	; 7
    2c70:	ba df       	rcall	.-140    	; 0x2be6 <softkeyCoupler>
    2c72:	c8 2f       	mov	r28, r24
    2c74:	82 38       	cpi	r24, 0x82	; 130
    2c76:	19 f4       	brne	.+6      	; 0x2c7e <softKeyCouplerPfrom2+0x14>
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c7e:	8c 2f       	mov	r24, r28
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <softKeyCouplerPfrom1>:
    2c84:	cf 93       	push	r28
    2c86:	6a e1       	ldi	r22, 0x1A	; 26
    2c88:	7b e0       	ldi	r23, 0x0B	; 11
    2c8a:	ad df       	rcall	.-166    	; 0x2be6 <softkeyCoupler>
    2c8c:	c8 2f       	mov	r28, r24
    2c8e:	82 38       	cpi	r24, 0x82	; 130
    2c90:	19 f4       	brne	.+6      	; 0x2c98 <softKeyCouplerPfrom1+0x14>
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	0e 94 ac 24 	call	0x4958	; 0x4958 <midi_ManualOff>
    2c98:	8c 2f       	mov	r24, r28
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <menuLCDwriteOK>:
    2c9e:	8e e1       	ldi	r24, 0x1E	; 30
    2ca0:	62 d8       	rcall	.-3900   	; 0x1d66 <lcd_goto>
    2ca2:	8c e0       	ldi	r24, 0x0C	; 12
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	81 d8       	rcall	.-3838   	; 0x1daa <lcd_puts_P>
    2ca8:	9f b7       	in	r25, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	06 c0       	rjmp	.+12     	; 0x2cbc <menuLCDwriteOK+0x1e>
    2cb0:	ed e2       	ldi	r30, 0x2D	; 45
    2cb2:	f2 e0       	ldi	r31, 0x02	; 2
    2cb4:	84 e6       	ldi	r24, 0x64	; 100
    2cb6:	86 87       	std	Z+14, r24	; 0x0e
    2cb8:	17 86       	std	Z+15, r1	; 0x0f
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	81 11       	cpse	r24, r1
    2cbe:	f8 cf       	rjmp	.-16     	; 0x2cb0 <menuLCDwriteOK+0x12>
    2cc0:	9f bf       	out	0x3f, r25	; 63
    2cc2:	08 95       	ret

00002cc4 <menuOnEnterEEBackup>:
    2cc4:	8e e1       	ldi	r24, 0x1E	; 30
    2cc6:	4f d8       	rcall	.-3938   	; 0x1d66 <lcd_goto>
    2cc8:	84 e1       	ldi	r24, 0x14	; 20
    2cca:	93 e0       	ldi	r25, 0x03	; 3
    2ccc:	6e d8       	rcall	.-3876   	; 0x1daa <lcd_puts_P>
    2cce:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <eeprom_Backup>
    2cd2:	e5 df       	rcall	.-54     	; 0x2c9e <menuLCDwriteOK>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	08 95       	ret

00002cd8 <menuOnEnterEERestore>:
    2cd8:	8e e1       	ldi	r24, 0x1E	; 30
    2cda:	45 d8       	rcall	.-3958   	; 0x1d66 <lcd_goto>
    2cdc:	84 e1       	ldi	r24, 0x14	; 20
    2cde:	93 e0       	ldi	r25, 0x03	; 3
    2ce0:	64 d8       	rcall	.-3896   	; 0x1daa <lcd_puts_P>
    2ce2:	0e 94 66 09 	call	0x12cc	; 0x12cc <eeprom_Restore>
    2ce6:	db df       	rcall	.-74     	; 0x2c9e <menuLCDwriteOK>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	08 95       	ret

00002cec <menuOnEnterEEUpdate>:
    2cec:	8e e1       	ldi	r24, 0x1E	; 30
    2cee:	3b d8       	rcall	.-3978   	; 0x1d66 <lcd_goto>
    2cf0:	84 e1       	ldi	r24, 0x14	; 20
    2cf2:	93 e0       	ldi	r25, 0x03	; 3
    2cf4:	5a d8       	rcall	.-3916   	; 0x1daa <lcd_puts_P>
    2cf6:	0e 94 28 09 	call	0x1250	; 0x1250 <eeprom_UpdateALL>
    2cfa:	d1 df       	rcall	.-94     	; 0x2c9e <menuLCDwriteOK>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	08 95       	ret

00002d00 <menu_Init>:
    2d00:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <menuStackIndex>
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f4       	brne	.+26     	; 0x2d22 <menu_Init+0x22>
    2d08:	84 ee       	ldi	r24, 0xE4	; 228
    2d0a:	94 e0       	ldi	r25, 0x04	; 4
    2d0c:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <currentMenu+0x1>
    2d10:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <currentMenu>
    2d14:	82 e4       	ldi	r24, 0x42	; 66
    2d16:	93 e0       	ldi	r25, 0x03	; 3
    2d18:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pMenuTopTitle+0x1>
    2d1c:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pMenuTopTitle>
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <menu_Init+0x32>
    2d22:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <currentMenu+0x1>
    2d26:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <currentMenu>
    2d2a:	70 93 4a 05 	sts	0x054A, r23	; 0x80054a <pMenuTopTitle+0x1>
    2d2e:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <pMenuTopTitle>
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    2d38:	8c e4       	ldi	r24, 0x4C	; 76
    2d3a:	93 e0       	ldi	r25, 0x03	; 3
    2d3c:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <pNibbleInfo+0x1>
    2d40:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <pNibbleInfo>
    2d44:	08 95       	ret

00002d46 <softkeyLeft>:
    2d46:	66 e9       	ldi	r22, 0x96	; 150
    2d48:	7c e0       	ldi	r23, 0x0C	; 12
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d50:	08 95       	ret

00002d52 <softkeyRight>:
    2d52:	68 e9       	ldi	r22, 0x98	; 152
    2d54:	7c e0       	ldi	r23, 0x0C	; 12
    2d56:	83 e0       	ldi	r24, 0x03	; 3
    2d58:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d5c:	08 95       	ret

00002d5e <softkeyDown>:
    2d5e:	6a e9       	ldi	r22, 0x9A	; 154
    2d60:	7c e0       	ldi	r23, 0x0C	; 12
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d68:	08 95       	ret

00002d6a <softkeyUp>:
    2d6a:	6c e9       	ldi	r22, 0x9C	; 156
    2d6c:	7c e0       	ldi	r23, 0x0C	; 12
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d74:	08 95       	ret

00002d76 <softkeyPlus>:
    2d76:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    2d7a:	8a 30       	cpi	r24, 0x0A	; 10
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <softkeyPlus+0x14>
    2d7e:	6e e7       	ldi	r22, 0x7E	; 126
    2d80:	7c e0       	ldi	r23, 0x0C	; 12
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d88:	08 95       	ret
    2d8a:	64 e9       	ldi	r22, 0x94	; 148
    2d8c:	7c e0       	ldi	r23, 0x0C	; 12
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2d94:	08 95       	ret

00002d96 <softkeyMinus>:
    2d96:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    2d9a:	8a 30       	cpi	r24, 0x0A	; 10
    2d9c:	31 f4       	brne	.+12     	; 0x2daa <softkeyMinus+0x14>
    2d9e:	60 e8       	ldi	r22, 0x80	; 128
    2da0:	7c e0       	ldi	r23, 0x0C	; 12
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2da8:	08 95       	ret
    2daa:	62 e9       	ldi	r22, 0x92	; 146
    2dac:	7c e0       	ldi	r23, 0x0C	; 12
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <keylabel_set>
    2db4:	08 95       	ret

00002db6 <dataToNibbles>:
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    2dbe:	8e 2f       	mov	r24, r30
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	32 97       	sbiw	r30, 0x02	; 2
    2dc6:	ea 30       	cpi	r30, 0x0A	; 10
    2dc8:	f1 05       	cpc	r31, r1
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <dataToNibbles+0x18>
    2dcc:	bf c0       	rjmp	.+382    	; 0x2f4c <dataToNibbles+0x196>
    2dce:	88 27       	eor	r24, r24
    2dd0:	ee 58       	subi	r30, 0x8E	; 142
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd6:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <__tablejump2__>
    2dda:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2dde:	e3 e6       	ldi	r30, 0x63	; 99
    2de0:	f5 e0       	ldi	r31, 0x05	; 5
    2de2:	98 2f       	mov	r25, r24
    2de4:	92 95       	swap	r25
    2de6:	9f 70       	andi	r25, 0x0F	; 15
    2de8:	90 83       	st	Z, r25
    2dea:	8f 70       	andi	r24, 0x0F	; 15
    2dec:	81 83       	std	Z+1, r24	; 0x01
    2dee:	ae c0       	rjmp	.+348    	; 0x2f4c <dataToNibbles+0x196>
    2df0:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2df4:	80 31       	cpi	r24, 0x10	; 16
    2df6:	20 f0       	brcs	.+8      	; 0x2e00 <dataToNibbles+0x4a>
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2dfe:	a6 c0       	rjmp	.+332    	; 0x2f4c <dataToNibbles+0x196>
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2e06:	a2 c0       	rjmp	.+324    	; 0x2f4c <dataToNibbles+0x196>
    2e08:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2e0c:	88 23       	and	r24, r24
    2e0e:	34 f4       	brge	.+12     	; 0x2e1c <dataToNibbles+0x66>
    2e10:	e3 e6       	ldi	r30, 0x63	; 99
    2e12:	f5 e0       	ldi	r31, 0x05	; 5
    2e14:	10 82       	st	Z, r1
    2e16:	8f ef       	ldi	r24, 0xFF	; 255
    2e18:	81 83       	std	Z+1, r24	; 0x01
    2e1a:	98 c0       	rjmp	.+304    	; 0x2f4c <dataToNibbles+0x196>
    2e1c:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <nibble+0x1>
    2e20:	08 c0       	rjmp	.+16     	; 0x2e32 <dataToNibbles+0x7c>
    2e22:	e3 e6       	ldi	r30, 0x63	; 99
    2e24:	f5 e0       	ldi	r31, 0x05	; 5
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	9f 5f       	subi	r25, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	8c 50       	subi	r24, 0x0C	; 12
    2e2e:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2e32:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2e36:	8c 30       	cpi	r24, 0x0C	; 12
    2e38:	a0 f7       	brcc	.-24     	; 0x2e22 <dataToNibbles+0x6c>
    2e3a:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2e3e:	86 c0       	rjmp	.+268    	; 0x2f4c <dataToNibbles+0x196>
    2e40:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2e44:	e3 e6       	ldi	r30, 0x63	; 99
    2e46:	f5 e0       	ldi	r31, 0x05	; 5
    2e48:	98 2f       	mov	r25, r24
    2e4a:	92 95       	swap	r25
    2e4c:	96 95       	lsr	r25
    2e4e:	97 70       	andi	r25, 0x07	; 7
    2e50:	90 83       	st	Z, r25
    2e52:	8f 71       	andi	r24, 0x1F	; 31
    2e54:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2e58:	11 82       	std	Z+1, r1	; 0x01
    2e5a:	08 c0       	rjmp	.+16     	; 0x2e6c <dataToNibbles+0xb6>
    2e5c:	e3 e6       	ldi	r30, 0x63	; 99
    2e5e:	f5 e0       	ldi	r31, 0x05	; 5
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	9f 5f       	subi	r25, 0xFF	; 255
    2e64:	91 83       	std	Z+1, r25	; 0x01
    2e66:	8a 50       	subi	r24, 0x0A	; 10
    2e68:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2e6c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2e70:	8a 30       	cpi	r24, 0x0A	; 10
    2e72:	a0 f7       	brcc	.-24     	; 0x2e5c <dataToNibbles+0xa6>
    2e74:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <nibble+0x2>
    2e78:	69 c0       	rjmp	.+210    	; 0x2f4c <dataToNibbles+0x196>
    2e7a:	e3 e6       	ldi	r30, 0x63	; 99
    2e7c:	f5 e0       	ldi	r31, 0x05	; 5
    2e7e:	10 82       	st	Z, r1
    2e80:	11 82       	std	Z+1, r1	; 0x01
    2e82:	08 c0       	rjmp	.+16     	; 0x2e94 <dataToNibbles+0xde>
    2e84:	e3 e6       	ldi	r30, 0x63	; 99
    2e86:	f5 e0       	ldi	r31, 0x05	; 5
    2e88:	90 81       	ld	r25, Z
    2e8a:	9f 5f       	subi	r25, 0xFF	; 255
    2e8c:	90 83       	st	Z, r25
    2e8e:	84 56       	subi	r24, 0x64	; 100
    2e90:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2e94:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2e98:	84 36       	cpi	r24, 0x64	; 100
    2e9a:	a0 f7       	brcc	.-24     	; 0x2e84 <dataToNibbles+0xce>
    2e9c:	08 c0       	rjmp	.+16     	; 0x2eae <dataToNibbles+0xf8>
    2e9e:	e3 e6       	ldi	r30, 0x63	; 99
    2ea0:	f5 e0       	ldi	r31, 0x05	; 5
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	9f 5f       	subi	r25, 0xFF	; 255
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	8a 50       	subi	r24, 0x0A	; 10
    2eaa:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2eae:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2eb2:	8a 30       	cpi	r24, 0x0A	; 10
    2eb4:	a0 f7       	brcc	.-24     	; 0x2e9e <dataToNibbles+0xe8>
    2eb6:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <nibble+0x2>
    2eba:	48 c0       	rjmp	.+144    	; 0x2f4c <dataToNibbles+0x196>
    2ebc:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	20 f0       	brcs	.+8      	; 0x2ecc <dataToNibbles+0x116>
    2ec4:	8f ef       	ldi	r24, 0xFF	; 255
    2ec6:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2eca:	40 c0       	rjmp	.+128    	; 0x2f4c <dataToNibbles+0x196>
    2ecc:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2ed0:	3d c0       	rjmp	.+122    	; 0x2f4c <dataToNibbles+0x196>
    2ed2:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2ed6:	84 30       	cpi	r24, 0x04	; 4
    2ed8:	20 f0       	brcs	.+8      	; 0x2ee2 <dataToNibbles+0x12c>
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2ee0:	35 c0       	rjmp	.+106    	; 0x2f4c <dataToNibbles+0x196>
    2ee2:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2ee6:	32 c0       	rjmp	.+100    	; 0x2f4c <dataToNibbles+0x196>
    2ee8:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2eec:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    2ef0:	2d c0       	rjmp	.+90     	; 0x2f4c <dataToNibbles+0x196>
    2ef2:	e9 2f       	mov	r30, r25
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    2efa:	28 2f       	mov	r18, r24
    2efc:	22 1f       	adc	r18, r18
    2efe:	22 27       	eor	r18, r18
    2f00:	22 1f       	adc	r18, r18
    2f02:	ed 59       	subi	r30, 0x9D	; 157
    2f04:	fa 4f       	sbci	r31, 0xFA	; 250
    2f06:	20 83       	st	Z, r18
    2f08:	88 0f       	add	r24, r24
    2f0a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    2f0e:	9f 5f       	subi	r25, 0xFF	; 255
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <dataToNibbles+0x15e>
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	98 30       	cpi	r25, 0x08	; 8
    2f16:	68 f3       	brcs	.-38     	; 0x2ef2 <dataToNibbles+0x13c>
    2f18:	19 c0       	rjmp	.+50     	; 0x2f4c <dataToNibbles+0x196>
    2f1a:	82 50       	subi	r24, 0x02	; 2
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	de 01       	movw	r26, r28
    2f20:	9d 91       	ld	r25, X+
    2f22:	ed 59       	subi	r30, 0x9D	; 157
    2f24:	fa 4f       	sbci	r31, 0xFA	; 250
    2f26:	9f 70       	andi	r25, 0x0F	; 15
    2f28:	90 83       	st	Z, r25
    2f2a:	e8 2f       	mov	r30, r24
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	98 81       	ld	r25, Y
    2f30:	ed 59       	subi	r30, 0x9D	; 157
    2f32:	fa 4f       	sbci	r31, 0xFA	; 250
    2f34:	92 95       	swap	r25
    2f36:	9f 70       	andi	r25, 0x0F	; 15
    2f38:	90 83       	st	Z, r25
    2f3a:	ed 01       	movw	r28, r26
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <dataToNibbles+0x18e>
    2f3e:	ce e4       	ldi	r28, 0x4E	; 78
    2f40:	d5 e0       	ldi	r29, 0x05	; 5
    2f42:	88 e0       	ldi	r24, 0x08	; 8
    2f44:	ef ef       	ldi	r30, 0xFF	; 255
    2f46:	e8 0f       	add	r30, r24
    2f48:	81 11       	cpse	r24, r1
    2f4a:	e7 cf       	rjmp	.-50     	; 0x2f1a <dataToNibbles+0x164>
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	08 95       	ret

00002f52 <nibbleToLCDstring>:
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    2f5e:	8e 2f       	mov	r24, r30
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	fc 01       	movw	r30, r24
    2f64:	32 97       	sbiw	r30, 0x02	; 2
    2f66:	ea 30       	cpi	r30, 0x0A	; 10
    2f68:	f1 05       	cpc	r31, r1
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <nibbleToLCDstring+0x1c>
    2f6c:	ff c0       	rjmp	.+510    	; 0x316c <nibbleToLCDstring+0x21a>
    2f6e:	88 27       	eor	r24, r24
    2f70:	e4 58       	subi	r30, 0x84	; 132
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	8f 4f       	sbci	r24, 0xFF	; 255
    2f76:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <__tablejump2__>
    2f7a:	03 e6       	ldi	r16, 0x63	; 99
    2f7c:	15 e0       	ldi	r17, 0x05	; 5
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 81       	ld	r24, Z
    2f82:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    2f86:	c3 e2       	ldi	r28, 0x23	; 35
    2f88:	d2 e0       	ldi	r29, 0x02	; 2
    2f8a:	88 83       	st	Y, r24
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	81 81       	ldd	r24, Z+1	; 0x01
    2f90:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	1a 82       	std	Y+2, r1	; 0x02
    2f98:	e9 c0       	rjmp	.+466    	; 0x316c <nibbleToLCDstring+0x21a>
    2f9a:	e3 e2       	ldi	r30, 0x23	; 35
    2f9c:	f2 e0       	ldi	r31, 0x02	; 2
    2f9e:	83 e4       	ldi	r24, 0x43	; 67
    2fa0:	80 83       	st	Z, r24
    2fa2:	88 e6       	ldi	r24, 0x68	; 104
    2fa4:	81 83       	std	Z+1, r24	; 0x01
    2fa6:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    2faa:	8f 3f       	cpi	r24, 0xFF	; 255
    2fac:	29 f4       	brne	.+10     	; 0x2fb8 <nibbleToLCDstring+0x66>
    2fae:	80 e2       	ldi	r24, 0x20	; 32
    2fb0:	82 83       	std	Z+2, r24	; 0x02
    2fb2:	8d e2       	ldi	r24, 0x2D	; 45
    2fb4:	83 83       	std	Z+3, r24	; 0x03
    2fb6:	12 c0       	rjmp	.+36     	; 0x2fdc <nibbleToLCDstring+0x8a>
    2fb8:	8a 30       	cpi	r24, 0x0A	; 10
    2fba:	48 f0       	brcs	.+18     	; 0x2fce <nibbleToLCDstring+0x7c>
    2fbc:	c3 e2       	ldi	r28, 0x23	; 35
    2fbe:	d2 e0       	ldi	r29, 0x02	; 2
    2fc0:	91 e3       	ldi	r25, 0x31	; 49
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	8a 50       	subi	r24, 0x0A	; 10
    2fc6:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	07 c0       	rjmp	.+14     	; 0x2fdc <nibbleToLCDstring+0x8a>
    2fce:	c3 e2       	ldi	r28, 0x23	; 35
    2fd0:	d2 e0       	ldi	r29, 0x02	; 2
    2fd2:	90 e3       	ldi	r25, 0x30	; 48
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    2fda:	8b 83       	std	Y+3, r24	; 0x03
    2fdc:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x4>
    2fe0:	c5 c0       	rjmp	.+394    	; 0x316c <nibbleToLCDstring+0x21a>
    2fe2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    2fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe8:	21 f0       	breq	.+8      	; 0x2ff2 <nibbleToLCDstring+0xa0>
    2fea:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <nibble+0x1>
    2fee:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff0:	59 f4       	brne	.+22     	; 0x3008 <nibbleToLCDstring+0xb6>
    2ff2:	e3 e2       	ldi	r30, 0x23	; 35
    2ff4:	f2 e0       	ldi	r31, 0x02	; 2
    2ff6:	8e e6       	ldi	r24, 0x6E	; 110
    2ff8:	80 83       	st	Z, r24
    2ffa:	9f e6       	ldi	r25, 0x6F	; 111
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	82 83       	std	Z+2, r24	; 0x02
    3000:	85 e6       	ldi	r24, 0x65	; 101
    3002:	83 83       	std	Z+3, r24	; 0x03
    3004:	14 82       	std	Z+4, r1	; 0x04
    3006:	b2 c0       	rjmp	.+356    	; 0x316c <nibbleToLCDstring+0x21a>
    3008:	9f e5       	ldi	r25, 0x5F	; 95
    300a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <lcdData+0x1>
    300e:	8b 30       	cpi	r24, 0x0B	; 11
    3010:	21 f4       	brne	.+8      	; 0x301a <nibbleToLCDstring+0xc8>
    3012:	88 e4       	ldi	r24, 0x48	; 72
    3014:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <lcdData>
    3018:	20 c0       	rjmp	.+64     	; 0x305a <nibbleToLCDstring+0x108>
    301a:	85 30       	cpi	r24, 0x05	; 5
    301c:	58 f4       	brcc	.+22     	; 0x3034 <nibbleToLCDstring+0xe2>
    301e:	98 2f       	mov	r25, r24
    3020:	96 95       	lsr	r25
    3022:	9d 5b       	subi	r25, 0xBD	; 189
    3024:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <lcdData>
    3028:	80 ff       	sbrs	r24, 0
    302a:	17 c0       	rjmp	.+46     	; 0x305a <nibbleToLCDstring+0x108>
    302c:	83 e2       	ldi	r24, 0x23	; 35
    302e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lcdData+0x1>
    3032:	13 c0       	rjmp	.+38     	; 0x305a <nibbleToLCDstring+0x108>
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	25 50       	subi	r18, 0x05	; 5
    303a:	31 09       	sbc	r19, r1
    303c:	35 95       	asr	r19
    303e:	27 95       	ror	r18
    3040:	2a 5b       	subi	r18, 0xBA	; 186
    3042:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <lcdData>
    3046:	80 fd       	sbrc	r24, 0
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <nibbleToLCDstring+0xfe>
    304a:	83 e2       	ldi	r24, 0x23	; 35
    304c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lcdData+0x1>
    3050:	28 34       	cpi	r18, 0x48	; 72
    3052:	19 f4       	brne	.+6      	; 0x305a <nibbleToLCDstring+0x108>
    3054:	81 e4       	ldi	r24, 0x41	; 65
    3056:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <lcdData>
    305a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <nibble+0x1>
    305e:	81 11       	cpse	r24, r1
    3060:	04 c0       	rjmp	.+8      	; 0x306a <nibbleToLCDstring+0x118>
    3062:	8d e6       	ldi	r24, 0x6D	; 109
    3064:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3068:	0b c0       	rjmp	.+22     	; 0x3080 <nibbleToLCDstring+0x12e>
    306a:	8c 30       	cpi	r24, 0x0C	; 12
    306c:	30 f4       	brcc	.+12     	; 0x307a <nibbleToLCDstring+0x128>
    306e:	81 50       	subi	r24, 0x01	; 1
    3070:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    3074:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3078:	03 c0       	rjmp	.+6      	; 0x3080 <nibbleToLCDstring+0x12e>
    307a:	8d e2       	ldi	r24, 0x2D	; 45
    307c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3080:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <lcdData+0x3>
    3084:	73 c0       	rjmp	.+230    	; 0x316c <nibbleToLCDstring+0x21a>
    3086:	c3 e2       	ldi	r28, 0x23	; 35
    3088:	d2 e0       	ldi	r29, 0x02	; 2
    308a:	8d e4       	ldi	r24, 0x4D	; 77
    308c:	88 83       	st	Y, r24
    308e:	03 e6       	ldi	r16, 0x63	; 99
    3090:	15 e0       	ldi	r17, 0x05	; 5
    3092:	f8 01       	movw	r30, r16
    3094:	80 81       	ld	r24, Z
    3096:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	82 e4       	ldi	r24, 0x42	; 66
    309e:	8a 83       	std	Y+2, r24	; 0x02
    30a0:	f8 01       	movw	r30, r16
    30a2:	81 81       	ldd	r24, Z+1	; 0x01
    30a4:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    30aa:	f8 01       	movw	r30, r16
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    30b2:	8c 83       	std	Y+4, r24	; 0x04
    30b4:	1d 82       	std	Y+5, r1	; 0x05
    30b6:	5a c0       	rjmp	.+180    	; 0x316c <nibbleToLCDstring+0x21a>
    30b8:	03 e6       	ldi	r16, 0x63	; 99
    30ba:	15 e0       	ldi	r17, 0x05	; 5
    30bc:	f8 01       	movw	r30, r16
    30be:	80 81       	ld	r24, Z
    30c0:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    30c4:	c3 e2       	ldi	r28, 0x23	; 35
    30c6:	d2 e0       	ldi	r29, 0x02	; 2
    30c8:	88 83       	st	Y, r24
    30ca:	f8 01       	movw	r30, r16
    30cc:	81 81       	ldd	r24, Z+1	; 0x01
    30ce:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	f8 01       	movw	r30, r16
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    30dc:	8a 83       	std	Y+2, r24	; 0x02
    30de:	1b 82       	std	Y+3, r1	; 0x03
    30e0:	45 c0       	rjmp	.+138    	; 0x316c <nibbleToLCDstring+0x21a>
    30e2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    30e6:	83 30       	cpi	r24, 0x03	; 3
    30e8:	38 f4       	brcc	.+14     	; 0x30f8 <nibbleToLCDstring+0x1a6>
    30ea:	e3 e2       	ldi	r30, 0x23	; 35
    30ec:	f2 e0       	ldi	r31, 0x02	; 2
    30ee:	93 e3       	ldi	r25, 0x33	; 51
    30f0:	98 1b       	sub	r25, r24
    30f2:	90 83       	st	Z, r25
    30f4:	11 82       	std	Z+1, r1	; 0x01
    30f6:	3a c0       	rjmp	.+116    	; 0x316c <nibbleToLCDstring+0x21a>
    30f8:	83 30       	cpi	r24, 0x03	; 3
    30fa:	31 f4       	brne	.+12     	; 0x3108 <nibbleToLCDstring+0x1b6>
    30fc:	e3 e2       	ldi	r30, 0x23	; 35
    30fe:	f2 e0       	ldi	r31, 0x02	; 2
    3100:	80 e5       	ldi	r24, 0x50	; 80
    3102:	80 83       	st	Z, r24
    3104:	11 82       	std	Z+1, r1	; 0x01
    3106:	32 c0       	rjmp	.+100    	; 0x316c <nibbleToLCDstring+0x21a>
    3108:	e3 e2       	ldi	r30, 0x23	; 35
    310a:	f2 e0       	ldi	r31, 0x02	; 2
    310c:	8d e2       	ldi	r24, 0x2D	; 45
    310e:	80 83       	st	Z, r24
    3110:	11 82       	std	Z+1, r1	; 0x01
    3112:	2c c0       	rjmp	.+88     	; 0x316c <nibbleToLCDstring+0x21a>
    3114:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3118:	e3 e2       	ldi	r30, 0x23	; 35
    311a:	f2 e0       	ldi	r31, 0x02	; 2
    311c:	80 5d       	subi	r24, 0xD0	; 208
    311e:	80 83       	st	Z, r24
    3120:	11 82       	std	Z+1, r1	; 0x01
    3122:	24 c0       	rjmp	.+72     	; 0x316c <nibbleToLCDstring+0x21a>
    3124:	8f e6       	ldi	r24, 0x6F	; 111
    3126:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <lcdData>
    312a:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    312e:	81 11       	cpse	r24, r1
    3130:	07 c0       	rjmp	.+14     	; 0x3140 <nibbleToLCDstring+0x1ee>
    3132:	e3 e2       	ldi	r30, 0x23	; 35
    3134:	f2 e0       	ldi	r31, 0x02	; 2
    3136:	86 e6       	ldi	r24, 0x66	; 102
    3138:	81 83       	std	Z+1, r24	; 0x01
    313a:	82 83       	std	Z+2, r24	; 0x02
    313c:	13 82       	std	Z+3, r1	; 0x03
    313e:	16 c0       	rjmp	.+44     	; 0x316c <nibbleToLCDstring+0x21a>
    3140:	e3 e2       	ldi	r30, 0x23	; 35
    3142:	f2 e0       	ldi	r31, 0x02	; 2
    3144:	8e e6       	ldi	r24, 0x6E	; 110
    3146:	81 83       	std	Z+1, r24	; 0x01
    3148:	12 82       	std	Z+2, r1	; 0x02
    314a:	10 c0       	rjmp	.+32     	; 0x316c <nibbleToLCDstring+0x21a>
    314c:	c1 2f       	mov	r28, r17
    314e:	d0 e0       	ldi	r29, 0x00	; 0
    3150:	fe 01       	movw	r30, r28
    3152:	ed 59       	subi	r30, 0x9D	; 157
    3154:	fa 4f       	sbci	r31, 0xFA	; 250
    3156:	80 81       	ld	r24, Z
    3158:	0e 94 44 28 	call	0x5088	; 0x5088 <nibbleToChr>
    315c:	cd 5d       	subi	r28, 0xDD	; 221
    315e:	dd 4f       	sbci	r29, 0xFD	; 253
    3160:	88 83       	st	Y, r24
    3162:	1f 5f       	subi	r17, 0xFF	; 255
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <nibbleToLCDstring+0x216>
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	18 30       	cpi	r17, 0x08	; 8
    316a:	80 f3       	brcs	.-32     	; 0x314c <nibbleToLCDstring+0x1fa>
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	08 95       	ret

00003176 <LCDStringOut>:
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	8e e1       	ldi	r24, 0x1E	; 30
    317e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3182:	c0 e0       	ldi	r28, 0x00	; 0
    3184:	03 e2       	ldi	r16, 0x23	; 35
    3186:	12 e0       	ldi	r17, 0x02	; 2
    3188:	0b c0       	rjmp	.+22     	; 0x31a0 <LCDStringOut+0x2a>
    318a:	f8 01       	movw	r30, r16
    318c:	80 81       	ld	r24, Z
    318e:	88 23       	and	r24, r24
    3190:	19 f0       	breq	.+6      	; 0x3198 <LCDStringOut+0x22>
    3192:	0f 5f       	subi	r16, 0xFF	; 255
    3194:	1f 4f       	sbci	r17, 0xFF	; 255
    3196:	01 c0       	rjmp	.+2      	; 0x319a <LCDStringOut+0x24>
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    319e:	cf 5f       	subi	r28, 0xFF	; 255
    31a0:	ca 30       	cpi	r28, 0x0A	; 10
    31a2:	98 f3       	brcs	.-26     	; 0x318a <LCDStringOut+0x14>
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <nibbleCheckOvfl>:
    31ac:	8a 30       	cpi	r24, 0x0A	; 10
    31ae:	1c f4       	brge	.+6      	; 0x31b6 <nibbleCheckOvfl+0xa>
    31b0:	88 23       	and	r24, r24
    31b2:	1c f0       	brlt	.+6      	; 0x31ba <nibbleCheckOvfl+0xe>
    31b4:	08 95       	ret
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	08 95       	ret
    31ba:	89 e0       	ldi	r24, 0x09	; 9
    31bc:	08 95       	ret

000031be <nibbleChange>:
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	c8 2f       	mov	r28, r24
    31c8:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    31cc:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    31d0:	31 96       	adiw	r30, 0x01	; 1
    31d2:	84 91       	lpm	r24, Z
    31d4:	28 2f       	mov	r18, r24
    31d6:	20 71       	andi	r18, 0x10	; 16
    31d8:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    31dc:	8e 2f       	mov	r24, r30
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	fc 01       	movw	r30, r24
    31e2:	32 97       	sbiw	r30, 0x02	; 2
    31e4:	ea 30       	cpi	r30, 0x0A	; 10
    31e6:	f1 05       	cpc	r31, r1
    31e8:	08 f0       	brcs	.+2      	; 0x31ec <nibbleChange+0x2e>
    31ea:	53 c1       	rjmp	.+678    	; 0x3492 <nibbleChange+0x2d4>
    31ec:	88 27       	eor	r24, r24
    31ee:	ea 57       	subi	r30, 0x7A	; 122
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <__tablejump2__>
    31f8:	d0 e0       	ldi	r29, 0x00	; 0
    31fa:	cd 59       	subi	r28, 0x9D	; 157
    31fc:	da 4f       	sbci	r29, 0xFA	; 250
    31fe:	88 81       	ld	r24, Y
    3200:	68 0f       	add	r22, r24
    3202:	6f 70       	andi	r22, 0x0F	; 15
    3204:	68 83       	st	Y, r22
    3206:	45 c1       	rjmp	.+650    	; 0x3492 <nibbleChange+0x2d4>
    3208:	21 11       	cpse	r18, r1
    320a:	1a c0       	rjmp	.+52     	; 0x3240 <nibbleChange+0x82>
    320c:	61 30       	cpi	r22, 0x01	; 1
    320e:	41 f4       	brne	.+16     	; 0x3220 <nibbleChange+0x62>
    3210:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3214:	80 31       	cpi	r24, 0x10	; 16
    3216:	21 f4       	brne	.+8      	; 0x3220 <nibbleChange+0x62>
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    321e:	39 c1       	rjmp	.+626    	; 0x3492 <nibbleChange+0x2d4>
    3220:	6f 3f       	cpi	r22, 0xFF	; 255
    3222:	41 f4       	brne	.+16     	; 0x3234 <nibbleChange+0x76>
    3224:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	21 f4       	brne	.+8      	; 0x3234 <nibbleChange+0x76>
    322c:	80 e1       	ldi	r24, 0x10	; 16
    322e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    3232:	2f c1       	rjmp	.+606    	; 0x3492 <nibbleChange+0x2d4>
    3234:	e3 e6       	ldi	r30, 0x63	; 99
    3236:	f5 e0       	ldi	r31, 0x05	; 5
    3238:	80 81       	ld	r24, Z
    323a:	68 0f       	add	r22, r24
    323c:	60 83       	st	Z, r22
    323e:	29 c1       	rjmp	.+594    	; 0x3492 <nibbleChange+0x2d4>
    3240:	61 30       	cpi	r22, 0x01	; 1
    3242:	41 f4       	brne	.+16     	; 0x3254 <nibbleChange+0x96>
    3244:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3248:	80 31       	cpi	r24, 0x10	; 16
    324a:	21 f4       	brne	.+8      	; 0x3254 <nibbleChange+0x96>
    324c:	8f ef       	ldi	r24, 0xFF	; 255
    324e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    3252:	1f c1       	rjmp	.+574    	; 0x3492 <nibbleChange+0x2d4>
    3254:	61 30       	cpi	r22, 0x01	; 1
    3256:	41 f4       	brne	.+16     	; 0x3268 <nibbleChange+0xaa>
    3258:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    325c:	8f 3f       	cpi	r24, 0xFF	; 255
    325e:	21 f4       	brne	.+8      	; 0x3268 <nibbleChange+0xaa>
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    3266:	15 c1       	rjmp	.+554    	; 0x3492 <nibbleChange+0x2d4>
    3268:	6f 3f       	cpi	r22, 0xFF	; 255
    326a:	41 f4       	brne	.+16     	; 0x327c <nibbleChange+0xbe>
    326c:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3270:	8f 3f       	cpi	r24, 0xFF	; 255
    3272:	21 f4       	brne	.+8      	; 0x327c <nibbleChange+0xbe>
    3274:	80 e1       	ldi	r24, 0x10	; 16
    3276:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    327a:	0b c1       	rjmp	.+534    	; 0x3492 <nibbleChange+0x2d4>
    327c:	6f 3f       	cpi	r22, 0xFF	; 255
    327e:	41 f4       	brne	.+16     	; 0x3290 <nibbleChange+0xd2>
    3280:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	21 f4       	brne	.+8      	; 0x3290 <nibbleChange+0xd2>
    3288:	8f ef       	ldi	r24, 0xFF	; 255
    328a:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <nibble>
    328e:	01 c1       	rjmp	.+514    	; 0x3492 <nibbleChange+0x2d4>
    3290:	e3 e6       	ldi	r30, 0x63	; 99
    3292:	f5 e0       	ldi	r31, 0x05	; 5
    3294:	80 81       	ld	r24, Z
    3296:	68 0f       	add	r22, r24
    3298:	60 83       	st	Z, r22
    329a:	fb c0       	rjmp	.+502    	; 0x3492 <nibbleChange+0x2d4>
    329c:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <nibble+0x1>
    32a0:	8f 3f       	cpi	r24, 0xFF	; 255
    32a2:	09 f4       	brne	.+2      	; 0x32a6 <nibbleChange+0xe8>
    32a4:	c1 e0       	ldi	r28, 0x01	; 1
    32a6:	c1 11       	cpse	r28, r1
    32a8:	16 c0       	rjmp	.+44     	; 0x32d6 <nibbleChange+0x118>
    32aa:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    32ae:	8c 30       	cpi	r24, 0x0C	; 12
    32b0:	50 f4       	brcc	.+20     	; 0x32c6 <nibbleChange+0x108>
    32b2:	8b 30       	cpi	r24, 0x0B	; 11
    32b4:	11 f4       	brne	.+4      	; 0x32ba <nibbleChange+0xfc>
    32b6:	61 30       	cpi	r22, 0x01	; 1
    32b8:	41 f0       	breq	.+16     	; 0x32ca <nibbleChange+0x10c>
    32ba:	81 11       	cpse	r24, r1
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <nibbleChange+0x104>
    32be:	6f 3f       	cpi	r22, 0xFF	; 255
    32c0:	31 f0       	breq	.+12     	; 0x32ce <nibbleChange+0x110>
    32c2:	68 0f       	add	r22, r24
    32c4:	05 c0       	rjmp	.+10     	; 0x32d0 <nibbleChange+0x112>
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <nibbleChange+0x112>
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <nibbleChange+0x112>
    32ce:	6b e0       	ldi	r22, 0x0B	; 11
    32d0:	60 93 63 05 	sts	0x0563, r22	; 0x800563 <nibble>
    32d4:	2b c0       	rjmp	.+86     	; 0x332c <nibbleChange+0x16e>
    32d6:	21 11       	cpse	r18, r1
    32d8:	0a c0       	rjmp	.+20     	; 0x32ee <nibbleChange+0x130>
    32da:	81 11       	cpse	r24, r1
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <nibbleChange+0x124>
    32de:	6f 3f       	cpi	r22, 0xFF	; 255
    32e0:	c1 f0       	breq	.+48     	; 0x3312 <nibbleChange+0x154>
    32e2:	8a 30       	cpi	r24, 0x0A	; 10
    32e4:	11 f4       	brne	.+4      	; 0x32ea <nibbleChange+0x12c>
    32e6:	61 30       	cpi	r22, 0x01	; 1
    32e8:	b1 f0       	breq	.+44     	; 0x3316 <nibbleChange+0x158>
    32ea:	68 0f       	add	r22, r24
    32ec:	1d c0       	rjmp	.+58     	; 0x3328 <nibbleChange+0x16a>
    32ee:	81 11       	cpse	r24, r1
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <nibbleChange+0x138>
    32f2:	6f 3f       	cpi	r22, 0xFF	; 255
    32f4:	91 f0       	breq	.+36     	; 0x331a <nibbleChange+0x15c>
    32f6:	8a 30       	cpi	r24, 0x0A	; 10
    32f8:	11 f4       	brne	.+4      	; 0x32fe <nibbleChange+0x140>
    32fa:	61 30       	cpi	r22, 0x01	; 1
    32fc:	81 f0       	breq	.+32     	; 0x331e <nibbleChange+0x160>
    32fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3300:	11 f4       	brne	.+4      	; 0x3306 <nibbleChange+0x148>
    3302:	61 30       	cpi	r22, 0x01	; 1
    3304:	71 f0       	breq	.+28     	; 0x3322 <nibbleChange+0x164>
    3306:	8f 3f       	cpi	r24, 0xFF	; 255
    3308:	11 f4       	brne	.+4      	; 0x330e <nibbleChange+0x150>
    330a:	6f 3f       	cpi	r22, 0xFF	; 255
    330c:	61 f0       	breq	.+24     	; 0x3326 <nibbleChange+0x168>
    330e:	68 0f       	add	r22, r24
    3310:	0b c0       	rjmp	.+22     	; 0x3328 <nibbleChange+0x16a>
    3312:	6a e0       	ldi	r22, 0x0A	; 10
    3314:	09 c0       	rjmp	.+18     	; 0x3328 <nibbleChange+0x16a>
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	07 c0       	rjmp	.+14     	; 0x3328 <nibbleChange+0x16a>
    331a:	6f ef       	ldi	r22, 0xFF	; 255
    331c:	05 c0       	rjmp	.+10     	; 0x3328 <nibbleChange+0x16a>
    331e:	6f ef       	ldi	r22, 0xFF	; 255
    3320:	03 c0       	rjmp	.+6      	; 0x3328 <nibbleChange+0x16a>
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	01 c0       	rjmp	.+2      	; 0x3328 <nibbleChange+0x16a>
    3326:	6a e0       	ldi	r22, 0x0A	; 10
    3328:	60 93 64 05 	sts	0x0564, r22	; 0x800564 <nibble+0x1>
    332c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <nibble>
    3330:	9f 3f       	cpi	r25, 0xFF	; 255
    3332:	09 f4       	brne	.+2      	; 0x3336 <nibbleChange+0x178>
    3334:	ae c0       	rjmp	.+348    	; 0x3492 <nibbleChange+0x2d4>
    3336:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <nibble+0x1>
    333a:	8f 3f       	cpi	r24, 0xFF	; 255
    333c:	09 f4       	brne	.+2      	; 0x3340 <nibbleChange+0x182>
    333e:	a9 c0       	rjmp	.+338    	; 0x3492 <nibbleChange+0x2d4>
    3340:	28 2f       	mov	r18, r24
    3342:	22 0f       	add	r18, r18
    3344:	82 0f       	add	r24, r18
    3346:	28 2f       	mov	r18, r24
    3348:	22 0f       	add	r18, r18
    334a:	22 0f       	add	r18, r18
    334c:	92 0f       	add	r25, r18
    334e:	0a f0       	brmi	.+2      	; 0x3352 <nibbleChange+0x194>
    3350:	a0 c0       	rjmp	.+320    	; 0x3492 <nibbleChange+0x2d4>
    3352:	e3 e6       	ldi	r30, 0x63	; 99
    3354:	f5 e0       	ldi	r31, 0x05	; 5
    3356:	87 e0       	ldi	r24, 0x07	; 7
    3358:	80 83       	st	Z, r24
    335a:	8a e0       	ldi	r24, 0x0A	; 10
    335c:	81 83       	std	Z+1, r24	; 0x01
    335e:	99 c0       	rjmp	.+306    	; 0x3492 <nibbleChange+0x2d4>
    3360:	c1 11       	cpse	r28, r1
    3362:	07 c0       	rjmp	.+14     	; 0x3372 <nibbleChange+0x1b4>
    3364:	e3 e6       	ldi	r30, 0x63	; 99
    3366:	f5 e0       	ldi	r31, 0x05	; 5
    3368:	80 81       	ld	r24, Z
    336a:	68 0f       	add	r22, r24
    336c:	67 70       	andi	r22, 0x07	; 7
    336e:	60 83       	st	Z, r22
    3370:	90 c0       	rjmp	.+288    	; 0x3492 <nibbleChange+0x2d4>
    3372:	d0 e0       	ldi	r29, 0x00	; 0
    3374:	03 e6       	ldi	r16, 0x63	; 99
    3376:	15 e0       	ldi	r17, 0x05	; 5
    3378:	cd 59       	subi	r28, 0x9D	; 157
    337a:	da 4f       	sbci	r29, 0xFA	; 250
    337c:	88 81       	ld	r24, Y
    337e:	86 0f       	add	r24, r22
    3380:	15 df       	rcall	.-470    	; 0x31ac <nibbleCheckOvfl>
    3382:	88 83       	st	Y, r24
    3384:	f8 01       	movw	r30, r16
    3386:	81 81       	ldd	r24, Z+1	; 0x01
    3388:	92 81       	ldd	r25, Z+2	; 0x02
    338a:	88 0f       	add	r24, r24
    338c:	28 2f       	mov	r18, r24
    338e:	22 0f       	add	r18, r18
    3390:	22 0f       	add	r18, r18
    3392:	82 0f       	add	r24, r18
    3394:	89 0f       	add	r24, r25
    3396:	80 32       	cpi	r24, 0x20	; 32
    3398:	2c f0       	brlt	.+10     	; 0x33a4 <nibbleChange+0x1e6>
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	81 83       	std	Z+1, r24	; 0x01
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	82 83       	std	Z+2, r24	; 0x02
    33a2:	77 c0       	rjmp	.+238    	; 0x3492 <nibbleChange+0x2d4>
    33a4:	88 23       	and	r24, r24
    33a6:	0c f0       	brlt	.+2      	; 0x33aa <nibbleChange+0x1ec>
    33a8:	74 c0       	rjmp	.+232    	; 0x3492 <nibbleChange+0x2d4>
    33aa:	e3 e6       	ldi	r30, 0x63	; 99
    33ac:	f5 e0       	ldi	r31, 0x05	; 5
    33ae:	11 82       	std	Z+1, r1	; 0x01
    33b0:	12 82       	std	Z+2, r1	; 0x02
    33b2:	6f c0       	rjmp	.+222    	; 0x3492 <nibbleChange+0x2d4>
    33b4:	d0 e0       	ldi	r29, 0x00	; 0
    33b6:	03 e6       	ldi	r16, 0x63	; 99
    33b8:	15 e0       	ldi	r17, 0x05	; 5
    33ba:	cd 59       	subi	r28, 0x9D	; 157
    33bc:	da 4f       	sbci	r29, 0xFA	; 250
    33be:	88 81       	ld	r24, Y
    33c0:	86 0f       	add	r24, r22
    33c2:	f4 de       	rcall	.-536    	; 0x31ac <nibbleCheckOvfl>
    33c4:	88 83       	st	Y, r24
    33c6:	f8 01       	movw	r30, r16
    33c8:	20 81       	ld	r18, Z
    33ca:	81 81       	ldd	r24, Z+1	; 0x01
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	ac 01       	movw	r20, r24
    33d0:	44 0f       	add	r20, r20
    33d2:	55 1f       	adc	r21, r21
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	84 0f       	add	r24, r20
    33e2:	95 1f       	adc	r25, r21
    33e4:	f4 e6       	ldi	r31, 0x64	; 100
    33e6:	2f 9f       	mul	r18, r31
    33e8:	80 0d       	add	r24, r0
    33ea:	91 1d       	adc	r25, r1
    33ec:	11 24       	eor	r1, r1
    33ee:	f8 01       	movw	r30, r16
    33f0:	22 81       	ldd	r18, Z+2	; 0x02
    33f2:	82 0f       	add	r24, r18
    33f4:	91 1d       	adc	r25, r1
    33f6:	8f 3f       	cpi	r24, 0xFF	; 255
    33f8:	91 05       	cpc	r25, r1
    33fa:	09 f0       	breq	.+2      	; 0x33fe <nibbleChange+0x240>
    33fc:	0c f4       	brge	.+2      	; 0x3400 <nibbleChange+0x242>
    33fe:	49 c0       	rjmp	.+146    	; 0x3492 <nibbleChange+0x2d4>
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	80 83       	st	Z, r24
    3404:	85 e0       	ldi	r24, 0x05	; 5
    3406:	81 83       	std	Z+1, r24	; 0x01
    3408:	82 83       	std	Z+2, r24	; 0x02
    340a:	43 c0       	rjmp	.+134    	; 0x3492 <nibbleChange+0x2d4>
    340c:	22 23       	and	r18, r18
    340e:	99 f0       	breq	.+38     	; 0x3436 <nibbleChange+0x278>
    3410:	d0 e0       	ldi	r29, 0x00	; 0
    3412:	fe 01       	movw	r30, r28
    3414:	ed 59       	subi	r30, 0x9D	; 157
    3416:	fa 4f       	sbci	r31, 0xFA	; 250
    3418:	80 81       	ld	r24, Z
    341a:	68 0f       	add	r22, r24
    341c:	60 83       	st	Z, r22
    341e:	64 30       	cpi	r22, 0x04	; 4
    3420:	19 f4       	brne	.+6      	; 0x3428 <nibbleChange+0x26a>
    3422:	8f ef       	ldi	r24, 0xFF	; 255
    3424:	80 83       	st	Z, r24
    3426:	35 c0       	rjmp	.+106    	; 0x3492 <nibbleChange+0x2d4>
    3428:	6e 3f       	cpi	r22, 0xFE	; 254
    342a:	99 f5       	brne	.+102    	; 0x3492 <nibbleChange+0x2d4>
    342c:	cd 59       	subi	r28, 0x9D	; 157
    342e:	da 4f       	sbci	r29, 0xFA	; 250
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	88 83       	st	Y, r24
    3434:	2e c0       	rjmp	.+92     	; 0x3492 <nibbleChange+0x2d4>
    3436:	d0 e0       	ldi	r29, 0x00	; 0
    3438:	fe 01       	movw	r30, r28
    343a:	ed 59       	subi	r30, 0x9D	; 157
    343c:	fa 4f       	sbci	r31, 0xFA	; 250
    343e:	80 81       	ld	r24, Z
    3440:	81 11       	cpse	r24, r1
    3442:	05 c0       	rjmp	.+10     	; 0x344e <nibbleChange+0x290>
    3444:	6f 3f       	cpi	r22, 0xFF	; 255
    3446:	19 f4       	brne	.+6      	; 0x344e <nibbleChange+0x290>
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	80 83       	st	Z, r24
    344c:	22 c0       	rjmp	.+68     	; 0x3492 <nibbleChange+0x2d4>
    344e:	83 30       	cpi	r24, 0x03	; 3
    3450:	31 f4       	brne	.+12     	; 0x345e <nibbleChange+0x2a0>
    3452:	61 30       	cpi	r22, 0x01	; 1
    3454:	21 f4       	brne	.+8      	; 0x345e <nibbleChange+0x2a0>
    3456:	cd 59       	subi	r28, 0x9D	; 157
    3458:	da 4f       	sbci	r29, 0xFA	; 250
    345a:	18 82       	st	Y, r1
    345c:	1a c0       	rjmp	.+52     	; 0x3492 <nibbleChange+0x2d4>
    345e:	cd 59       	subi	r28, 0x9D	; 157
    3460:	da 4f       	sbci	r29, 0xFA	; 250
    3462:	68 0f       	add	r22, r24
    3464:	68 83       	st	Y, r22
    3466:	15 c0       	rjmp	.+42     	; 0x3492 <nibbleChange+0x2d4>
    3468:	d0 e0       	ldi	r29, 0x00	; 0
    346a:	cd 59       	subi	r28, 0x9D	; 157
    346c:	da 4f       	sbci	r29, 0xFA	; 250
    346e:	88 81       	ld	r24, Y
    3470:	68 0f       	add	r22, r24
    3472:	63 70       	andi	r22, 0x03	; 3
    3474:	68 83       	st	Y, r22
    3476:	0d c0       	rjmp	.+26     	; 0x3492 <nibbleChange+0x2d4>
    3478:	e3 e6       	ldi	r30, 0x63	; 99
    347a:	f5 e0       	ldi	r31, 0x05	; 5
    347c:	80 81       	ld	r24, Z
    347e:	80 95       	com	r24
    3480:	80 83       	st	Z, r24
    3482:	07 c0       	rjmp	.+14     	; 0x3492 <nibbleChange+0x2d4>
    3484:	d0 e0       	ldi	r29, 0x00	; 0
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	61 fd       	sbrc	r22, 1
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	cd 59       	subi	r28, 0x9D	; 157
    348e:	da 4f       	sbci	r29, 0xFA	; 250
    3490:	88 83       	st	Y, r24
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	08 95       	ret

0000349c <nibbleToData>:
    349c:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    34a0:	8e 2f       	mov	r24, r30
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	fc 01       	movw	r30, r24
    34a6:	32 97       	sbiw	r30, 0x02	; 2
    34a8:	ea 30       	cpi	r30, 0x0A	; 10
    34aa:	f1 05       	cpc	r31, r1
    34ac:	08 f0       	brcs	.+2      	; 0x34b0 <nibbleToData+0x14>
    34ae:	b8 c0       	rjmp	.+368    	; 0x3620 <nibbleToData+0x184>
    34b0:	88 27       	eor	r24, r24
    34b2:	e0 57       	subi	r30, 0x70	; 112
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	8f 4f       	sbci	r24, 0xFF	; 255
    34b8:	0c 94 f0 2a 	jmp	0x55e0	; 0x55e0 <__tablejump2__>
    34bc:	e3 e6       	ldi	r30, 0x63	; 99
    34be:	f5 e0       	ldi	r31, 0x05	; 5
    34c0:	80 81       	ld	r24, Z
    34c2:	20 e1       	ldi	r18, 0x10	; 16
    34c4:	82 9f       	mul	r24, r18
    34c6:	c0 01       	movw	r24, r0
    34c8:	11 24       	eor	r1, r1
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	9f 70       	andi	r25, 0x0F	; 15
    34ce:	89 2b       	or	r24, r25
    34d0:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    34d4:	08 95       	ret
    34d6:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    34da:	8f 3f       	cpi	r24, 0xFF	; 255
    34dc:	19 f4       	brne	.+6      	; 0x34e4 <nibbleToData+0x48>
    34de:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    34e2:	08 95       	ret
    34e4:	81 50       	subi	r24, 0x01	; 1
    34e6:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    34ea:	08 95       	ret
    34ec:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <nibble>
    34f0:	9f 3f       	cpi	r25, 0xFF	; 255
    34f2:	21 f0       	breq	.+8      	; 0x34fc <nibbleToData+0x60>
    34f4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <nibble+0x1>
    34f8:	8f 3f       	cpi	r24, 0xFF	; 255
    34fa:	21 f4       	brne	.+8      	; 0x3504 <nibbleToData+0x68>
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    34fe:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3502:	08 95       	ret
    3504:	28 2f       	mov	r18, r24
    3506:	22 0f       	add	r18, r18
    3508:	82 0f       	add	r24, r18
    350a:	88 0f       	add	r24, r24
    350c:	88 0f       	add	r24, r24
    350e:	89 0f       	add	r24, r25
    3510:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3514:	08 95       	ret
    3516:	e3 e6       	ldi	r30, 0x63	; 99
    3518:	f5 e0       	ldi	r31, 0x05	; 5
    351a:	80 81       	ld	r24, Z
    351c:	30 e2       	ldi	r19, 0x20	; 32
    351e:	83 9f       	mul	r24, r19
    3520:	c0 01       	movw	r24, r0
    3522:	11 24       	eor	r1, r1
    3524:	21 81       	ldd	r18, Z+1	; 0x01
    3526:	32 81       	ldd	r19, Z+2	; 0x02
    3528:	22 0f       	add	r18, r18
    352a:	42 2f       	mov	r20, r18
    352c:	44 0f       	add	r20, r20
    352e:	44 0f       	add	r20, r20
    3530:	24 0f       	add	r18, r20
    3532:	23 0f       	add	r18, r19
    3534:	20 32       	cpi	r18, 0x20	; 32
    3536:	20 f0       	brcs	.+8      	; 0x3540 <nibbleToData+0xa4>
    3538:	8f 61       	ori	r24, 0x1F	; 31
    353a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    353e:	08 95       	ret
    3540:	82 2b       	or	r24, r18
    3542:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3546:	08 95       	ret
    3548:	e3 e6       	ldi	r30, 0x63	; 99
    354a:	f5 e0       	ldi	r31, 0x05	; 5
    354c:	20 81       	ld	r18, Z
    354e:	81 81       	ldd	r24, Z+1	; 0x01
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	ac 01       	movw	r20, r24
    3554:	44 0f       	add	r20, r20
    3556:	55 1f       	adc	r21, r21
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	84 0f       	add	r24, r20
    3566:	95 1f       	adc	r25, r21
    3568:	34 e6       	ldi	r19, 0x64	; 100
    356a:	23 9f       	mul	r18, r19
    356c:	80 0d       	add	r24, r0
    356e:	91 1d       	adc	r25, r1
    3570:	11 24       	eor	r1, r1
    3572:	22 81       	ldd	r18, Z+2	; 0x02
    3574:	82 0f       	add	r24, r18
    3576:	91 1d       	adc	r25, r1
    3578:	8f 3f       	cpi	r24, 0xFF	; 255
    357a:	91 05       	cpc	r25, r1
    357c:	29 f0       	breq	.+10     	; 0x3588 <nibbleToData+0xec>
    357e:	20 f0       	brcs	.+8      	; 0x3588 <nibbleToData+0xec>
    3580:	8f ef       	ldi	r24, 0xFF	; 255
    3582:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3586:	08 95       	ret
    3588:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    358c:	08 95       	ret
    358e:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    3592:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3596:	84 30       	cpi	r24, 0x04	; 4
    3598:	08 f4       	brcc	.+2      	; 0x359c <nibbleToData+0x100>
    359a:	42 c0       	rjmp	.+132    	; 0x3620 <nibbleToData+0x184>
    359c:	8f ef       	ldi	r24, 0xFF	; 255
    359e:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    35a2:	08 95       	ret
    35a4:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    35a8:	83 70       	andi	r24, 0x03	; 3
    35aa:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    35ae:	08 95       	ret
    35b0:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <nibble>
    35b4:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    35b8:	08 95       	ret
    35ba:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <dataEntry>
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	0c c0       	rjmp	.+24     	; 0x35da <nibbleToData+0x13e>
    35c2:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <dataEntry>
    35c6:	99 0f       	add	r25, r25
    35c8:	e8 2f       	mov	r30, r24
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	ed 59       	subi	r30, 0x9D	; 157
    35ce:	fa 4f       	sbci	r31, 0xFA	; 250
    35d0:	20 81       	ld	r18, Z
    35d2:	92 0f       	add	r25, r18
    35d4:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <dataEntry>
    35d8:	8f 5f       	subi	r24, 0xFF	; 255
    35da:	88 30       	cpi	r24, 0x08	; 8
    35dc:	90 f3       	brcs	.-28     	; 0x35c2 <nibbleToData+0x126>
    35de:	08 95       	ret
    35e0:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <dataEntry32>
    35e4:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <dataEntry32+0x1>
    35e8:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <dataEntry32+0x2>
    35ec:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <dataEntry32+0x3>
    35f0:	ae e4       	ldi	r26, 0x4E	; 78
    35f2:	b5 e0       	ldi	r27, 0x05	; 5
    35f4:	88 e0       	ldi	r24, 0x08	; 8
    35f6:	10 c0       	rjmp	.+32     	; 0x3618 <nibbleToData+0x17c>
    35f8:	82 50       	subi	r24, 0x02	; 2
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	ed 59       	subi	r30, 0x9D	; 157
    35fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3600:	90 81       	ld	r25, Z
    3602:	e8 2f       	mov	r30, r24
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	ed 59       	subi	r30, 0x9D	; 157
    3608:	fa 4f       	sbci	r31, 0xFA	; 250
    360a:	20 81       	ld	r18, Z
    360c:	30 e1       	ldi	r19, 0x10	; 16
    360e:	23 9f       	mul	r18, r19
    3610:	90 0d       	add	r25, r0
    3612:	11 24       	eor	r1, r1
    3614:	9c 93       	st	X, r25
    3616:	11 96       	adiw	r26, 0x01	; 1
    3618:	ef ef       	ldi	r30, 0xFF	; 255
    361a:	e8 0f       	add	r30, r24
    361c:	81 11       	cpse	r24, r1
    361e:	ec cf       	rjmp	.-40     	; 0x35f8 <nibbleToData+0x15c>
    3620:	08 95       	ret

00003622 <menuTextOut>:
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	8c 01       	movw	r16, r24
    362c:	d6 2f       	mov	r29, r22
    362e:	c0 e0       	ldi	r28, 0x00	; 0
    3630:	0c c0       	rjmp	.+24     	; 0x364a <menuTextOut+0x28>
    3632:	f8 01       	movw	r30, r16
    3634:	84 91       	lpm	r24, Z
    3636:	88 23       	and	r24, r24
    3638:	19 f0       	breq	.+6      	; 0x3640 <menuTextOut+0x1e>
    363a:	0f 5f       	subi	r16, 0xFF	; 255
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <menuTextOut+0x22>
    3640:	8d 2f       	mov	r24, r29
    3642:	d0 e2       	ldi	r29, 0x20	; 32
    3644:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3648:	cf 5f       	subi	r28, 0xFF	; 255
    364a:	ca 30       	cpi	r28, 0x0A	; 10
    364c:	90 f3       	brcs	.-28     	; 0x3632 <menuTextOut+0x10>
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <menuParentMenuToLCD>:
    3658:	80 e4       	ldi	r24, 0x40	; 64
    365a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    365e:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
    3662:	e1 11       	cpse	r30, r1
    3664:	07 c0       	rjmp	.+14     	; 0x3674 <menuParentMenuToLCD+0x1c>
    3666:	6a e3       	ldi	r22, 0x3A	; 58
    3668:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pMenuTopTitle>
    366c:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pMenuTopTitle+0x1>
    3670:	d8 cf       	rjmp	.-80     	; 0x3622 <menuTextOut>
    3672:	08 95       	ret
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	31 97       	sbiw	r30, 0x01	; 1
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	e0 5e       	subi	r30, 0xE0	; 224
    367e:	fa 4f       	sbci	r31, 0xFA	; 250
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	6a e3       	ldi	r22, 0x3A	; 58
    3686:	02 96       	adiw	r24, 0x02	; 2
    3688:	cc cf       	rjmp	.-104    	; 0x3622 <menuTextOut>
    368a:	08 95       	ret

0000368c <menuDisplayValue>:
    368c:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    3690:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    3694:	84 91       	lpm	r24, Z
    3696:	8f 73       	andi	r24, 0x3F	; 63
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	02 97       	sbiw	r24, 0x02	; 2
    369c:	1c f0       	brlt	.+6      	; 0x36a4 <menuDisplayValue+0x18>
    369e:	8b db       	rcall	.-2282   	; 0x2db6 <dataToNibbles>
    36a0:	58 dc       	rcall	.-1872   	; 0x2f52 <nibbleToLCDstring>
    36a2:	69 cd       	rjmp	.-1326   	; 0x3176 <LCDStringOut>
    36a4:	08 95       	ret

000036a6 <menuCursorSetDataNibble>:
    36a6:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    36aa:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    36ae:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    36b2:	e8 0f       	add	r30, r24
    36b4:	f1 1d       	adc	r31, r1
    36b6:	31 96       	adiw	r30, 0x01	; 1
    36b8:	84 91       	lpm	r24, Z
    36ba:	82 5e       	subi	r24, 0xE2	; 226
    36bc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    36c0:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    36ca:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    36ce:	84 91       	lpm	r24, Z
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	28 17       	cp	r18, r24
    36d6:	39 07       	cpc	r19, r25
    36d8:	14 f4       	brge	.+4      	; 0x36de <menuCursorSetDataNibble+0x38>
    36da:	3b db       	rcall	.-2442   	; 0x2d52 <softkeyRight>
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <menuCursorSetDataNibble+0x3e>
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
    36e4:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    36e8:	88 23       	and	r24, r24
    36ea:	11 f0       	breq	.+4      	; 0x36f0 <menuCursorSetDataNibble+0x4a>
    36ec:	2c db       	rcall	.-2472   	; 0x2d46 <softkeyLeft>
    36ee:	03 c0       	rjmp	.+6      	; 0x36f6 <menuCursorSetDataNibble+0x50>
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
    36f6:	3f db       	rcall	.-2434   	; 0x2d76 <softkeyPlus>
    36f8:	4e db       	rcall	.-2404   	; 0x2d96 <softkeyMinus>
    36fa:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <keylabel_toLCD>
    36fe:	08 95       	ret

00003700 <menuCursorSetExtra>:
    3700:	84 e1       	ldi	r24, 0x14	; 20
    3702:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <lcd_goto>
    3706:	08 95       	ret

00003708 <menuOnEnterStatusMidiIn>:
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	f8 df       	rcall	.-16     	; 0x3700 <menuCursorSetExtra>
    3710:	8e e3       	ldi	r24, 0x3E	; 62
    3712:	93 e0       	ldi	r25, 0x03	; 3
    3714:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <lcd_puts_P>
    3718:	80 91 ac 0c 	lds	r24, 0x0CAC	; 0x800cac <midiRxBytesCount>
    371c:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <midiRxBytesCount+0x1>
    3720:	0e 94 97 29 	call	0x532e	; 0x532e <lcd_wordout>
    3724:	8d e2       	ldi	r24, 0x2D	; 45
    3726:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    372a:	80 91 ac 0c 	lds	r24, 0x0CAC	; 0x800cac <midiRxBytesCount>
    372e:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <midiRxBytesCount+0x1>
    3732:	04 97       	sbiw	r24, 0x04	; 4
    3734:	30 f4       	brcc	.+12     	; 0x3742 <menuOnEnterStatusMidiIn+0x3a>
    3736:	80 91 ac 0c 	lds	r24, 0x0CAC	; 0x800cac <midiRxBytesCount>
    373a:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <midiRxBytesCount+0x1>
    373e:	c8 2f       	mov	r28, r24
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <menuOnEnterStatusMidiIn+0x3c>
    3742:	c4 e0       	ldi	r28, 0x04	; 4
    3744:	00 91 62 0b 	lds	r16, 0x0B62	; 0x800b62 <midiRxInIndex>
    3748:	10 e0       	ldi	r17, 0x00	; 0
    374a:	0f 5d       	subi	r16, 0xDF	; 223
    374c:	14 4f       	sbci	r17, 0xF4	; 244
    374e:	13 c0       	rjmp	.+38     	; 0x3776 <menuOnEnterStatusMidiIn+0x6e>
    3750:	8b e0       	ldi	r24, 0x0B	; 11
    3752:	02 32       	cpi	r16, 0x22	; 34
    3754:	18 07       	cpc	r17, r24
    3756:	10 f0       	brcs	.+4      	; 0x375c <menuOnEnterStatusMidiIn+0x54>
    3758:	f8 01       	movw	r30, r16
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <menuOnEnterStatusMidiIn+0x58>
    375c:	e1 e4       	ldi	r30, 0x41	; 65
    375e:	fb e0       	ldi	r31, 0x0B	; 11
    3760:	8f 01       	movw	r16, r30
    3762:	01 50       	subi	r16, 0x01	; 1
    3764:	11 09       	sbc	r17, r1
    3766:	80 81       	ld	r24, Z
    3768:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <lcd_hexout>
    376c:	c1 50       	subi	r28, 0x01	; 1
    376e:	19 f0       	breq	.+6      	; 0x3776 <menuOnEnterStatusMidiIn+0x6e>
    3770:	80 e2       	ldi	r24, 0x20	; 32
    3772:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3776:	c1 11       	cpse	r28, r1
    3778:	eb cf       	rjmp	.-42     	; 0x3750 <menuOnEnterStatusMidiIn+0x48>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	cf 91       	pop	r28
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <menuOnEnterStatusMidiOut>:
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	ba df       	rcall	.-140    	; 0x3700 <menuCursorSetExtra>
    378c:	89 e3       	ldi	r24, 0x39	; 57
    378e:	93 e0       	ldi	r25, 0x03	; 3
    3790:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <lcd_puts_P>
    3794:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <midiTxBytesCount>
    3798:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <midiTxBytesCount+0x1>
    379c:	0e 94 97 29 	call	0x532e	; 0x532e <lcd_wordout>
    37a0:	8d e2       	ldi	r24, 0x2D	; 45
    37a2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    37a6:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <midiTxBytesCount>
    37aa:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <midiTxBytesCount+0x1>
    37ae:	04 97       	sbiw	r24, 0x04	; 4
    37b0:	30 f4       	brcc	.+12     	; 0x37be <menuOnEnterStatusMidiOut+0x3a>
    37b2:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <midiTxBytesCount>
    37b6:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <midiTxBytesCount+0x1>
    37ba:	c8 2f       	mov	r28, r24
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <menuOnEnterStatusMidiOut+0x3c>
    37be:	c4 e0       	ldi	r28, 0x04	; 4
    37c0:	00 91 1d 0b 	lds	r16, 0x0B1D	; 0x800b1d <midiTxInIndex>
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	0f 5b       	subi	r16, 0xBF	; 191
    37c8:	14 4f       	sbci	r17, 0xF4	; 244
    37ca:	13 c0       	rjmp	.+38     	; 0x37f2 <menuOnEnterStatusMidiOut+0x6e>
    37cc:	8b e0       	ldi	r24, 0x0B	; 11
    37ce:	02 34       	cpi	r16, 0x42	; 66
    37d0:	18 07       	cpc	r17, r24
    37d2:	10 f0       	brcs	.+4      	; 0x37d8 <menuOnEnterStatusMidiOut+0x54>
    37d4:	f8 01       	movw	r30, r16
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <menuOnEnterStatusMidiOut+0x58>
    37d8:	e1 e6       	ldi	r30, 0x61	; 97
    37da:	fb e0       	ldi	r31, 0x0B	; 11
    37dc:	8f 01       	movw	r16, r30
    37de:	01 50       	subi	r16, 0x01	; 1
    37e0:	11 09       	sbc	r17, r1
    37e2:	80 81       	ld	r24, Z
    37e4:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <lcd_hexout>
    37e8:	c1 50       	subi	r28, 0x01	; 1
    37ea:	19 f0       	breq	.+6      	; 0x37f2 <menuOnEnterStatusMidiOut+0x6e>
    37ec:	80 e2       	ldi	r24, 0x20	; 32
    37ee:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    37f2:	c1 11       	cpse	r28, r1
    37f4:	eb cf       	rjmp	.-42     	; 0x37cc <menuOnEnterStatusMidiOut+0x48>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <menuOnEnterLogDisp>:
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	8f 3f       	cpi	r24, 0xFF	; 255
    3806:	a9 f4       	brne	.+42     	; 0x3832 <menuOnEnterLogDisp+0x32>
    3808:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <log_count>
    380c:	81 50       	subi	r24, 0x01	; 1
    380e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2719>
    3812:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <showText.2720>
    3816:	68 e8       	ldi	r22, 0x88	; 136
    3818:	7c e0       	ldi	r23, 0x0C	; 12
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    3820:	62 e8       	ldi	r22, 0x82	; 130
    3822:	7c e0       	ldi	r23, 0x0C	; 12
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
    382a:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    382e:	cf ef       	ldi	r28, 0xFF	; 255
    3830:	2e c0       	rjmp	.+92     	; 0x388e <menuOnEnterLogDisp+0x8e>
    3832:	84 30       	cpi	r24, 0x04	; 4
    3834:	49 f4       	brne	.+18     	; 0x3848 <menuOnEnterLogDisp+0x48>
    3836:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2719>
    383a:	88 23       	and	r24, r24
    383c:	19 f1       	breq	.+70     	; 0x3884 <menuOnEnterLogDisp+0x84>
    383e:	81 50       	subi	r24, 0x01	; 1
    3840:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2719>
    3844:	cf ef       	ldi	r28, 0xFF	; 255
    3846:	23 c0       	rjmp	.+70     	; 0x388e <menuOnEnterLogDisp+0x8e>
    3848:	81 30       	cpi	r24, 0x01	; 1
    384a:	89 f4       	brne	.+34     	; 0x386e <menuOnEnterLogDisp+0x6e>
    384c:	c0 91 09 02 	lds	r28, 0x0209	; 0x800209 <logEntryNr.2719>
    3850:	d0 e0       	ldi	r29, 0x00	; 0
    3852:	21 96       	adiw	r28, 0x01	; 1
    3854:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <log_count>
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	c8 17       	cp	r28, r24
    385c:	d9 07       	cpc	r29, r25
    385e:	a4 f4       	brge	.+40     	; 0x3888 <menuOnEnterLogDisp+0x88>
    3860:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2719>
    3864:	8f 5f       	subi	r24, 0xFF	; 255
    3866:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2719>
    386a:	cf ef       	ldi	r28, 0xFF	; 255
    386c:	10 c0       	rjmp	.+32     	; 0x388e <menuOnEnterLogDisp+0x8e>
    386e:	83 30       	cpi	r24, 0x03	; 3
    3870:	11 f0       	breq	.+4      	; 0x3876 <menuOnEnterLogDisp+0x76>
    3872:	85 30       	cpi	r24, 0x05	; 5
    3874:	59 f4       	brne	.+22     	; 0x388c <menuOnEnterLogDisp+0x8c>
    3876:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2720>
    387a:	80 95       	com	r24
    387c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <showText.2720>
    3880:	cf ef       	ldi	r28, 0xFF	; 255
    3882:	05 c0       	rjmp	.+10     	; 0x388e <menuOnEnterLogDisp+0x8e>
    3884:	cf ef       	ldi	r28, 0xFF	; 255
    3886:	03 c0       	rjmp	.+6      	; 0x388e <menuOnEnterLogDisp+0x8e>
    3888:	cf ef       	ldi	r28, 0xFF	; 255
    388a:	01 c0       	rjmp	.+2      	; 0x388e <menuOnEnterLogDisp+0x8e>
    388c:	c0 e0       	ldi	r28, 0x00	; 0
    388e:	cf 3f       	cpi	r28, 0xFF	; 255
    3890:	b1 f5       	brne	.+108    	; 0x38fe <menuOnEnterLogDisp+0xfe>
    3892:	84 e1       	ldi	r24, 0x14	; 20
    3894:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3898:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <log_count>
    389c:	81 11       	cpse	r24, r1
    389e:	06 c0       	rjmp	.+12     	; 0x38ac <menuOnEnterLogDisp+0xac>
    38a0:	8c e1       	ldi	r24, 0x1C	; 28
    38a2:	93 e0       	ldi	r25, 0x03	; 3
    38a4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <lcd_puts_P>
    38a8:	c0 e0       	ldi	r28, 0x00	; 0
    38aa:	1d c0       	rjmp	.+58     	; 0x38e6 <menuOnEnterLogDisp+0xe6>
    38ac:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2719>
    38b0:	8f 5f       	subi	r24, 0xFF	; 255
    38b2:	0e 94 b7 28 	call	0x516e	; 0x516e <lcd_dec2out>
    38b6:	8a e3       	ldi	r24, 0x3A	; 58
    38b8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    38bc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2720>
    38c0:	81 11       	cpse	r24, r1
    38c2:	08 c0       	rjmp	.+16     	; 0x38d4 <menuOnEnterLogDisp+0xd4>
    38c4:	60 e2       	ldi	r22, 0x20	; 32
    38c6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2719>
    38ca:	0e 94 94 10 	call	0x2128	; 0x2128 <log_getShortTextFromIndex>
    38ce:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <lcd_puts>
    38d2:	06 c0       	rjmp	.+12     	; 0x38e0 <menuOnEnterLogDisp+0xe0>
    38d4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2719>
    38d8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <getErrorText>
    38dc:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <lcd_puts_P>
    38e0:	0e 94 1f 2a 	call	0x543e	; 0x543e <lcd_clrEol>
    38e4:	0d df       	rcall	.-486    	; 0x3700 <menuCursorSetExtra>
    38e6:	61 e0       	ldi	r22, 0x01	; 1
    38e8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2720>
    38ec:	8f 3f       	cpi	r24, 0xFF	; 255
    38ee:	09 f0       	breq	.+2      	; 0x38f2 <menuOnEnterLogDisp+0xf2>
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	0e 94 cd 2a 	call	0x559a	; 0x559a <keylabel_statcheck>
    38f8:	81 11       	cpse	r24, r1
    38fa:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    38fe:	8c 2f       	mov	r24, r28
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <menuCursorSetMenu>:
    3906:	8a e4       	ldi	r24, 0x4A	; 74
    3908:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <lcd_goto>
    390c:	08 95       	ret

0000390e <menu_OnEnterMidiPanic>:
    390e:	8e e1       	ldi	r24, 0x1E	; 30
    3910:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3914:	8e e2       	ldi	r24, 0x2E	; 46
    3916:	93 e0       	ldi	r25, 0x03	; 3
    3918:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <lcd_puts_P>
    391c:	9f b7       	in	r25, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	06 c0       	rjmp	.+12     	; 0x3930 <menu_OnEnterMidiPanic+0x22>
    3924:	ed e2       	ldi	r30, 0x2D	; 45
    3926:	f2 e0       	ldi	r31, 0x02	; 2
    3928:	84 e6       	ldi	r24, 0x64	; 100
    392a:	86 87       	std	Z+14, r24	; 0x0e
    392c:	17 86       	std	Z+15, r1	; 0x0f
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	81 11       	cpse	r24, r1
    3932:	f8 cf       	rjmp	.-16     	; 0x3924 <menu_OnEnterMidiPanic+0x16>
    3934:	9f bf       	out	0x3f, r25	; 63
    3936:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <midiSendAllNotesOff>
    393a:	e5 df       	rcall	.-54     	; 0x3906 <menuCursorSetMenu>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	08 95       	ret

00003940 <menuCurrMenuToLCD>:
    3940:	cf 93       	push	r28
    3942:	89 e4       	ldi	r24, 0x49	; 73
    3944:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3948:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    394c:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    3950:	c4 91       	lpm	r28, Z
    3952:	c0 7c       	andi	r28, 0xC0	; 192
    3954:	c0 38       	cpi	r28, 0x80	; 128
    3956:	39 f4       	brne	.+14     	; 0x3966 <menuCurrMenuToLCD+0x26>
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
    3964:	04 c0       	rjmp	.+8      	; 0x396e <menuCurrMenuToLCD+0x2e>
    3966:	8f e7       	ldi	r24, 0x7F	; 127
    3968:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    396c:	ec d9       	rcall	.-3112   	; 0x2d46 <softkeyLeft>
    396e:	c0 3c       	cpi	r28, 0xC0	; 192
    3970:	29 f4       	brne	.+10     	; 0x397c <menuCurrMenuToLCD+0x3c>
    3972:	83 e0       	ldi	r24, 0x03	; 3
    3974:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
    3978:	c0 e2       	ldi	r28, 0x20	; 32
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <menuCurrMenuToLCD+0x40>
    397c:	ea d9       	rcall	.-3116   	; 0x2d52 <softkeyRight>
    397e:	ce e7       	ldi	r28, 0x7E	; 126
    3980:	f4 d9       	rcall	.-3096   	; 0x2d6a <softkeyUp>
    3982:	ed d9       	rcall	.-3110   	; 0x2d5e <softkeyDown>
    3984:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <currentMenu>
    3988:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <currentMenu+0x1>
    398c:	6c 2f       	mov	r22, r28
    398e:	02 96       	adiw	r24, 0x02	; 2
    3990:	48 de       	rcall	.-880    	; 0x3622 <menuTextOut>
    3992:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    3996:	b7 df       	rcall	.-146    	; 0x3906 <menuCursorSetMenu>
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <menuClearExtraDisp>:
    399c:	b1 de       	rcall	.-670    	; 0x3700 <menuCursorSetExtra>
    399e:	8a e0       	ldi	r24, 0x0A	; 10
    39a0:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <lcd_blank>
    39a4:	08 95       	ret

000039a6 <menu_ClearDataDisp>:
    39a6:	8e e1       	ldi	r24, 0x1E	; 30
    39a8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    39ac:	8a e0       	ldi	r24, 0x0A	; 10
    39ae:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <lcd_blank>
    39b2:	08 95       	ret

000039b4 <menu_ModuleTestExecute>:
    39b4:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <menu_TestModuleBitCounter>
    39b8:	8f 3f       	cpi	r24, 0xFF	; 255
    39ba:	19 f0       	breq	.+6      	; 0x39c2 <menu_ModuleTestExecute+0xe>
    39bc:	8d 3f       	cpi	r24, 0xFD	; 253
    39be:	09 f0       	breq	.+2      	; 0x39c2 <menu_ModuleTestExecute+0xe>
    39c0:	4a c0       	rjmp	.+148    	; 0x3a56 <menu_ModuleTestExecute+0xa2>
    39c2:	0e 94 3d 2a 	call	0x547a	; 0x547a <lcd_cursoroff>
    39c6:	ef df       	rcall	.-34     	; 0x39a6 <menu_ClearDataDisp>
    39c8:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <msgPipe_Handling>
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	e7 e4       	ldi	r30, 0x47	; 71
    39d0:	f2 e0       	ldi	r31, 0x02	; 2
    39d2:	07 c0       	rjmp	.+14     	; 0x39e2 <menu_ModuleTestExecute+0x2e>
    39d4:	21 81       	ldd	r18, Z+1	; 0x01
    39d6:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_TestModulePattern>
    39da:	82 2b       	or	r24, r18
    39dc:	81 83       	std	Z+1, r24	; 0x01
    39de:	38 96       	adiw	r30, 0x08	; 8
    39e0:	9f 5f       	subi	r25, 0xFF	; 255
    39e2:	90 32       	cpi	r25, 0x20	; 32
    39e4:	b8 f3       	brcs	.-18     	; 0x39d4 <menu_ModuleTestExecute+0x20>
    39e6:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <menu_TestModuleBitCounter>
    39ea:	8f 3f       	cpi	r24, 0xFF	; 255
    39ec:	19 f4       	brne	.+6      	; 0x39f4 <menu_ModuleTestExecute+0x40>
    39ee:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <menu_TestModuleBitCounter>
    39f2:	77 c0       	rjmp	.+238    	; 0x3ae2 <menu_ModuleTestExecute+0x12e>
    39f4:	8e e1       	ldi	r24, 0x1E	; 30
    39f6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    39fa:	81 e6       	ldi	r24, 0x61	; 97
    39fc:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3a00:	82 e6       	ldi	r24, 0x62	; 98
    3a02:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3a06:	8f e6       	ldi	r24, 0x6F	; 111
    3a08:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3a0c:	82 e7       	ldi	r24, 0x72	; 114
    3a0e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3a12:	84 e7       	ldi	r24, 0x74	; 116
    3a14:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3a18:	8e ef       	ldi	r24, 0xFE	; 254
    3a1a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <menu_TestModuleBitCounter>
    3a1e:	9f b7       	in	r25, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	06 c0       	rjmp	.+12     	; 0x3a32 <menu_ModuleTestExecute+0x7e>
    3a26:	ed e2       	ldi	r30, 0x2D	; 45
    3a28:	f2 e0       	ldi	r31, 0x02	; 2
    3a2a:	82 e0       	ldi	r24, 0x02	; 2
    3a2c:	84 87       	std	Z+12, r24	; 0x0c
    3a2e:	85 87       	std	Z+13, r24	; 0x0d
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	81 11       	cpse	r24, r1
    3a34:	f8 cf       	rjmp	.-16     	; 0x3a26 <menu_ModuleTestExecute+0x72>
    3a36:	9f bf       	out	0x3f, r25	; 63
    3a38:	9f b7       	in	r25, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	06 c0       	rjmp	.+12     	; 0x3a4c <menu_ModuleTestExecute+0x98>
    3a40:	ed e2       	ldi	r30, 0x2D	; 45
    3a42:	f2 e0       	ldi	r31, 0x02	; 2
    3a44:	84 e6       	ldi	r24, 0x64	; 100
    3a46:	86 87       	std	Z+14, r24	; 0x0e
    3a48:	17 86       	std	Z+15, r1	; 0x0f
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	81 11       	cpse	r24, r1
    3a4e:	f8 cf       	rjmp	.-16     	; 0x3a40 <menu_ModuleTestExecute+0x8c>
    3a50:	9f bf       	out	0x3f, r25	; 63
    3a52:	59 df       	rcall	.-334    	; 0x3906 <menuCursorSetMenu>
    3a54:	46 c0       	rjmp	.+140    	; 0x3ae2 <menu_ModuleTestExecute+0x12e>
    3a56:	8e 3f       	cpi	r24, 0xFE	; 254
    3a58:	41 f4       	brne	.+16     	; 0x3a6a <menu_ModuleTestExecute+0xb6>
    3a5a:	8f ef       	ldi	r24, 0xFF	; 255
    3a5c:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <msgPipe_Handling>
    3a60:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <menu_TestModulePattern>
    3a64:	0e 94 36 2a 	call	0x546c	; 0x546c <lcd_cursosblink>
    3a68:	3c c0       	rjmp	.+120    	; 0x3ae2 <menu_ModuleTestExecute+0x12e>
    3a6a:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <menu_TestModuleErrorList>
    3a6e:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <menu_TestModuleErrorList+0x1>
    3a72:	60 91 18 05 	lds	r22, 0x0518	; 0x800518 <menu_TestModuleErrorList+0x2>
    3a76:	70 91 19 05 	lds	r23, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x3>
    3a7a:	76 95       	lsr	r23
    3a7c:	67 95       	ror	r22
    3a7e:	57 95       	ror	r21
    3a80:	47 95       	ror	r20
    3a82:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <menu_TestModuleErrorList>
    3a86:	50 93 17 05 	sts	0x0517, r21	; 0x800517 <menu_TestModuleErrorList+0x1>
    3a8a:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <menu_TestModuleErrorList+0x2>
    3a8e:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <menu_TestModuleErrorList+0x3>
    3a92:	e8 2f       	mov	r30, r24
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	df 01       	movw	r26, r30
    3a98:	aa 0f       	add	r26, r26
    3a9a:	bb 1f       	adc	r27, r27
    3a9c:	aa 0f       	add	r26, r26
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	aa 0f       	add	r26, r26
    3aa2:	bb 1f       	adc	r27, r27
    3aa4:	a9 5b       	subi	r26, 0xB9	; 185
    3aa6:	bd 4f       	sbci	r27, 0xFD	; 253
    3aa8:	16 96       	adiw	r26, 0x06	; 6
    3aaa:	2c 91       	ld	r18, X
    3aac:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <menu_TestModulePattern>
    3ab0:	29 23       	and	r18, r25
    3ab2:	49 f4       	brne	.+18     	; 0x3ac6 <menu_ModuleTestExecute+0x112>
    3ab4:	70 68       	ori	r23, 0x80	; 128
    3ab6:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <menu_TestModuleErrorList>
    3aba:	50 93 17 05 	sts	0x0517, r21	; 0x800517 <menu_TestModuleErrorList+0x1>
    3abe:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <menu_TestModuleErrorList+0x2>
    3ac2:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <menu_TestModuleErrorList+0x3>
    3ac6:	ee 0f       	add	r30, r30
    3ac8:	ff 1f       	adc	r31, r31
    3aca:	ee 0f       	add	r30, r30
    3acc:	ff 1f       	adc	r31, r31
    3ace:	ee 0f       	add	r30, r30
    3ad0:	ff 1f       	adc	r31, r31
    3ad2:	e9 5b       	subi	r30, 0xB9	; 185
    3ad4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ad6:	21 81       	ldd	r18, Z+1	; 0x01
    3ad8:	92 2b       	or	r25, r18
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	8f 5f       	subi	r24, 0xFF	; 255
    3ade:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <menu_TestModuleBitCounter>
    3ae2:	e0 91 52 05 	lds	r30, 0x0552	; 0x800552 <menu_TestModuleBitCounter>
    3ae6:	e0 32       	cpi	r30, 0x20	; 32
    3ae8:	28 f5       	brcc	.+74     	; 0x3b34 <menu_ModuleTestExecute+0x180>
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	ee 0f       	add	r30, r30
    3aee:	ff 1f       	adc	r31, r31
    3af0:	ee 0f       	add	r30, r30
    3af2:	ff 1f       	adc	r31, r31
    3af4:	ee 0f       	add	r30, r30
    3af6:	ff 1f       	adc	r31, r31
    3af8:	e9 5b       	subi	r30, 0xB9	; 185
    3afa:	fd 4f       	sbci	r31, 0xFD	; 253
    3afc:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_TestModulePattern>
    3b00:	98 2f       	mov	r25, r24
    3b02:	90 95       	com	r25
    3b04:	81 81       	ldd	r24, Z+1	; 0x01
    3b06:	89 23       	and	r24, r25
    3b08:	81 83       	std	Z+1, r24	; 0x01
    3b0a:	8e e1       	ldi	r24, 0x1E	; 30
    3b0c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3b10:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <menu_TestModuleBitCounter>
    3b14:	0e 94 b7 28 	call	0x516e	; 0x516e <lcd_dec2out>
    3b18:	9f b7       	in	r25, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	06 c0       	rjmp	.+12     	; 0x3b2c <menu_ModuleTestExecute+0x178>
    3b20:	ed e2       	ldi	r30, 0x2D	; 45
    3b22:	f2 e0       	ldi	r31, 0x02	; 2
    3b24:	88 e0       	ldi	r24, 0x08	; 8
    3b26:	84 87       	std	Z+12, r24	; 0x0c
    3b28:	15 86       	std	Z+13, r1	; 0x0d
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	f8 cf       	rjmp	.-16     	; 0x3b20 <menu_ModuleTestExecute+0x16c>
    3b30:	9f bf       	out	0x3f, r25	; 63
    3b32:	08 95       	ret
    3b34:	e0 32       	cpi	r30, 0x20	; 32
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <menu_ModuleTestExecute+0x186>
    3b38:	44 c0       	rjmp	.+136    	; 0x3bc2 <menu_ModuleTestExecute+0x20e>
    3b3a:	8e e1       	ldi	r24, 0x1E	; 30
    3b3c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3b40:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <menu_TestModuleErrorList>
    3b44:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <menu_TestModuleErrorList+0x1>
    3b48:	a0 91 18 05 	lds	r26, 0x0518	; 0x800518 <menu_TestModuleErrorList+0x2>
    3b4c:	b0 91 19 05 	lds	r27, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x3>
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	a1 05       	cpc	r26, r1
    3b54:	b1 05       	cpc	r27, r1
    3b56:	39 f4       	brne	.+14     	; 0x3b66 <menu_ModuleTestExecute+0x1b2>
    3b58:	8f e6       	ldi	r24, 0x6F	; 111
    3b5a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3b5e:	8b e6       	ldi	r24, 0x6B	; 107
    3b60:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3b64:	10 c0       	rjmp	.+32     	; 0x3b86 <menu_ModuleTestExecute+0x1d2>
    3b66:	80 93 b1 0c 	sts	0x0CB1, r24	; 0x800cb1 <editLong>
    3b6a:	90 93 b2 0c 	sts	0x0CB2, r25	; 0x800cb2 <editLong+0x1>
    3b6e:	a0 93 b3 0c 	sts	0x0CB3, r26	; 0x800cb3 <editLong+0x2>
    3b72:	b0 93 b4 0c 	sts	0x0CB4, r27	; 0x800cb4 <editLong+0x3>
    3b76:	85 e4       	ldi	r24, 0x45	; 69
    3b78:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3b7c:	8a e3       	ldi	r24, 0x3A	; 58
    3b7e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    3b82:	0e 94 92 28 	call	0x5124	; 0x5124 <lcd_longout>
    3b86:	8e ef       	ldi	r24, 0xFE	; 254
    3b88:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <menu_TestModuleBitCounter>
    3b8c:	9f b7       	in	r25, 0x3f	; 63
    3b8e:	f8 94       	cli
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	06 c0       	rjmp	.+12     	; 0x3ba0 <menu_ModuleTestExecute+0x1ec>
    3b94:	ed e2       	ldi	r30, 0x2D	; 45
    3b96:	f2 e0       	ldi	r31, 0x02	; 2
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	84 87       	std	Z+12, r24	; 0x0c
    3b9c:	85 87       	std	Z+13, r24	; 0x0d
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	81 11       	cpse	r24, r1
    3ba2:	f8 cf       	rjmp	.-16     	; 0x3b94 <menu_ModuleTestExecute+0x1e0>
    3ba4:	9f bf       	out	0x3f, r25	; 63
    3ba6:	9f b7       	in	r25, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	06 c0       	rjmp	.+12     	; 0x3bba <menu_ModuleTestExecute+0x206>
    3bae:	ed e2       	ldi	r30, 0x2D	; 45
    3bb0:	f2 e0       	ldi	r31, 0x02	; 2
    3bb2:	84 e6       	ldi	r24, 0x64	; 100
    3bb4:	86 87       	std	Z+14, r24	; 0x0e
    3bb6:	17 86       	std	Z+15, r1	; 0x0f
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	81 11       	cpse	r24, r1
    3bbc:	f8 cf       	rjmp	.-16     	; 0x3bae <menu_ModuleTestExecute+0x1fa>
    3bbe:	9f bf       	out	0x3f, r25	; 63
    3bc0:	a2 ce       	rjmp	.-700    	; 0x3906 <menuCursorSetMenu>
    3bc2:	08 95       	ret

00003bc4 <menu_ModuleTestPattern>:
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <menu_ModuleTestPattern+0xe>
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	0a 94       	dec	r0
    3bd4:	e2 f7       	brpl	.-8      	; 0x3bce <menu_ModuleTestPattern+0xa>
    3bd6:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <menu_TestModulePattern>
    3bda:	8f ef       	ldi	r24, 0xFF	; 255
    3bdc:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <menu_TestModuleBitCounter>
    3be0:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <menu_TestModuleErrorList>
    3be4:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <menu_TestModuleErrorList+0x1>
    3be8:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <menu_TestModuleErrorList+0x2>
    3bec:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <menu_TestModuleErrorList+0x3>
    3bf0:	e1 de       	rcall	.-574    	; 0x39b4 <menu_ModuleTestExecute>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	08 95       	ret

00003bf6 <menuClearMenuDisp>:
    3bf6:	80 e4       	ldi	r24, 0x40	; 64
    3bf8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    3bfc:	8a e0       	ldi	r24, 0x0A	; 10
    3bfe:	0e 94 13 2a 	call	0x5426	; 0x5426 <lcd_blank>
    3c02:	81 de       	rcall	.-766    	; 0x3906 <menuCursorSetMenu>
    3c04:	8a e0       	ldi	r24, 0x0A	; 10
    3c06:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <lcd_blank>
    3c0a:	08 95       	ret

00003c0c <menu_ClearAllDisp>:
    3c0c:	f4 df       	rcall	.-24     	; 0x3bf6 <menuClearMenuDisp>
    3c0e:	cb de       	rcall	.-618    	; 0x39a6 <menu_ClearDataDisp>
    3c10:	c5 ce       	rjmp	.-630    	; 0x399c <menuClearExtraDisp>
    3c12:	08 95       	ret

00003c14 <menuItemChanged>:
    3c14:	8f ef       	ldi	r24, 0xFF	; 255
    3c16:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xe>
    3c1a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <currentMenu>
    3c1e:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <currentMenu+0x1>
    3c22:	fc 01       	movw	r30, r24
    3c24:	24 91       	lpm	r18, Z
    3c26:	e2 2f       	mov	r30, r18
    3c28:	ef 73       	andi	r30, 0x3F	; 63
    3c2a:	6e 2f       	mov	r22, r30
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	62 30       	cpi	r22, 0x02	; 2
    3c30:	71 05       	cpc	r23, r1
    3c32:	0c f4       	brge	.+2      	; 0x3c36 <menuItemChanged+0x22>
    3c34:	48 c0       	rjmp	.+144    	; 0x3cc6 <menuItemChanged+0xb2>
    3c36:	9c 01       	movw	r18, r24
    3c38:	22 5f       	subi	r18, 0xF2	; 242
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	f9 01       	movw	r30, r18
    3c3e:	45 91       	lpm	r20, Z+
    3c40:	55 91       	lpm	r21, Z+
    3c42:	41 15       	cp	r20, r1
    3c44:	51 05       	cpc	r21, r1
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <menuItemChanged+0x36>
    3c48:	3e c0       	rjmp	.+124    	; 0x3cc6 <menuItemChanged+0xb2>
    3c4a:	fb 01       	movw	r30, r22
    3c4c:	31 97       	sbiw	r30, 0x01	; 1
    3c4e:	9f 01       	movw	r18, r30
    3c50:	22 0f       	add	r18, r18
    3c52:	33 1f       	adc	r19, r19
    3c54:	22 0f       	add	r18, r18
    3c56:	33 1f       	adc	r19, r19
    3c58:	22 0f       	add	r18, r18
    3c5a:	33 1f       	adc	r19, r19
    3c5c:	e2 0f       	add	r30, r18
    3c5e:	f3 1f       	adc	r31, r19
    3c60:	e4 5b       	subi	r30, 0xB4	; 180
    3c62:	fc 4f       	sbci	r31, 0xFC	; 252
    3c64:	f0 93 1f 05 	sts	0x051F, r31	; 0x80051f <pNibbleInfo+0x1>
    3c68:	e0 93 1e 05 	sts	0x051E, r30	; 0x80051e <pNibbleInfo>
    3c6c:	24 91       	lpm	r18, Z
    3c6e:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <nibbleCount>
    3c72:	fc 01       	movw	r30, r24
    3c74:	25 91       	lpm	r18, Z+
    3c76:	2f 73       	andi	r18, 0x3F	; 63
    3c78:	20 93 1a 05 	sts	0x051A, r18	; 0x80051a <dataType>
    3c7c:	24 91       	lpm	r18, Z
    3c7e:	22 23       	and	r18, r18
    3c80:	2c f4       	brge	.+10     	; 0x3c8c <menuItemChanged+0x78>
    3c82:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <DataAdressOffset>
    3c86:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <DataAdressOffset+0x1>
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <menuItemChanged+0x7c>
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	24 0f       	add	r18, r20
    3c92:	35 1f       	adc	r19, r21
    3c94:	fc 01       	movw	r30, r24
    3c96:	84 91       	lpm	r24, Z
    3c98:	8f 73       	andi	r24, 0x3F	; 63
    3c9a:	8b 30       	cpi	r24, 0x0B	; 11
    3c9c:	71 f4       	brne	.+28     	; 0x3cba <menuItemChanged+0xa6>
    3c9e:	f9 01       	movw	r30, r18
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ca6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ca8:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <dataEntry32>
    3cac:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <dataEntry32+0x1>
    3cb0:	a0 93 50 05 	sts	0x0550, r26	; 0x800550 <dataEntry32+0x2>
    3cb4:	b0 93 51 05 	sts	0x0551, r27	; 0x800551 <dataEntry32+0x3>
    3cb8:	04 c0       	rjmp	.+8      	; 0x3cc2 <menuItemChanged+0xae>
    3cba:	f9 01       	movw	r30, r18
    3cbc:	80 81       	ld	r24, Z
    3cbe:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <dataEntry>
    3cc2:	e4 dc       	rcall	.-1592   	; 0x368c <menuDisplayValue>
    3cc4:	07 c0       	rjmp	.+14     	; 0x3cd4 <menuItemChanged+0xc0>
    3cc6:	6f de       	rcall	.-802    	; 0x39a6 <menu_ClearDataDisp>
    3cc8:	8c e4       	ldi	r24, 0x4C	; 76
    3cca:	93 e0       	ldi	r25, 0x03	; 3
    3ccc:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <pNibbleInfo+0x1>
    3cd0:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <pNibbleInfo>
    3cd4:	18 ce       	rjmp	.-976    	; 0x3906 <menuCursorSetMenu>
    3cd6:	08 95       	ret

00003cd8 <menu_InitLCD>:
    3cd8:	61 de       	rcall	.-830    	; 0x399c <menuClearExtraDisp>
    3cda:	9c df       	rcall	.-200    	; 0x3c14 <menuItemChanged>
    3cdc:	bd dc       	rcall	.-1670   	; 0x3658 <menuParentMenuToLCD>
    3cde:	30 de       	rcall	.-928    	; 0x3940 <menuCurrMenuToLCD>
    3ce0:	0c 94 36 2a 	jmp	0x546c	; 0x546c <lcd_cursosblink>
    3ce4:	08 95       	ret

00003ce6 <menu_ProcessMessage>:
}

uint8_t menu_ProcessMessage(uint8_t message){
    3ce6:	cf 93       	push	r28
    3ce8:	c8 2f       	mov	r28, r24
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
	lcd_cursosblink();
    3cea:	0e 94 36 2a 	call	0x546c	; 0x546c <lcd_cursosblink>
	if (((currentMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) || (nibbleIndex == NIBBLE_NONE)){
    3cee:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    3cf2:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    3cf6:	84 91       	lpm	r24, Z
    3cf8:	8f 73       	andi	r24, 0x3F	; 63
    3cfa:	81 30       	cpi	r24, 0x01	; 1
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <menu_ProcessMessage+0x22>
    3cfe:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    3d02:	8f 3f       	cpi	r24, 0xFF	; 255
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <menu_ProcessMessage+0x22>
    3d06:	3d c1       	rjmp	.+634    	; 0x3f82 <menu_ProcessMessage+0x29c>
		// menu item or data and showing value only
		if ((currentMenu->menuFlags & MENU_FLAG_CLEAREXTRA) != 0) {
    3d08:	31 96       	adiw	r30, 0x01	; 1
    3d0a:	84 91       	lpm	r24, Z
    3d0c:	86 ff       	sbrs	r24, 6
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <menu_ProcessMessage+0x2e>
			menuClearExtraDisp();
    3d10:	45 de       	rcall	.-886    	; 0x399c <menuClearExtraDisp>
			menuCursorSetMenu();
    3d12:	f9 dd       	rcall	.-1038   	; 0x3906 <menuCursorSetMenu>
    3d14:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <currentMenu>
		}
		if (((currentMenu->menuFlags & MENU_FLAG_FNHANDLEMESSAGE) != 0) && (currentMenu->pFunc != NULL) && (nibbleIndex != NIBBLE_NONE)) {
    3d18:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <currentMenu+0x1>
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	01 96       	adiw	r24, 0x01	; 1
    3d20:	fc 01       	movw	r30, r24
    3d22:	84 91       	lpm	r24, Z
    3d24:	98 2f       	mov	r25, r24
    3d26:	90 72       	andi	r25, 0x20	; 32
    3d28:	85 ff       	sbrs	r24, 5
    3d2a:	1f c0       	rjmp	.+62     	; 0x3d6a <menu_ProcessMessage+0x84>
    3d2c:	9b 01       	movw	r18, r22
    3d2e:	20 5f       	subi	r18, 0xF0	; 240
    3d30:	3f 4f       	sbci	r19, 0xFF	; 255
    3d32:	f9 01       	movw	r30, r18
    3d34:	25 91       	lpm	r18, Z+
    3d36:	35 91       	lpm	r19, Z+
    3d38:	21 15       	cp	r18, r1
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	b1 f0       	breq	.+44     	; 0x3d6a <menu_ProcessMessage+0x84>
    3d3e:	40 91 1b 05 	lds	r20, 0x051B	; 0x80051b <nibbleIndex>
    3d42:	4f 3f       	cpi	r20, 0xFF	; 255
    3d44:	91 f0       	breq	.+36     	; 0x3d6a <menu_ProcessMessage+0x84>
    3d46:	8c 2f       	mov	r24, r28
			// only of menu item wants message and function defined and function still wants messages
			// function was already called with MESSAGEY_KEY_NONE, now next message handled by function
			if (currentMenu->pFunc (message) == TRUE) {
    3d48:	f9 01       	movw	r30, r18
    3d4a:	19 95       	eicall
    3d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4e:	21 f4       	brne	.+8      	; 0x3d58 <menu_ProcessMessage+0x72>
    3d50:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
				// function still wants messages
				nibbleIndex = 0; // flag for function wants messages (0) or none (NIBBLE_NONE)
    3d54:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3d56:	d3 c1       	rjmp	.+934    	; 0x40fe <menu_ProcessMessage+0x418>
			if (currentMenu->pFunc (message) == TRUE) {
				// function still wants messages
				nibbleIndex = 0; // flag for function wants messages (0) or none (NIBBLE_NONE)
			} else {
				// function wants no more messages
				menuClearExtraDisp();
    3d58:	21 de       	rcall	.-958    	; 0x399c <menuClearExtraDisp>
				menu_ClearDataDisp();
    3d5a:	25 de       	rcall	.-950    	; 0x39a6 <menu_ClearDataDisp>
    3d5c:	d4 dd       	rcall	.-1112   	; 0x3906 <menuCursorSetMenu>
				menuCursorSetMenu();
    3d5e:	8f ef       	ldi	r24, 0xFF	; 255
				nibbleIndex = NIBBLE_NONE; // flag for function wants no more messages (NIBBLE_NONE)
    3d60:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    3d64:	ed dd       	rcall	.-1062   	; 0x3940 <menuCurrMenuToLCD>
				menuCurrMenuToLCD();
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	ca c1       	rjmp	.+916    	; 0x40fe <menu_ProcessMessage+0x418>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3d6a:	c3 30       	cpi	r28, 0x03	; 3
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <menu_ProcessMessage+0x8a>
				nibbleIndex = NIBBLE_NONE; // flag for function wants no more messages (NIBBLE_NONE)
				menuCurrMenuToLCD();
			}
		} else {
			// message handling is done here
			switch (message){
    3d6e:	64 c0       	rjmp	.+200    	; 0x3e38 <menu_ProcessMessage+0x152>
    3d70:	28 f4       	brcc	.+10     	; 0x3d7c <menu_ProcessMessage+0x96>
    3d72:	c1 30       	cpi	r28, 0x01	; 1
    3d74:	51 f0       	breq	.+20     	; 0x3d8a <menu_ProcessMessage+0xa4>
    3d76:	c2 30       	cpi	r28, 0x02	; 2
    3d78:	31 f1       	breq	.+76     	; 0x3dc6 <menu_ProcessMessage+0xe0>
    3d7a:	ac c1       	rjmp	.+856    	; 0x40d4 <menu_ProcessMessage+0x3ee>
    3d7c:	c5 30       	cpi	r28, 0x05	; 5
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <menu_ProcessMessage+0x9c>
    3d80:	5b c0       	rjmp	.+182    	; 0x3e38 <menu_ProcessMessage+0x152>
    3d82:	90 f0       	brcs	.+36     	; 0x3da8 <menu_ProcessMessage+0xc2>
    3d84:	c6 30       	cpi	r28, 0x06	; 6
    3d86:	f9 f0       	breq	.+62     	; 0x3dc6 <menu_ProcessMessage+0xe0>
    3d88:	a5 c1       	rjmp	.+842    	; 0x40d4 <menu_ProcessMessage+0x3ee>
    3d8a:	fb 01       	movw	r30, r22
    3d8c:	84 91       	lpm	r24, Z
			case MESSAGE_KEY_RIGHT:
				// select right menu item
				if ((currentMenu->menuType & MENU_T_BOUNDARY_MASK) != MENU_T_RIGHTBOUND){
    3d8e:	80 7c       	andi	r24, 0xC0	; 192
    3d90:	80 3c       	cpi	r24, 0xC0	; 192
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <menu_ProcessMessage+0xb0>
    3d94:	a1 c1       	rjmp	.+834    	; 0x40d8 <menu_ProcessMessage+0x3f2>
    3d96:	74 96       	adiw	r30, 0x14	; 20
					// only if not at right border
					currentMenu++;
    3d98:	f0 93 55 05 	sts	0x0555, r31	; 0x800555 <currentMenu+0x1>
    3d9c:	e0 93 54 05 	sts	0x0554, r30	; 0x800554 <currentMenu>
					menuItemChanged();
    3da0:	39 df       	rcall	.-398    	; 0x3c14 <menuItemChanged>
    3da2:	ce dd       	rcall	.-1124   	; 0x3940 <menuCurrMenuToLCD>
					menuCurrMenuToLCD();
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	ab c1       	rjmp	.+854    	; 0x40fe <menu_ProcessMessage+0x418>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3da8:	fb 01       	movw	r30, r22
    3daa:	84 91       	lpm	r24, Z
					menuCurrMenuToLCD();
				}
				break;
			case MESSAGE_KEY_LEFT:
				// select left menu item
				if ((currentMenu->menuType & MENU_T_BOUNDARY_MASK) != MENU_T_LEFTBOUND){
    3dac:	80 7c       	andi	r24, 0xC0	; 192
    3dae:	80 38       	cpi	r24, 0x80	; 128
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <menu_ProcessMessage+0xce>
    3db2:	94 c1       	rjmp	.+808    	; 0x40dc <menu_ProcessMessage+0x3f6>
					// only if not at right border
					currentMenu--;
    3db4:	74 97       	sbiw	r30, 0x14	; 20
    3db6:	f0 93 55 05 	sts	0x0555, r31	; 0x800555 <currentMenu+0x1>
    3dba:	e0 93 54 05 	sts	0x0554, r30	; 0x800554 <currentMenu>
					menuItemChanged();
    3dbe:	2a df       	rcall	.-428    	; 0x3c14 <menuItemChanged>
    3dc0:	bf dd       	rcall	.-1154   	; 0x3940 <menuCurrMenuToLCD>
					menuCurrMenuToLCD();
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	9c c1       	rjmp	.+824    	; 0x40fe <menu_ProcessMessage+0x418>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3dc6:	84 ff       	sbrs	r24, 4
    3dc8:	04 c0       	rjmp	.+8      	; 0x3dd2 <menu_ProcessMessage+0xec>
				}
				break;
			case MESSAGE_KEY_UP:
			case MESSAGE_KEY_ESC:
				// goto parent menu
				if ((currentMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0) {
    3dca:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <menuVMenuSoftKey+0x1>
					// selection of softkey was aborted
					menuVMenuSoftKey = NULL;
    3dce:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menuVMenuSoftKey>
    3dd2:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
				}
				if (menuStackIndex > 0){
    3dd6:	ee 23       	and	r30, r30
    3dd8:	e9 f0       	breq	.+58     	; 0x3e14 <menu_ProcessMessage+0x12e>
    3dda:	e1 50       	subi	r30, 0x01	; 1
    3ddc:	e0 93 15 05 	sts	0x0515, r30	; 0x800515 <menuStackIndex>
					// only if there is a parent menu: back to parent
					currentMenu = menuStack[--menuStackIndex];
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	ee 0f       	add	r30, r30
    3de4:	ff 1f       	adc	r31, r31
    3de6:	e0 5e       	subi	r30, 0xE0	; 224
    3de8:	fa 4f       	sbci	r31, 0xFA	; 250
    3dea:	01 90       	ld	r0, Z+
    3dec:	f0 81       	ld	r31, Z
    3dee:	e0 2d       	mov	r30, r0
    3df0:	f0 93 55 05 	sts	0x0555, r31	; 0x800555 <currentMenu+0x1>
    3df4:	e0 93 54 05 	sts	0x0554, r30	; 0x800554 <currentMenu>
    3df8:	72 96       	adiw	r30, 0x12	; 18
					if (currentMenu->pOnExitFunc != NULL){
    3dfa:	05 90       	lpm	r0, Z+
    3dfc:	f4 91       	lpm	r31, Z
    3dfe:	e0 2d       	mov	r30, r0
    3e00:	30 97       	sbiw	r30, 0x00	; 0
						// exit function supplied in parent?
						currentMenu->pOnExitFunc (0);
    3e02:	11 f0       	breq	.+4      	; 0x3e08 <menu_ProcessMessage+0x122>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
					}
					menuClearExtraDisp();
    3e06:	19 95       	eicall
    3e08:	c9 dd       	rcall	.-1134   	; 0x399c <menuClearExtraDisp>
					menuParentMenuToLCD();
    3e0a:	26 dc       	rcall	.-1972   	; 0x3658 <menuParentMenuToLCD>
    3e0c:	99 dd       	rcall	.-1230   	; 0x3940 <menuCurrMenuToLCD>
					menuCurrMenuToLCD();
    3e0e:	02 df       	rcall	.-508    	; 0x3c14 <menuItemChanged>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
					// menuResetVars();
					menuItemChanged();
    3e12:	75 c1       	rjmp	.+746    	; 0x40fe <menu_ProcessMessage+0x418>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3e16:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
					menuCurrMenuToLCD();
					// menuResetVars();
					menuItemChanged();
				} else {
					menuFinished = TRUE;
					keylabel_clr(0);
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
					keylabel_clr(1);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
					keylabel_clr(2);
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
					keylabel_clr(3);
    3e2c:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
    3e30:	0e 94 3d 2a 	call	0x547a	; 0x547a <lcd_cursoroff>
					keylabel_toLCD();
    3e34:	8f ef       	ldi	r24, 0xFF	; 255
					lcd_cursoroff();
    3e36:	63 c1       	rjmp	.+710    	; 0x40fe <menu_ProcessMessage+0x418>
    3e38:	fb 01       	movw	r30, r22
					menuParentMenuToLCD();
					menuCurrMenuToLCD();
					// menuResetVars();
					menuItemChanged();
				} else {
					menuFinished = TRUE;
    3e3a:	24 91       	lpm	r18, Z
    3e3c:	2f 73       	andi	r18, 0x3F	; 63
				}
				break;
			case MESSAGE_KEY_DOWN:
			case MESSAGE_KEY_SEL:
				// enter child menu or edit value
				if ((currentMenu->menuType & MENU_T_REMOVEBOUND_MASK) > MENU_T_MENU) {
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	22 30       	cpi	r18, 0x02	; 2
    3e42:	31 05       	cpc	r19, r1
    3e44:	f4 f0       	brlt	.+60     	; 0x3e82 <menu_ProcessMessage+0x19c>
    3e46:	70 96       	adiw	r30, 0x10	; 16
    3e48:	05 90       	lpm	r0, Z+
					// Data Item selected
					if (currentMenu->pFunc != NULL){
    3e4a:	f4 91       	lpm	r31, Z
    3e4c:	e0 2d       	mov	r30, r0
    3e4e:	30 97       	sbiw	r30, 0x00	; 0
    3e50:	19 f0       	breq	.+6      	; 0x3e58 <menu_ProcessMessage+0x172>
    3e52:	8c 2f       	mov	r24, r28
    3e54:	19 95       	eicall
						currentMenu->pFunc(message);
    3e56:	de de       	rcall	.-580    	; 0x3c14 <menuItemChanged>
    3e58:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <currentMenu>
						menuItemChanged();
    3e5c:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <currentMenu+0x1>
					}
					if (((currentMenu->menuFlags & MENU_FLAG_READONLY) == 0) && (currentMenu->pVar) != NULL){
    3e60:	c9 01       	movw	r24, r18
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	fc 01       	movw	r30, r24
    3e66:	84 91       	lpm	r24, Z
    3e68:	83 fd       	sbrc	r24, 3
    3e6a:	3a c1       	rjmp	.+628    	; 0x40e0 <menu_ProcessMessage+0x3fa>
    3e6c:	3d 96       	adiw	r30, 0x0d	; 13
    3e6e:	85 91       	lpm	r24, Z+
    3e70:	95 91       	lpm	r25, Z+
    3e72:	89 2b       	or	r24, r25
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <menu_ProcessMessage+0x192>
    3e76:	36 c1       	rjmp	.+620    	; 0x40e4 <menu_ProcessMessage+0x3fe>
    3e78:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
						// Data is not readonly and there is a pointer to data
						nibbleIndex = 0; // indicates that data is to be edited
    3e7c:	14 dc       	rcall	.-2008   	; 0x36a6 <menuCursorSetDataNibble>
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
						menuCursorSetDataNibble();
    3e80:	3e c1       	rjmp	.+636    	; 0x40fe <menu_ProcessMessage+0x418>
    3e82:	2f ef       	ldi	r18, 0xFF	; 255
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3e84:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
						nibbleIndex = 0; // indicates that data is to be edited
						menuCursorSetDataNibble();
					} // else do nothing
				} else {
					// Menu selected
					nibbleIndex = NIBBLE_NONE; // indicates that we are not editing
    3e88:	84 ff       	sbrs	r24, 4
    3e8a:	26 c0       	rjmp	.+76     	; 0x3ed8 <menu_ProcessMessage+0x1f2>
    3e8c:	70 93 6d 05 	sts	0x056D, r23	; 0x80056d <menuVMenuSoftKey+0x1>
					if ((currentMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0) {
    3e90:	60 93 6c 05 	sts	0x056C, r22	; 0x80056c <menuVMenuSoftKey>
						// this is a softkey function. Do not enter now or call function but store
						menuVMenuSoftKey = currentMenu;
    3e94:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
    3e98:	ee 23       	and	r30, r30
						if (menuStackIndex > 0){
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <menu_ProcessMessage+0x1b8>
    3e9c:	25 c1       	rjmp	.+586    	; 0x40e8 <menu_ProcessMessage+0x402>
    3e9e:	e1 50       	subi	r30, 0x01	; 1
    3ea0:	e0 93 15 05 	sts	0x0515, r30	; 0x800515 <menuStackIndex>
							// only if there is a parent menu: back to parent (this usually is true)
							currentMenu = menuStack[--menuStackIndex];
    3ea4:	f0 e0       	ldi	r31, 0x00	; 0
    3ea6:	ee 0f       	add	r30, r30
    3ea8:	ff 1f       	adc	r31, r31
    3eaa:	e0 5e       	subi	r30, 0xE0	; 224
    3eac:	fa 4f       	sbci	r31, 0xFA	; 250
    3eae:	01 90       	ld	r0, Z+
    3eb0:	f0 81       	ld	r31, Z
    3eb2:	e0 2d       	mov	r30, r0
    3eb4:	f0 93 55 05 	sts	0x0555, r31	; 0x800555 <currentMenu+0x1>
    3eb8:	e0 93 54 05 	sts	0x0554, r30	; 0x800554 <currentMenu>
							if (currentMenu->pOnExitFunc != NULL){
    3ebc:	72 96       	adiw	r30, 0x12	; 18
    3ebe:	05 90       	lpm	r0, Z+
    3ec0:	f4 91       	lpm	r31, Z
    3ec2:	e0 2d       	mov	r30, r0
    3ec4:	30 97       	sbiw	r30, 0x00	; 0
								// exit function supplied in parent?
								currentMenu->pOnExitFunc (0);
    3ec6:	11 f0       	breq	.+4      	; 0x3ecc <menu_ProcessMessage+0x1e6>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
							}
							menuClearExtraDisp();
    3eca:	19 95       	eicall
    3ecc:	67 dd       	rcall	.-1330   	; 0x399c <menuClearExtraDisp>
							menuParentMenuToLCD();
    3ece:	c4 db       	rcall	.-2168   	; 0x3658 <menuParentMenuToLCD>
    3ed0:	37 dd       	rcall	.-1426   	; 0x3940 <menuCurrMenuToLCD>
							menuCurrMenuToLCD();
    3ed2:	a0 de       	rcall	.-704    	; 0x3c14 <menuItemChanged>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
							// menuResetVars();
							menuItemChanged();
    3ed6:	13 c1       	rjmp	.+550    	; 0x40fe <menu_ProcessMessage+0x418>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3ed8:	fb 01       	movw	r30, r22
							// menuResetVars();
							menuItemChanged();
						}
					} else {
						// no softkey
						if (currentMenu->pFunc != NULL) {
    3eda:	70 96       	adiw	r30, 0x10	; 16
    3edc:	05 90       	lpm	r0, Z+
    3ede:	f4 91       	lpm	r31, Z
    3ee0:	e0 2d       	mov	r30, r0
    3ee2:	30 97       	sbiw	r30, 0x00	; 0
    3ee4:	99 f0       	breq	.+38     	; 0x3f0c <menu_ProcessMessage+0x226>
							// call menu function if supplied
							if ((currentMenu->menuFlags & MENU_FLAG_FNHANDLEMESSAGE) != 0) {
    3ee6:	99 23       	and	r25, r25
    3ee8:	71 f0       	breq	.+28     	; 0x3f06 <menu_ProcessMessage+0x220>
								// this function wants message and return TRUE if further message is wanted (currently: no message)
								// first after SEL call always mit MESSAGE_KEY_NONE
								if (currentMenu->pFunc (MESSAGE_KEY_NONE) == TRUE) {
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	19 95       	eicall
    3eee:	8f 3f       	cpi	r24, 0xFF	; 255
    3ef0:	19 f4       	brne	.+6      	; 0x3ef8 <menu_ProcessMessage+0x212>
									nibbleIndex = 0; // flag: function wants more messages
    3ef2:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
    3ef6:	0a c0       	rjmp	.+20     	; 0x3f0c <menu_ProcessMessage+0x226>
								} else {
									// function finished, wants no more messages
									menuClearExtraDisp();
    3ef8:	51 dd       	rcall	.-1374   	; 0x399c <menuClearExtraDisp>
    3efa:	55 dd       	rcall	.-1366   	; 0x39a6 <menu_ClearDataDisp>
									menu_ClearDataDisp();
    3efc:	04 dd       	rcall	.-1528   	; 0x3906 <menuCursorSetMenu>
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
									menuCursorSetMenu();
    3f00:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
									nibbleIndex = NIBBLE_NONE;
    3f04:	03 c0       	rjmp	.+6      	; 0x3f0c <menu_ProcessMessage+0x226>
    3f06:	85 e0       	ldi	r24, 0x05	; 5
    3f08:	19 95       	eicall
    3f0a:	fd dc       	rcall	.-1542   	; 0x3906 <menuCursorSetMenu>
								}
								// we don't set cursor because function is supposed to do so
							} else {
								// this function does not want message, just call it
								currentMenu->pFunc (MESSAGE_KEY_SEL); // MESSAGE_KEY_SEL to show that func is called from menu
    3f0c:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <currentMenu>
								menuCursorSetMenu();
    3f10:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <currentMenu+0x1>
							}
						}
						if (currentMenu->pMenu != NULL){
    3f14:	c9 01       	movw	r24, r18
    3f16:	0c 96       	adiw	r24, 0x0c	; 12
    3f18:	fc 01       	movw	r30, r24
    3f1a:	85 91       	lpm	r24, Z+
    3f1c:	95 91       	lpm	r25, Z+
    3f1e:	89 2b       	or	r24, r25
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <menu_ProcessMessage+0x23e>
    3f22:	e4 c0       	rjmp	.+456    	; 0x40ec <menu_ProcessMessage+0x406>
    3f24:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <menuStackIndex>
    3f28:	a0 31       	cpi	r26, 0x10	; 16
    3f2a:	08 f0       	brcs	.+2      	; 0x3f2e <menu_ProcessMessage+0x248>
							// open submenu if supplied
							if (menuStackIndex < MENU_MAX_STACK) {
    3f2c:	e1 c0       	rjmp	.+450    	; 0x40f0 <menu_ProcessMessage+0x40a>
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	8a 0f       	add	r24, r26
    3f32:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <menuStackIndex>
								menuStack[menuStackIndex++] = currentMenu;
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	aa 0f       	add	r26, r26
    3f3a:	bb 1f       	adc	r27, r27
    3f3c:	a0 5e       	subi	r26, 0xE0	; 224
    3f3e:	ba 4f       	sbci	r27, 0xFA	; 250
    3f40:	2d 93       	st	X+, r18
    3f42:	3c 93       	st	X, r19
    3f44:	c9 01       	movw	r24, r18
    3f46:	01 96       	adiw	r24, 0x01	; 1
    3f48:	fc 01       	movw	r30, r24
    3f4a:	84 91       	lpm	r24, Z
								if (((currentMenu->menuFlags & MENU_FLAG_ENTER_STORED_MENU) != 0) && (menuVMenuSoftKey != NULL)) {
    3f4c:	83 ff       	sbrs	r24, 3
    3f4e:	0b c0       	rjmp	.+22     	; 0x3f66 <menu_ProcessMessage+0x280>
    3f50:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <menuVMenuSoftKey>
    3f54:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <menuVMenuSoftKey+0x1>
    3f58:	00 97       	sbiw	r24, 0x00	; 0
    3f5a:	29 f0       	breq	.+10     	; 0x3f66 <menu_ProcessMessage+0x280>
    3f5c:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <currentMenu+0x1>
									currentMenu = menuVMenuSoftKey;
    3f60:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <currentMenu>
    3f64:	08 c0       	rjmp	.+16     	; 0x3f76 <menu_ProcessMessage+0x290>
    3f66:	f9 01       	movw	r30, r18
								} else {
									currentMenu = currentMenu->pMenu;
    3f68:	3c 96       	adiw	r30, 0x0c	; 12
    3f6a:	85 91       	lpm	r24, Z+
    3f6c:	95 91       	lpm	r25, Z+
    3f6e:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <currentMenu+0x1>
    3f72:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <currentMenu>
    3f76:	12 dd       	rcall	.-1500   	; 0x399c <menuClearExtraDisp>
								}
								menuClearExtraDisp();
    3f78:	6f db       	rcall	.-2338   	; 0x3658 <menuParentMenuToLCD>
    3f7a:	e2 dc       	rcall	.-1596   	; 0x3940 <menuCurrMenuToLCD>
								menuParentMenuToLCD();
    3f7c:	4b de       	rcall	.-874    	; 0x3c14 <menuItemChanged>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
								menuCurrMenuToLCD();
    3f80:	be c0       	rjmp	.+380    	; 0x40fe <menu_ProcessMessage+0x418>
    3f82:	c3 30       	cpi	r28, 0x03	; 3
								//menuResetVars();
								menuItemChanged();
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <menu_ProcessMessage+0x2a2>
    3f86:	47 c0       	rjmp	.+142    	; 0x4016 <menu_ProcessMessage+0x330>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3f88:	28 f4       	brcc	.+10     	; 0x3f94 <menu_ProcessMessage+0x2ae>
    3f8a:	c1 30       	cpi	r28, 0x01	; 1
				break;
			} // switch
		} // else
	} else {
		// MENU_T_VAR and editing (nibbleIndex != NIBBLE_NONE)
		switch (message){
    3f8c:	59 f0       	breq	.+22     	; 0x3fa4 <menu_ProcessMessage+0x2be>
    3f8e:	c2 30       	cpi	r28, 0x02	; 2
    3f90:	31 f1       	breq	.+76     	; 0x3fde <menu_ProcessMessage+0x2f8>
    3f92:	b0 c0       	rjmp	.+352    	; 0x40f4 <menu_ProcessMessage+0x40e>
    3f94:	c5 30       	cpi	r28, 0x05	; 5
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <menu_ProcessMessage+0x2b4>
    3f98:	5a c0       	rjmp	.+180    	; 0x404e <menu_ProcessMessage+0x368>
    3f9a:	c0 f0       	brcs	.+48     	; 0x3fcc <menu_ProcessMessage+0x2e6>
    3f9c:	c6 30       	cpi	r28, 0x06	; 6
    3f9e:	09 f4       	brne	.+2      	; 0x3fa2 <menu_ProcessMessage+0x2bc>
    3fa0:	86 c0       	rjmp	.+268    	; 0x40ae <menu_ProcessMessage+0x3c8>
    3fa2:	a8 c0       	rjmp	.+336    	; 0x40f4 <menu_ProcessMessage+0x40e>
    3fa4:	48 2f       	mov	r20, r24
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
		case MESSAGE_KEY_RIGHT:
			// cursor right
			if (nibbleIndex < pNibbleInfo->nibbleCount - 1){
    3fac:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    3fb0:	24 91       	lpm	r18, Z
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	21 50       	subi	r18, 0x01	; 1
    3fb6:	31 09       	sbc	r19, r1
    3fb8:	42 17       	cp	r20, r18
    3fba:	53 07       	cpc	r21, r19
    3fbc:	0c f0       	brlt	.+2      	; 0x3fc0 <menu_ProcessMessage+0x2da>
    3fbe:	9c c0       	rjmp	.+312    	; 0x40f8 <menu_ProcessMessage+0x412>
				nibbleIndex++;
    3fc0:	8f 5f       	subi	r24, 0xFF	; 255
    3fc2:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
				menuCursorSetDataNibble();
    3fc6:	6f db       	rcall	.-2338   	; 0x36a6 <menuCursorSetDataNibble>
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3fca:	99 c0       	rjmp	.+306    	; 0x40fe <menu_ProcessMessage+0x418>
    3fcc:	88 23       	and	r24, r24
				menuCursorSetDataNibble();
			}
			break;
		case MESSAGE_KEY_LEFT:
			// cursor left
			if (nibbleIndex > 0){
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <menu_ProcessMessage+0x2ec>
    3fd0:	95 c0       	rjmp	.+298    	; 0x40fc <menu_ProcessMessage+0x416>
    3fd2:	81 50       	subi	r24, 0x01	; 1
				nibbleIndex--;
    3fd4:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    3fd8:	66 db       	rcall	.-2356   	; 0x36a6 <menuCursorSetDataNibble>
				menuCursorSetDataNibble();
    3fda:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    3fdc:	90 c0       	rjmp	.+288    	; 0x40fe <menu_ProcessMessage+0x418>
				menuCursorSetDataNibble();
			}
			break;
		case MESSAGE_KEY_UP:
			// increment value
			nibbleChange(nibbleIndex,1);
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	ee d8       	rcall	.-3620   	; 0x31be <nibbleChange>
			nibbleToData();
    3fe2:	5c da       	rcall	.-2888   	; 0x349c <nibbleToData>
			menuDisplayValue();
    3fe4:	53 db       	rcall	.-2394   	; 0x368c <menuDisplayValue>
    3fe6:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
			if (dataType == MENU_T_VARBIN) {
    3fea:	8a 30       	cpi	r24, 0x0A	; 10
    3fec:	89 f4       	brne	.+34     	; 0x4010 <menu_ProcessMessage+0x32a>
    3fee:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
				// V 0.56 on bit-entry move to next bit
				if (nibbleIndex < pNibbleInfo->nibbleCount - 1){
    3ff2:	42 2f       	mov	r20, r18
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    3ffa:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    3ffe:	84 91       	lpm	r24, Z
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	48 17       	cp	r20, r24
    4006:	59 07       	cpc	r21, r25
    4008:	1c f4       	brge	.+6      	; 0x4010 <menu_ProcessMessage+0x32a>
    400a:	2f 5f       	subi	r18, 0xFF	; 255
					nibbleIndex++;
    400c:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
				}
			}
			menuCursorSetDataNibble();
    4010:	4a db       	rcall	.-2412   	; 0x36a6 <menuCursorSetDataNibble>
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    4012:	80 e0       	ldi	r24, 0x00	; 0
				if (nibbleIndex < pNibbleInfo->nibbleCount - 1){
					nibbleIndex++;
				}
			}
			menuCursorSetDataNibble();
			break;
    4014:	74 c0       	rjmp	.+232    	; 0x40fe <menu_ProcessMessage+0x418>
		case MESSAGE_KEY_DOWN:
			// decrement value
			nibbleChange(nibbleIndex,-1);
    4016:	6f ef       	ldi	r22, 0xFF	; 255
    4018:	d2 d8       	rcall	.-3676   	; 0x31be <nibbleChange>
    401a:	40 da       	rcall	.-2944   	; 0x349c <nibbleToData>
			nibbleToData();
    401c:	37 db       	rcall	.-2450   	; 0x368c <menuDisplayValue>
    401e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
			menuDisplayValue();
    4022:	8a 30       	cpi	r24, 0x0A	; 10
			if (dataType == MENU_T_VARBIN) {
    4024:	89 f4       	brne	.+34     	; 0x4048 <menu_ProcessMessage+0x362>
    4026:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
    402a:	42 2f       	mov	r20, r18
				if (nibbleIndex < pNibbleInfo->nibbleCount - 1){
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    4032:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    4036:	84 91       	lpm	r24, Z
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	48 17       	cp	r20, r24
    403e:	59 07       	cpc	r21, r25
    4040:	1c f4       	brge	.+6      	; 0x4048 <menu_ProcessMessage+0x362>
    4042:	2f 5f       	subi	r18, 0xFF	; 255
    4044:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
					nibbleIndex++;
    4048:	2e db       	rcall	.-2468   	; 0x36a6 <menuCursorSetDataNibble>
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	58 c0       	rjmp	.+176    	; 0x40fe <menu_ProcessMessage+0x418>
				}
			}
			menuCursorSetDataNibble();
    404e:	26 da       	rcall	.-2996   	; 0x349c <nibbleToData>
    4050:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <currentMenu>
			break;
    4054:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <currentMenu+0x1>
		case MESSAGE_KEY_SEL:
			// update var, back to showing
			nibbleToData();
    4058:	c9 01       	movw	r24, r18
			if (currentMenu->pVar != NULL){
    405a:	0e 96       	adiw	r24, 0x0e	; 14
    405c:	fc 01       	movw	r30, r24
    405e:	a5 91       	lpm	r26, Z+
    4060:	b5 91       	lpm	r27, Z+
    4062:	10 97       	sbiw	r26, 0x00	; 0
    4064:	21 f1       	breq	.+72     	; 0x40ae <menu_ProcessMessage+0x3c8>
    4066:	0d 97       	sbiw	r24, 0x0d	; 13
    4068:	fc 01       	movw	r30, r24
    406a:	84 91       	lpm	r24, Z
    406c:	88 23       	and	r24, r24
    406e:	2c f4       	brge	.+10     	; 0x407a <menu_ProcessMessage+0x394>
				uint8_t* pData = (currentMenu->pVar) + (((currentMenu->menuFlags & MENU_FLAG_DATAOFFSET) != 0) ? DataAdressOffset : 0);
    4070:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <DataAdressOffset>
    4074:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <DataAdressOffset+0x1>
    4078:	02 c0       	rjmp	.+4      	; 0x407e <menu_ProcessMessage+0x398>
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	a8 0f       	add	r26, r24
    4080:	b9 1f       	adc	r27, r25
    4082:	f9 01       	movw	r30, r18
    4084:	84 91       	lpm	r24, Z
    4086:	8f 73       	andi	r24, 0x3F	; 63
    4088:	8b 30       	cpi	r24, 0x0B	; 11
    408a:	71 f4       	brne	.+28     	; 0x40a8 <menu_ProcessMessage+0x3c2>
				if ((currentMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_VARLONG) {
    408c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <dataEntry32>
    4090:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <dataEntry32+0x1>
					* (uint32_t *) pData = dataEntry32;
    4094:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <dataEntry32+0x2>
    4098:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <dataEntry32+0x3>
    409c:	4d 93       	st	X+, r20
    409e:	5d 93       	st	X+, r21
    40a0:	6d 93       	st	X+, r22
    40a2:	7c 93       	st	X, r23
    40a4:	13 97       	sbiw	r26, 0x03	; 3
    40a6:	03 c0       	rjmp	.+6      	; 0x40ae <menu_ProcessMessage+0x3c8>
    40a8:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <dataEntry>
    40ac:	8c 93       	st	X, r24
				} else {
					*pData = dataEntry;
    40ae:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    40b2:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
				}
			}
		case MESSAGE_KEY_ESC: // constinued from SEL -> but different to lines ahead: don't change var
			if (currentMenu->pOnExitFunc != NULL){
    40b6:	72 96       	adiw	r30, 0x12	; 18
    40b8:	05 90       	lpm	r0, Z+
    40ba:	f4 91       	lpm	r31, Z
    40bc:	e0 2d       	mov	r30, r0
    40be:	30 97       	sbiw	r30, 0x00	; 0
    40c0:	11 f0       	breq	.+4      	; 0x40c6 <menu_ProcessMessage+0x3e0>
    40c2:	8c 2f       	mov	r24, r28
    40c4:	19 95       	eicall
    40c6:	8f ef       	ldi	r24, 0xFF	; 255
				currentMenu->pOnExitFunc (message);
    40c8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
			}
			nibbleIndex = NIBBLE_NONE;
    40cc:	39 dc       	rcall	.-1934   	; 0x3940 <menuCurrMenuToLCD>
    40ce:	a2 dd       	rcall	.-1212   	; 0x3c14 <menuItemChanged>
    40d0:	80 e0       	ldi	r24, 0x00	; 0
			menuCurrMenuToLCD();
    40d2:	15 c0       	rjmp	.+42     	; 0x40fe <menu_ProcessMessage+0x418>
    40d4:	80 e0       	ldi	r24, 0x00	; 0
			menuItemChanged();
    40d6:	13 c0       	rjmp	.+38     	; 0x40fe <menu_ProcessMessage+0x418>
    40d8:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    40da:	11 c0       	rjmp	.+34     	; 0x40fe <menu_ProcessMessage+0x418>
				currentMenu->pOnExitFunc (message);
			}
			nibbleIndex = NIBBLE_NONE;
			menuCurrMenuToLCD();
			menuItemChanged();
			break;
    40dc:	80 e0       	ldi	r24, 0x00	; 0
uint8_t menu_ProcessMessage(uint8_t message){
	// called when there is a message to be processed. Exits when new message is awaited
	// status defined in
	// returns false if menu wants further input, true if menu was left
	uint8_t menuFinished; // FALSE if regular exit from processMenu, TRUE if Key Up in top level menu  is pressed
	menuFinished = FALSE;
    40de:	0f c0       	rjmp	.+30     	; 0x40fe <menu_ProcessMessage+0x418>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	0d c0       	rjmp	.+26     	; 0x40fe <menu_ProcessMessage+0x418>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	0b c0       	rjmp	.+22     	; 0x40fe <menu_ProcessMessage+0x418>
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	09 c0       	rjmp	.+18     	; 0x40fe <menu_ProcessMessage+0x418>
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	07 c0       	rjmp	.+14     	; 0x40fe <menu_ProcessMessage+0x418>
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	05 c0       	rjmp	.+10     	; 0x40fe <menu_ProcessMessage+0x418>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	03 c0       	rjmp	.+6      	; 0x40fe <menu_ProcessMessage+0x418>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	01 c0       	rjmp	.+2      	; 0x40fe <menu_ProcessMessage+0x418>
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	cf 91       	pop	r28
    4100:	08 95       	ret

00004102 <init_SoftKeys>:
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
			menuItemChanged();
			break;
		}
	}
	return menuFinished;
}
    4108:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <eeprom_ReadSoftkeys>

//**************************************** SOFTKEYS ****************************************

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    410c:	8f 3f       	cpi	r24, 0xFF	; 255
    410e:	61 f0       	breq	.+24     	; 0x4128 <init_SoftKeys+0x26>
    4110:	10 e0       	ldi	r17, 0x00	; 0
    4112:	36 c0       	rjmp	.+108    	; 0x4180 <init_SoftKeys+0x7e>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_Key[i].pSelMenu = NULL;
    4114:	e8 2f       	mov	r30, r24
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	ee 0f       	add	r30, r30
    411a:	ff 1f       	adc	r31, r31
    411c:	ef 5b       	subi	r30, 0xBF	; 191
    411e:	fa 4f       	sbci	r31, 0xFA	; 250
    4120:	11 82       	std	Z+1, r1	; 0x01
    4122:	10 82       	st	Z, r1
//**************************************** SOFTKEYS ****************************************

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4124:	8f 5f       	subi	r24, 0xFF	; 255
    4126:	01 c0       	rjmp	.+2      	; 0x412a <init_SoftKeys+0x28>
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	84 30       	cpi	r24, 0x04	; 4
    412c:	98 f3       	brcs	.-26     	; 0x4114 <init_SoftKeys+0x12>
			soft_Key[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	67 e0       	ldi	r22, 0x07	; 7
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	0e 94 8b 10 	call	0x2116	; 0x2116 <log_putError>
    413a:	24 c0       	rjmp	.+72     	; 0x4184 <init_SoftKeys+0x82>
	} else {
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			if ((soft_Key[i].pSelMenu != NULL) && (((soft_Key[i].pSelMenu->menuType & MENU_T_REMOVEBOUND_MASK) !=  MENU_T_MENU) || ((soft_Key[i].pSelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) == 0)))  {
    413c:	c1 2f       	mov	r28, r17
    413e:	d0 e0       	ldi	r29, 0x00	; 0
    4140:	fe 01       	movw	r30, r28
    4142:	ee 0f       	add	r30, r30
    4144:	ff 1f       	adc	r31, r31
    4146:	ef 5b       	subi	r30, 0xBF	; 191
    4148:	fa 4f       	sbci	r31, 0xFA	; 250
    414a:	01 90       	ld	r0, Z+
    414c:	f0 81       	ld	r31, Z
    414e:	e0 2d       	mov	r30, r0
    4150:	30 97       	sbiw	r30, 0x00	; 0
    4152:	a9 f0       	breq	.+42     	; 0x417e <init_SoftKeys+0x7c>
    4154:	84 91       	lpm	r24, Z
    4156:	8f 73       	andi	r24, 0x3F	; 63
    4158:	81 30       	cpi	r24, 0x01	; 1
    415a:	21 f4       	brne	.+8      	; 0x4164 <init_SoftKeys+0x62>
    415c:	31 96       	adiw	r30, 0x01	; 1
    415e:	84 91       	lpm	r24, Z
    4160:	84 fd       	sbrc	r24, 4
    4162:	0d c0       	rjmp	.+26     	; 0x417e <init_SoftKeys+0x7c>
				// pSelMenu is not empty but does not point to softkey menu for key "i"
				log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,1+i);
    4164:	ae 01       	movw	r20, r28
    4166:	4f 5f       	subi	r20, 0xFF	; 255
    4168:	5f 4f       	sbci	r21, 0xFF	; 255
    416a:	67 e0       	ldi	r22, 0x07	; 7
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	0e 94 8b 10 	call	0x2116	; 0x2116 <log_putError>
				soft_Key[i].pSelMenu = NULL;
    4172:	cc 0f       	add	r28, r28
    4174:	dd 1f       	adc	r29, r29
    4176:	cf 5b       	subi	r28, 0xBF	; 191
    4178:	da 4f       	sbci	r29, 0xFA	; 250
    417a:	19 82       	std	Y+1, r1	; 0x01
    417c:	18 82       	st	Y, r1
			soft_Key[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	} else {
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    417e:	1f 5f       	subi	r17, 0xFF	; 255
    4180:	14 30       	cpi	r17, 0x04	; 4
    4182:	e0 f2       	brcs	.-72     	; 0x413c <init_SoftKeys+0x3a>
				log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,1+i);
				soft_Key[i].pSelMenu = NULL;
			}
		}
	}
}
    4184:	df 91       	pop	r29
    4186:	cf 91       	pop	r28
    4188:	1f 91       	pop	r17
    418a:	08 95       	ret

0000418c <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    418c:	64 30       	cpi	r22, 0x04	; 4
    418e:	e0 f4       	brcc	.+56     	; 0x41c8 <softKey_Set+0x3c>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	91 f0       	breq	.+36     	; 0x41b8 <softKey_Set+0x2c>
    4194:	fc 01       	movw	r30, r24
    4196:	24 91       	lpm	r18, Z
    4198:	2f 73       	andi	r18, 0x3F	; 63
    419a:	21 30       	cpi	r18, 0x01	; 1
    419c:	69 f4       	brne	.+26     	; 0x41b8 <softKey_Set+0x2c>
    419e:	31 96       	adiw	r30, 0x01	; 1
    41a0:	24 91       	lpm	r18, Z
    41a2:	24 ff       	sbrs	r18, 4
    41a4:	09 c0       	rjmp	.+18     	; 0x41b8 <softKey_Set+0x2c>
			soft_Key[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    41a6:	a6 2f       	mov	r26, r22
    41a8:	b0 e0       	ldi	r27, 0x00	; 0
    41aa:	aa 0f       	add	r26, r26
    41ac:	bb 1f       	adc	r27, r27
    41ae:	af 5b       	subi	r26, 0xBF	; 191
    41b0:	ba 4f       	sbci	r27, 0xFA	; 250
    41b2:	8d 93       	st	X+, r24
    41b4:	9c 93       	st	X, r25
    41b6:	08 95       	ret
		} else {
			soft_Key[nrSoftKey].pSelMenu = NULL;
    41b8:	e6 2f       	mov	r30, r22
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	ee 0f       	add	r30, r30
    41be:	ff 1f       	adc	r31, r31
    41c0:	ef 5b       	subi	r30, 0xBF	; 191
    41c2:	fa 4f       	sbci	r31, 0xFA	; 250
    41c4:	11 82       	std	Z+1, r1	; 0x01
    41c6:	10 82       	st	Z, r1
    41c8:	08 95       	ret

000041ca <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    41ca:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <currentMenu>
    41ce:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <currentMenu+0x1>
    41d2:	3e 96       	adiw	r30, 0x0e	; 14
    41d4:	65 91       	lpm	r22, Z+
    41d6:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    41d8:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <menuVMenuSoftKey>
    41dc:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <menuVMenuSoftKey+0x1>
    41e0:	d5 df       	rcall	.-86     	; 0x418c <softKey_Set>
	return 0;
}
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	08 95       	ret

000041e6 <softKeys_toLCD>:
			soft_Key[nrSoftKey].pSelMenu = NULL;
		}
	}
}

void softKeys_toLCD(){
    41e6:	1f 93       	push	r17
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    41ec:	10 e0       	ldi	r17, 0x00	; 0
    41ee:	32 c0       	rjmp	.+100    	; 0x4254 <softKeys_toLCD+0x6e>
		if (soft_Key[i].pSelMenu->pVar == NULL){
    41f0:	c1 2f       	mov	r28, r17
    41f2:	d0 e0       	ldi	r29, 0x00	; 0
    41f4:	fe 01       	movw	r30, r28
    41f6:	ee 0f       	add	r30, r30
    41f8:	ff 1f       	adc	r31, r31
    41fa:	ef 5b       	subi	r30, 0xBF	; 191
    41fc:	fa 4f       	sbci	r31, 0xFA	; 250
    41fe:	20 81       	ld	r18, Z
    4200:	31 81       	ldd	r19, Z+1	; 0x01
    4202:	c9 01       	movw	r24, r18
    4204:	0e 96       	adiw	r24, 0x0e	; 14
    4206:	fc 01       	movw	r30, r24
    4208:	85 91       	lpm	r24, Z+
    420a:	95 91       	lpm	r25, Z+
    420c:	89 2b       	or	r24, r25
    420e:	21 f4       	brne	.+8      	; 0x4218 <softKeys_toLCD+0x32>
			keylabel_clr(i);
    4210:	81 2f       	mov	r24, r17
    4212:	0e 94 9a 2a 	call	0x5534	; 0x5534 <keylabel_clr>
    4216:	1d c0       	rjmp	.+58     	; 0x4252 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_Key[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    4218:	f9 01       	movw	r30, r18
    421a:	3e 96       	adiw	r30, 0x0e	; 14
    421c:	65 91       	lpm	r22, Z+
    421e:	75 91       	lpm	r23, Z+
    4220:	81 2f       	mov	r24, r17
    4222:	0e 94 5f 2a 	call	0x54be	; 0x54be <keylabel_set>
			if (soft_Key[i].pSelMenu->pFunc != NULL){
    4226:	cc 0f       	add	r28, r28
    4228:	dd 1f       	adc	r29, r29
    422a:	cf 5b       	subi	r28, 0xBF	; 191
    422c:	da 4f       	sbci	r29, 0xFA	; 250
    422e:	e8 81       	ld	r30, Y
    4230:	f9 81       	ldd	r31, Y+1	; 0x01
    4232:	70 96       	adiw	r30, 0x10	; 16
    4234:	05 90       	lpm	r0, Z+
    4236:	f4 91       	lpm	r31, Z
    4238:	e0 2d       	mov	r30, r0
    423a:	30 97       	sbiw	r30, 0x00	; 0
    423c:	51 f0       	breq	.+20     	; 0x4252 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_Key[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	19 95       	eicall
    4242:	81 38       	cpi	r24, 0x81	; 129
    4244:	11 f4       	brne	.+4      	; 0x424a <softKeys_toLCD+0x64>
    4246:	6f ef       	ldi	r22, 0xFF	; 255
    4248:	01 c0       	rjmp	.+2      	; 0x424c <softKeys_toLCD+0x66>
    424a:	60 e0       	ldi	r22, 0x00	; 0
    424c:	81 2f       	mov	r24, r17
    424e:	0e 94 cd 2a 	call	0x559a	; 0x559a <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4252:	1f 5f       	subi	r17, 0xFF	; 255
    4254:	14 30       	cpi	r17, 0x04	; 4
    4256:	60 f2       	brcs	.-104    	; 0x41f0 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_Key[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    4258:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
}
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	08 95       	ret

00004264 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    4264:	82 30       	cpi	r24, 0x02	; 2
    4266:	49 f0       	breq	.+18     	; 0x427a <softKey_MessageKey_ToSoftKeyNr+0x16>
    4268:	18 f4       	brcc	.+6      	; 0x4270 <softKey_MessageKey_ToSoftKeyNr+0xc>
    426a:	81 30       	cpi	r24, 0x01	; 1
    426c:	51 f0       	breq	.+20     	; 0x4282 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    426e:	0b c0       	rjmp	.+22     	; 0x4286 <softKey_MessageKey_ToSoftKeyNr+0x22>
    4270:	83 30       	cpi	r24, 0x03	; 3
    4272:	59 f0       	breq	.+22     	; 0x428a <softKey_MessageKey_ToSoftKeyNr+0x26>
    4274:	84 30       	cpi	r24, 0x04	; 4
    4276:	19 f0       	breq	.+6      	; 0x427e <softKey_MessageKey_ToSoftKeyNr+0x1a>
    4278:	06 c0       	rjmp	.+12     	; 0x4286 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    4282:	83 e0       	ldi	r24, 0x03	; 3
    4284:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    4286:	8f ef       	ldi	r24, 0xFF	; 255
    4288:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    428a:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    428c:	08 95       	ret

0000428e <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    4294:	84 30       	cpi	r24, 0x04	; 4
    4296:	d0 f5       	brcc	.+116    	; 0x430c <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_Key[nrSoftKey].pSelMenu;
    4298:	e8 2f       	mov	r30, r24
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	ee 0f       	add	r30, r30
    429e:	ff 1f       	adc	r31, r31
    42a0:	ef 5b       	subi	r30, 0xBF	; 191
    42a2:	fa 4f       	sbci	r31, 0xFA	; 250
    42a4:	00 81       	ld	r16, Z
    42a6:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    42a8:	01 15       	cp	r16, r1
    42aa:	11 05       	cpc	r17, r1
    42ac:	89 f1       	breq	.+98     	; 0x4310 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    42ae:	f8 01       	movw	r30, r16
    42b0:	94 91       	lpm	r25, Z
    42b2:	9f 73       	andi	r25, 0x3F	; 63
    42b4:	91 30       	cpi	r25, 0x01	; 1
    42b6:	71 f5       	brne	.+92     	; 0x4314 <softKey_Execute+0x86>
    42b8:	31 96       	adiw	r30, 0x01	; 1
    42ba:	94 91       	lpm	r25, Z
    42bc:	94 ff       	sbrs	r25, 4
    42be:	2c c0       	rjmp	.+88     	; 0x4318 <softKey_Execute+0x8a>
    42c0:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    42c2:	3f 96       	adiw	r30, 0x0f	; 15
    42c4:	05 90       	lpm	r0, Z+
    42c6:	f4 91       	lpm	r31, Z
    42c8:	e0 2d       	mov	r30, r0
    42ca:	30 97       	sbiw	r30, 0x00	; 0
    42cc:	89 f0       	breq	.+34     	; 0x42f0 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    42ce:	86 2f       	mov	r24, r22
    42d0:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    42d2:	82 38       	cpi	r24, 0x82	; 130
    42d4:	29 f4       	brne	.+10     	; 0x42e0 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	8c 2f       	mov	r24, r28
    42da:	0e 94 cd 2a 	call	0x559a	; 0x559a <keylabel_statcheck>
    42de:	06 c0       	rjmp	.+12     	; 0x42ec <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    42e0:	81 38       	cpi	r24, 0x81	; 129
    42e2:	21 f4       	brne	.+8      	; 0x42ec <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    42e4:	6f ef       	ldi	r22, 0xFF	; 255
    42e6:	8c 2f       	mov	r24, r28
    42e8:	0e 94 cd 2a 	call	0x559a	; 0x559a <keylabel_statcheck>
					}
					keylabel_toLCD();
    42ec:	0e 94 ae 2a 	call	0x555c	; 0x555c <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    42f0:	f8 01       	movw	r30, r16
    42f2:	3c 96       	adiw	r30, 0x0c	; 12
    42f4:	85 91       	lpm	r24, Z+
    42f6:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    42f8:	00 97       	sbiw	r24, 0x00	; 0
    42fa:	81 f0       	breq	.+32     	; 0x431c <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    42fc:	b8 01       	movw	r22, r16
    42fe:	6e 5f       	subi	r22, 0xFE	; 254
    4300:	7f 4f       	sbci	r23, 0xFF	; 255
    4302:	0e 94 80 16 	call	0x2d00	; 0x2d00 <menu_Init>
					menu_InitLCD(); //display menu
    4306:	e8 dc       	rcall	.-1584   	; 0x3cd8 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	09 c0       	rjmp	.+18     	; 0x431e <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    430c:	8f ef       	ldi	r24, 0xFF	; 255
    430e:	07 c0       	rjmp	.+14     	; 0x431e <softKey_Execute+0x90>
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	05 c0       	rjmp	.+10     	; 0x431e <softKey_Execute+0x90>
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	03 c0       	rjmp	.+6      	; 0x431e <softKey_Execute+0x90>
    4318:	8f ef       	ldi	r24, 0xFF	; 255
    431a:	01 c0       	rjmp	.+2      	; 0x431e <softKey_Execute+0x90>
    431c:	8f ef       	ldi	r24, 0xFF	; 255
}
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	08 95       	ret

00004326 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    4326:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    4328:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    432c:	8c e0       	ldi	r24, 0x0C	; 12
    432e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    4332:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    4336:	84 ff       	sbrs	r24, 4
    4338:	02 c0       	rjmp	.+4      	; 0x433e <menu_showPowerState+0x18>
    433a:	80 e2       	ldi	r24, 0x20	; 32
    433c:	01 c0       	rjmp	.+2      	; 0x4340 <menu_showPowerState+0x1a>
    433e:	89 e0       	ldi	r24, 0x09	; 9
    4340:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
	lcd_goto(saveCursor);
    4344:	8c 2f       	mov	r24, r28
    4346:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>

    434a:	cf 91       	pop	r28
    434c:	08 95       	ret

0000434e <menuOnEnterPwrOn>:

//*************************** I N D I V I D U A L   M E N U   F U N C T I O N S ******************************

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    434e:	85 b1       	in	r24, 0x05	; 5
    4350:	80 64       	ori	r24, 0x40	; 64
    4352:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    4354:	83 e1       	ldi	r24, 0x13	; 19
    4356:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    435a:	e5 df       	rcall	.-54     	; 0x4326 <menu_showPowerState>
	return 0;
}
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	08 95       	ret

00004360 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    4360:	85 b1       	in	r24, 0x05	; 5
    4362:	8f 7b       	andi	r24, 0xBF	; 191
    4364:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    4366:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    436a:	dd df       	rcall	.-70     	; 0x4326 <menu_showPowerState>
	return 0;
}
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	08 95       	ret

00004370 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    4370:	85 b1       	in	r24, 0x05	; 5
    4372:	8f 7b       	andi	r24, 0xBF	; 191
    4374:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    437c:	d4 df       	rcall	.-88     	; 0x4326 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    437e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4380:	f8 94       	cli
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	06 c0       	rjmp	.+12     	; 0x4392 <menuOnEnterPwrRest+0x22>
    4386:	ed e2       	ldi	r30, 0x2D	; 45
    4388:	f2 e0       	ldi	r31, 0x02	; 2
    438a:	82 e3       	ldi	r24, 0x32	; 50
    438c:	82 83       	std	Z+2, r24	; 0x02
    438e:	13 82       	std	Z+3, r1	; 0x03
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	81 11       	cpse	r24, r1
    4394:	f8 cf       	rjmp	.-16     	; 0x4386 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4396:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    4398:	08 95       	ret

0000439a <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    439a:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <msgInIndex>
    439e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <msgOutIndex>
    43a2:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <msgOverflow>
    43a6:	08 95       	ret

000043a8 <message_push>:
    43a8:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <msgInIndex>
    43ac:	e9 2f       	mov	r30, r25
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	ee 58       	subi	r30, 0x8E	; 142
    43b2:	f8 4f       	sbci	r31, 0xF8	; 248
    43b4:	80 83       	st	Z, r24
    43b6:	9f 5f       	subi	r25, 0xFF	; 255
    43b8:	9f 71       	andi	r25, 0x1F	; 31
    43ba:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <msgOutIndex>
    43be:	98 13       	cpse	r25, r24
    43c0:	04 c0       	rjmp	.+8      	; 0x43ca <message_push+0x22>
    43c2:	8f ef       	ldi	r24, 0xFF	; 255
    43c4:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <msgOverflow>
    43c8:	08 95       	ret
    43ca:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <msgInIndex>
    43ce:	08 95       	ret

000043d0 <message_get>:
    43d0:	4f b7       	in	r20, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	21 e0       	ldi	r18, 0x01	; 1
    43d6:	11 c0       	rjmp	.+34     	; 0x43fa <message_get+0x2a>
    43d8:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <msgOutIndex>
    43dc:	30 91 71 07 	lds	r19, 0x0771	; 0x800771 <msgInIndex>
    43e0:	8f ef       	ldi	r24, 0xFF	; 255
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	93 17       	cp	r25, r19
    43e6:	49 f0       	breq	.+18     	; 0x43fa <message_get+0x2a>
    43e8:	e9 2f       	mov	r30, r25
    43ea:	f0 e0       	ldi	r31, 0x00	; 0
    43ec:	ee 58       	subi	r30, 0x8E	; 142
    43ee:	f8 4f       	sbci	r31, 0xF8	; 248
    43f0:	80 81       	ld	r24, Z
    43f2:	9f 5f       	subi	r25, 0xFF	; 255
    43f4:	9f 71       	andi	r25, 0x1F	; 31
    43f6:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <msgOutIndex>
    43fa:	21 11       	cpse	r18, r1
    43fc:	ed cf       	rjmp	.-38     	; 0x43d8 <message_get+0x8>
    43fe:	4f bf       	out	0x3f, r20	; 63
    4400:	08 95       	ret

00004402 <message_status>:
    4402:	4f b7       	in	r20, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	91 e0       	ldi	r25, 0x01	; 1
    4408:	08 c0       	rjmp	.+16     	; 0x441a <message_status+0x18>
    440a:	30 91 6e 05 	lds	r19, 0x056E	; 0x80056e <msgOutIndex>
    440e:	20 91 71 07 	lds	r18, 0x0771	; 0x800771 <msgInIndex>
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	32 17       	cp	r19, r18
    4418:	11 f0       	breq	.+4      	; 0x441e <message_status+0x1c>
    441a:	8f ef       	ldi	r24, 0xFF	; 255
    441c:	01 c0       	rjmp	.+2      	; 0x4420 <message_status+0x1e>
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	91 11       	cpse	r25, r1
    4422:	f3 cf       	rjmp	.-26     	; 0x440a <message_status+0x8>
    4424:	4f bf       	out	0x3f, r20	; 63
    4426:	08 95       	ret

00004428 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    4428:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    442a:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <msgPipe_Handling>
    442e:	99 23       	and	r25, r25
    4430:	e1 f0       	breq	.+56     	; 0x446a <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    4432:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <pipeMsgInIndex>
    4436:	21 e0       	ldi	r18, 0x01	; 1
    4438:	29 0f       	add	r18, r25
    443a:	20 93 6f 07 	sts	0x076F, r18	; 0x80076f <pipeMsgInIndex>
    443e:	e9 2f       	mov	r30, r25
    4440:	f0 e0       	ldi	r31, 0x00	; 0
    4442:	ee 0f       	add	r30, r30
    4444:	ff 1f       	adc	r31, r31
    4446:	e1 59       	subi	r30, 0x91	; 145
    4448:	fa 4f       	sbci	r31, 0xFA	; 250
    444a:	51 83       	std	Z+1, r21	; 0x01
    444c:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    444e:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pipeMsgOutIndex>
    4452:	28 13       	cpse	r18, r24
    4454:	0a c0       	rjmp	.+20     	; 0x446a <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    4456:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    445a:	9f 3f       	cpi	r25, 0xFF	; 255
    445c:	19 f4       	brne	.+6      	; 0x4464 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    445e:	8f ef       	ldi	r24, 0xFF	; 255
    4460:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    4464:	8f ef       	ldi	r24, 0xFF	; 255
    4466:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <msgPipeOverflow>
    446a:	08 95       	ret

0000446c <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    446c:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pipeMsgOutIndex>
    4470:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pipeMsgInIndex>
    4474:	e8 13       	cpse	r30, r24
    4476:	03 c0       	rjmp	.+6      	; 0x447e <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    4478:	8f ef       	ldi	r24, 0xFF	; 255
    447a:	9f ef       	ldi	r25, 0xFF	; 255
    447c:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	8e 0f       	add	r24, r30
    4482:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pipeMsgOutIndex>
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	ee 0f       	add	r30, r30
    448a:	ff 1f       	adc	r31, r31
    448c:	e1 59       	subi	r30, 0x91	; 145
    448e:	fa 4f       	sbci	r31, 0xFA	; 250
    4490:	80 81       	ld	r24, Z
    4492:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    4494:	08 95       	ret

00004496 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    4496:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <pipeMsgOutIndex>
    449a:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pipeMsgInIndex>
    449e:	98 13       	cpse	r25, r24
    44a0:	02 c0       	rjmp	.+4      	; 0x44a6 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    44a6:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    44a8:	08 95       	ret

000044aa <init_Midi>:
		if (((regNr & 0x07) == 0x07) || (regNr == registerCount-1)){
			*resultPtr++ = mask;
		}

	}
}
    44aa:	10 92 e1 07 	sts	0x07E1, r1	; 0x8007e1 <midiCoupler_2from3>
    44ae:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <midiCoupler_1from3>
    44b2:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <midiCoupler_1from2>
    44b6:	10 92 19 0b 	sts	0x0B19, r1	; 0x800b19 <midiCoupler_Pfrom3>
    44ba:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <midiCoupler_Pfrom2>
    44be:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <midiCoupler_Pfrom1>
    44c2:	08 95       	ret

000044c4 <midiAllReset>:
    44c4:	80 e8       	ldi	r24, 0x80	; 128
    44c6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
    44ca:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <init_Pipe>
    44ce:	08 95       	ret

000044d0 <register_onOff>:

void register_onOff(uint8_t regNr, uint8_t onOff){
	// onOff: LSB==1: on, LSB==0: off
	if (regNr < registerCount) {
    44d0:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <registerCount>
    44d4:	89 17       	cp	r24, r25
    44d6:	c0 f5       	brcc	.+112    	; 0x4548 <register_onOff+0x78>
		// valid register
		uint8_t modBit = registerMap[regNr];
    44d8:	e8 2f       	mov	r30, r24
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	ea 56       	subi	r30, 0x6A	; 106
    44de:	f8 4f       	sbci	r31, 0xF8	; 248
    44e0:	80 81       	ld	r24, Z
		uint8_t bitNr = MODULE_BIT_TO_BIT(modBit);
    44e2:	e8 2f       	mov	r30, r24
    44e4:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(modBit);
    44e6:	82 95       	swap	r24
    44e8:	86 95       	lsr	r24
    44ea:	87 70       	andi	r24, 0x07	; 7
		if ((onOff & 0x01) != 0){
    44ec:	60 ff       	sbrs	r22, 0
    44ee:	17 c0       	rjmp	.+46     	; 0x451e <register_onOff+0x4e>
			// set register -> output L
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	21 e0       	ldi	r18, 0x01	; 1
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	a9 01       	movw	r20, r18
    44f8:	02 c0       	rjmp	.+4      	; 0x44fe <register_onOff+0x2e>
    44fa:	44 0f       	add	r20, r20
    44fc:	55 1f       	adc	r21, r21
    44fe:	8a 95       	dec	r24
    4500:	e2 f7       	brpl	.-8      	; 0x44fa <register_onOff+0x2a>
    4502:	ca 01       	movw	r24, r20
    4504:	ee 0f       	add	r30, r30
    4506:	ff 1f       	adc	r31, r31
    4508:	ee 0f       	add	r30, r30
    450a:	ff 1f       	adc	r31, r31
    450c:	ee 0f       	add	r30, r30
    450e:	ff 1f       	adc	r31, r31
    4510:	e9 5b       	subi	r30, 0xB9	; 185
    4512:	fd 4f       	sbci	r31, 0xFD	; 253
    4514:	80 95       	com	r24
    4516:	91 81       	ldd	r25, Z+1	; 0x01
    4518:	89 23       	and	r24, r25
    451a:	81 83       	std	Z+1, r24	; 0x01
    451c:	08 95       	ret
		} else {
			// reset register -> output H
			pipe[bitNr].pipeOut |= (1 << modulNr);
    451e:	f0 e0       	ldi	r31, 0x00	; 0
    4520:	21 e0       	ldi	r18, 0x01	; 1
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	a9 01       	movw	r20, r18
    4526:	02 c0       	rjmp	.+4      	; 0x452c <register_onOff+0x5c>
    4528:	44 0f       	add	r20, r20
    452a:	55 1f       	adc	r21, r21
    452c:	8a 95       	dec	r24
    452e:	e2 f7       	brpl	.-8      	; 0x4528 <register_onOff+0x58>
    4530:	ca 01       	movw	r24, r20
    4532:	ee 0f       	add	r30, r30
    4534:	ff 1f       	adc	r31, r31
    4536:	ee 0f       	add	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	ee 0f       	add	r30, r30
    453c:	ff 1f       	adc	r31, r31
    453e:	e9 5b       	subi	r30, 0xB9	; 185
    4540:	fd 4f       	sbci	r31, 0xFD	; 253
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	89 2b       	or	r24, r25
    4546:	81 83       	std	Z+1, r24	; 0x01
    4548:	08 95       	ret

0000454a <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

void program_toRegister(uint8_t program){
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	1f 93       	push	r17
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
	if (program < PROGRAM_COUNT){
    4554:	80 34       	cpi	r24, 0x40	; 64
    4556:	70 f5       	brcc	.+92     	; 0x45b4 <program_toRegister+0x6a>
		uint8_t regBits;
		uint8_t regNr;
		uint8_t *regBytePtr = &(programMap[program][0]);
    4558:	e8 2f       	mov	r30, r24
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	ee 0f       	add	r30, r30
    455e:	ff 1f       	adc	r31, r31
    4560:	ee 0f       	add	r30, r30
    4562:	ff 1f       	adc	r31, r31
    4564:	ee 0f       	add	r30, r30
    4566:	ff 1f       	adc	r31, r31
    4568:	e9 5e       	subi	r30, 0xE9	; 233
    456a:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	20 c0       	rjmp	.+64     	; 0x45b0 <program_toRegister+0x66>
			regBits = *(regBytePtr++);
    4570:	7f 01       	movw	r14, r30
    4572:	8f ef       	ldi	r24, 0xFF	; 255
    4574:	e8 1a       	sub	r14, r24
    4576:	f8 0a       	sbc	r15, r24
    4578:	d0 81       	ld	r29, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    457a:	c0 e0       	ldi	r28, 0x00	; 0
    457c:	15 c0       	rjmp	.+42     	; 0x45a8 <program_toRegister+0x5e>
				regNr = (byteNr << 3) || bitNr;
    457e:	81 2f       	mov	r24, r17
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	88 0f       	add	r24, r24
    4584:	99 1f       	adc	r25, r25
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	88 0f       	add	r24, r24
    458c:	99 1f       	adc	r25, r25
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	29 f4       	brne	.+10     	; 0x459c <program_toRegister+0x52>
    4592:	cc 23       	and	r28, r28
    4594:	29 f0       	breq	.+10     	; 0x45a0 <program_toRegister+0x56>
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	02 c0       	rjmp	.+4      	; 0x45a0 <program_toRegister+0x56>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	90 e0       	ldi	r25, 0x00	; 0
				register_onOff(regNr, regBits);
    45a0:	6d 2f       	mov	r22, r29
    45a2:	96 df       	rcall	.-212    	; 0x44d0 <register_onOff>
				regBits = regBits >> 1;
    45a4:	d6 95       	lsr	r29
		uint8_t regBits;
		uint8_t regNr;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			regBits = *(regBytePtr++);
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    45a6:	cf 5f       	subi	r28, 0xFF	; 255
    45a8:	c8 30       	cpi	r28, 0x08	; 8
    45aa:	48 f3       	brcs	.-46     	; 0x457e <program_toRegister+0x34>
void program_toRegister(uint8_t program){
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    45ac:	1f 5f       	subi	r17, 0xFF	; 255
			regBits = *(regBytePtr++);
    45ae:	f7 01       	movw	r30, r14
void program_toRegister(uint8_t program){
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    45b0:	18 30       	cpi	r17, 0x08	; 8
    45b2:	f0 f2       	brcs	.-68     	; 0x4570 <program_toRegister+0x26>
				register_onOff(regNr, regBits);
				regBits = regBits >> 1;
			}
		}
	}
}
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	08 95       	ret

000045c0 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    45c0:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    45c2:	e3 ee       	ldi	r30, 0xE3	; 227
    45c4:	f7 e0       	ldi	r31, 0x07	; 7
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    45c6:	07 c0       	rjmp	.+14     	; 0x45d6 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    45c8:	8f ef       	ldi	r24, 0xFF	; 255
    45ca:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    45cc:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    45ce:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    45d0:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    45d2:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    45d4:	91 50       	subi	r25, 0x01	; 1
    45d6:	91 11       	cpse	r25, r1
    45d8:	f7 cf       	rjmp	.-18     	; 0x45c8 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    45da:	0e 94 29 07 	call	0xe52	; 0xe52 <eeprom_ReadMidiInMap>
    45de:	8f 3f       	cpi	r24, 0xFF	; 255
    45e0:	01 f5       	brne	.+64     	; 0x4622 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    45e2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    45e6:	e3 ee       	ldi	r30, 0xE3	; 227
    45e8:	f7 e0       	ldi	r31, 0x07	; 7
    45ea:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    45ec:	84 e2       	ldi	r24, 0x24	; 36
    45ee:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    45f0:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    45f2:	98 e3       	ldi	r25, 0x38	; 56
    45f4:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    45f6:	21 e0       	ldi	r18, 0x01	; 1
    45f8:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    45fa:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    45fc:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    45fe:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    4600:	22 e0       	ldi	r18, 0x02	; 2
    4602:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    4604:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    4606:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    4608:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    460a:	93 e0       	ldi	r25, 0x03	; 3
    460c:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    460e:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    4610:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    4612:	8e e1       	ldi	r24, 0x1E	; 30
    4614:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	61 e0       	ldi	r22, 0x01	; 1
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <log_putError>
    4622:	08 95       	ret

00004624 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	06 c0       	rjmp	.+12     	; 0x4634 <init_Manual2Midi+0x10>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
    4628:	fc 01       	movw	r30, r24
    462a:	ed 51       	subi	r30, 0x1D	; 29
    462c:	f7 4f       	sbci	r31, 0xF7	; 247
    462e:	3f ef       	ldi	r19, 0xFF	; 255
    4630:	30 83       	st	Z, r19
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    4632:	2f 5f       	subi	r18, 0xFF	; 255
    4634:	82 2f       	mov	r24, r18
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	b1 f7       	brne	.-20     	; 0x4628 <init_Manual2Midi+0x4>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    463c:	0e 94 51 07 	call	0xea2	; 0xea2 <eeprom_ReadMidiOutMap>
    4640:	8f 3f       	cpi	r24, 0xFF	; 255
    4642:	99 f4       	brne	.+38     	; 0x466a <init_Manual2Midi+0x46>
		midiEEPromLoadError = EE_LOAD_ERROR;
    4644:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].channel = MIDI_CHANNEL_1;
    4648:	e3 ee       	ldi	r30, 0xE3	; 227
    464a:	f8 e0       	ldi	r31, 0x08	; 8
    464c:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].channel = MIDI_CHANNEL_2;
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	81 83       	std	Z+1, r24	; 0x01
		midiOutMap[MANUAL_I].channel = MIDI_CHANNEL_3;
    4652:	82 e0       	ldi	r24, 0x02	; 2
    4654:	82 83       	std	Z+2, r24	; 0x02
		midiOutMap[MANUAL_P].channel = MIDI_CHANNEL_4;
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	83 83       	std	Z+3, r24	; 0x03
		midi_TxActivceSense = FALSE;
    465a:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <midi_TxActivceSense>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    465e:	40 e0       	ldi	r20, 0x00	; 0
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	62 e0       	ldi	r22, 0x02	; 2
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <log_putError>
    466a:	08 95       	ret

0000466c <Manual_to_MidiNote>:
		midiLastInChannel = channel;
		midiLastInManual = MANUAL_NONE;
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    466c:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    466e:	8f ef       	ldi	r24, 0xFF	; 255
    4670:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    4672:	e4 30       	cpi	r30, 0x04	; 4
    4674:	40 f4       	brcc	.+16     	; 0x4686 <Manual_to_MidiNote+0x1a>
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	ed 51       	subi	r30, 0x1D	; 29
    467a:	f7 4f       	sbci	r31, 0xF7	; 247
    467c:	20 81       	ld	r18, Z
    467e:	2f 3f       	cpi	r18, 0xFF	; 255
    4680:	11 f0       	breq	.+4      	; 0x4686 <Manual_to_MidiNote+0x1a>
			result.channel = midiOutMap[manual].channel;
    4682:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    4684:	96 2f       	mov	r25, r22
		}
	}
	return(result);
}
    4686:	08 95       	ret

00004688 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    4688:	70 e0       	ldi	r23, 0x00	; 0
    468a:	52 c0       	rjmp	.+164    	; 0x4730 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    468c:	87 2f       	mov	r24, r23
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	24 2f       	mov	r18, r20
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	f9 01       	movw	r30, r18
    4696:	ee 0f       	add	r30, r30
    4698:	ff 1f       	adc	r31, r31
    469a:	df 01       	movw	r26, r30
    469c:	a2 0f       	add	r26, r18
    469e:	b3 1f       	adc	r27, r19
    46a0:	fc 01       	movw	r30, r24
    46a2:	ee 0f       	add	r30, r30
    46a4:	ff 1f       	adc	r31, r31
    46a6:	e8 0f       	add	r30, r24
    46a8:	f9 1f       	adc	r31, r25
    46aa:	ee 0f       	add	r30, r30
    46ac:	ff 1f       	adc	r31, r31
    46ae:	ee 0f       	add	r30, r30
    46b0:	ff 1f       	adc	r31, r31
    46b2:	ea 0f       	add	r30, r26
    46b4:	fb 1f       	adc	r31, r27
    46b6:	e9 51       	subi	r30, 0x19	; 25
    46b8:	f7 4f       	sbci	r31, 0xF7	; 247
    46ba:	a0 81       	ld	r26, Z
    46bc:	af 3f       	cpi	r26, 0xFF	; 255
    46be:	d9 f0       	breq	.+54     	; 0x46f6 <Midi_updateManualRange+0x6e>
    46c0:	f9 01       	movw	r30, r18
    46c2:	ee 0f       	add	r30, r30
    46c4:	ff 1f       	adc	r31, r31
    46c6:	e2 0f       	add	r30, r18
    46c8:	f3 1f       	adc	r31, r19
    46ca:	9c 01       	movw	r18, r24
    46cc:	22 0f       	add	r18, r18
    46ce:	33 1f       	adc	r19, r19
    46d0:	28 0f       	add	r18, r24
    46d2:	39 1f       	adc	r19, r25
    46d4:	22 0f       	add	r18, r18
    46d6:	33 1f       	adc	r19, r19
    46d8:	22 0f       	add	r18, r18
    46da:	33 1f       	adc	r19, r19
    46dc:	e2 0f       	add	r30, r18
    46de:	f3 1f       	adc	r31, r19
    46e0:	e9 51       	subi	r30, 0x19	; 25
    46e2:	f7 4f       	sbci	r31, 0xF7	; 247
    46e4:	21 81       	ldd	r18, Z+1	; 0x01
    46e6:	2f 3f       	cpi	r18, 0xFF	; 255
    46e8:	31 f0       	breq	.+12     	; 0x46f6 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    46ea:	a6 17       	cp	r26, r22
    46ec:	08 f4       	brcc	.+2      	; 0x46f0 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    46ee:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    46f0:	52 17       	cp	r21, r18
    46f2:	08 f4       	brcc	.+2      	; 0x46f6 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    46f4:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    46f6:	55 23       	and	r21, r21
    46f8:	11 f0       	breq	.+4      	; 0x46fe <Midi_updateManualRange+0x76>
    46fa:	6f 3f       	cpi	r22, 0xFF	; 255
    46fc:	49 f4       	brne	.+18     	; 0x4710 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	fc 01       	movw	r30, r24
    4704:	e7 52       	subi	r30, 0x27	; 39
    4706:	f8 4f       	sbci	r31, 0xF8	; 248
    4708:	8f ef       	ldi	r24, 0xFF	; 255
    470a:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;			
    470c:	81 83       	std	Z+1, r24	; 0x01
    470e:	07 c0       	rjmp	.+14     	; 0x471e <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    4710:	88 0f       	add	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	fc 01       	movw	r30, r24
    4716:	e7 52       	subi	r30, 0x27	; 39
    4718:	f8 4f       	sbci	r31, 0xF8	; 248
    471a:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;			
    471c:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    471e:	4f 5f       	subi	r20, 0xFF	; 255
    4720:	03 c0       	rjmp	.+6      	; 0x4728 <Midi_updateManualRange+0xa0>
    4722:	40 e0       	ldi	r20, 0x00	; 0
    4724:	6f ef       	ldi	r22, 0xFF	; 255
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	44 30       	cpi	r20, 0x04	; 4
    472a:	08 f4       	brcc	.+2      	; 0x472e <Midi_updateManualRange+0xa6>
    472c:	af cf       	rjmp	.-162    	; 0x468c <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    472e:	7f 5f       	subi	r23, 0xFF	; 255
    4730:	74 30       	cpi	r23, 0x04	; 4
    4732:	b8 f3       	brcs	.-18     	; 0x4722 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;			
			}
		}
	}
}
    4734:	08 95       	ret

00004736 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    4736:	63 e0       	ldi	r22, 0x03	; 3
    4738:	28 c0       	rjmp	.+80     	; 0x478a <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    473a:	86 2f       	mov	r24, r22
    473c:	06 2e       	mov	r0, r22
    473e:	00 0c       	add	r0, r0
    4740:	99 0b       	sbc	r25, r25
    4742:	42 2f       	mov	r20, r18
    4744:	02 2e       	mov	r0, r18
    4746:	00 0c       	add	r0, r0
    4748:	55 0b       	sbc	r21, r21
    474a:	fa 01       	movw	r30, r20
    474c:	ee 0f       	add	r30, r30
    474e:	ff 1f       	adc	r31, r31
    4750:	e4 0f       	add	r30, r20
    4752:	f5 1f       	adc	r31, r21
    4754:	ac 01       	movw	r20, r24
    4756:	44 0f       	add	r20, r20
    4758:	55 1f       	adc	r21, r21
    475a:	da 01       	movw	r26, r20
    475c:	a8 0f       	add	r26, r24
    475e:	b9 1f       	adc	r27, r25
    4760:	aa 0f       	add	r26, r26
    4762:	bb 1f       	adc	r27, r27
    4764:	aa 0f       	add	r26, r26
    4766:	bb 1f       	adc	r27, r27
    4768:	ae 0f       	add	r26, r30
    476a:	bf 1f       	adc	r27, r31
    476c:	a9 51       	subi	r26, 0x19	; 25
    476e:	b7 4f       	sbci	r27, 0xF7	; 247
    4770:	3f ef       	ldi	r19, 0xFF	; 255
    4772:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    4774:	11 96       	adiw	r26, 0x01	; 1
    4776:	3c 93       	st	X, r19
    4778:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    477a:	fd 01       	movw	r30, r26
    477c:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    477e:	21 50       	subi	r18, 0x01	; 1
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <init_Manual2Module+0x4e>
    4782:	23 e0       	ldi	r18, 0x03	; 3
    4784:	22 23       	and	r18, r18
    4786:	cc f6       	brge	.-78     	; 0x473a <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    4788:	61 50       	subi	r22, 0x01	; 1
    478a:	66 23       	and	r22, r22
    478c:	d4 f7       	brge	.-12     	; 0x4782 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    478e:	0e 94 01 07 	call	0xe02	; 0xe02 <eeprom_ReadManualMap>
    4792:	8f 3f       	cpi	r24, 0xFF	; 255
    4794:	41 f4       	brne	.+16     	; 0x47a6 <init_Manual2Module+0x70>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    4796:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    479a:	40 e0       	ldi	r20, 0x00	; 0
    479c:	50 e0       	ldi	r21, 0x00	; 0
    479e:	63 e0       	ldi	r22, 0x03	; 3
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	0e 94 8b 10 	call	0x2116	; 0x2116 <log_putError>
	}
	Midi_updateManualRange();
    47a6:	70 cf       	rjmp	.-288    	; 0x4688 <Midi_updateManualRange>
    47a8:	08 95       	ret

000047aa <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    47aa:	84 30       	cpi	r24, 0x04	; 4
    47ac:	d8 f4       	brcc	.+54     	; 0x47e4 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	fc 01       	movw	r30, r24
    47b2:	ee 0f       	add	r30, r30
    47b4:	ff 1f       	adc	r31, r31
    47b6:	e8 0f       	add	r30, r24
    47b8:	f9 1f       	adc	r31, r25
    47ba:	ee 0f       	add	r30, r30
    47bc:	ff 1f       	adc	r31, r31
    47be:	ee 0f       	add	r30, r30
    47c0:	ff 1f       	adc	r31, r31
    47c2:	e9 51       	subi	r30, 0x19	; 25
    47c4:	f7 4f       	sbci	r31, 0xF7	; 247
		uint8_t i = RANGE_COUNT;
    47c6:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    47c8:	20 81       	ld	r18, Z
    47ca:	62 17       	cp	r22, r18
    47cc:	40 f0       	brcs	.+16     	; 0x47de <manualNote_to_moduleBit+0x34>
    47ce:	91 81       	ldd	r25, Z+1	; 0x01
    47d0:	96 17       	cp	r25, r22
    47d2:	28 f0       	brcs	.+10     	; 0x47de <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    47d4:	92 81       	ldd	r25, Z+2	; 0x02
    47d6:	62 1b       	sub	r22, r18
				return (result);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	96 0f       	add	r25, r22
    47dc:	08 95       	ret
			}
			pRange++;
    47de:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    47e0:	81 50       	subi	r24, 0x01	; 1
    47e2:	91 f7       	brne	.-28     	; 0x47c8 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    47e4:	8f ef       	ldi	r24, 0xFF	; 255
    47e6:	90 e0       	ldi	r25, 0x00	; 0
}
    47e8:	08 95       	ret

000047ea <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    47ea:	70 e0       	ldi	r23, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    47ec:	e7 ee       	ldi	r30, 0xE7	; 231
    47ee:	f8 e0       	ldi	r31, 0x08	; 8
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    47f0:	54 e0       	ldi	r21, 0x04	; 4
    47f2:	16 c0       	rjmp	.+44     	; 0x4820 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    47f4:	62 81       	ldd	r22, Z+2	; 0x02
    47f6:	86 17       	cp	r24, r22
    47f8:	88 f0       	brcs	.+34     	; 0x481c <moduleBit_to_manualNote+0x32>
    47fa:	a8 2f       	mov	r26, r24
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	21 81       	ldd	r18, Z+1	; 0x01
    4800:	90 81       	ld	r25, Z
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	29 1b       	sub	r18, r25
    4806:	31 09       	sbc	r19, r1
    4808:	26 0f       	add	r18, r22
    480a:	31 1d       	adc	r19, r1
    480c:	2a 17       	cp	r18, r26
    480e:	3b 07       	cpc	r19, r27
    4810:	2c f0       	brlt	.+10     	; 0x481c <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    4812:	48 2f       	mov	r20, r24
    4814:	46 1b       	sub	r20, r22
				return(result);
    4816:	87 2f       	mov	r24, r23
    4818:	94 0f       	add	r25, r20
    481a:	08 95       	ret
			}
			pRange++;
    481c:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    481e:	51 50       	subi	r21, 0x01	; 1
    4820:	51 11       	cpse	r21, r1
    4822:	e8 cf       	rjmp	.-48     	; 0x47f4 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    4824:	7f 5f       	subi	r23, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    4826:	75 30       	cpi	r23, 0x05	; 5
    4828:	18 f3       	brcs	.-58     	; 0x47f0 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
    482a:	48 2f       	mov	r20, r24
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	61 e0       	ldi	r22, 0x01	; 1
    4830:	82 e0       	ldi	r24, 0x02	; 2
    4832:	0e 94 91 10 	call	0x2122	; 0x2122 <log_putWarning>
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    4836:	8f ef       	ldi	r24, 0xFF	; 255
    4838:	90 e0       	ldi	r25, 0x00	; 0
}
    483a:	08 95       	ret

0000483c <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    483c:	cf 93       	push	r28
    483e:	c4 2f       	mov	r28, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    4840:	b4 df       	rcall	.-152    	; 0x47aa <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
    4842:	81 11       	cpse	r24, r1
    4844:	33 c0       	rjmp	.+102    	; 0x48ac <manual_NoteOnOff+0x70>
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    4846:	e9 2f       	mov	r30, r25
    4848:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    484a:	92 95       	swap	r25
    484c:	96 95       	lsr	r25
    484e:	97 70       	andi	r25, 0x07	; 7
		if (onOff == NOTE_OFF) {
    4850:	c1 11       	cpse	r28, r1
    4852:	16 c0       	rjmp	.+44     	; 0x4880 <manual_NoteOnOff+0x44>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	21 e0       	ldi	r18, 0x01	; 1
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	a9 01       	movw	r20, r18
    485c:	02 c0       	rjmp	.+4      	; 0x4862 <manual_NoteOnOff+0x26>
    485e:	44 0f       	add	r20, r20
    4860:	55 1f       	adc	r21, r21
    4862:	9a 95       	dec	r25
    4864:	e2 f7       	brpl	.-8      	; 0x485e <manual_NoteOnOff+0x22>
    4866:	ca 01       	movw	r24, r20
    4868:	ee 0f       	add	r30, r30
    486a:	ff 1f       	adc	r31, r31
    486c:	ee 0f       	add	r30, r30
    486e:	ff 1f       	adc	r31, r31
    4870:	ee 0f       	add	r30, r30
    4872:	ff 1f       	adc	r31, r31
    4874:	e9 5b       	subi	r30, 0xB9	; 185
    4876:	fd 4f       	sbci	r31, 0xFD	; 253
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	89 2b       	or	r24, r25
    487c:	81 83       	std	Z+1, r24	; 0x01
    487e:	16 c0       	rjmp	.+44     	; 0x48ac <manual_NoteOnOff+0x70>
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	21 e0       	ldi	r18, 0x01	; 1
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	a9 01       	movw	r20, r18
    4888:	02 c0       	rjmp	.+4      	; 0x488e <manual_NoteOnOff+0x52>
    488a:	44 0f       	add	r20, r20
    488c:	55 1f       	adc	r21, r21
    488e:	9a 95       	dec	r25
    4890:	e2 f7       	brpl	.-8      	; 0x488a <manual_NoteOnOff+0x4e>
    4892:	ca 01       	movw	r24, r20
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	ee 0f       	add	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	ee 0f       	add	r30, r30
    489e:	ff 1f       	adc	r31, r31
    48a0:	e9 5b       	subi	r30, 0xB9	; 185
    48a2:	fd 4f       	sbci	r31, 0xFD	; 253
    48a4:	80 95       	com	r24
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	89 23       	and	r24, r25
    48aa:	81 83       	std	Z+1, r24	; 0x01
		}
	}
}
    48ac:	cf 91       	pop	r28
    48ae:	08 95       	ret

000048b0 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    48b0:	cf 92       	push	r12
    48b2:	df 92       	push	r13
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    48c2:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    48c4:	3c c0       	rjmp	.+120    	; 0x493e <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    48c6:	0c 2d       	mov	r16, r12
    48c8:	10 e0       	ldi	r17, 0x00	; 0
    48ca:	cd 2d       	mov	r28, r13
    48cc:	d0 e0       	ldi	r29, 0x00	; 0
    48ce:	f8 01       	movw	r30, r16
    48d0:	ee 0f       	add	r30, r30
    48d2:	ff 1f       	adc	r31, r31
    48d4:	ee 0f       	add	r30, r30
    48d6:	ff 1f       	adc	r31, r31
    48d8:	ec 0f       	add	r30, r28
    48da:	fd 1f       	adc	r31, r29
    48dc:	ee 0f       	add	r30, r30
    48de:	ff 1f       	adc	r31, r31
    48e0:	ee 0f       	add	r30, r30
    48e2:	ff 1f       	adc	r31, r31
    48e4:	ed 51       	subi	r30, 0x1D	; 29
    48e6:	f8 4f       	sbci	r31, 0xF8	; 248
    48e8:	80 81       	ld	r24, Z
    48ea:	84 30       	cpi	r24, 0x04	; 4
    48ec:	38 f5       	brcc	.+78     	; 0x493c <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    48ee:	f8 01       	movw	r30, r16
    48f0:	ee 0f       	add	r30, r30
    48f2:	ff 1f       	adc	r31, r31
    48f4:	ee 0f       	add	r30, r30
    48f6:	ff 1f       	adc	r31, r31
    48f8:	ec 0f       	add	r30, r28
    48fa:	fd 1f       	adc	r31, r29
    48fc:	ee 0f       	add	r30, r30
    48fe:	ff 1f       	adc	r31, r31
    4900:	ee 0f       	add	r30, r30
    4902:	ff 1f       	adc	r31, r31
    4904:	ed 51       	subi	r30, 0x1D	; 29
    4906:	f8 4f       	sbci	r31, 0xF8	; 248
    4908:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    490a:	f2 80       	ldd	r15, Z+2	; 0x02
    490c:	15 c0       	rjmp	.+42     	; 0x4938 <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    490e:	ee 24       	eor	r14, r14
    4910:	e3 94       	inc	r14
    4912:	e6 0e       	add	r14, r22
    4914:	f8 01       	movw	r30, r16
    4916:	ee 0f       	add	r30, r30
    4918:	ff 1f       	adc	r31, r31
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	ec 0f       	add	r30, r28
    4920:	fd 1f       	adc	r31, r29
    4922:	ee 0f       	add	r30, r30
    4924:	ff 1f       	adc	r31, r31
    4926:	ee 0f       	add	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	ed 51       	subi	r30, 0x1D	; 29
    492c:	f8 4f       	sbci	r31, 0xF8	; 248
    492e:	40 e0       	ldi	r20, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	84 df       	rcall	.-248    	; 0x483c <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    4934:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    4936:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    4938:	f1 10       	cpse	r15, r1
    493a:	e9 cf       	rjmp	.-46     	; 0x490e <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    493c:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    493e:	83 e0       	ldi	r24, 0x03	; 3
    4940:	8d 15       	cp	r24, r13
    4942:	08 f0       	brcs	.+2      	; 0x4946 <midiAllNotesOff+0x96>
    4944:	c0 cf       	rjmp	.-128    	; 0x48c6 <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	1f 91       	pop	r17
    494c:	0f 91       	pop	r16
    494e:	ff 90       	pop	r15
    4950:	ef 90       	pop	r14
    4952:	df 90       	pop	r13
    4954:	cf 90       	pop	r12
    4956:	08 95       	ret

00004958 <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    4958:	0f 93       	push	r16
    495a:	1f 93       	push	r17
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    4960:	84 30       	cpi	r24, 0x04	; 4
    4962:	08 f5       	brcc	.+66     	; 0x49a6 <midi_ManualOff+0x4e>
    4964:	08 2f       	mov	r16, r24
    4966:	10 e0       	ldi	r17, 0x00	; 0
    4968:	f8 01       	movw	r30, r16
    496a:	ee 0f       	add	r30, r30
    496c:	ff 1f       	adc	r31, r31
    496e:	e7 52       	subi	r30, 0x27	; 39
    4970:	f8 4f       	sbci	r31, 0xF8	; 248
    4972:	c0 81       	ld	r28, Z
    4974:	cf 3f       	cpi	r28, 0xFF	; 255
    4976:	b9 f0       	breq	.+46     	; 0x49a6 <midi_ManualOff+0x4e>
    4978:	d8 2f       	mov	r29, r24
    497a:	f8 01       	movw	r30, r16
    497c:	ee 0f       	add	r30, r30
    497e:	ff 1f       	adc	r31, r31
    4980:	e7 52       	subi	r30, 0x27	; 39
    4982:	f8 4f       	sbci	r31, 0xF8	; 248
    4984:	81 81       	ldd	r24, Z+1	; 0x01
    4986:	8f 3f       	cpi	r24, 0xFF	; 255
    4988:	31 f4       	brne	.+12     	; 0x4996 <midi_ManualOff+0x3e>
    498a:	0d c0       	rjmp	.+26     	; 0x49a6 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    498c:	40 e0       	ldi	r20, 0x00	; 0
    498e:	6c 2f       	mov	r22, r28
    4990:	8d 2f       	mov	r24, r29
    4992:	54 df       	rcall	.-344    	; 0x483c <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    4994:	cf 5f       	subi	r28, 0xFF	; 255
    4996:	f8 01       	movw	r30, r16
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	e7 52       	subi	r30, 0x27	; 39
    499e:	f8 4f       	sbci	r31, 0xF8	; 248
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	9c 17       	cp	r25, r28
    49a4:	98 f7       	brcc	.-26     	; 0x498c <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	1f 91       	pop	r17
    49ac:	0f 91       	pop	r16
    49ae:	08 95       	ret

000049b0 <midi_AllManualsOff>:

void midi_AllManualsOff(){
    49b0:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    49b2:	c0 e0       	ldi	r28, 0x00	; 0
    49b4:	03 c0       	rjmp	.+6      	; 0x49bc <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    49b6:	8c 2f       	mov	r24, r28
    49b8:	cf df       	rcall	.-98     	; 0x4958 <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    49ba:	cf 5f       	subi	r28, 0xFF	; 255
    49bc:	c4 30       	cpi	r28, 0x04	; 4
    49be:	d8 f3       	brcs	.-10     	; 0x49b6 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    49c0:	cf 91       	pop	r28
    49c2:	08 95       	ret

000049c4 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    49c4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <midiRxActivceSensing>
    49c8:	88 23       	and	r24, r24
    49ca:	39 f0       	breq	.+14     	; 0x49da <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    49cc:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <swTimer+0x6>
    49d0:	81 11       	cpse	r24, r1
    49d2:	03 c0       	rjmp	.+6      	; 0x49da <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    49d4:	ed df       	rcall	.-38     	; 0x49b0 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    49d6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <midiRxActivceSensing>
    49da:	08 95       	ret

000049dc <midiNote_to_Manual>:
		midi_TxActivceSense = FALSE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    49dc:	0f 93       	push	r16
    49de:	1f 93       	push	r17
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	06 2f       	mov	r16, r22
    49e6:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    49e8:	d8 2f       	mov	r29, r24
    49ea:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    49ec:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    49ee:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    49f0:	3c c0       	rjmp	.+120    	; 0x4a6a <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    49f2:	4d 2f       	mov	r20, r29
    49f4:	50 e0       	ldi	r21, 0x00	; 0
    49f6:	2c 2f       	mov	r18, r28
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	fa 01       	movw	r30, r20
    49fc:	ee 0f       	add	r30, r30
    49fe:	ff 1f       	adc	r31, r31
    4a00:	ee 0f       	add	r30, r30
    4a02:	ff 1f       	adc	r31, r31
    4a04:	e2 0f       	add	r30, r18
    4a06:	f3 1f       	adc	r31, r19
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	ee 0f       	add	r30, r30
    4a0e:	ff 1f       	adc	r31, r31
    4a10:	ed 51       	subi	r30, 0x1D	; 29
    4a12:	f8 4f       	sbci	r31, 0xF8	; 248
    4a14:	80 81       	ld	r24, Z
    4a16:	84 30       	cpi	r24, 0x04	; 4
    4a18:	38 f5       	brcc	.+78     	; 0x4a68 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    4a1a:	df 01       	movw	r26, r30
    4a1c:	61 81       	ldd	r22, Z+1	; 0x01
    4a1e:	70 2f       	mov	r23, r16
    4a20:	76 1b       	sub	r23, r22
    4a22:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    4a24:	0a f1       	brmi	.+66     	; 0x4a68 <midiNote_to_Manual+0x8c>
    4a26:	fd 01       	movw	r30, r26
    4a28:	e2 81       	ldd	r30, Z+2	; 0x02
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	a7 2f       	mov	r26, r23
    4a2e:	77 0f       	add	r23, r23
    4a30:	bb 0b       	sbc	r27, r27
    4a32:	ae 17       	cp	r26, r30
    4a34:	bf 07       	cpc	r27, r31
    4a36:	c4 f4       	brge	.+48     	; 0x4a68 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    4a38:	fa 01       	movw	r30, r20
    4a3a:	ee 0f       	add	r30, r30
    4a3c:	ff 1f       	adc	r31, r31
    4a3e:	ee 0f       	add	r30, r30
    4a40:	ff 1f       	adc	r31, r31
    4a42:	e2 0f       	add	r30, r18
    4a44:	f3 1f       	adc	r31, r19
    4a46:	ee 0f       	add	r30, r30
    4a48:	ff 1f       	adc	r31, r31
    4a4a:	ee 0f       	add	r30, r30
    4a4c:	ff 1f       	adc	r31, r31
    4a4e:	ed 51       	subi	r30, 0x1D	; 29
    4a50:	f8 4f       	sbci	r31, 0xF8	; 248
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    4a56:	11 30       	cpi	r17, 0x01	; 1
    4a58:	21 f4       	brne	.+8      	; 0x4a62 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    4a5a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastInNote = manNote; // for debugging/display status
    4a5e:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    4a62:	41 2f       	mov	r20, r17
    4a64:	eb de       	rcall	.-554    	; 0x483c <manual_NoteOnOff>
				found |= 0xFF;
    4a66:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    4a68:	cf 5f       	subi	r28, 0xFF	; 255
    4a6a:	c4 30       	cpi	r28, 0x04	; 4
    4a6c:	08 f4       	brcc	.+2      	; 0x4a70 <midiNote_to_Manual+0x94>
    4a6e:	c1 cf       	rjmp	.-126    	; 0x49f2 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    4a70:	11 30       	cpi	r17, 0x01	; 1
    4a72:	49 f4       	brne	.+18     	; 0x4a86 <midiNote_to_Manual+0xaa>
    4a74:	91 11       	cpse	r25, r1
    4a76:	07 c0       	rjmp	.+14     	; 0x4a86 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    4a78:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <midiLastInNote>
		midiLastInChannel = channel;
    4a7c:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    4a80:	8f ef       	ldi	r24, 0xFF	; 255
    4a82:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	}
}
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	08 95       	ret

00004a90 <midiIn_Process>:
}

// **************************************** P R O C E S S   M I D I    I N *********************************************

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    4a90:	88 23       	and	r24, r24
    4a92:	0c f0       	brlt	.+2      	; 0x4a96 <midiIn_Process+0x6>
    4a94:	49 c0       	rjmp	.+146    	; 0x4b28 <midiIn_Process+0x98>
		// command
		midiLastCommand = midiByte;
    4a96:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <midiLastCommand>
		midiDataByteCount = 0; // reset received data
    4a9a:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <midiDataByteCount>
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    4a9e:	90 e8       	ldi	r25, 0x80	; 128
    4aa0:	98 0f       	add	r25, r24
    4aa2:	90 34       	cpi	r25, 0x40	; 64
    4aa4:	20 f4       	brcc	.+8      	; 0x4aae <midiIn_Process+0x1e>
			midiDataByteExpected = 2;
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4aac:	08 95       	ret
		} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    4aae:	90 e2       	ldi	r25, 0x20	; 32
    4ab0:	98 0f       	add	r25, r24
    4ab2:	90 31       	cpi	r25, 0x10	; 16
    4ab4:	20 f4       	brcc	.+8      	; 0x4abe <midiIn_Process+0x2e>
			midiDataByteExpected = 2;
    4ab6:	82 e0       	ldi	r24, 0x02	; 2
    4ab8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4abc:	08 95       	ret
		} else if (midiByte == MIDI_SONGPOS) {
    4abe:	82 3f       	cpi	r24, 0xF2	; 242
    4ac0:	21 f4       	brne	.+8      	; 0x4aca <midiIn_Process+0x3a>
			midiDataByteExpected = 2;
    4ac2:	82 e0       	ldi	r24, 0x02	; 2
    4ac4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4ac8:	08 95       	ret
		} else if (midiByte == MIDI_SYSEX) {
    4aca:	80 3f       	cpi	r24, 0xF0	; 240
    4acc:	21 f4       	brne	.+8      	; 0x4ad6 <midiIn_Process+0x46>
			midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd
    4ace:	8f ef       	ldi	r24, 0xFF	; 255
    4ad0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4ad4:	08 95       	ret
		} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    4ad6:	90 e4       	ldi	r25, 0x40	; 64
    4ad8:	98 0f       	add	r25, r24
    4ada:	90 32       	cpi	r25, 0x20	; 32
    4adc:	20 f4       	brcc	.+8      	; 0x4ae6 <midiIn_Process+0x56>
			midiDataByteExpected = 1;
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4ae4:	08 95       	ret
		} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    4ae6:	81 3f       	cpi	r24, 0xF1	; 241
    4ae8:	11 f0       	breq	.+4      	; 0x4aee <midiIn_Process+0x5e>
    4aea:	83 3f       	cpi	r24, 0xF3	; 243
    4aec:	21 f4       	brne	.+8      	; 0x4af6 <midiIn_Process+0x66>
			midiDataByteExpected = 1;
    4aee:	81 e0       	ldi	r24, 0x01	; 1
    4af0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    4af4:	08 95       	ret
		} else {
			midiDataByteExpected = 0;
    4af6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <midiDataByteExpected>
			if (midiByte == MIDI_ACTIVESENSING) {
    4afa:	8e 3f       	cpi	r24, 0xFE	; 254
    4afc:	81 f4       	brne	.+32     	; 0x4b1e <midiIn_Process+0x8e>
				midiRxActivceSensing = 1; // start active sense
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    4b04:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4b06:	f8 94       	cli
    4b08:	06 c0       	rjmp	.+12     	; 0x4b16 <midiIn_Process+0x86>
    4b0a:	ed e2       	ldi	r30, 0x2D	; 45
    4b0c:	f2 e0       	ldi	r31, 0x02	; 2
    4b0e:	89 e1       	ldi	r24, 0x19	; 25
    4b10:	86 83       	std	Z+6, r24	; 0x06
    4b12:	17 82       	std	Z+7, r1	; 0x07
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	81 11       	cpse	r24, r1
    4b18:	f8 cf       	rjmp	.-16     	; 0x4b0a <midiIn_Process+0x7a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4b1a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    4b1c:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    4b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <midiIn_Process+0x94>
    4b22:	43 c0       	rjmp	.+134    	; 0x4baa <midiIn_Process+0x11a>
				midiAllReset();
    4b24:	cf cc       	rjmp	.-1634   	; 0x44c4 <midiAllReset>
    4b26:	08 95       	ret
			}
			// TODO process these 1 byte commands here if interesting
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    4b28:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <midiDataByteCount>
    4b2c:	e2 30       	cpi	r30, 0x02	; 2
    4b2e:	40 f4       	brcc	.+16     	; 0x4b40 <midiIn_Process+0xb0>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    4b30:	91 e0       	ldi	r25, 0x01	; 1
    4b32:	9e 0f       	add	r25, r30
    4b34:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <midiDataByteCount>
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	e9 5e       	subi	r30, 0xE9	; 233
    4b3c:	f4 4f       	sbci	r31, 0xF4	; 244
    4b3e:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    4b40:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiDataByteExpected>
    4b44:	8f 3f       	cpi	r24, 0xFF	; 255
    4b46:	89 f1       	breq	.+98     	; 0x4baa <midiIn_Process+0x11a>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    4b48:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <midiDataByteCount>
    4b4c:	98 17       	cp	r25, r24
    4b4e:	68 f1       	brcs	.+90     	; 0x4baa <midiIn_Process+0x11a>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    4b50:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <midiLastCommand>
    4b54:	90 3f       	cpi	r25, 0xF0	; 240
    4b56:	38 f5       	brcc	.+78     	; 0x4ba6 <midiIn_Process+0x116>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    4b58:	89 2f       	mov	r24, r25
    4b5a:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    4b5c:	90 7f       	andi	r25, 0xF0	; 240
    4b5e:	90 39       	cpi	r25, 0x90	; 144
    4b60:	71 f0       	breq	.+28     	; 0x4b7e <midiIn_Process+0xee>
    4b62:	18 f4       	brcc	.+6      	; 0x4b6a <midiIn_Process+0xda>
    4b64:	90 38       	cpi	r25, 0x80	; 128
    4b66:	31 f0       	breq	.+12     	; 0x4b74 <midiIn_Process+0xe4>
    4b68:	1e c0       	rjmp	.+60     	; 0x4ba6 <midiIn_Process+0x116>
    4b6a:	90 3b       	cpi	r25, 0xB0	; 176
    4b6c:	99 f0       	breq	.+38     	; 0x4b94 <midiIn_Process+0x104>
    4b6e:	90 3c       	cpi	r25, 0xC0	; 192
    4b70:	b9 f0       	breq	.+46     	; 0x4ba0 <midiIn_Process+0x110>
    4b72:	19 c0       	rjmp	.+50     	; 0x4ba6 <midiIn_Process+0x116>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	60 91 17 0b 	lds	r22, 0x0B17	; 0x800b17 <midiDataByte>
    4b7a:	30 df       	rcall	.-416    	; 0x49dc <midiNote_to_Manual>
						break;
    4b7c:	14 c0       	rjmp	.+40     	; 0x4ba6 <midiIn_Process+0x116>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    4b7e:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <midiDataByte+0x1>
    4b82:	91 11       	cpse	r25, r1
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <midiIn_Process+0xfa>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <midiIn_Process+0xfc>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    4b8a:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    4b8c:	60 91 17 0b 	lds	r22, 0x0B17	; 0x800b17 <midiDataByte>
    4b90:	25 df       	rcall	.-438    	; 0x49dc <midiNote_to_Manual>
						break;
    4b92:	09 c0       	rjmp	.+18     	; 0x4ba6 <midiIn_Process+0x116>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    4b94:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <midiDataByte>
    4b98:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    4b9a:	29 f4       	brne	.+10     	; 0x4ba6 <midiIn_Process+0x116>
    4b9c:	89 de       	rcall	.-750    	; 0x48b0 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						program_toRegister(midiDataByte[0]);
    4b9e:	03 c0       	rjmp	.+6      	; 0x4ba6 <midiIn_Process+0x116>
    4ba0:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <midiDataByte>
    4ba4:	d2 dc       	rcall	.-1628   	; 0x454a <program_toRegister>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    4ba6:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <midiDataByteCount>
    4baa:	08 95       	ret

00004bac <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   M I D I   O U T *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    4bac:	cf 92       	push	r12
    4bae:	df 92       	push	r13
    4bb0:	ef 92       	push	r14
    4bb2:	ff 92       	push	r15
    4bb4:	0f 93       	push	r16
    4bb6:	1f 93       	push	r17
    4bb8:	cf 93       	push	r28
    4bba:	df 93       	push	r29
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H;
    4bbc:	09 2f       	mov	r16, r25
    4bbe:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H;
    4bc0:	9f 71       	andi	r25, 0x1F	; 31
    4bc2:	e9 2e       	mov	r14, r25
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
    4bc4:	d8 2f       	mov	r29, r24
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    4bc6:	00 32       	cpi	r16, 0x20	; 32
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <midiKeyPress_Process+0x20>
    4bca:	65 c0       	rjmp	.+202    	; 0x4c96 <midiKeyPress_Process+0xea>
    4bcc:	00 23       	and	r16, r16
    4bce:	09 f4       	brne	.+2      	; 0x4bd2 <midiKeyPress_Process+0x26>
    4bd0:	64 c0       	rjmp	.+200    	; 0x4c9a <midiKeyPress_Process+0xee>
    4bd2:	67 c0       	rjmp	.+206    	; 0x4ca2 <midiKeyPress_Process+0xf6>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules
			if ((moduleBits & 0x01) != 0) {
    4bd4:	d0 ff       	sbrs	r29, 0
    4bd6:	5c c0       	rjmp	.+184    	; 0x4c90 <midiKeyPress_Process+0xe4>
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
    4bd8:	20 e2       	ldi	r18, 0x20	; 32
    4bda:	c2 9f       	mul	r28, r18
    4bdc:	c0 01       	movw	r24, r0
    4bde:	11 24       	eor	r1, r1
    4be0:	8e 29       	or	r24, r14
    4be2:	03 de       	rcall	.-1018   	; 0x47ea <moduleBit_to_manualNote>
    4be4:	d8 2e       	mov	r13, r24
    4be6:	f9 2e       	mov	r15, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    4be8:	18 2f       	mov	r17, r24
    4bea:	8f 3f       	cpi	r24, 0xFF	; 255
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <midiKeyPress_Process+0x44>
    4bee:	50 c0       	rjmp	.+160    	; 0x4c90 <midiKeyPress_Process+0xe4>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    4bf0:	69 2f       	mov	r22, r25
    4bf2:	3c dd       	rcall	.-1416   	; 0x466c <Manual_to_MidiNote>
    4bf4:	c9 2e       	mov	r12, r25
					if (chanNote.channel != MIDI_CHANNEL_NONE){
    4bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf8:	89 f0       	breq	.+34     	; 0x4c1c <midiKeyPress_Process+0x70>
						// note on/off can be sent
						serial1MIDISend((command == MESSAGE_PIPE_ON_HI ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    4bfa:	00 32       	cpi	r16, 0x20	; 32
    4bfc:	11 f4       	brne	.+4      	; 0x4c02 <midiKeyPress_Process+0x56>
    4bfe:	90 e9       	ldi	r25, 0x90	; 144
    4c00:	01 c0       	rjmp	.+2      	; 0x4c04 <midiKeyPress_Process+0x58>
    4c02:	90 e8       	ldi	r25, 0x80	; 128
    4c04:	89 2b       	or	r24, r25
						serial1MIDISend(chanNote.note);
    4c06:	a9 d0       	rcall	.+338    	; 0x4d5a <serial1MIDISend>
    4c08:	8c 2d       	mov	r24, r12
						serial1MIDISend(MIDI_DEFAULT_VELOCITY);
    4c0a:	a7 d0       	rcall	.+334    	; 0x4d5a <serial1MIDISend>
    4c0c:	80 e4       	ldi	r24, 0x40	; 64
    4c0e:	a5 d0       	rcall	.+330    	; 0x4d5a <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    4c10:	00 32       	cpi	r16, 0x20	; 32
    4c12:	21 f4       	brne	.+8      	; 0x4c1c <midiKeyPress_Process+0x70>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    4c14:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    4c18:	f0 92 04 02 	sts	0x0204, r15	; 0x800204 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    4c1c:	41 e0       	ldi	r20, 0x01	; 1
    4c1e:	00 32       	cpi	r16, 0x20	; 32
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <midiKeyPress_Process+0x78>
    4c22:	40 e0       	ldi	r20, 0x00	; 0
    4c24:	d4 2e       	mov	r13, r20
					if (manualNote.manual == MANUAL_III){
    4c26:	11 11       	cpse	r17, r1
    4c28:	18 c0       	rjmp	.+48     	; 0x4c5a <midiKeyPress_Process+0xae>
						if (midiCoupler_2from3 == TRUE){
    4c2a:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <midiCoupler_2from3>
    4c2e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    4c30:	19 f4       	brne	.+6      	; 0x4c38 <midiKeyPress_Process+0x8c>
    4c32:	6f 2d       	mov	r22, r15
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	02 de       	rcall	.-1020   	; 0x483c <manual_NoteOnOff>
						}
						if (midiCoupler_1from3 == TRUE){
    4c38:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <midiCoupler_1from3>
    4c3c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    4c3e:	21 f4       	brne	.+8      	; 0x4c48 <midiKeyPress_Process+0x9c>
    4c40:	4d 2d       	mov	r20, r13
    4c42:	6f 2d       	mov	r22, r15
    4c44:	82 e0       	ldi	r24, 0x02	; 2
    4c46:	fa dd       	rcall	.-1036   	; 0x483c <manual_NoteOnOff>
						}
						if (midiCoupler_Pfrom3 == TRUE){
    4c48:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <midiCoupler_Pfrom3>
    4c4c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    4c4e:	01 f5       	brne	.+64     	; 0x4c90 <midiKeyPress_Process+0xe4>
    4c50:	4d 2d       	mov	r20, r13
    4c52:	6f 2d       	mov	r22, r15
    4c54:	83 e0       	ldi	r24, 0x03	; 3
    4c56:	f2 dd       	rcall	.-1052   	; 0x483c <manual_NoteOnOff>
    4c58:	1b c0       	rjmp	.+54     	; 0x4c90 <midiKeyPress_Process+0xe4>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    4c5a:	11 30       	cpi	r17, 0x01	; 1
						if (midiCoupler_1from2 == TRUE){
    4c5c:	81 f4       	brne	.+32     	; 0x4c7e <midiKeyPress_Process+0xd2>
    4c5e:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <midiCoupler_1from2>
    4c62:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    4c64:	19 f4       	brne	.+6      	; 0x4c6c <midiKeyPress_Process+0xc0>
    4c66:	6f 2d       	mov	r22, r15
    4c68:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midiCoupler_Pfrom2 == TRUE){
    4c6a:	e8 dd       	rcall	.-1072   	; 0x483c <manual_NoteOnOff>
    4c6c:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <midiCoupler_Pfrom2>
    4c70:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    4c72:	71 f4       	brne	.+28     	; 0x4c90 <midiKeyPress_Process+0xe4>
    4c74:	4d 2d       	mov	r20, r13
    4c76:	6f 2d       	mov	r22, r15
    4c78:	83 e0       	ldi	r24, 0x03	; 3
    4c7a:	e0 dd       	rcall	.-1088   	; 0x483c <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    4c7c:	09 c0       	rjmp	.+18     	; 0x4c90 <midiKeyPress_Process+0xe4>
    4c7e:	12 30       	cpi	r17, 0x02	; 2
						if (midiCoupler_Pfrom1 == TRUE){
    4c80:	39 f4       	brne	.+14     	; 0x4c90 <midiKeyPress_Process+0xe4>
    4c82:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <midiCoupler_Pfrom1>
    4c86:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    4c88:	19 f4       	brne	.+6      	; 0x4c90 <midiKeyPress_Process+0xe4>
    4c8a:	6f 2d       	mov	r22, r15
    4c8c:	83 e0       	ldi	r24, 0x03	; 3
    4c8e:	d6 dd       	rcall	.-1108   	; 0x483c <manual_NoteOnOff>
						}
					}
				} // if
			}
			moduleBits >>= 1; // next module
    4c90:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    4c92:	cf 5f       	subi	r28, 0xFF	; 255
    4c94:	03 c0       	rjmp	.+6      	; 0x4c9c <midiKeyPress_Process+0xf0>
    4c96:	c0 e0       	ldi	r28, 0x00	; 0
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <midiKeyPress_Process+0xf0>
    4c9a:	c0 e0       	ldi	r28, 0x00	; 0
    4c9c:	c8 30       	cpi	r28, 0x08	; 8
    4c9e:	08 f4       	brcc	.+2      	; 0x4ca2 <midiKeyPress_Process+0xf6>
    4ca0:	99 cf       	rjmp	.-206    	; 0x4bd4 <midiKeyPress_Process+0x28>
				} // if
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	ff 90       	pop	r15
    4cac:	ef 90       	pop	r14
    4cae:	df 90       	pop	r13
    4cb0:	cf 90       	pop	r12
    4cb2:	08 95       	ret

00004cb4 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    4cb4:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    4cb6:	c0 e0       	ldi	r28, 0x00	; 0
    4cb8:	0e c0       	rjmp	.+28     	; 0x4cd6 <midiSendAllNotesOff+0x22>
		uint8_t chan = midiOutMap[i].channel;
    4cba:	ec 2f       	mov	r30, r28
    4cbc:	f0 e0       	ldi	r31, 0x00	; 0
    4cbe:	ed 51       	subi	r30, 0x1D	; 29
    4cc0:	f7 4f       	sbci	r31, 0xF7	; 247
    4cc2:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    4cc4:	80 31       	cpi	r24, 0x10	; 16
    4cc6:	30 f4       	brcc	.+12     	; 0x4cd4 <midiSendAllNotesOff+0x20>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    4cc8:	80 6b       	ori	r24, 0xB0	; 176
    4cca:	47 d0       	rcall	.+142    	; 0x4d5a <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    4ccc:	8b e7       	ldi	r24, 0x7B	; 123
    4cce:	45 d0       	rcall	.+138    	; 0x4d5a <serial1MIDISend>
			serial1MIDISend(0);
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	43 d0       	rcall	.+134    	; 0x4d5a <serial1MIDISend>
    4cd4:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    4cd6:	c4 30       	cpi	r28, 0x04	; 4
    4cd8:	80 f3       	brcs	.-32     	; 0x4cba <midiSendAllNotesOff+0x6>
    4cda:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    4cdc:	08 95       	ret

00004cde <midi_SendActiveSense>:
    4cde:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    4ce0:	3c c0       	rjmp	.+120    	; 0x4d5a <serial1MIDISend>
    4ce2:	08 95       	ret

00004ce4 <midi_CheckTxActiveSense>:
		}
	}
}

void midi_CheckTxActiveSense(){
	if (midi_TxActivceSense) {
    4ce4:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <midi_TxActivceSense>
    4ce8:	88 23       	and	r24, r24
    4cea:	b1 f0       	breq	.+44     	; 0x4d18 <midi_CheckTxActiveSense+0x34>
		if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    4cec:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0x10>
    4cf0:	88 23       	and	r24, r24
    4cf2:	21 f0       	breq	.+8      	; 0x4cfc <midi_CheckTxActiveSense+0x18>
    4cf4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0x10>
    4cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    4cfa:	71 f4       	brne	.+28     	; 0x4d18 <midi_CheckTxActiveSense+0x34>
			// timer ended or not yet running
			TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    4cfc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4cfe:	f8 94       	cli
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	06 c0       	rjmp	.+12     	; 0x4d10 <midi_CheckTxActiveSense+0x2c>
    4d04:	ed e2       	ldi	r30, 0x2D	; 45
    4d06:	f2 e0       	ldi	r31, 0x02	; 2
    4d08:	8a e0       	ldi	r24, 0x0A	; 10
    4d0a:	80 8b       	std	Z+16, r24	; 0x10
    4d0c:	11 8a       	std	Z+17, r1	; 0x11
    4d0e:	80 e0       	ldi	r24, 0x00	; 0
    4d10:	81 11       	cpse	r24, r1
    4d12:	f8 cf       	rjmp	.-16     	; 0x4d04 <midi_CheckTxActiveSense+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d14:	9f bf       	out	0x3f, r25	; 63
			midi_SendActiveSense();
    4d16:	e3 cf       	rjmp	.-58     	; 0x4cde <midi_SendActiveSense>
    4d18:	08 95       	ret

00004d1a <init_Serial1MIDI>:
	} else {
		result = serUsbRxBuffer[index++];
		serusbRxOutIndex = index & SER_USB_RX_BUFFER_MASK;
	}
	return result;
}
    4d1a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    4d1e:	8f e1       	ldi	r24, 0x1F	; 31
    4d20:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    4d24:	e9 ec       	ldi	r30, 0xC9	; 201
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	88 69       	ori	r24, 0x98	; 152
    4d2c:	80 83       	st	Z, r24
    4d2e:	ea ec       	ldi	r30, 0xCA	; 202
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	80 81       	ld	r24, Z
    4d34:	86 60       	ori	r24, 0x06	; 6
    4d36:	80 83       	st	Z, r24
    4d38:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <midiRxInIndex>
    4d3c:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <midiRxOutIndex>
    4d40:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <midiTxInIndex>
    4d44:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <midiTxOutIndex>
    4d48:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <midiRxOvfl>
    4d4c:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <midiTxOvfl>
    4d50:	10 92 a6 0b 	sts	0x0BA6, r1	; 0x800ba6 <midiRxOvflCount>
    4d54:	10 92 ab 0c 	sts	0x0CAB, r1	; 0x800cab <midiTxOvflCount>
    4d58:	08 95       	ret

00004d5a <serial1MIDISend>:
    4d5a:	e9 ec       	ldi	r30, 0xC9	; 201
    4d5c:	f0 e0       	ldi	r31, 0x00	; 0
    4d5e:	90 81       	ld	r25, Z
    4d60:	9f 7d       	andi	r25, 0xDF	; 223
    4d62:	90 83       	st	Z, r25
    4d64:	e0 91 1d 0b 	lds	r30, 0x0B1D	; 0x800b1d <midiTxInIndex>
    4d68:	f0 e0       	ldi	r31, 0x00	; 0
    4d6a:	ee 5b       	subi	r30, 0xBE	; 190
    4d6c:	f4 4f       	sbci	r31, 0xF4	; 244
    4d6e:	80 83       	st	Z, r24
    4d70:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <midiTxInIndex>
    4d74:	8f 5f       	subi	r24, 0xFF	; 255
    4d76:	8f 71       	andi	r24, 0x1F	; 31
    4d78:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <midiTxInIndex>
    4d7c:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <midiTxInIndex>
    4d80:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <midiTxOutIndex>
    4d84:	98 13       	cpse	r25, r24
    4d86:	0d c0       	rjmp	.+26     	; 0x4da2 <serial1MIDISend+0x48>
    4d88:	80 91 ab 0c 	lds	r24, 0x0CAB	; 0x800cab <midiTxOvflCount>
    4d8c:	88 23       	and	r24, r24
    4d8e:	31 f0       	breq	.+12     	; 0x4d9c <serial1MIDISend+0x42>
    4d90:	8f 3f       	cpi	r24, 0xFF	; 255
    4d92:	39 f0       	breq	.+14     	; 0x4da2 <serial1MIDISend+0x48>
    4d94:	8f 5f       	subi	r24, 0xFF	; 255
    4d96:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <midiTxOvflCount>
    4d9a:	03 c0       	rjmp	.+6      	; 0x4da2 <serial1MIDISend+0x48>
    4d9c:	81 e0       	ldi	r24, 0x01	; 1
    4d9e:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <midiTxOvflCount>
    4da2:	e9 ec       	ldi	r30, 0xC9	; 201
    4da4:	f0 e0       	ldi	r31, 0x00	; 0
    4da6:	80 81       	ld	r24, Z
    4da8:	80 62       	ori	r24, 0x20	; 32
    4daa:	80 83       	st	Z, r24
    4dac:	08 95       	ret

00004dae <serial1MIDIReadRx>:
    4dae:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <midiRxInIndex>
    4db2:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <midiRxOutIndex>
    4db6:	98 17       	cp	r25, r24
    4db8:	69 f0       	breq	.+26     	; 0x4dd4 <serial1MIDIReadRx+0x26>
    4dba:	e0 91 aa 0c 	lds	r30, 0x0CAA	; 0x800caa <midiRxOutIndex>
    4dbe:	f0 e0       	ldi	r31, 0x00	; 0
    4dc0:	ee 5d       	subi	r30, 0xDE	; 222
    4dc2:	f4 4f       	sbci	r31, 0xF4	; 244
    4dc4:	80 81       	ld	r24, Z
    4dc6:	90 91 aa 0c 	lds	r25, 0x0CAA	; 0x800caa <midiRxOutIndex>
    4dca:	9f 5f       	subi	r25, 0xFF	; 255
    4dcc:	9f 71       	andi	r25, 0x1F	; 31
    4dce:	90 93 aa 0c 	sts	0x0CAA, r25	; 0x800caa <midiRxOutIndex>
    4dd2:	08 95       	ret
    4dd4:	8d ef       	ldi	r24, 0xFD	; 253
    4dd6:	08 95       	ret

00004dd8 <__vector_36>:
    4dd8:	1f 92       	push	r1
    4dda:	0f 92       	push	r0
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	0f 92       	push	r0
    4de0:	11 24       	eor	r1, r1
    4de2:	0b b6       	in	r0, 0x3b	; 59
    4de4:	0f 92       	push	r0
    4de6:	8f 93       	push	r24
    4de8:	9f 93       	push	r25
    4dea:	ef 93       	push	r30
    4dec:	ff 93       	push	r31
    4dee:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4df2:	e0 91 62 0b 	lds	r30, 0x0B62	; 0x800b62 <midiRxInIndex>
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	ee 5d       	subi	r30, 0xDE	; 222
    4dfa:	f4 4f       	sbci	r31, 0xF4	; 244
    4dfc:	80 83       	st	Z, r24
    4dfe:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <midiRxInIndex>
    4e02:	8f 5f       	subi	r24, 0xFF	; 255
    4e04:	8f 71       	andi	r24, 0x1F	; 31
    4e06:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <midiRxInIndex>
    4e0a:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <midiRxInIndex>
    4e0e:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <midiRxOutIndex>
    4e12:	98 13       	cpse	r25, r24
    4e14:	0d c0       	rjmp	.+26     	; 0x4e30 <__vector_36+0x58>
    4e16:	80 91 a6 0b 	lds	r24, 0x0BA6	; 0x800ba6 <midiRxOvflCount>
    4e1a:	88 23       	and	r24, r24
    4e1c:	31 f0       	breq	.+12     	; 0x4e2a <__vector_36+0x52>
    4e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    4e20:	39 f0       	breq	.+14     	; 0x4e30 <__vector_36+0x58>
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	80 93 a6 0b 	sts	0x0BA6, r24	; 0x800ba6 <midiRxOvflCount>
    4e28:	03 c0       	rjmp	.+6      	; 0x4e30 <__vector_36+0x58>
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	80 93 a6 0b 	sts	0x0BA6, r24	; 0x800ba6 <midiRxOvflCount>
    4e30:	80 91 ac 0c 	lds	r24, 0x0CAC	; 0x800cac <midiRxBytesCount>
    4e34:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <midiRxBytesCount+0x1>
    4e38:	01 96       	adiw	r24, 0x01	; 1
    4e3a:	90 93 ad 0c 	sts	0x0CAD, r25	; 0x800cad <midiRxBytesCount+0x1>
    4e3e:	80 93 ac 0c 	sts	0x0CAC, r24	; 0x800cac <midiRxBytesCount>
    4e42:	ff 91       	pop	r31
    4e44:	ef 91       	pop	r30
    4e46:	9f 91       	pop	r25
    4e48:	8f 91       	pop	r24
    4e4a:	0f 90       	pop	r0
    4e4c:	0b be       	out	0x3b, r0	; 59
    4e4e:	0f 90       	pop	r0
    4e50:	0f be       	out	0x3f, r0	; 63
    4e52:	0f 90       	pop	r0
    4e54:	1f 90       	pop	r1
    4e56:	18 95       	reti

00004e58 <__vector_37>:
    4e58:	1f 92       	push	r1
    4e5a:	0f 92       	push	r0
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	0f 92       	push	r0
    4e60:	11 24       	eor	r1, r1
    4e62:	0b b6       	in	r0, 0x3b	; 59
    4e64:	0f 92       	push	r0
    4e66:	8f 93       	push	r24
    4e68:	9f 93       	push	r25
    4e6a:	ef 93       	push	r30
    4e6c:	ff 93       	push	r31
    4e6e:	90 91 1f 0b 	lds	r25, 0x0B1F	; 0x800b1f <midiTxOutIndex>
    4e72:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <midiTxInIndex>
    4e76:	98 17       	cp	r25, r24
    4e78:	c1 f0       	breq	.+48     	; 0x4eaa <__vector_37+0x52>
    4e7a:	e0 91 1f 0b 	lds	r30, 0x0B1F	; 0x800b1f <midiTxOutIndex>
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	ee 5b       	subi	r30, 0xBE	; 190
    4e82:	f4 4f       	sbci	r31, 0xF4	; 244
    4e84:	80 81       	ld	r24, Z
    4e86:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4e8a:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <midiTxOutIndex>
    4e8e:	8f 5f       	subi	r24, 0xFF	; 255
    4e90:	8f 71       	andi	r24, 0x1F	; 31
    4e92:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <midiTxOutIndex>
    4e96:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <midiTxBytesCount>
    4e9a:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <midiTxBytesCount+0x1>
    4e9e:	01 96       	adiw	r24, 0x01	; 1
    4ea0:	90 93 a8 0b 	sts	0x0BA8, r25	; 0x800ba8 <midiTxBytesCount+0x1>
    4ea4:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <midiTxBytesCount>
    4ea8:	05 c0       	rjmp	.+10     	; 0x4eb4 <__vector_37+0x5c>
    4eaa:	e9 ec       	ldi	r30, 0xC9	; 201
    4eac:	f0 e0       	ldi	r31, 0x00	; 0
    4eae:	80 81       	ld	r24, Z
    4eb0:	8f 7d       	andi	r24, 0xDF	; 223
    4eb2:	80 83       	st	Z, r24
    4eb4:	ff 91       	pop	r31
    4eb6:	ef 91       	pop	r30
    4eb8:	9f 91       	pop	r25
    4eba:	8f 91       	pop	r24
    4ebc:	0f 90       	pop	r0
    4ebe:	0b be       	out	0x3b, r0	; 59
    4ec0:	0f 90       	pop	r0
    4ec2:	0f be       	out	0x3f, r0	; 63
    4ec4:	0f 90       	pop	r0
    4ec6:	1f 90       	pop	r1
    4ec8:	18 95       	reti

00004eca <serial0SER_USBSend>:
    4eca:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <serusbTxInIndex>
    4ece:	e1 ec       	ldi	r30, 0xC1	; 193
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	20 81       	ld	r18, Z
    4ed4:	2f 7d       	andi	r18, 0xDF	; 223
    4ed6:	20 83       	st	Z, r18
    4ed8:	e9 2f       	mov	r30, r25
    4eda:	f0 e0       	ldi	r31, 0x00	; 0
    4edc:	e7 55       	subi	r30, 0x57	; 87
    4ede:	f4 4f       	sbci	r31, 0xF4	; 244
    4ee0:	80 83       	st	Z, r24
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	89 0f       	add	r24, r25
    4ee6:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <serusbTxOutIndex>
    4eea:	89 13       	cpse	r24, r25
    4eec:	0c c0       	rjmp	.+24     	; 0x4f06 <serial0SER_USBSend+0x3c>
    4eee:	e1 ec       	ldi	r30, 0xC1	; 193
    4ef0:	f0 e0       	ldi	r31, 0x00	; 0
    4ef2:	90 81       	ld	r25, Z
    4ef4:	90 62       	ori	r25, 0x20	; 32
    4ef6:	90 83       	st	Z, r25
    4ef8:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <serusbTxOutIndex>
    4efc:	89 17       	cp	r24, r25
    4efe:	e1 f3       	breq	.-8      	; 0x4ef8 <serial0SER_USBSend+0x2e>
    4f00:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <serusbTxInIndex>
    4f04:	08 95       	ret
    4f06:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <serusbTxInIndex>
    4f0a:	e1 ec       	ldi	r30, 0xC1	; 193
    4f0c:	f0 e0       	ldi	r31, 0x00	; 0
    4f0e:	80 81       	ld	r24, Z
    4f10:	80 62       	ori	r24, 0x20	; 32
    4f12:	80 83       	st	Z, r24
    4f14:	08 95       	ret

00004f16 <serial0SER_USB_sendStringP>:
    4f16:	cf 93       	push	r28
    4f18:	df 93       	push	r29
    4f1a:	fc 01       	movw	r30, r24
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <serial0SER_USB_sendStringP+0xc>
    4f1e:	d5 df       	rcall	.-86     	; 0x4eca <serial0SER_USBSend>
    4f20:	fe 01       	movw	r30, r28
    4f22:	ef 01       	movw	r28, r30
    4f24:	21 96       	adiw	r28, 0x01	; 1
    4f26:	84 91       	lpm	r24, Z
    4f28:	88 23       	and	r24, r24
    4f2a:	21 f0       	breq	.+8      	; 0x4f34 <serial0SER_USB_sendStringP+0x1e>
    4f2c:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <serusbOvflFlag>
    4f30:	9f 3f       	cpi	r25, 0xFF	; 255
    4f32:	a9 f7       	brne	.-22     	; 0x4f1e <serial0SER_USB_sendStringP+0x8>
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	08 95       	ret

00004f3a <serial0SER_USB_sendCRLF>:
    4f3a:	86 eb       	ldi	r24, 0xB6	; 182
    4f3c:	9c e0       	ldi	r25, 0x0C	; 12
    4f3e:	eb cf       	rjmp	.-42     	; 0x4f16 <serial0SER_USB_sendStringP>
    4f40:	08 95       	ret

00004f42 <init_Serial0SerUSB>:
    4f42:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    4f46:	83 e3       	ldi	r24, 0x33	; 51
    4f48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    4f4c:	e1 ec       	ldi	r30, 0xC1	; 193
    4f4e:	f0 e0       	ldi	r31, 0x00	; 0
    4f50:	80 81       	ld	r24, Z
    4f52:	88 69       	ori	r24, 0x98	; 152
    4f54:	80 83       	st	Z, r24
    4f56:	e2 ec       	ldi	r30, 0xC2	; 194
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	80 81       	ld	r24, Z
    4f5c:	86 60       	ori	r24, 0x06	; 6
    4f5e:	80 83       	st	Z, r24
    4f60:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <midiRxInIndex>
    4f64:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <midiRxOutIndex>
    4f68:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <midiTxInIndex>
    4f6c:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <midiTxOutIndex>
    4f70:	10 92 a9 0c 	sts	0x0CA9, r1	; 0x800ca9 <serusbOvflFlag>
    4f74:	0e 94 ab 07 	call	0xf56	; 0xf56 <eeprom_ReadUSB>
    4f78:	8f 3f       	cpi	r24, 0xFF	; 255
    4f7a:	41 f4       	brne	.+16     	; 0x4f8c <init_Serial0SerUSB+0x4a>
    4f7c:	10 92 63 0b 	sts	0x0B63, r1	; 0x800b63 <serusb_Active>
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	64 e0       	ldi	r22, 0x04	; 4
    4f86:	81 e0       	ldi	r24, 0x01	; 1
    4f88:	0e 94 8b 10 	call	0x2116	; 0x2116 <log_putError>
    4f8c:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <serusb_Active>
    4f90:	8f 3f       	cpi	r24, 0xFF	; 255
    4f92:	41 f4       	brne	.+16     	; 0x4fa4 <init_Serial0SerUSB+0x62>
    4f94:	85 ee       	ldi	r24, 0xE5	; 229
    4f96:	92 e0       	ldi	r25, 0x02	; 2
    4f98:	be df       	rcall	.-132    	; 0x4f16 <serial0SER_USB_sendStringP>
    4f9a:	88 e7       	ldi	r24, 0x78	; 120
    4f9c:	9c e0       	ldi	r25, 0x0C	; 12
    4f9e:	bb df       	rcall	.-138    	; 0x4f16 <serial0SER_USB_sendStringP>
    4fa0:	cc df       	rcall	.-104    	; 0x4f3a <serial0SER_USB_sendCRLF>
    4fa2:	cb cf       	rjmp	.-106    	; 0x4f3a <serial0SER_USB_sendCRLF>
    4fa4:	08 95       	ret

00004fa6 <serial0SER_USB_sendString>:
    4fa6:	1f 93       	push	r17
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	ec 01       	movw	r28, r24
    4fae:	10 e5       	ldi	r17, 0x50	; 80
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <serial0SER_USB_sendString+0x12>
    4fb2:	21 96       	adiw	r28, 0x01	; 1
    4fb4:	8a df       	rcall	.-236    	; 0x4eca <serial0SER_USBSend>
    4fb6:	11 50       	subi	r17, 0x01	; 1
    4fb8:	88 81       	ld	r24, Y
    4fba:	88 23       	and	r24, r24
    4fbc:	31 f0       	breq	.+12     	; 0x4fca <serial0SER_USB_sendString+0x24>
    4fbe:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <serusbOvflFlag>
    4fc2:	9f 3f       	cpi	r25, 0xFF	; 255
    4fc4:	11 f0       	breq	.+4      	; 0x4fca <serial0SER_USB_sendString+0x24>
    4fc6:	11 11       	cpse	r17, r1
    4fc8:	f4 cf       	rjmp	.-24     	; 0x4fb2 <serial0SER_USB_sendString+0xc>
    4fca:	df 91       	pop	r29
    4fcc:	cf 91       	pop	r28
    4fce:	1f 91       	pop	r17
    4fd0:	08 95       	ret

00004fd2 <__vector_25>:

ISR(USART0_RX_vect) {
    4fd2:	1f 92       	push	r1
    4fd4:	0f 92       	push	r0
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	0f 92       	push	r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	0b b6       	in	r0, 0x3b	; 59
    4fde:	0f 92       	push	r0
    4fe0:	8f 93       	push	r24
    4fe2:	9f 93       	push	r25
    4fe4:	ef 93       	push	r30
    4fe6:	ff 93       	push	r31
	uint8_t received_byte;
	uint8_t index = serusbRxInIndex;
    4fe8:	e0 91 ae 0c 	lds	r30, 0x0CAE	; 0x800cae <serusbRxInIndex>
	received_byte = UDR0;
    4fec:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	serUsbRxBuffer[index++] =  received_byte; // Fetch the received byte value
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	8e 0f       	add	r24, r30
    4ff4:	f0 e0       	ldi	r31, 0x00	; 0
    4ff6:	ea 59       	subi	r30, 0x9A	; 154
    4ff8:	f4 4f       	sbci	r31, 0xF4	; 244
    4ffa:	90 83       	st	Z, r25
	index &= SER_USB_RX_BUFFER_MASK;
    4ffc:	8f 73       	andi	r24, 0x3F	; 63
	if (index == serusbRxOutIndex) {
    4ffe:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <serusbRxOutIndex>
    5002:	89 13       	cpse	r24, r25
    5004:	04 c0       	rjmp	.+8      	; 0x500e <__vector_25+0x3c>
		// overflow!
		serusbOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    5006:	8f ef       	ldi	r24, 0xFF	; 255
    5008:	80 93 a9 0c 	sts	0x0CA9, r24	; 0x800ca9 <serusbOvflFlag>
    500c:	02 c0       	rjmp	.+4      	; 0x5012 <__vector_25+0x40>
	} else {
		serusbRxInIndex = index;
    500e:	80 93 ae 0c 	sts	0x0CAE, r24	; 0x800cae <serusbRxInIndex>
	}
}
    5012:	ff 91       	pop	r31
    5014:	ef 91       	pop	r30
    5016:	9f 91       	pop	r25
    5018:	8f 91       	pop	r24
    501a:	0f 90       	pop	r0
    501c:	0b be       	out	0x3b, r0	; 59
    501e:	0f 90       	pop	r0
    5020:	0f be       	out	0x3f, r0	; 63
    5022:	0f 90       	pop	r0
    5024:	1f 90       	pop	r1
    5026:	18 95       	reti

00005028 <__vector_26>:

ISR(USART0_UDRE_vect) {
    5028:	1f 92       	push	r1
    502a:	0f 92       	push	r0
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	0f 92       	push	r0
    5030:	11 24       	eor	r1, r1
    5032:	0b b6       	in	r0, 0x3b	; 59
    5034:	0f 92       	push	r0
    5036:	2f 93       	push	r18
    5038:	8f 93       	push	r24
    503a:	9f 93       	push	r25
    503c:	ef 93       	push	r30
    503e:	ff 93       	push	r31
	uint8_t index = serusbTxOutIndex;
    5040:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <serusbTxOutIndex>
	if (SER_USB_TX_BUFFER_NONEMPTY){
    5044:	20 91 64 0b 	lds	r18, 0x0B64	; 0x800b64 <serusbTxInIndex>
    5048:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <serusbTxOutIndex>
    504c:	29 17       	cp	r18, r25
    504e:	59 f0       	breq	.+22     	; 0x5066 <__vector_26+0x3e>
		// es ist was zu senden da
		UDR0 = serUsbTxBuffer[index];
    5050:	e8 2f       	mov	r30, r24
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	e7 55       	subi	r30, 0x57	; 87
    5056:	f4 4f       	sbci	r31, 0xF4	; 244
    5058:	90 81       	ld	r25, Z
    505a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serusbTxOutIndex = (index+1) & SER_USB_TX_BUFFER_MASK;
    505e:	8f 5f       	subi	r24, 0xFF	; 255
    5060:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <serusbTxOutIndex>
    5064:	05 c0       	rjmp	.+10     	; 0x5070 <__vector_26+0x48>
	} else {
		// nothing to send
		UCSR0B &= ~(1 << UDRIE0);
    5066:	e1 ec       	ldi	r30, 0xC1	; 193
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	80 81       	ld	r24, Z
    506c:	8f 7d       	andi	r24, 0xDF	; 223
    506e:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
}
    5070:	ff 91       	pop	r31
    5072:	ef 91       	pop	r30
    5074:	9f 91       	pop	r25
    5076:	8f 91       	pop	r24
    5078:	2f 91       	pop	r18
    507a:	0f 90       	pop	r0
    507c:	0b be       	out	0x3b, r0	; 59
    507e:	0f 90       	pop	r0
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	0f 90       	pop	r0
    5084:	1f 90       	pop	r1
    5086:	18 95       	reti

00005088 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    5088:	8a 30       	cpi	r24, 0x0A	; 10
    508a:	10 f0       	brcs	.+4      	; 0x5090 <nibbleToChr+0x8>
    508c:	89 5c       	subi	r24, 0xC9	; 201
    508e:	08 95       	ret
    5090:	80 5d       	subi	r24, 0xD0	; 208
    5092:	08 95       	ret

00005094 <lcd_setCG>:
    5094:	ef 92       	push	r14
    5096:	ff 92       	push	r15
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	eb 01       	movw	r28, r22
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	88 0f       	add	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	88 0f       	add	r24, r24
    50ac:	99 1f       	adc	r25, r25
    50ae:	80 64       	ori	r24, 0x40	; 64
    50b0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <lcd_write_command>
    50b4:	10 e0       	ldi	r17, 0x00	; 0
    50b6:	0a c0       	rjmp	.+20     	; 0x50cc <lcd_setCG+0x38>
    50b8:	7e 01       	movw	r14, r28
    50ba:	8f ef       	ldi	r24, 0xFF	; 255
    50bc:	e8 1a       	sub	r14, r24
    50be:	f8 0a       	sbc	r15, r24
    50c0:	fe 01       	movw	r30, r28
    50c2:	84 91       	lpm	r24, Z
    50c4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <lcd_write_character>
    50c8:	1f 5f       	subi	r17, 0xFF	; 255
    50ca:	e7 01       	movw	r28, r14
    50cc:	18 30       	cpi	r17, 0x08	; 8
    50ce:	a0 f3       	brcs	.-24     	; 0x50b8 <lcd_setCG+0x24>
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	ff 90       	pop	r15
    50d8:	ef 90       	pop	r14
    50da:	08 95       	ret

000050dc <lcd_initCG>:
    50dc:	6e ea       	ldi	r22, 0xAE	; 174
    50de:	7c e0       	ldi	r23, 0x0C	; 12
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	d8 df       	rcall	.-80     	; 0x5094 <lcd_setCG>
    50e4:	66 ea       	ldi	r22, 0xA6	; 166
    50e6:	7c e0       	ldi	r23, 0x0C	; 12
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	d4 df       	rcall	.-88     	; 0x5094 <lcd_setCG>
    50ec:	6e e9       	ldi	r22, 0x9E	; 158
    50ee:	7c e0       	ldi	r23, 0x0C	; 12
    50f0:	82 e0       	ldi	r24, 0x02	; 2
    50f2:	d0 cf       	rjmp	.-96     	; 0x5094 <lcd_setCG>
    50f4:	08 95       	ret

000050f6 <lcd_hexout>:
    50f6:	cf 93       	push	r28
    50f8:	c8 2f       	mov	r28, r24
    50fa:	82 95       	swap	r24
    50fc:	8f 70       	andi	r24, 0x0F	; 15
    50fe:	8a 30       	cpi	r24, 0x0A	; 10
    5100:	10 f0       	brcs	.+4      	; 0x5106 <lcd_hexout+0x10>
    5102:	89 5c       	subi	r24, 0xC9	; 201
    5104:	01 c0       	rjmp	.+2      	; 0x5108 <lcd_hexout+0x12>
    5106:	80 5d       	subi	r24, 0xD0	; 208
    5108:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    510c:	cf 70       	andi	r28, 0x0F	; 15
    510e:	ca 30       	cpi	r28, 0x0A	; 10
    5110:	18 f0       	brcs	.+6      	; 0x5118 <lcd_hexout+0x22>
    5112:	87 e3       	ldi	r24, 0x37	; 55
    5114:	8c 0f       	add	r24, r28
    5116:	02 c0       	rjmp	.+4      	; 0x511c <lcd_hexout+0x26>
    5118:	80 e3       	ldi	r24, 0x30	; 48
    511a:	8c 0f       	add	r24, r28
    511c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5120:	cf 91       	pop	r28
    5122:	08 95       	ret

00005124 <lcd_longout>:
    5124:	cf 93       	push	r28
    5126:	df 93       	push	r29
    5128:	d3 e0       	ldi	r29, 0x03	; 3
    512a:	1c c0       	rjmp	.+56     	; 0x5164 <lcd_longout+0x40>
    512c:	ed 2f       	mov	r30, r29
    512e:	0d 2e       	mov	r0, r29
    5130:	00 0c       	add	r0, r0
    5132:	ff 0b       	sbc	r31, r31
    5134:	ef 54       	subi	r30, 0x4F	; 79
    5136:	f3 4f       	sbci	r31, 0xF3	; 243
    5138:	c0 81       	ld	r28, Z
    513a:	8c 2f       	mov	r24, r28
    513c:	82 95       	swap	r24
    513e:	8f 70       	andi	r24, 0x0F	; 15
    5140:	8a 30       	cpi	r24, 0x0A	; 10
    5142:	10 f0       	brcs	.+4      	; 0x5148 <lcd_longout+0x24>
    5144:	89 5c       	subi	r24, 0xC9	; 201
    5146:	01 c0       	rjmp	.+2      	; 0x514a <lcd_longout+0x26>
    5148:	80 5d       	subi	r24, 0xD0	; 208
    514a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    514e:	cf 70       	andi	r28, 0x0F	; 15
    5150:	ca 30       	cpi	r28, 0x0A	; 10
    5152:	18 f0       	brcs	.+6      	; 0x515a <lcd_longout+0x36>
    5154:	87 e3       	ldi	r24, 0x37	; 55
    5156:	8c 0f       	add	r24, r28
    5158:	02 c0       	rjmp	.+4      	; 0x515e <lcd_longout+0x3a>
    515a:	80 e3       	ldi	r24, 0x30	; 48
    515c:	8c 0f       	add	r24, r28
    515e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5162:	d1 50       	subi	r29, 0x01	; 1
    5164:	dd 23       	and	r29, r29
    5166:	14 f7       	brge	.-60     	; 0x512c <lcd_longout+0x8>
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <lcd_dec2out>:
    516e:	cf 93       	push	r28
    5170:	c8 2f       	mov	r28, r24
    5172:	84 36       	cpi	r24, 0x64	; 100
    5174:	50 f0       	brcs	.+20     	; 0x518a <lcd_dec2out+0x1c>
    5176:	8d e2       	ldi	r24, 0x2D	; 45
    5178:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    517c:	8d e2       	ldi	r24, 0x2D	; 45
    517e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5182:	0d c0       	rjmp	.+26     	; 0x519e <lcd_dec2out+0x30>
    5184:	ca 50       	subi	r28, 0x0A	; 10
    5186:	8f 5f       	subi	r24, 0xFF	; 255
    5188:	01 c0       	rjmp	.+2      	; 0x518c <lcd_dec2out+0x1e>
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	ca 30       	cpi	r28, 0x0A	; 10
    518e:	d0 f7       	brcc	.-12     	; 0x5184 <lcd_dec2out+0x16>
    5190:	80 5d       	subi	r24, 0xD0	; 208
    5192:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5196:	80 e3       	ldi	r24, 0x30	; 48
    5198:	8c 0f       	add	r24, r28
    519a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    519e:	cf 91       	pop	r28
    51a0:	08 95       	ret

000051a2 <putChar_Dec2>:
    51a2:	84 36       	cpi	r24, 0x64	; 100
    51a4:	58 f0       	brcs	.+22     	; 0x51bc <putChar_Dec2+0x1a>
    51a6:	8d e2       	ldi	r24, 0x2D	; 45
    51a8:	db 01       	movw	r26, r22
    51aa:	8c 93       	st	X, r24
    51ac:	fb 01       	movw	r30, r22
    51ae:	32 96       	adiw	r30, 0x02	; 2
    51b0:	11 96       	adiw	r26, 0x01	; 1
    51b2:	8c 93       	st	X, r24
    51b4:	0f c0       	rjmp	.+30     	; 0x51d4 <putChar_Dec2+0x32>
    51b6:	8a 50       	subi	r24, 0x0A	; 10
    51b8:	9f 5f       	subi	r25, 0xFF	; 255
    51ba:	01 c0       	rjmp	.+2      	; 0x51be <putChar_Dec2+0x1c>
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	8a 30       	cpi	r24, 0x0A	; 10
    51c0:	d0 f7       	brcc	.-12     	; 0x51b6 <putChar_Dec2+0x14>
    51c2:	90 5d       	subi	r25, 0xD0	; 208
    51c4:	fb 01       	movw	r30, r22
    51c6:	90 83       	st	Z, r25
    51c8:	32 96       	adiw	r30, 0x02	; 2
    51ca:	90 e3       	ldi	r25, 0x30	; 48
    51cc:	98 0f       	add	r25, r24
    51ce:	db 01       	movw	r26, r22
    51d0:	11 96       	adiw	r26, 0x01	; 1
    51d2:	9c 93       	st	X, r25
    51d4:	10 82       	st	Z, r1
    51d6:	cf 01       	movw	r24, r30
    51d8:	08 95       	ret

000051da <putChar_hex>:
    51da:	fb 01       	movw	r30, r22
    51dc:	98 2f       	mov	r25, r24
    51de:	92 95       	swap	r25
    51e0:	9f 70       	andi	r25, 0x0F	; 15
    51e2:	9a 30       	cpi	r25, 0x0A	; 10
    51e4:	10 f0       	brcs	.+4      	; 0x51ea <putChar_hex+0x10>
    51e6:	99 5c       	subi	r25, 0xC9	; 201
    51e8:	01 c0       	rjmp	.+2      	; 0x51ec <putChar_hex+0x12>
    51ea:	90 5d       	subi	r25, 0xD0	; 208
    51ec:	90 83       	st	Z, r25
    51ee:	98 2f       	mov	r25, r24
    51f0:	9f 70       	andi	r25, 0x0F	; 15
    51f2:	9f 01       	movw	r18, r30
    51f4:	2e 5f       	subi	r18, 0xFE	; 254
    51f6:	3f 4f       	sbci	r19, 0xFF	; 255
    51f8:	9a 30       	cpi	r25, 0x0A	; 10
    51fa:	10 f0       	brcs	.+4      	; 0x5200 <putChar_hex+0x26>
    51fc:	99 5c       	subi	r25, 0xC9	; 201
    51fe:	01 c0       	rjmp	.+2      	; 0x5202 <putChar_hex+0x28>
    5200:	90 5d       	subi	r25, 0xD0	; 208
    5202:	91 83       	std	Z+1, r25	; 0x01
    5204:	12 82       	std	Z+2, r1	; 0x02
    5206:	c9 01       	movw	r24, r18
    5208:	08 95       	ret

0000520a <putChar_long>:
    520a:	ac 01       	movw	r20, r24
    520c:	fb 01       	movw	r30, r22
    520e:	34 96       	adiw	r30, 0x04	; 4
    5210:	db 01       	movw	r26, r22
    5212:	14 96       	adiw	r26, 0x04	; 4
    5214:	1c 92       	st	X, r1
    5216:	20 e0       	ldi	r18, 0x00	; 0
    5218:	10 c0       	rjmp	.+32     	; 0x523a <putChar_long+0x30>
    521a:	94 2f       	mov	r25, r20
    521c:	9f 70       	andi	r25, 0x0F	; 15
    521e:	31 97       	sbiw	r30, 0x01	; 1
    5220:	9a 30       	cpi	r25, 0x0A	; 10
    5222:	10 f0       	brcs	.+4      	; 0x5228 <putChar_long+0x1e>
    5224:	99 5c       	subi	r25, 0xC9	; 201
    5226:	01 c0       	rjmp	.+2      	; 0x522a <putChar_long+0x20>
    5228:	90 5d       	subi	r25, 0xD0	; 208
    522a:	90 83       	st	Z, r25
    522c:	52 95       	swap	r21
    522e:	42 95       	swap	r20
    5230:	4f 70       	andi	r20, 0x0F	; 15
    5232:	45 27       	eor	r20, r21
    5234:	5f 70       	andi	r21, 0x0F	; 15
    5236:	45 27       	eor	r20, r21
    5238:	2f 5f       	subi	r18, 0xFF	; 255
    523a:	24 30       	cpi	r18, 0x04	; 4
    523c:	70 f3       	brcs	.-36     	; 0x521a <putChar_long+0x10>
    523e:	cf 01       	movw	r24, r30
    5240:	04 96       	adiw	r24, 0x04	; 4
    5242:	08 95       	ret

00005244 <putChar_Note>:
    5244:	88 23       	and	r24, r24
    5246:	8c f4       	brge	.+34     	; 0x526a <putChar_Note+0x26>
    5248:	8d e2       	ldi	r24, 0x2D	; 45
    524a:	db 01       	movw	r26, r22
    524c:	8c 93       	st	X, r24
    524e:	9e e6       	ldi	r25, 0x6E	; 110
    5250:	11 96       	adiw	r26, 0x01	; 1
    5252:	9c 93       	st	X, r25
    5254:	11 97       	sbiw	r26, 0x01	; 1
    5256:	12 96       	adiw	r26, 0x02	; 2
    5258:	8c 93       	st	X, r24
    525a:	12 97       	sbiw	r26, 0x02	; 2
    525c:	14 96       	adiw	r26, 0x04	; 4
    525e:	fb 01       	movw	r30, r22
    5260:	13 82       	std	Z+3, r1	; 0x03
    5262:	49 c0       	rjmp	.+146    	; 0x52f6 <putChar_Note+0xb2>
    5264:	8c 50       	subi	r24, 0x0C	; 12
    5266:	9f 5f       	subi	r25, 0xFF	; 255
    5268:	01 c0       	rjmp	.+2      	; 0x526c <putChar_Note+0x28>
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	8c 30       	cpi	r24, 0x0C	; 12
    526e:	d0 f7       	brcc	.-12     	; 0x5264 <putChar_Note+0x20>
    5270:	8b 30       	cpi	r24, 0x0B	; 11
    5272:	39 f4       	brne	.+14     	; 0x5282 <putChar_Note+0x3e>
    5274:	fb 01       	movw	r30, r22
    5276:	31 96       	adiw	r30, 0x01	; 1
    5278:	88 e4       	ldi	r24, 0x48	; 72
    527a:	db 01       	movw	r26, r22
    527c:	8c 93       	st	X, r24
    527e:	8f e5       	ldi	r24, 0x5F	; 95
    5280:	27 c0       	rjmp	.+78     	; 0x52d0 <putChar_Note+0x8c>
    5282:	85 30       	cpi	r24, 0x05	; 5
    5284:	58 f4       	brcc	.+22     	; 0x529c <putChar_Note+0x58>
    5286:	fb 01       	movw	r30, r22
    5288:	31 96       	adiw	r30, 0x01	; 1
    528a:	28 2f       	mov	r18, r24
    528c:	26 95       	lsr	r18
    528e:	2d 5b       	subi	r18, 0xBD	; 189
    5290:	db 01       	movw	r26, r22
    5292:	2c 93       	st	X, r18
    5294:	80 fd       	sbrc	r24, 0
    5296:	19 c0       	rjmp	.+50     	; 0x52ca <putChar_Note+0x86>
    5298:	8f e5       	ldi	r24, 0x5F	; 95
    529a:	1a c0       	rjmp	.+52     	; 0x52d0 <putChar_Note+0x8c>
    529c:	89 30       	cpi	r24, 0x09	; 9
    529e:	30 f0       	brcs	.+12     	; 0x52ac <putChar_Note+0x68>
    52a0:	fb 01       	movw	r30, r22
    52a2:	31 96       	adiw	r30, 0x01	; 1
    52a4:	21 e4       	ldi	r18, 0x41	; 65
    52a6:	db 01       	movw	r26, r22
    52a8:	2c 93       	st	X, r18
    52aa:	0b c0       	rjmp	.+22     	; 0x52c2 <putChar_Note+0x7e>
    52ac:	fb 01       	movw	r30, r22
    52ae:	31 96       	adiw	r30, 0x01	; 1
    52b0:	28 2f       	mov	r18, r24
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	25 50       	subi	r18, 0x05	; 5
    52b6:	31 09       	sbc	r19, r1
    52b8:	35 95       	asr	r19
    52ba:	27 95       	ror	r18
    52bc:	2a 5b       	subi	r18, 0xBA	; 186
    52be:	db 01       	movw	r26, r22
    52c0:	2c 93       	st	X, r18
    52c2:	80 ff       	sbrs	r24, 0
    52c4:	04 c0       	rjmp	.+8      	; 0x52ce <putChar_Note+0x8a>
    52c6:	8f e5       	ldi	r24, 0x5F	; 95
    52c8:	03 c0       	rjmp	.+6      	; 0x52d0 <putChar_Note+0x8c>
    52ca:	83 e2       	ldi	r24, 0x23	; 35
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <putChar_Note+0x8c>
    52ce:	83 e2       	ldi	r24, 0x23	; 35
    52d0:	80 83       	st	Z, r24
    52d2:	91 11       	cpse	r25, r1
    52d4:	05 c0       	rjmp	.+10     	; 0x52e0 <putChar_Note+0x9c>
    52d6:	df 01       	movw	r26, r30
    52d8:	12 96       	adiw	r26, 0x02	; 2
    52da:	8d e6       	ldi	r24, 0x6D	; 109
    52dc:	81 83       	std	Z+1, r24	; 0x01
    52de:	0b c0       	rjmp	.+22     	; 0x52f6 <putChar_Note+0xb2>
    52e0:	9c 30       	cpi	r25, 0x0C	; 12
    52e2:	28 f4       	brcc	.+10     	; 0x52ee <putChar_Note+0xaa>
    52e4:	df 01       	movw	r26, r30
    52e6:	12 96       	adiw	r26, 0x02	; 2
    52e8:	91 5d       	subi	r25, 0xD1	; 209
    52ea:	91 83       	std	Z+1, r25	; 0x01
    52ec:	04 c0       	rjmp	.+8      	; 0x52f6 <putChar_Note+0xb2>
    52ee:	df 01       	movw	r26, r30
    52f0:	12 96       	adiw	r26, 0x02	; 2
    52f2:	8d e2       	ldi	r24, 0x2D	; 45
    52f4:	81 83       	std	Z+1, r24	; 0x01
    52f6:	1c 92       	st	X, r1
    52f8:	cd 01       	movw	r24, r26
    52fa:	08 95       	ret

000052fc <putChar_Manual>:
    52fc:	83 30       	cpi	r24, 0x03	; 3
    52fe:	38 f4       	brcc	.+14     	; 0x530e <putChar_Manual+0x12>
    5300:	fb 01       	movw	r30, r22
    5302:	31 96       	adiw	r30, 0x01	; 1
    5304:	93 e3       	ldi	r25, 0x33	; 51
    5306:	98 1b       	sub	r25, r24
    5308:	db 01       	movw	r26, r22
    530a:	9c 93       	st	X, r25
    530c:	0d c0       	rjmp	.+26     	; 0x5328 <putChar_Manual+0x2c>
    530e:	83 30       	cpi	r24, 0x03	; 3
    5310:	31 f4       	brne	.+12     	; 0x531e <putChar_Manual+0x22>
    5312:	fb 01       	movw	r30, r22
    5314:	31 96       	adiw	r30, 0x01	; 1
    5316:	80 e5       	ldi	r24, 0x50	; 80
    5318:	db 01       	movw	r26, r22
    531a:	8c 93       	st	X, r24
    531c:	05 c0       	rjmp	.+10     	; 0x5328 <putChar_Manual+0x2c>
    531e:	fb 01       	movw	r30, r22
    5320:	31 96       	adiw	r30, 0x01	; 1
    5322:	8d e2       	ldi	r24, 0x2D	; 45
    5324:	db 01       	movw	r26, r22
    5326:	8c 93       	st	X, r24
    5328:	10 82       	st	Z, r1
    532a:	cf 01       	movw	r24, r30
    532c:	08 95       	ret

0000532e <lcd_wordout>:
    532e:	cf 93       	push	r28
    5330:	c8 2f       	mov	r28, r24
    5332:	89 2f       	mov	r24, r25
    5334:	e0 de       	rcall	.-576    	; 0x50f6 <lcd_hexout>
    5336:	8c 2f       	mov	r24, r28
    5338:	de de       	rcall	.-580    	; 0x50f6 <lcd_hexout>
    533a:	cf 91       	pop	r28
    533c:	08 95       	ret

0000533e <lcd_noteOut>:
    533e:	cf 93       	push	r28
    5340:	df 93       	push	r29
    5342:	88 23       	and	r24, r24
    5344:	dc f1       	brlt	.+118    	; 0x53bc <lcd_noteOut+0x7e>
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	02 c0       	rjmp	.+4      	; 0x534e <lcd_noteOut+0x10>
    534a:	9f 5f       	subi	r25, 0xFF	; 255
    534c:	8c 50       	subi	r24, 0x0C	; 12
    534e:	8c 30       	cpi	r24, 0x0C	; 12
    5350:	e0 f7       	brcc	.-8      	; 0x534a <lcd_noteOut+0xc>
    5352:	48 2f       	mov	r20, r24
    5354:	50 e0       	ldi	r21, 0x00	; 0
    5356:	4c 30       	cpi	r20, 0x0C	; 12
    5358:	51 05       	cpc	r21, r1
    535a:	30 f4       	brcc	.+12     	; 0x5368 <lcd_noteOut+0x2a>
    535c:	fa 01       	movw	r30, r20
    535e:	88 27       	eor	r24, r24
    5360:	e6 56       	subi	r30, 0x66	; 102
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	8f 4f       	sbci	r24, 0xFF	; 255
    5366:	3c c1       	rjmp	.+632    	; 0x55e0 <__tablejump2__>
    5368:	d3 e2       	ldi	r29, 0x23	; 35
    536a:	23 c0       	rjmp	.+70     	; 0x53b2 <lcd_noteOut+0x74>
    536c:	d3 e2       	ldi	r29, 0x23	; 35
    536e:	24 e4       	ldi	r18, 0x44	; 68
    5370:	20 c0       	rjmp	.+64     	; 0x53b2 <lcd_noteOut+0x74>
    5372:	d3 e2       	ldi	r29, 0x23	; 35
    5374:	26 e4       	ldi	r18, 0x46	; 70
    5376:	1d c0       	rjmp	.+58     	; 0x53b2 <lcd_noteOut+0x74>
    5378:	d3 e2       	ldi	r29, 0x23	; 35
    537a:	27 e4       	ldi	r18, 0x47	; 71
    537c:	1a c0       	rjmp	.+52     	; 0x53b2 <lcd_noteOut+0x74>
    537e:	d3 e2       	ldi	r29, 0x23	; 35
    5380:	21 e4       	ldi	r18, 0x41	; 65
    5382:	17 c0       	rjmp	.+46     	; 0x53b2 <lcd_noteOut+0x74>
    5384:	d5 ea       	ldi	r29, 0xA5	; 165
    5386:	23 e4       	ldi	r18, 0x43	; 67
    5388:	14 c0       	rjmp	.+40     	; 0x53b2 <lcd_noteOut+0x74>
    538a:	d5 ea       	ldi	r29, 0xA5	; 165
    538c:	24 e4       	ldi	r18, 0x44	; 68
    538e:	11 c0       	rjmp	.+34     	; 0x53b2 <lcd_noteOut+0x74>
    5390:	d5 ea       	ldi	r29, 0xA5	; 165
    5392:	25 e4       	ldi	r18, 0x45	; 69
    5394:	0e c0       	rjmp	.+28     	; 0x53b2 <lcd_noteOut+0x74>
    5396:	d5 ea       	ldi	r29, 0xA5	; 165
    5398:	26 e4       	ldi	r18, 0x46	; 70
    539a:	0b c0       	rjmp	.+22     	; 0x53b2 <lcd_noteOut+0x74>
    539c:	d5 ea       	ldi	r29, 0xA5	; 165
    539e:	27 e4       	ldi	r18, 0x47	; 71
    53a0:	08 c0       	rjmp	.+16     	; 0x53b2 <lcd_noteOut+0x74>
    53a2:	d5 ea       	ldi	r29, 0xA5	; 165
    53a4:	21 e4       	ldi	r18, 0x41	; 65
    53a6:	05 c0       	rjmp	.+10     	; 0x53b2 <lcd_noteOut+0x74>
    53a8:	d5 ea       	ldi	r29, 0xA5	; 165
    53aa:	28 e4       	ldi	r18, 0x48	; 72
    53ac:	02 c0       	rjmp	.+4      	; 0x53b2 <lcd_noteOut+0x74>
    53ae:	d3 e2       	ldi	r29, 0x23	; 35
    53b0:	23 e4       	ldi	r18, 0x43	; 67
    53b2:	99 23       	and	r25, r25
    53b4:	39 f0       	breq	.+14     	; 0x53c4 <lcd_noteOut+0x86>
    53b6:	cf e2       	ldi	r28, 0x2F	; 47
    53b8:	c9 0f       	add	r28, r25
    53ba:	05 c0       	rjmp	.+10     	; 0x53c6 <lcd_noteOut+0x88>
    53bc:	cd e2       	ldi	r28, 0x2D	; 45
    53be:	dd e2       	ldi	r29, 0x2D	; 45
    53c0:	2d e2       	ldi	r18, 0x2D	; 45
    53c2:	01 c0       	rjmp	.+2      	; 0x53c6 <lcd_noteOut+0x88>
    53c4:	cd e2       	ldi	r28, 0x2D	; 45
    53c6:	82 2f       	mov	r24, r18
    53c8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    53cc:	8d 2f       	mov	r24, r29
    53ce:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    53d2:	8c 2f       	mov	r24, r28
    53d4:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    53d8:	83 e0       	ldi	r24, 0x03	; 3
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	08 95       	ret

000053e0 <lcd_ChannelOut>:
    53e0:	cf 93       	push	r28
    53e2:	c8 2f       	mov	r28, r24
    53e4:	cf 70       	andi	r28, 0x0F	; 15
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	8c 0f       	add	r24, r28
    53ea:	8a 30       	cpi	r24, 0x0A	; 10
    53ec:	28 f0       	brcs	.+10     	; 0x53f8 <lcd_ChannelOut+0x18>
    53ee:	81 e3       	ldi	r24, 0x31	; 49
    53f0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    53f4:	87 ef       	ldi	r24, 0xF7	; 247
    53f6:	8c 0f       	add	r24, r28
    53f8:	80 5d       	subi	r24, 0xD0	; 208
    53fa:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    53fe:	cf 91       	pop	r28
    5400:	08 95       	ret

00005402 <lcd_ManualOutDec>:
    5402:	84 30       	cpi	r24, 0x04	; 4
    5404:	20 f0       	brcs	.+8      	; 0x540e <lcd_ManualOutDec+0xc>
    5406:	8d e2       	ldi	r24, 0x2D	; 45
    5408:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <lcd_putc>
    540c:	08 95       	ret
    540e:	83 30       	cpi	r24, 0x03	; 3
    5410:	21 f4       	brne	.+8      	; 0x541a <lcd_ManualOutDec+0x18>
    5412:	80 e5       	ldi	r24, 0x50	; 80
    5414:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <lcd_putc>
    5418:	08 95       	ret
    541a:	93 e3       	ldi	r25, 0x33	; 51
    541c:	98 1b       	sub	r25, r24
    541e:	89 2f       	mov	r24, r25
    5420:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <lcd_putc>
    5424:	08 95       	ret

00005426 <lcd_blank>:
    5426:	cf 93       	push	r28
    5428:	04 c0       	rjmp	.+8      	; 0x5432 <lcd_blank+0xc>
    542a:	80 e2       	ldi	r24, 0x20	; 32
    542c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5430:	8c 2f       	mov	r24, r28
    5432:	cf ef       	ldi	r28, 0xFF	; 255
    5434:	c8 0f       	add	r28, r24
    5436:	81 11       	cpse	r24, r1
    5438:	f8 cf       	rjmp	.-16     	; 0x542a <lcd_blank+0x4>
    543a:	cf 91       	pop	r28
    543c:	08 95       	ret

0000543e <lcd_clrEol>:
    543e:	cf 93       	push	r28
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	04 c0       	rjmp	.+8      	; 0x544c <lcd_clrEol+0xe>
    5444:	80 e2       	ldi	r24, 0x20	; 32
    5446:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    544a:	9c 2f       	mov	r25, r28
    544c:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <lcd_cursorPos>
    5450:	84 31       	cpi	r24, 0x14	; 20
    5452:	51 f0       	breq	.+20     	; 0x5468 <lcd_clrEol+0x2a>
    5454:	84 35       	cpi	r24, 0x54	; 84
    5456:	41 f0       	breq	.+16     	; 0x5468 <lcd_clrEol+0x2a>
    5458:	88 32       	cpi	r24, 0x28	; 40
    545a:	31 f0       	breq	.+12     	; 0x5468 <lcd_clrEol+0x2a>
    545c:	88 36       	cpi	r24, 0x68	; 104
    545e:	21 f0       	breq	.+8      	; 0x5468 <lcd_clrEol+0x2a>
    5460:	c1 e0       	ldi	r28, 0x01	; 1
    5462:	c9 0f       	add	r28, r25
    5464:	94 31       	cpi	r25, 0x14	; 20
    5466:	70 f3       	brcs	.-36     	; 0x5444 <lcd_clrEol+0x6>
    5468:	cf 91       	pop	r28
    546a:	08 95       	ret

0000546c <lcd_cursosblink>:
    546c:	8d e0       	ldi	r24, 0x0D	; 13
    546e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <lcd_write_command>
    5472:	8f ef       	ldi	r24, 0xFF	; 255
    5474:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <lcd_cursorIsOn>
    5478:	08 95       	ret

0000547a <lcd_cursoroff>:
    547a:	8c e0       	ldi	r24, 0x0C	; 12
    547c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <lcd_write_command>
    5480:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <lcd_cursorIsOn>
    5484:	08 95       	ret

00005486 <lcd_waitSymbolOn>:
    5486:	cf 93       	push	r28
    5488:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
    548c:	8c e0       	ldi	r24, 0x0C	; 12
    548e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    5492:	81 ea       	ldi	r24, 0xA1	; 161
    5494:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    5498:	8c 2f       	mov	r24, r28
    549a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    549e:	cf 91       	pop	r28
    54a0:	08 95       	ret

000054a2 <lcd_waitSymbolOff>:
    54a2:	cf 93       	push	r28
    54a4:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
    54a8:	8c e0       	ldi	r24, 0x0C	; 12
    54aa:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    54ae:	80 e2       	ldi	r24, 0x20	; 32
    54b0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>
    54b4:	8c 2f       	mov	r24, r28
    54b6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
    54ba:	cf 91       	pop	r28
    54bc:	08 95       	ret

000054be <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    54be:	84 30       	cpi	r24, 0x04	; 4
    54c0:	28 f0       	brcs	.+10     	; 0x54cc <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	0d c0       	rjmp	.+26     	; 0x54e0 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    54c6:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    54c8:	fa 01       	movw	r30, r20
    54ca:	02 c0       	rjmp	.+4      	; 0x54d0 <keylabel_set+0x12>
    54cc:	fb 01       	movw	r30, r22
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	af 01       	movw	r20, r30
    54d2:	4f 5f       	subi	r20, 0xFF	; 255
    54d4:	5f 4f       	sbci	r21, 0xFF	; 255
    54d6:	94 91       	lpm	r25, Z
    54d8:	99 23       	and	r25, r25
    54da:	11 f0       	breq	.+4      	; 0x54e0 <keylabel_set+0x22>
    54dc:	25 30       	cpi	r18, 0x05	; 5
    54de:	98 f3       	brcs	.-26     	; 0x54c6 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	dc 01       	movw	r26, r24
    54e4:	aa 0f       	add	r26, r26
    54e6:	bb 1f       	adc	r27, r27
    54e8:	aa 0f       	add	r26, r26
    54ea:	bb 1f       	adc	r27, r27
    54ec:	8a 0f       	add	r24, r26
    54ee:	9b 1f       	adc	r25, r27
    54f0:	dc 01       	movw	r26, r24
    54f2:	a1 5f       	subi	r26, 0xF1	; 241
    54f4:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    54f6:	45 e0       	ldi	r20, 0x05	; 5
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	42 1b       	sub	r20, r18
    54fc:	51 09       	sbc	r21, r1
    54fe:	ca 01       	movw	r24, r20
    5500:	99 23       	and	r25, r25
    5502:	0c f4       	brge	.+2      	; 0x5506 <keylabel_set+0x48>
    5504:	01 96       	adiw	r24, 0x01	; 1
    5506:	95 95       	asr	r25
    5508:	87 95       	ror	r24
    550a:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    550c:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    550e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    5510:	0e c0       	rjmp	.+28     	; 0x552e <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    5512:	93 17       	cp	r25, r19
    5514:	10 f0       	brcs	.+4      	; 0x551a <keylabel_set+0x5c>
    5516:	98 17       	cp	r25, r24
    5518:	18 f0       	brcs	.+6      	; 0x5520 <keylabel_set+0x62>
			*charBufPtr = ' ';
    551a:	20 e2       	ldi	r18, 0x20	; 32
    551c:	2c 93       	st	X, r18
    551e:	05 c0       	rjmp	.+10     	; 0x552a <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    5520:	fb 01       	movw	r30, r22
    5522:	24 91       	lpm	r18, Z
    5524:	2c 93       	st	X, r18
    5526:	6f 5f       	subi	r22, 0xFF	; 255
    5528:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    552a:	11 96       	adiw	r26, 0x01	; 1
		i++;
    552c:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    552e:	95 30       	cpi	r25, 0x05	; 5
    5530:	80 f3       	brcs	.-32     	; 0x5512 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    5532:	08 95       	ret

00005534 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	fc 01       	movw	r30, r24
    5538:	ee 0f       	add	r30, r30
    553a:	ff 1f       	adc	r31, r31
    553c:	ee 0f       	add	r30, r30
    553e:	ff 1f       	adc	r31, r31
    5540:	8e 0f       	add	r24, r30
    5542:	9f 1f       	adc	r25, r31
    5544:	fc 01       	movw	r30, r24
    5546:	e1 5f       	subi	r30, 0xF1	; 241
    5548:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	04 c0       	rjmp	.+8      	; 0x5556 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    554e:	90 e2       	ldi	r25, 0x20	; 32
    5550:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5552:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    5554:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5556:	85 30       	cpi	r24, 0x05	; 5
    5558:	d0 f3       	brcs	.-12     	; 0x554e <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    555a:	08 95       	ret

0000555c <keylabel_toLCD>:

void keylabel_toLCD(){
    555c:	0f 93       	push	r16
    555e:	1f 93       	push	r17
    5560:	cf 93       	push	r28
    5562:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    5564:	d0 91 56 03 	lds	r29, 0x0356	; 0x800356 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    5568:	84 e5       	ldi	r24, 0x54	; 84
    556a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    556e:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    5570:	ef e0       	ldi	r30, 0x0F	; 15
    5572:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5574:	08 c0       	rjmp	.+16     	; 0x5586 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    5576:	8f 01       	movw	r16, r30
    5578:	0f 5f       	subi	r16, 0xFF	; 255
    557a:	1f 4f       	sbci	r17, 0xFF	; 255
    557c:	80 81       	ld	r24, Z
    557e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5582:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    5584:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5586:	c4 31       	cpi	r28, 0x14	; 20
    5588:	b0 f3       	brcs	.-20     	; 0x5576 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    558a:	8d 2f       	mov	r24, r29
    558c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <lcd_goto>
}
    5590:	df 91       	pop	r29
    5592:	cf 91       	pop	r28
    5594:	1f 91       	pop	r17
    5596:	0f 91       	pop	r16
    5598:	08 95       	ret

0000559a <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	fc 01       	movw	r30, r24
    559e:	ee 0f       	add	r30, r30
    55a0:	ff 1f       	adc	r31, r31
    55a2:	ee 0f       	add	r30, r30
    55a4:	ff 1f       	adc	r31, r31
    55a6:	8e 0f       	add	r24, r30
    55a8:	9f 1f       	adc	r25, r31
    55aa:	fc 01       	movw	r30, r24
    55ac:	e1 5f       	subi	r30, 0xF1	; 241
    55ae:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    55b0:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    55b2:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    55b4:	12 c0       	rjmp	.+36     	; 0x55da <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    55b6:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    55b8:	61 11       	cpse	r22, r1
    55ba:	06 c0       	rjmp	.+12     	; 0x55c8 <keylabel_statcheck+0x2e>
    55bc:	2a 30       	cpi	r18, 0x0A	; 10
    55be:	21 f4       	brne	.+8      	; 0x55c8 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    55c0:	80 e8       	ldi	r24, 0x80	; 128
    55c2:	80 83       	st	Z, r24
			result = 0xFF;
    55c4:	8f ef       	ldi	r24, 0xFF	; 255
    55c6:	07 c0       	rjmp	.+14     	; 0x55d6 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    55c8:	66 23       	and	r22, r22
    55ca:	29 f0       	breq	.+10     	; 0x55d6 <keylabel_statcheck+0x3c>
    55cc:	20 38       	cpi	r18, 0x80	; 128
    55ce:	19 f4       	brne	.+6      	; 0x55d6 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    55d0:	8a e0       	ldi	r24, 0x0A	; 10
    55d2:	80 83       	st	Z, r24
			result = 0xFF;
    55d4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    55d6:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    55d8:	9f 5f       	subi	r25, 0xFF	; 255
    55da:	95 30       	cpi	r25, 0x05	; 5
    55dc:	60 f3       	brcs	.-40     	; 0x55b6 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    55de:	08 95       	ret

000055e0 <__tablejump2__>:
    55e0:	ee 0f       	add	r30, r30
    55e2:	ff 1f       	adc	r31, r31
    55e4:	88 1f       	adc	r24, r24
    55e6:	8b bf       	out	0x3b, r24	; 59
    55e8:	07 90       	elpm	r0, Z+
    55ea:	f6 91       	elpm	r31, Z
    55ec:	e0 2d       	mov	r30, r0
    55ee:	19 94       	eijmp

000055f0 <eeprom_read_block>:
    55f0:	dc 01       	movw	r26, r24
    55f2:	cb 01       	movw	r24, r22

000055f4 <eeprom_read_blraw>:
    55f4:	fc 01       	movw	r30, r24
    55f6:	f9 99       	sbic	0x1f, 1	; 31
    55f8:	fe cf       	rjmp	.-4      	; 0x55f6 <eeprom_read_blraw+0x2>
    55fa:	06 c0       	rjmp	.+12     	; 0x5608 <eeprom_read_blraw+0x14>
    55fc:	f2 bd       	out	0x22, r31	; 34
    55fe:	e1 bd       	out	0x21, r30	; 33
    5600:	f8 9a       	sbi	0x1f, 0	; 31
    5602:	31 96       	adiw	r30, 0x01	; 1
    5604:	00 b4       	in	r0, 0x20	; 32
    5606:	0d 92       	st	X+, r0
    5608:	41 50       	subi	r20, 0x01	; 1
    560a:	50 40       	sbci	r21, 0x00	; 0
    560c:	b8 f7       	brcc	.-18     	; 0x55fc <eeprom_read_blraw+0x8>
    560e:	08 95       	ret

00005610 <eeprom_read_byte>:
    5610:	f9 99       	sbic	0x1f, 1	; 31
    5612:	fe cf       	rjmp	.-4      	; 0x5610 <eeprom_read_byte>
    5614:	92 bd       	out	0x22, r25	; 34
    5616:	81 bd       	out	0x21, r24	; 33
    5618:	f8 9a       	sbi	0x1f, 0	; 31
    561a:	99 27       	eor	r25, r25
    561c:	80 b5       	in	r24, 0x20	; 32
    561e:	08 95       	ret

00005620 <eeprom_read_word>:
    5620:	a8 e1       	ldi	r26, 0x18	; 24
    5622:	b0 e0       	ldi	r27, 0x00	; 0
    5624:	42 e0       	ldi	r20, 0x02	; 2
    5626:	50 e0       	ldi	r21, 0x00	; 0
    5628:	e5 cf       	rjmp	.-54     	; 0x55f4 <eeprom_read_blraw>

0000562a <eeprom_update_block>:
    562a:	dc 01       	movw	r26, r24
    562c:	a4 0f       	add	r26, r20
    562e:	b5 1f       	adc	r27, r21
    5630:	41 50       	subi	r20, 0x01	; 1
    5632:	50 40       	sbci	r21, 0x00	; 0
    5634:	40 f0       	brcs	.+16     	; 0x5646 <eeprom_update_block+0x1c>
    5636:	cb 01       	movw	r24, r22
    5638:	84 0f       	add	r24, r20
    563a:	95 1f       	adc	r25, r21
    563c:	2e 91       	ld	r18, -X
    563e:	05 d0       	rcall	.+10     	; 0x564a <eeprom_update_r18>
    5640:	41 50       	subi	r20, 0x01	; 1
    5642:	50 40       	sbci	r21, 0x00	; 0
    5644:	d8 f7       	brcc	.-10     	; 0x563c <eeprom_update_block+0x12>
    5646:	08 95       	ret

00005648 <eeprom_update_byte>:
    5648:	26 2f       	mov	r18, r22

0000564a <eeprom_update_r18>:
    564a:	f9 99       	sbic	0x1f, 1	; 31
    564c:	fe cf       	rjmp	.-4      	; 0x564a <eeprom_update_r18>
    564e:	92 bd       	out	0x22, r25	; 34
    5650:	81 bd       	out	0x21, r24	; 33
    5652:	f8 9a       	sbi	0x1f, 0	; 31
    5654:	01 97       	sbiw	r24, 0x01	; 1
    5656:	00 b4       	in	r0, 0x20	; 32
    5658:	02 16       	cp	r0, r18
    565a:	39 f0       	breq	.+14     	; 0x566a <eeprom_update_r18+0x20>
    565c:	1f ba       	out	0x1f, r1	; 31
    565e:	20 bd       	out	0x20, r18	; 32
    5660:	0f b6       	in	r0, 0x3f	; 63
    5662:	f8 94       	cli
    5664:	fa 9a       	sbi	0x1f, 2	; 31
    5666:	f9 9a       	sbi	0x1f, 1	; 31
    5668:	0f be       	out	0x3f, r0	; 63
    566a:	08 95       	ret

0000566c <eeprom_update_word>:
    566c:	01 96       	adiw	r24, 0x01	; 1
    566e:	27 2f       	mov	r18, r23
    5670:	ec df       	rcall	.-40     	; 0x564a <eeprom_update_r18>
    5672:	ea cf       	rjmp	.-44     	; 0x5648 <eeprom_update_byte>

00005674 <_exit>:
    5674:	f8 94       	cli

00005676 <__stop_program>:
    5676:	ff cf       	rjmp	.-2      	; 0x5676 <__stop_program>
